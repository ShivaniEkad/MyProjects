
/*! jQuery v2.2.4 | (c) jQuery Foundation | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=a.document,e=c.slice,f=c.concat,g=c.push,h=c.indexOf,i={},j=i.toString,k=i.hasOwnProperty,l={},m="2.2.4",n=function(a,b){return new n.fn.init(a,b)},o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,q=/-([\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return e.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:e.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a){return n.each(this,a)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(e.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor()},push:g,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(n.isPlainObject(d)||(e=n.isArray(d)))?(e?(e=!1,f=c&&n.isArray(c)?c:[]):f=c&&n.isPlainObject(c)?c:{},g[b]=n.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray,isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){var b=a&&a.toString();return!n.isArray(a)&&b-parseFloat(b)+1>=0},isPlainObject:function(a){var b;if("object"!==n.type(a)||a.nodeType||n.isWindow(a))return!1;if(a.constructor&&!k.call(a,"constructor")&&!k.call(a.constructor.prototype||{},"isPrototypeOf"))return!1;for(b in a);return void 0===b||k.call(a,b)},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?i[j.call(a)]||"object":typeof a},globalEval:function(a){var b,c=eval;a=n.trim(a),a&&(1===a.indexOf("use strict")?(b=d.createElement("script"),b.text=a,d.head.appendChild(b).parentNode.removeChild(b)):c(a))},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b){var c,d=0;if(s(a)){for(c=a.length;c>d;d++)if(b.call(a[d],d,a[d])===!1)break}else for(d in a)if(b.call(a[d],d,a[d])===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):g.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:h.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;c>d;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,e,g=0,h=[];if(s(a))for(d=a.length;d>g;g++)e=b(a[g],g,c),null!=e&&h.push(e);else for(g in a)e=b(a[g],g,c),null!=e&&h.push(e);return f.apply([],h)},guid:1,proxy:function(a,b){var c,d,f;return"string"==typeof b&&(c=a[b],b=a,a=c),n.isFunction(a)?(d=e.call(arguments,2),f=function(){return a.apply(b||this,d.concat(e.call(arguments)))},f.guid=a.guid=a.guid||n.guid++,f):void 0},now:Date.now,support:l}),"function"==typeof Symbol&&(n.fn[Symbol.iterator]=c[Symbol.iterator]),n.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(a,b){i["[object "+b+"]"]=b.toLowerCase()});function s(a){var b=!!a&&"length"in a&&a.length,c=n.type(a);return"function"===c||n.isWindow(a)?!1:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ga(),z=ga(),A=ga(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",N="\\["+L+"*("+M+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+M+"))|)"+L+"*\\]",O=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+N+")*)|.*)\\)|)",P=new RegExp(L+"+","g"),Q=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),R=new RegExp("^"+L+"*,"+L+"*"),S=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),T=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),U=new RegExp(O),V=new RegExp("^"+M+"$"),W={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M+"|[*])"),ATTR:new RegExp("^"+N),PSEUDO:new RegExp("^"+O),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},X=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,$=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,_=/[+~]/,aa=/'|\\/g,ba=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),ca=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},da=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(ea){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function fa(a,b,d,e){var f,h,j,k,l,o,r,s,w=b&&b.ownerDocument,x=b?b.nodeType:9;if(d=d||[],"string"!=typeof a||!a||1!==x&&9!==x&&11!==x)return d;if(!e&&((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,p)){if(11!==x&&(o=$.exec(a)))if(f=o[1]){if(9===x){if(!(j=b.getElementById(f)))return d;if(j.id===f)return d.push(j),d}else if(w&&(j=w.getElementById(f))&&t(b,j)&&j.id===f)return d.push(j),d}else{if(o[2])return H.apply(d,b.getElementsByTagName(a)),d;if((f=o[3])&&c.getElementsByClassName&&b.getElementsByClassName)return H.apply(d,b.getElementsByClassName(f)),d}if(c.qsa&&!A[a+" "]&&(!q||!q.test(a))){if(1!==x)w=b,s=a;else if("object"!==b.nodeName.toLowerCase()){(k=b.getAttribute("id"))?k=k.replace(aa,"\\$&"):b.setAttribute("id",k=u),r=g(a),h=r.length,l=V.test(k)?"#"+k:"[id='"+k+"']";while(h--)r[h]=l+" "+qa(r[h]);s=r.join(","),w=_.test(a)&&oa(b.parentNode)||b}if(s)try{return H.apply(d,w.querySelectorAll(s)),d}catch(y){}finally{k===u&&b.removeAttribute("id")}}}return i(a.replace(Q,"$1"),b,d,e)}function ga(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ha(a){return a[u]=!0,a}function ia(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ja(a,b){var c=a.split("|"),e=c.length;while(e--)d.attrHandle[c[e]]=b}function ka(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function la(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function na(a){return ha(function(b){return b=+b,ha(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function oa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=fa.support={},f=fa.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=fa.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=n.documentElement,p=!f(n),(e=n.defaultView)&&e.top!==e&&(e.addEventListener?e.addEventListener("unload",da,!1):e.attachEvent&&e.attachEvent("onunload",da)),c.attributes=ia(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ia(function(a){return a.appendChild(n.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=Z.test(n.getElementsByClassName),c.getById=ia(function(a){return o.appendChild(a).id=u,!n.getElementsByName||!n.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return"undefined"!=typeof b.getElementsByClassName&&p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=Z.test(n.querySelectorAll))&&(ia(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\r\\' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+L+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+L+"*(?:value|"+K+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ia(function(a){var b=n.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+L+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=Z.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ia(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",O)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=Z.test(o.compareDocumentPosition),t=b||Z.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===n||a.ownerDocument===v&&t(v,a)?-1:b===n||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,g=[a],h=[b];if(!e||!f)return a===n?-1:b===n?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return ka(a,b);c=a;while(c=c.parentNode)g.unshift(c);c=b;while(c=c.parentNode)h.unshift(c);while(g[d]===h[d])d++;return d?ka(g[d],h[d]):g[d]===v?-1:h[d]===v?1:0},n):n},fa.matches=function(a,b){return fa(a,null,null,b)},fa.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(T,"='$1']"),c.matchesSelector&&p&&!A[b+" "]&&(!r||!r.test(b))&&(!q||!q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return fa(b,n,null,[a]).length>0},fa.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},fa.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},fa.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},fa.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=fa.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=fa.selectors={cacheLength:50,createPseudo:ha,match:W,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ba,ca),a[3]=(a[3]||a[4]||a[5]||"").replace(ba,ca),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||fa.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&fa.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return W.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&U.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ba,ca).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+L+")"+a+"("+L+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=fa.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(P," ")+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h,t=!1;if(q){if(f){while(p){m=b;while(m=m[p])if(h?m.nodeName.toLowerCase()===r:1===m.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){m=q,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n&&j[2],m=n&&q.childNodes[n];while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if(1===m.nodeType&&++t&&m===b){k[a]=[w,n,t];break}}else if(s&&(m=b,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n),t===!1)while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if((h?m.nodeName.toLowerCase()===r:1===m.nodeType)&&++t&&(s&&(l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),k[a]=[w,t]),m===b))break;return t-=e,t===d||t%d===0&&t/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||fa.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ha(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ha(function(a){var b=[],c=[],d=h(a.replace(Q,"$1"));return d[u]?ha(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ha(function(a){return function(b){return fa(a,b).length>0}}),contains:ha(function(a){return a=a.replace(ba,ca),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ha(function(a){return V.test(a||"")||fa.error("unsupported lang: "+a),a=a.replace(ba,ca).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Y.test(a.nodeName)},input:function(a){return X.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:na(function(){return[0]}),last:na(function(a,b){return[b-1]}),eq:na(function(a,b,c){return[0>c?c+b:c]}),even:na(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:na(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:na(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:na(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=la(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=ma(b);function pa(){}pa.prototype=d.filters=d.pseudos,d.setFilters=new pa,g=fa.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){c&&!(e=R.exec(h))||(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=S.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(Q," ")}),h=h.slice(c.length));for(g in d.filter)!(e=W[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?fa.error(a):z(a,i).slice(0)};function qa(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function ra(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j,k=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(j=b[u]||(b[u]={}),i=j[b.uniqueID]||(j[b.uniqueID]={}),(h=i[d])&&h[0]===w&&h[1]===f)return k[2]=h[2];if(i[d]=k,k[2]=a(b,c,g))return!0}}}function sa(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ta(a,b,c){for(var d=0,e=b.length;e>d;d++)fa(a,b[d],c);return c}function ua(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(c&&!c(f,d,e)||(g.push(f),j&&b.push(h)));return g}function va(a,b,c,d,e,f){return d&&!d[u]&&(d=va(d)),e&&!e[u]&&(e=va(e,f)),ha(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ta(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:ua(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=ua(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=ua(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function wa(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=ra(function(a){return a===b},h,!0),l=ra(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[ra(sa(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return va(i>1&&sa(m),i>1&&qa(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(Q,"$1"),c,e>i&&wa(a.slice(i,e)),f>e&&wa(a=a.slice(e)),f>e&&qa(a))}m.push(c)}return sa(m)}function xa(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,o,q,r=0,s="0",t=f&&[],u=[],v=j,x=f||e&&d.find.TAG("*",k),y=w+=null==v?1:Math.random()||.1,z=x.length;for(k&&(j=g===n||g||k);s!==z&&null!=(l=x[s]);s++){if(e&&l){o=0,g||l.ownerDocument===n||(m(l),h=!p);while(q=a[o++])if(q(l,g||n,h)){i.push(l);break}k&&(w=y)}c&&((l=!q&&l)&&r--,f&&t.push(l))}if(r+=s,c&&s!==r){o=0;while(q=b[o++])q(t,u,g,h);if(f){if(r>0)while(s--)t[s]||u[s]||(u[s]=F.call(i));u=ua(u)}H.apply(i,u),k&&!f&&u.length>0&&r+b.length>1&&fa.uniqueSort(i)}return k&&(w=y,j=v),t};return c?ha(f):f}return h=fa.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=wa(b[c]),f[u]?d.push(f):e.push(f);f=A(a,xa(e,d)),f.selector=a}return f},i=fa.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(ba,ca),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=W.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(ba,ca),_.test(j[0].type)&&oa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&qa(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,!b||_.test(a)&&oa(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ia(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ia(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ja("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ia(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ja("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ia(function(a){return null==a.getAttribute("disabled")})||ja(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),fa}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.uniqueSort=n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},v=function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c},w=n.expr.match.needsContext,x=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,y=/^.[^:#\[\.,]*$/;function z(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(y.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return h.call(b,a)>-1!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=this.length,d=[],e=this;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;c>b;b++)if(n.contains(e[b],this))return!0}));for(b=0;c>b;b++)n.find(a,e[b],d);return d=this.pushStack(c>1?n.unique(d):d),d.selector=this.selector?this.selector+" "+a:a,d},filter:function(a){return this.pushStack(z(this,a||[],!1))},not:function(a){return this.pushStack(z(this,a||[],!0))},is:function(a){return!!z(this,"string"==typeof a&&w.test(a)?n(a):a||[],!1).length}});var A,B=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,C=n.fn.init=function(a,b,c){var e,f;if(!a)return this;if(c=c||A,"string"==typeof a){if(e="<"===a[0]&&">"===a[a.length-1]&&a.length>=3?[null,a,null]:B.exec(a),!e||!e[1]&&b)return!b||b.jquery?(b||c).find(a):this.constructor(b).find(a);if(e[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(e[1],b&&b.nodeType?b.ownerDocument||b:d,!0)),x.test(e[1])&&n.isPlainObject(b))for(e in b)n.isFunction(this[e])?this[e](b[e]):this.attr(e,b[e]);return this}return f=d.getElementById(e[2]),f&&f.parentNode&&(this.length=1,this[0]=f),this.context=d,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?void 0!==c.ready?c.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};C.prototype=n.fn,A=n(d);var D=/^(?:parents|prev(?:Until|All))/,E={children:!0,contents:!0,next:!0,prev:!0};n.fn.extend({has:function(a){var b=n(a,this),c=b.length;return this.filter(function(){for(var a=0;c>a;a++)if(n.contains(this,b[a]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=w.test(a)||"string"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.uniqueSort(f):f)},index:function(a){return a?"string"==typeof a?h.call(n(a),this[0]):h.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.uniqueSort(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function F(a,b){while((a=a[b])&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return u(a,"parentNode")},parentsUntil:function(a,b,c){return u(a,"parentNode",c)},next:function(a){return F(a,"nextSibling")},prev:function(a){return F(a,"previousSibling")},nextAll:function(a){return u(a,"nextSibling")},prevAll:function(a){return u(a,"previousSibling")},nextUntil:function(a,b,c){return u(a,"nextSibling",c)},prevUntil:function(a,b,c){return u(a,"previousSibling",c)},siblings:function(a){return v((a.parentNode||{}).firstChild,a)},children:function(a){return v(a.firstChild)},contents:function(a){return a.contentDocument||n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(E[a]||n.uniqueSort(e),D.test(a)&&e.reverse()),this.pushStack(e)}});var G=/\S+/g;function H(a){var b={};return n.each(a.match(G)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a="string"==typeof a?H(a):n.extend({},a);var b,c,d,e,f=[],g=[],h=-1,i=function(){for(e=a.once,d=b=!0;g.length;h=-1){c=g.shift();while(++h<f.length)f[h].apply(c[0],c[1])===!1&&a.stopOnFalse&&(h=f.length,c=!1)}a.memory||(c=!1),b=!1,e&&(f=c?[]:"")},j={add:function(){return f&&(c&&!b&&(h=f.length-1,g.push(c)),function d(b){n.each(b,function(b,c){n.isFunction(c)?a.unique&&j.has(c)||f.push(c):c&&c.length&&"string"!==n.type(c)&&d(c)})}(arguments),c&&!b&&i()),this},remove:function(){return n.each(arguments,function(a,b){var c;while((c=n.inArray(b,f,c))>-1)f.splice(c,1),h>=c&&h--}),this},has:function(a){return a?n.inArray(a,f)>-1:f.length>0},empty:function(){return f&&(f=[]),this},disable:function(){return e=g=[],f=c="",this},disabled:function(){return!f},lock:function(){return e=g=[],c||(f=c=""),this},locked:function(){return!!e},fireWith:function(a,c){return e||(c=c||[],c=[a,c.slice?c.slice():c],g.push(c),b||i()),this},fire:function(){return j.fireWith(this,arguments),this},fired:function(){return!!d}};return j},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().progress(c.notify).done(c.resolve).fail(c.reject):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=e.call(arguments),d=c.length,f=1!==d||a&&n.isFunction(a.promise)?d:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(d){b[a]=this,c[a]=arguments.length>1?e.call(arguments):d,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(d>1)for(i=new Array(d),j=new Array(d),k=new Array(d);d>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().progress(h(b,j,i)).done(h(b,k,c)).fail(g.reject):--f;return f||g.resolveWith(k,c),g.promise()}});var I;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(a===!0?--n.readyWait:n.isReady)||(n.isReady=!0,a!==!0&&--n.readyWait>0||(I.resolveWith(d,[n]),n.fn.triggerHandler&&(n(d).triggerHandler("ready"),n(d).off("ready"))))}});function J(){d.removeEventListener("DOMContentLoaded",J),a.removeEventListener("load",J),n.ready()}n.ready.promise=function(b){return I||(I=n.Deferred(),"complete"===d.readyState||"loading"!==d.readyState&&!d.documentElement.doScroll?a.setTimeout(n.ready):(d.addEventListener("DOMContentLoaded",J),a.addEventListener("load",J))),I.promise(b)},n.ready.promise();var K=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)K(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},L=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function M(){this.expando=n.expando+M.uid++}M.uid=1,M.prototype={register:function(a,b){var c=b||{};return a.nodeType?a[this.expando]=c:Object.defineProperty(a,this.expando,{value:c,writable:!0,configurable:!0}),a[this.expando]},cache:function(a){if(!L(a))return{};var b=a[this.expando];return b||(b={},L(a)&&(a.nodeType?a[this.expando]=b:Object.defineProperty(a,this.expando,{value:b,configurable:!0}))),b},set:function(a,b,c){var d,e=this.cache(a);if("string"==typeof b)e[b]=c;else for(d in b)e[d]=b[d];return e},get:function(a,b){return void 0===b?this.cache(a):a[this.expando]&&a[this.expando][b]},access:function(a,b,c){var d;return void 0===b||b&&"string"==typeof b&&void 0===c?(d=this.get(a,b),void 0!==d?d:this.get(a,n.camelCase(b))):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d,e,f=a[this.expando];if(void 0!==f){if(void 0===b)this.register(a);else{n.isArray(b)?d=b.concat(b.map(n.camelCase)):(e=n.camelCase(b),b in f?d=[b,e]:(d=e,d=d in f?[d]:d.match(G)||[])),c=d.length;while(c--)delete f[d[c]]}(void 0===b||n.isEmptyObject(f))&&(a.nodeType?a[this.expando]=void 0:delete a[this.expando])}},hasData:function(a){var b=a[this.expando];return void 0!==b&&!n.isEmptyObject(b)}};var N=new M,O=new M,P=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Q=/[A-Z]/g;function R(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d="data-"+b.replace(Q,"-$&").toLowerCase(),c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:P.test(c)?n.parseJSON(c):c;
}catch(e){}O.set(a,b,c)}else c=void 0;return c}n.extend({hasData:function(a){return O.hasData(a)||N.hasData(a)},data:function(a,b,c){return O.access(a,b,c)},removeData:function(a,b){O.remove(a,b)},_data:function(a,b,c){return N.access(a,b,c)},_removeData:function(a,b){N.remove(a,b)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=O.get(f),1===f.nodeType&&!N.get(f,"hasDataAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),R(f,d,e[d])));N.set(f,"hasDataAttrs",!0)}return e}return"object"==typeof a?this.each(function(){O.set(this,a)}):K(this,function(b){var c,d;if(f&&void 0===b){if(c=O.get(f,a)||O.get(f,a.replace(Q,"-$&").toLowerCase()),void 0!==c)return c;if(d=n.camelCase(a),c=O.get(f,d),void 0!==c)return c;if(c=R(f,d,void 0),void 0!==c)return c}else d=n.camelCase(a),this.each(function(){var c=O.get(this,d);O.set(this,d,b),a.indexOf("-")>-1&&void 0!==c&&O.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){O.remove(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=N.get(a,b),c&&(!d||n.isArray(c)?d=N.access(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return N.get(a,c)||N.access(a,c,{empty:n.Callbacks("once memory").add(function(){N.remove(a,[b+"queue",c])})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=N.get(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var S=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,T=new RegExp("^(?:([+-])=|)("+S+")([a-z%]*)$","i"),U=["Top","Right","Bottom","Left"],V=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)};function W(a,b,c,d){var e,f=1,g=20,h=d?function(){return d.cur()}:function(){return n.css(a,b,"")},i=h(),j=c&&c[3]||(n.cssNumber[b]?"":"px"),k=(n.cssNumber[b]||"px"!==j&&+i)&&T.exec(n.css(a,b));if(k&&k[3]!==j){j=j||k[3],c=c||[],k=+i||1;do f=f||".5",k/=f,n.style(a,b,k+j);while(f!==(f=h()/i)&&1!==f&&--g)}return c&&(k=+k||+i||0,e=c[1]?k+(c[1]+1)*c[2]:+c[2],d&&(d.unit=j,d.start=k,d.end=e)),e}var X=/^(?:checkbox|radio)$/i,Y=/<([\w:-]+)/,Z=/^$|\/(?:java|ecma)script/i,$={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};$.optgroup=$.option,$.tbody=$.tfoot=$.colgroup=$.caption=$.thead,$.th=$.td;function _(a,b){var c="undefined"!=typeof a.getElementsByTagName?a.getElementsByTagName(b||"*"):"undefined"!=typeof a.querySelectorAll?a.querySelectorAll(b||"*"):[];return void 0===b||b&&n.nodeName(a,b)?n.merge([a],c):c}function aa(a,b){for(var c=0,d=a.length;d>c;c++)N.set(a[c],"globalEval",!b||N.get(b[c],"globalEval"))}var ba=/<|&#?\w+;/;function ca(a,b,c,d,e){for(var f,g,h,i,j,k,l=b.createDocumentFragment(),m=[],o=0,p=a.length;p>o;o++)if(f=a[o],f||0===f)if("object"===n.type(f))n.merge(m,f.nodeType?[f]:f);else if(ba.test(f)){g=g||l.appendChild(b.createElement("div")),h=(Y.exec(f)||["",""])[1].toLowerCase(),i=$[h]||$._default,g.innerHTML=i[1]+n.htmlPrefilter(f)+i[2],k=i[0];while(k--)g=g.lastChild;n.merge(m,g.childNodes),g=l.firstChild,g.textContent=""}else m.push(b.createTextNode(f));l.textContent="",o=0;while(f=m[o++])if(d&&n.inArray(f,d)>-1)e&&e.push(f);else if(j=n.contains(f.ownerDocument,f),g=_(l.appendChild(f),"script"),j&&aa(g),c){k=0;while(f=g[k++])Z.test(f.type||"")&&c.push(f)}return l}!function(){var a=d.createDocumentFragment(),b=a.appendChild(d.createElement("div")),c=d.createElement("input");c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),b.appendChild(c),l.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML="<textarea>x</textarea>",l.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var da=/^key/,ea=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,fa=/^([^.]*)(?:\.(.+)|)/;function ga(){return!0}function ha(){return!1}function ia(){try{return d.activeElement}catch(a){}}function ja(a,b,c,d,e,f){var g,h;if("object"==typeof b){"string"!=typeof c&&(d=d||c,c=void 0);for(h in b)ja(a,h,c,d,b[h],f);return a}if(null==d&&null==e?(e=c,d=c=void 0):null==e&&("string"==typeof c?(e=d,d=void 0):(e=d,d=c,c=void 0)),e===!1)e=ha;else if(!e)return a;return 1===f&&(g=e,e=function(a){return n().off(a),g.apply(this,arguments)},e.guid=g.guid||(g.guid=n.guid++)),a.each(function(){n.event.add(this,b,e,d,c)})}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=N.get(a);if(r){c.handler&&(f=c,c=f.handler,e=f.selector),c.guid||(c.guid=n.guid++),(i=r.events)||(i=r.events={}),(g=r.handle)||(g=r.handle=function(b){return"undefined"!=typeof n&&n.event.triggered!==b.type?n.event.dispatch.apply(a,arguments):void 0}),b=(b||"").match(G)||[""],j=b.length;while(j--)h=fa.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o&&(l=n.event.special[o]||{},o=(e?l.delegateType:l.bindType)||o,l=n.event.special[o]||{},k=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},f),(m=i[o])||(m=i[o]=[],m.delegateCount=0,l.setup&&l.setup.call(a,d,p,g)!==!1||a.addEventListener&&a.addEventListener(o,g)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),n.event.global[o]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=N.hasData(a)&&N.get(a);if(r&&(i=r.events)){b=(b||"").match(G)||[""],j=b.length;while(j--)if(h=fa.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=i[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),g=f=m.length;while(f--)k=m[f],!e&&q!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&("**"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete i[o])}else for(o in i)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(i)&&N.remove(a,"handle events")}},dispatch:function(a){a=n.event.fix(a);var b,c,d,f,g,h=[],i=e.call(arguments),j=(N.get(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())a.rnamespace&&!a.rnamespace.test(g.namespace)||(a.handleObj=g,a.data=g.data,d=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==d&&(a.result=d)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&("click"!==a.type||isNaN(a.button)||a.button<1))for(;i!==this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||"click"!==a.type)){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+" ",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>-1:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,e,f,g=b.button;return null==a.pageX&&null!=b.clientX&&(c=a.target.ownerDocument||d,e=c.documentElement,f=c.body,a.pageX=b.clientX+(e&&e.scrollLeft||f&&f.scrollLeft||0)-(e&&e.clientLeft||f&&f.clientLeft||0),a.pageY=b.clientY+(e&&e.scrollTop||f&&f.scrollTop||0)-(e&&e.clientTop||f&&f.clientTop||0)),a.which||void 0===g||(a.which=1&g?1:2&g?3:4&g?2:0),a}},fix:function(a){if(a[n.expando])return a;var b,c,e,f=a.type,g=a,h=this.fixHooks[f];h||(this.fixHooks[f]=h=ea.test(f)?this.mouseHooks:da.test(f)?this.keyHooks:{}),e=h.props?this.props.concat(h.props):this.props,a=new n.Event(g),b=e.length;while(b--)c=e[b],a[c]=g[c];return a.target||(a.target=d),3===a.target.nodeType&&(a.target=a.target.parentNode),h.filter?h.filter(a,g):a},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==ia()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===ia()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&n.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}}},n.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c)},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?ga:ha):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={constructor:n.Event,isDefaultPrevented:ha,isPropagationStopped:ha,isImmediatePropagationStopped:ha,isSimulated:!1,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=ga,a&&!this.isSimulated&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=ga,a&&!this.isSimulated&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=ga,a&&!this.isSimulated&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return e&&(e===d||n.contains(d,e))||(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),n.fn.extend({on:function(a,b,c,d){return ja(this,a,b,c,d)},one:function(a,b,c,d){return ja(this,a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return b!==!1&&"function"!=typeof b||(c=b,b=void 0),c===!1&&(c=ha),this.each(function(){n.event.remove(this,a,c,b)})}});var ka=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,la=/<script|<style|<link/i,ma=/checked\s*(?:[^=]|=\s*.checked.)/i,na=/^true\/(.*)/,oa=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function pa(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function qa(a){return a.type=(null!==a.getAttribute("type"))+"/"+a.type,a}function ra(a){var b=na.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function sa(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(N.hasData(a)&&(f=N.access(a),g=N.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;d>c;c++)n.event.add(b,e,j[e][c])}O.hasData(a)&&(h=O.access(a),i=n.extend({},h),O.set(b,i))}}function ta(a,b){var c=b.nodeName.toLowerCase();"input"===c&&X.test(a.type)?b.checked=a.checked:"input"!==c&&"textarea"!==c||(b.defaultValue=a.defaultValue)}function ua(a,b,c,d){b=f.apply([],b);var e,g,h,i,j,k,m=0,o=a.length,p=o-1,q=b[0],r=n.isFunction(q);if(r||o>1&&"string"==typeof q&&!l.checkClone&&ma.test(q))return a.each(function(e){var f=a.eq(e);r&&(b[0]=q.call(this,e,f.html())),ua(f,b,c,d)});if(o&&(e=ca(b,a[0].ownerDocument,!1,a,d),g=e.firstChild,1===e.childNodes.length&&(e=g),g||d)){for(h=n.map(_(e,"script"),qa),i=h.length;o>m;m++)j=e,m!==p&&(j=n.clone(j,!0,!0),i&&n.merge(h,_(j,"script"))),c.call(a[m],j,m);if(i)for(k=h[h.length-1].ownerDocument,n.map(h,ra),m=0;i>m;m++)j=h[m],Z.test(j.type||"")&&!N.access(j,"globalEval")&&n.contains(k,j)&&(j.src?n._evalUrl&&n._evalUrl(j.src):n.globalEval(j.textContent.replace(oa,"")))}return a}function va(a,b,c){for(var d,e=b?n.filter(b,a):a,f=0;null!=(d=e[f]);f++)c||1!==d.nodeType||n.cleanData(_(d)),d.parentNode&&(c&&n.contains(d.ownerDocument,d)&&aa(_(d,"script")),d.parentNode.removeChild(d));return a}n.extend({htmlPrefilter:function(a){return a.replace(ka,"<$1></$2>")},clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=n.contains(a.ownerDocument,a);if(!(l.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(g=_(h),f=_(a),d=0,e=f.length;e>d;d++)ta(f[d],g[d]);if(b)if(c)for(f=f||_(a),g=g||_(h),d=0,e=f.length;e>d;d++)sa(f[d],g[d]);else sa(a,h);return g=_(h,"script"),g.length>0&&aa(g,!i&&_(a,"script")),h},cleanData:function(a){for(var b,c,d,e=n.event.special,f=0;void 0!==(c=a[f]);f++)if(L(c)){if(b=c[N.expando]){if(b.events)for(d in b.events)e[d]?n.event.remove(c,d):n.removeEvent(c,d,b.handle);c[N.expando]=void 0}c[O.expando]&&(c[O.expando]=void 0)}}}),n.fn.extend({domManip:ua,detach:function(a){return va(this,a,!0)},remove:function(a){return va(this,a)},text:function(a){return K(this,function(a){return void 0===a?n.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=a)})},null,a,arguments.length)},append:function(){return ua(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=pa(this,a);b.appendChild(a)}})},prepend:function(){return ua(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=pa(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return ua(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return ua(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(n.cleanData(_(a,!1)),a.textContent="");return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return K(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if("string"==typeof a&&!la.test(a)&&!$[(Y.exec(a)||["",""])[1].toLowerCase()]){a=n.htmlPrefilter(a);try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(_(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=[];return ua(this,arguments,function(b){var c=this.parentNode;n.inArray(this,a)<0&&(n.cleanData(_(this)),c&&c.replaceChild(b,this))},a)}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=[],e=n(a),f=e.length-1,h=0;f>=h;h++)c=h===f?this:this.clone(!0),n(e[h])[b](c),g.apply(d,c.get());return this.pushStack(d)}});var wa,xa={HTML:"block",BODY:"block"};function ya(a,b){var c=n(b.createElement(a)).appendTo(b.body),d=n.css(c[0],"display");return c.detach(),d}function za(a){var b=d,c=xa[a];return c||(c=ya(a,b),"none"!==c&&c||(wa=(wa||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=wa[0].contentDocument,b.write(),b.close(),c=ya(a,b),wa.detach()),xa[a]=c),c}var Aa=/^margin/,Ba=new RegExp("^("+S+")(?!px)[a-z%]+$","i"),Ca=function(b){var c=b.ownerDocument.defaultView;return c&&c.opener||(c=a),c.getComputedStyle(b)},Da=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e},Ea=d.documentElement;!function(){var b,c,e,f,g=d.createElement("div"),h=d.createElement("div");if(h.style){h.style.backgroundClip="content-box",h.cloneNode(!0).style.backgroundClip="",l.clearCloneStyle="content-box"===h.style.backgroundClip,g.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",g.appendChild(h);function i(){h.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",h.innerHTML="",Ea.appendChild(g);var d=a.getComputedStyle(h);b="1%"!==d.top,f="2px"===d.marginLeft,c="4px"===d.width,h.style.marginRight="50%",e="4px"===d.marginRight,Ea.removeChild(g)}n.extend(l,{pixelPosition:function(){return i(),b},boxSizingReliable:function(){return null==c&&i(),c},pixelMarginRight:function(){return null==c&&i(),e},reliableMarginLeft:function(){return null==c&&i(),f},reliableMarginRight:function(){var b,c=h.appendChild(d.createElement("div"));return c.style.cssText=h.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",c.style.marginRight=c.style.width="0",h.style.width="1px",Ea.appendChild(g),b=!parseFloat(a.getComputedStyle(c).marginRight),Ea.removeChild(g),h.removeChild(c),b}})}}();function Fa(a,b,c){var d,e,f,g,h=a.style;return c=c||Ca(a),g=c?c.getPropertyValue(b)||c[b]:void 0,""!==g&&void 0!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),c&&!l.pixelMarginRight()&&Ba.test(g)&&Aa.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f),void 0!==g?g+"":g}function Ga(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}var Ha=/^(none|table(?!-c[ea]).+)/,Ia={position:"absolute",visibility:"hidden",display:"block"},Ja={letterSpacing:"0",fontWeight:"400"},Ka=["Webkit","O","Moz","ms"],La=d.createElement("div").style;function Ma(a){if(a in La)return a;var b=a[0].toUpperCase()+a.slice(1),c=Ka.length;while(c--)if(a=Ka[c]+b,a in La)return a}function Na(a,b,c){var d=T.exec(b);return d?Math.max(0,d[2]-(c||0))+(d[3]||"px"):b}function Oa(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=n.css(a,c+U[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+U[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+U[f]+"Width",!0,e))):(g+=n.css(a,"padding"+U[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+U[f]+"Width",!0,e)));return g}function Pa(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=Ca(a),g="border-box"===n.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=Fa(a,b,f),(0>e||null==e)&&(e=a.style[b]),Ba.test(e))return e;d=g&&(l.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Oa(a,b,c||(g?"border":"content"),d,f)+"px"}function Qa(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=N.get(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&V(d)&&(f[g]=N.access(d,"olddisplay",za(d.nodeName)))):(e=V(d),"none"===c&&e||N.set(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Fa(a,"opacity");return""===c?"1":c}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;return b=n.cssProps[h]||(n.cssProps[h]=Ma(h)||h),g=n.cssHooks[b]||n.cssHooks[h],void 0===c?g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b]:(f=typeof c,"string"===f&&(e=T.exec(c))&&e[1]&&(c=W(a,b,e),f="number"),null!=c&&c===c&&("number"===f&&(c+=e&&e[3]||(n.cssNumber[h]?"":"px")),l.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),g&&"set"in g&&void 0===(c=g.set(a,c,d))||(i[b]=c)),void 0)}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=Ma(h)||h),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=Fa(a,b,d)),"normal"===e&&b in Ja&&(e=Ja[b]),""===c||c?(f=parseFloat(e),c===!0||isFinite(f)?f||0:e):e}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?Ha.test(n.css(a,"display"))&&0===a.offsetWidth?Da(a,Ia,function(){return Pa(a,b,d)}):Pa(a,b,d):void 0},set:function(a,c,d){var e,f=d&&Ca(a),g=d&&Oa(a,b,d,"border-box"===n.css(a,"boxSizing",!1,f),f);return g&&(e=T.exec(c))&&"px"!==(e[3]||"px")&&(a.style[b]=c,c=n.css(a,b)),Na(a,c,g)}}}),n.cssHooks.marginLeft=Ga(l.reliableMarginLeft,function(a,b){return b?(parseFloat(Fa(a,"marginLeft"))||a.getBoundingClientRect().left-Da(a,{marginLeft:0},function(){return a.getBoundingClientRect().left}))+"px":void 0}),n.cssHooks.marginRight=Ga(l.reliableMarginRight,function(a,b){return b?Da(a,{display:"inline-block"},Fa,[a,"marginRight"]):void 0}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+U[d]+b]=f[d]||f[d-2]||f[0];return e}},Aa.test(a)||(n.cssHooks[a+b].set=Na)}),n.fn.extend({css:function(a,b){return K(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=Ca(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return Qa(this,!0)},hide:function(){return Qa(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){V(this)?n(this).show():n(this).hide()})}});function Ra(a,b,c,d,e){return new Ra.prototype.init(a,b,c,d,e)}n.Tween=Ra,Ra.prototype={constructor:Ra,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||n.easing._default,this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=Ra.propHooks[this.prop];return a&&a.get?a.get(this):Ra.propHooks._default.get(this)},run:function(a){var b,c=Ra.propHooks[this.prop];return this.options.duration?this.pos=b=n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Ra.propHooks._default.set(this),this}},Ra.prototype.init.prototype=Ra.prototype,Ra.propHooks={_default:{get:function(a){var b;return 1!==a.elem.nodeType||null!=a.elem[a.prop]&&null==a.elem.style[a.prop]?a.elem[a.prop]:(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0)},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):1!==a.elem.nodeType||null==a.elem.style[n.cssProps[a.prop]]&&!n.cssHooks[a.prop]?a.elem[a.prop]=a.now:n.style(a.elem,a.prop,a.now+a.unit)}}},Ra.propHooks.scrollTop=Ra.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2},_default:"swing"},n.fx=Ra.prototype.init,n.fx.step={};var Sa,Ta,Ua=/^(?:toggle|show|hide)$/,Va=/queueHooks$/;function Wa(){return a.setTimeout(function(){Sa=void 0}),Sa=n.now()}function Xa(a,b){var c,d=0,e={height:a};for(b=b?1:0;4>d;d+=2-b)c=U[d],e["margin"+c]=e["padding"+c]=a;return b&&(e.opacity=e.width=a),e}function Ya(a,b,c){for(var d,e=(_a.tweeners[b]||[]).concat(_a.tweeners["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function Za(a,b,c){var d,e,f,g,h,i,j,k,l=this,m={},o=a.style,p=a.nodeType&&V(a),q=N.get(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,l.always(function(){l.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=n.css(a,"display"),k="none"===j?N.get(a,"olddisplay")||za(a.nodeName):j,"inline"===k&&"none"===n.css(a,"float")&&(o.display="inline-block")),c.overflow&&(o.overflow="hidden",l.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],Ua.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(p?"hide":"show")){if("show"!==e||!q||void 0===q[d])continue;p=!0}m[d]=q&&q[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(m))"inline"===("none"===j?za(a.nodeName):j)&&(o.display=j);else{q?"hidden"in q&&(p=q.hidden):q=N.access(a,"fxshow",{}),f&&(q.hidden=!p),p?n(a).show():l.done(function(){n(a).hide()}),l.done(function(){var b;N.remove(a,"fxshow");for(b in m)n.style(a,b,m[b])});for(d in m)g=Ya(p?q[d]:0,d,l),d in q||(q[d]=g.start,p&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function $a(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function _a(a,b,c){var d,e,f=0,g=_a.prefilters.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=Sa||Wa(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{},easing:n.easing._default},c),originalProperties:b,originalOptions:c,startTime:Sa||Wa(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?(h.notifyWith(a,[j,1,0]),h.resolveWith(a,[j,b])):h.rejectWith(a,[j,b]),this}}),k=j.props;for($a(k,j.opts.specialEasing);g>f;f++)if(d=_a.prefilters[f].call(j,a,k,j.opts))return n.isFunction(d.stop)&&(n._queueHooks(j.elem,j.opts.queue).stop=n.proxy(d.stop,d)),d;return n.map(k,Ya,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(_a,{tweeners:{"*":[function(a,b){var c=this.createTween(a,b);return W(c.elem,a,T.exec(b),c),c}]},tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.match(G);for(var c,d=0,e=a.length;e>d;d++)c=a[d],_a.tweeners[c]=_a.tweeners[c]||[],_a.tweeners[c].unshift(b)},prefilters:[Za],prefilter:function(a,b){b?_a.prefilters.unshift(a):_a.prefilters.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,null!=d.queue&&d.queue!==!0||(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(V).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=_a(this,n.extend({},a),f);(e||N.get(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=N.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&Va.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));!b&&c||n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=N.get(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(Xa(b,!0),a,d,e)}}),n.each({slideDown:Xa("show"),slideUp:Xa("hide"),slideToggle:Xa("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=0,c=n.timers;for(Sa=n.now();b<c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||n.fx.stop(),Sa=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){Ta||(Ta=a.setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){a.clearInterval(Ta),Ta=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(b,c){return b=n.fx?n.fx.speeds[b]||b:b,c=c||"fx",this.queue(c,function(c,d){var e=a.setTimeout(c,b);d.stop=function(){a.clearTimeout(e)}})},function(){var a=d.createElement("input"),b=d.createElement("select"),c=b.appendChild(d.createElement("option"));a.type="checkbox",l.checkOn=""!==a.value,l.optSelected=c.selected,b.disabled=!0,l.optDisabled=!c.disabled,a=d.createElement("input"),a.value="t",a.type="radio",l.radioValue="t"===a.value}();var ab,bb=n.expr.attrHandle;n.fn.extend({attr:function(a,b){return K(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return"undefined"==typeof a.getAttribute?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),e=n.attrHooks[b]||(n.expr.match.bool.test(b)?ab:void 0)),void 0!==c?null===c?void n.removeAttr(a,b):e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:(a.setAttribute(b,c+""),c):e&&"get"in e&&null!==(d=e.get(a,b))?d:(d=n.find.attr(a,b),null==d?void 0:d))},attrHooks:{type:{set:function(a,b){if(!l.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(G);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)&&(a[d]=!1),a.removeAttribute(c)}}),ab={set:function(a,b,c){return b===!1?n.removeAttr(a,c):a.setAttribute(c,c),c}},n.each(n.expr.match.bool.source.match(/\w+/g),function(a,b){var c=bb[b]||n.find.attr;bb[b]=function(a,b,d){var e,f;return d||(f=bb[b],bb[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,bb[b]=f),e}});var cb=/^(?:input|select|textarea|button)$/i,db=/^(?:a|area)$/i;n.fn.extend({prop:function(a,b){return K(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[n.propFix[a]||a]})}}),n.extend({prop:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return 1===f&&n.isXMLDoc(a)||(b=n.propFix[b]||b,e=n.propHooks[b]),
void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=n.find.attr(a,"tabindex");return b?parseInt(b,10):cb.test(a.nodeName)||db.test(a.nodeName)&&a.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),l.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null},set:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex)}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this});var eb=/[\t\r\n\f]/g;function fb(a){return a.getAttribute&&a.getAttribute("class")||""}n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,fb(this)))});if("string"==typeof a&&a){b=a.match(G)||[];while(c=this[i++])if(e=fb(c),d=1===c.nodeType&&(" "+e+" ").replace(eb," ")){g=0;while(f=b[g++])d.indexOf(" "+f+" ")<0&&(d+=f+" ");h=n.trim(d),e!==h&&c.setAttribute("class",h)}}return this},removeClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,fb(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof a&&a){b=a.match(G)||[];while(c=this[i++])if(e=fb(c),d=1===c.nodeType&&(" "+e+" ").replace(eb," ")){g=0;while(f=b[g++])while(d.indexOf(" "+f+" ")>-1)d=d.replace(" "+f+" "," ");h=n.trim(d),e!==h&&c.setAttribute("class",h)}}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):n.isFunction(a)?this.each(function(c){n(this).toggleClass(a.call(this,c,fb(this),b),b)}):this.each(function(){var b,d,e,f;if("string"===c){d=0,e=n(this),f=a.match(G)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else void 0!==a&&"boolean"!==c||(b=fb(this),b&&N.set(this,"__className__",b),this.setAttribute&&this.setAttribute("class",b||a===!1?"":N.get(this,"__className__")||""))})},hasClass:function(a){var b,c,d=0;b=" "+a+" ";while(c=this[d++])if(1===c.nodeType&&(" "+fb(c)+" ").replace(eb," ").indexOf(b)>-1)return!0;return!1}});var gb=/\r/g,hb=/[\x20\t\r\n\f]+/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(gb,""):null==c?"":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,"value");return null!=b?b:n.trim(n.text(a)).replace(hb," ")}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],(c.selected||i===e)&&(l.optDisabled?!c.disabled:null===c.getAttribute("disabled"))&&(!c.parentNode.disabled||!n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=n.inArray(n.valHooks.option.get(d),f)>-1)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>-1:void 0}},l.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var ib=/^(?:focusinfocus|focusoutblur)$/;n.extend(n.event,{trigger:function(b,c,e,f){var g,h,i,j,l,m,o,p=[e||d],q=k.call(b,"type")?b.type:b,r=k.call(b,"namespace")?b.namespace.split("."):[];if(h=i=e=e||d,3!==e.nodeType&&8!==e.nodeType&&!ib.test(q+n.event.triggered)&&(q.indexOf(".")>-1&&(r=q.split("."),q=r.shift(),r.sort()),l=q.indexOf(":")<0&&"on"+q,b=b[n.expando]?b:new n.Event(q,"object"==typeof b&&b),b.isTrigger=f?2:3,b.namespace=r.join("."),b.rnamespace=b.namespace?new RegExp("(^|\\.)"+r.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=e),c=null==c?[b]:n.makeArray(c,[b]),o=n.event.special[q]||{},f||!o.trigger||o.trigger.apply(e,c)!==!1)){if(!f&&!o.noBubble&&!n.isWindow(e)){for(j=o.delegateType||q,ib.test(j+q)||(h=h.parentNode);h;h=h.parentNode)p.push(h),i=h;i===(e.ownerDocument||d)&&p.push(i.defaultView||i.parentWindow||a)}g=0;while((h=p[g++])&&!b.isPropagationStopped())b.type=g>1?j:o.bindType||q,m=(N.get(h,"events")||{})[b.type]&&N.get(h,"handle"),m&&m.apply(h,c),m=l&&h[l],m&&m.apply&&L(h)&&(b.result=m.apply(h,c),b.result===!1&&b.preventDefault());return b.type=q,f||b.isDefaultPrevented()||o._default&&o._default.apply(p.pop(),c)!==!1||!L(e)||l&&n.isFunction(e[q])&&!n.isWindow(e)&&(i=e[l],i&&(e[l]=null),n.event.triggered=q,e[q](),n.event.triggered=void 0,i&&(e[l]=i)),b.result}},simulate:function(a,b,c){var d=n.extend(new n.Event,c,{type:a,isSimulated:!0});n.event.trigger(d,null,b)}}),n.fn.extend({trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}}),l.focusin="onfocusin"in a,l.focusin||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a))};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=N.access(d,b);e||d.addEventListener(a,c,!0),N.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=N.access(d,b)-1;e?N.access(d,b,e):(d.removeEventListener(a,c,!0),N.remove(d,b))}}});var jb=a.location,kb=n.now(),lb=/\?/;n.parseJSON=function(a){return JSON.parse(a+"")},n.parseXML=function(b){var c;if(!b||"string"!=typeof b)return null;try{c=(new a.DOMParser).parseFromString(b,"text/xml")}catch(d){c=void 0}return c&&!c.getElementsByTagName("parsererror").length||n.error("Invalid XML: "+b),c};var mb=/#.*$/,nb=/([?&])_=[^&]*/,ob=/^(.*?):[ \t]*([^\r\n]*)$/gm,pb=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,qb=/^(?:GET|HEAD)$/,rb=/^\/\//,sb={},tb={},ub="*/".concat("*"),vb=d.createElement("a");vb.href=jb.href;function wb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(G)||[];if(n.isFunction(c))while(d=f[e++])"+"===d[0]?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function xb(a,b,c,d){var e={},f=a===tb;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function yb(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&n.extend(!0,a,d),a}function zb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader("Content-Type"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+" "+i[0]]){f=e;break}g||(g=e)}f=f||g}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function Ab(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:jb.href,type:"GET",isLocal:pb.test(jb.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":ub,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?yb(yb(a,n.ajaxSettings),b):yb(n.ajaxSettings,a)},ajaxPrefilter:wb(sb),ajaxTransport:wb(tb),ajax:function(b,c){"object"==typeof b&&(c=b,b=void 0),c=c||{};var e,f,g,h,i,j,k,l,m=n.ajaxSetup({},c),o=m.context||m,p=m.context&&(o.nodeType||o.jquery)?n(o):n.event,q=n.Deferred(),r=n.Callbacks("once memory"),s=m.statusCode||{},t={},u={},v=0,w="canceled",x={readyState:0,getResponseHeader:function(a){var b;if(2===v){if(!h){h={};while(b=ob.exec(g))h[b[1].toLowerCase()]=b[2]}b=h[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===v?g:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return v||(a=u[c]=u[c]||a,t[a]=b),this},overrideMimeType:function(a){return v||(m.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>v)for(b in a)s[b]=[s[b],a[b]];else x.always(a[x.status]);return this},abort:function(a){var b=a||w;return e&&e.abort(b),z(0,b),this}};if(q.promise(x).complete=r.add,x.success=x.done,x.error=x.fail,m.url=((b||m.url||jb.href)+"").replace(mb,"").replace(rb,jb.protocol+"//"),m.type=c.method||c.type||m.method||m.type,m.dataTypes=n.trim(m.dataType||"*").toLowerCase().match(G)||[""],null==m.crossDomain){j=d.createElement("a");try{j.href=m.url,j.href=j.href,m.crossDomain=vb.protocol+"//"+vb.host!=j.protocol+"//"+j.host}catch(y){m.crossDomain=!0}}if(m.data&&m.processData&&"string"!=typeof m.data&&(m.data=n.param(m.data,m.traditional)),xb(sb,m,c,x),2===v)return x;k=n.event&&m.global,k&&0===n.active++&&n.event.trigger("ajaxStart"),m.type=m.type.toUpperCase(),m.hasContent=!qb.test(m.type),f=m.url,m.hasContent||(m.data&&(f=m.url+=(lb.test(f)?"&":"?")+m.data,delete m.data),m.cache===!1&&(m.url=nb.test(f)?f.replace(nb,"$1_="+kb++):f+(lb.test(f)?"&":"?")+"_="+kb++)),m.ifModified&&(n.lastModified[f]&&x.setRequestHeader("If-Modified-Since",n.lastModified[f]),n.etag[f]&&x.setRequestHeader("If-None-Match",n.etag[f])),(m.data&&m.hasContent&&m.contentType!==!1||c.contentType)&&x.setRequestHeader("Content-Type",m.contentType),x.setRequestHeader("Accept",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+("*"!==m.dataTypes[0]?", "+ub+"; q=0.01":""):m.accepts["*"]);for(l in m.headers)x.setRequestHeader(l,m.headers[l]);if(m.beforeSend&&(m.beforeSend.call(o,x,m)===!1||2===v))return x.abort();w="abort";for(l in{success:1,error:1,complete:1})x[l](m[l]);if(e=xb(tb,m,c,x)){if(x.readyState=1,k&&p.trigger("ajaxSend",[x,m]),2===v)return x;m.async&&m.timeout>0&&(i=a.setTimeout(function(){x.abort("timeout")},m.timeout));try{v=1,e.send(t,z)}catch(y){if(!(2>v))throw y;z(-1,y)}}else z(-1,"No Transport");function z(b,c,d,h){var j,l,t,u,w,y=c;2!==v&&(v=2,i&&a.clearTimeout(i),e=void 0,g=h||"",x.readyState=b>0?4:0,j=b>=200&&300>b||304===b,d&&(u=zb(m,x,d)),u=Ab(m,u,x,j),j?(m.ifModified&&(w=x.getResponseHeader("Last-Modified"),w&&(n.lastModified[f]=w),w=x.getResponseHeader("etag"),w&&(n.etag[f]=w)),204===b||"HEAD"===m.type?y="nocontent":304===b?y="notmodified":(y=u.state,l=u.data,t=u.error,j=!t)):(t=y,!b&&y||(y="error",0>b&&(b=0))),x.status=b,x.statusText=(c||y)+"",j?q.resolveWith(o,[l,y,x]):q.rejectWith(o,[x,y,t]),x.statusCode(s),s=void 0,k&&p.trigger(j?"ajaxSuccess":"ajaxError",[x,m,j?l:t]),r.fireWith(o,[x,y]),k&&(p.trigger("ajaxComplete",[x,m]),--n.active||n.event.trigger("ajaxStop")))}return x},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax(n.extend({url:a,type:b,dataType:e,data:c,success:d},n.isPlainObject(a)&&a))}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},n.fn.extend({wrapAll:function(a){var b;return n.isFunction(a)?this.each(function(b){n(this).wrapAll(a.call(this,b))}):(this[0]&&(b=n(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this)},wrapInner:function(a){return n.isFunction(a)?this.each(function(b){n(this).wrapInner(a.call(this,b))}):this.each(function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}}),n.expr.filters.hidden=function(a){return!n.expr.filters.visible(a)},n.expr.filters.visible=function(a){return a.offsetWidth>0||a.offsetHeight>0||a.getClientRects().length>0};var Bb=/%20/g,Cb=/\[\]$/,Db=/\r?\n/g,Eb=/^(?:submit|button|image|reset|file)$/i,Fb=/^(?:input|select|textarea|keygen)/i;function Gb(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||Cb.test(a)?d(a,e):Gb(a+"["+("object"==typeof e&&null!=e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)Gb(a+"["+e+"]",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)Gb(c,a[c],b,e);return d.join("&").replace(Bb,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&Fb.test(this.nodeName)&&!Eb.test(a)&&(this.checked||!X.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(Db,"\r\n")}}):{name:b.name,value:c.replace(Db,"\r\n")}}).get()}}),n.ajaxSettings.xhr=function(){try{return new a.XMLHttpRequest}catch(b){}};var Hb={0:200,1223:204},Ib=n.ajaxSettings.xhr();l.cors=!!Ib&&"withCredentials"in Ib,l.ajax=Ib=!!Ib,n.ajaxTransport(function(b){var c,d;return l.cors||Ib&&!b.crossDomain?{send:function(e,f){var g,h=b.xhr();if(h.open(b.type,b.url,b.async,b.username,b.password),b.xhrFields)for(g in b.xhrFields)h[g]=b.xhrFields[g];b.mimeType&&h.overrideMimeType&&h.overrideMimeType(b.mimeType),b.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest");for(g in e)h.setRequestHeader(g,e[g]);c=function(a){return function(){c&&(c=d=h.onload=h.onerror=h.onabort=h.onreadystatechange=null,"abort"===a?h.abort():"error"===a?"number"!=typeof h.status?f(0,"error"):f(h.status,h.statusText):f(Hb[h.status]||h.status,h.statusText,"text"!==(h.responseType||"text")||"string"!=typeof h.responseText?{binary:h.response}:{text:h.responseText},h.getAllResponseHeaders()))}},h.onload=c(),d=h.onerror=c("error"),void 0!==h.onabort?h.onabort=d:h.onreadystatechange=function(){4===h.readyState&&a.setTimeout(function(){c&&d()})},c=c("abort");try{h.send(b.hasContent&&b.data||null)}catch(i){if(c)throw i}},abort:function(){c&&c()}}:void 0}),n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET")}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c;return{send:function(e,f){b=n("<script>").prop({charset:a.scriptCharset,src:a.url}).on("load error",c=function(a){b.remove(),c=null,a&&f("error"===a.type?404:200,a.type)}),d.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Jb=[],Kb=/(=)\?(?=&|$)|\?\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Jb.pop()||n.expando+"_"+kb++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(Kb.test(b.url)?"url":"string"==typeof b.data&&0===(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&Kb.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Kb,"$1"+e):b.jsonp!==!1&&(b.url+=(lb.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){void 0===f?n(a).removeProp(e):a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Jb.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||d;var e=x.exec(a),f=!c&&[];return e?[b.createElement(e[1])]:(e=ca([a],b,f),f&&f.length&&n(f).remove(),n.merge([],e.childNodes))};var Lb=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&Lb)return Lb.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>-1&&(d=n.trim(a.slice(h)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&n.ajax({url:a,type:e||"GET",dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).always(c&&function(a,b){g.each(function(){c.apply(this,f||[a.responseText,b,a])})}),this},n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};function Mb(a){return n.isWindow(a)?a:9===a.nodeType&&a.defaultView}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&(f+i).indexOf("auto")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,n.extend({},h))),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d=this[0],e={top:0,left:0},f=d&&d.ownerDocument;if(f)return b=f.documentElement,n.contains(b,d)?(e=d.getBoundingClientRect(),c=Mb(f),{top:e.top+c.pageYOffset-b.clientTop,left:e.left+c.pageXOffset-b.clientLeft}):e},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return"fixed"===n.css(c,"position")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(d=a.offset()),d.top+=n.css(a[0],"borderTopWidth",!0),d.left+=n.css(a[0],"borderLeftWidth",!0)),{top:b.top-d.top-n.css(c,"marginTop",!0),left:b.left-d.left-n.css(c,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent;while(a&&"static"===n.css(a,"position"))a=a.offsetParent;return a||Ea})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c="pageYOffset"===b;n.fn[a]=function(d){return K(this,function(a,d,e){var f=Mb(a);return void 0===e?f?f[b]:a[d]:void(f?f.scrollTo(c?f.pageXOffset:e,c?e:f.pageYOffset):a[d]=e)},a,d,arguments.length)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=Ga(l.pixelPosition,function(a,c){return c?(c=Fa(a,b),Ba.test(c)?n(a).position()[b]+"px":c):void 0})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return K(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.extend({bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)},size:function(){return this.length}}),n.fn.andSelf=n.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return n});var Nb=a.jQuery,Ob=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=Ob),b&&a.jQuery===n&&(a.jQuery=Nb),n},b||(a.jQuery=a.$=n),n});;
var Project = {
    init: function () {
        this.initModules();
        if ($('.listing-error').html() != '') {
            $('.listing-error').show();
            $(".listing-error").delay(10000).slideUp('slow');
        }
        $("textarea").css('resize', 'none');
        $("checkbox").css('border', 'none');
    },
    timer: 7500,
    modules: {},
    initModules: function () {
        for (var module in Project.modules) {
            var id = (module || "").replace(/([A-Z])/g, '-$1').toLowerCase();
            id = id.substring(0, 1) == '-' ? id.substring(1) : id;
            if ($('#' + id).length && typeof (this.modules[module].init) == 'function') {
                Project.modules[module].init($('#' + id));
            }
        }
    },
    hide_adaxloading_div: function () {
        if ($('#body_ajaxloading_div').length) {
            $('#body_ajaxloading_div').remove();
        }
    },
    show_adaxloading_div: function () {
        var spinner_class = 'fa fa-cog fa-spin fa-32';
        if(typeof admin_spinner_class != 'undefined'){
            spinner_class = admin_spinner_class;
        }
        $('body').append('<div id="body_ajaxloading_div" align="center"><i class="' + spinner_class + '"></i></div>');
        $('#body_ajaxloading_div').css({
            position: 'absolute',
            zIndex: 10000,
            left: (el_general_settings.page_temp_left - 42) + 'px',
            top: (el_general_settings.page_temp_right - 18) + 'px'
        });
        setTimeout(function () {
            Project.hide_adaxloading_div()
        }, 20000);
    },
    setMessage: function (msgText, msgClass, timeOut) {
        var cnt_class, close_class;
        if (msgClass == 0) {
            cnt_class = "alert-error";
            close_class = 'error';
        } else if (msgClass == 1) {
            cnt_class = "alert-success";
            close_class = 'success';
        } else if (msgClass == 2) {
            cnt_class = "";
            close_class = 'success';
        } else {
            cnt_class = "alert-info";
            close_class = 'success';
        }
        $("#closebtn_errorbox").removeClass("success").removeClass("error").addClass(close_class);
        $('#err_msg_cnt').html(msgText).removeClass("alert-success").removeClass("alert-error").removeClass("alert-info").addClass(cnt_class);
        var msg_type = Project.getMessageStyle();
        if (msg_type == "toastr") {
            Project.setFlashToToastr();
        } else {
            if ($.isNumeric(timeOut) && timeOut > 0) {
                setTimeout(function () {
                    $('#var_msg_cnt').fadeIn('slow');
                    setTimeout(function () {
                        Project.closeMessage();
                    }, Project.timer);
                }, timeOut);
            } else {
                $('#var_msg_cnt').fadeIn('slow');
                setTimeout(function () {
                    Project.closeMessage();
                }, Project.timer);
            }
        }
    },
    closeMessage: function () {
        $('#var_msg_cnt').fadeOut('slow');
        return false;
    },
    checkmsg: function () {
        if ($('#err_msg_cnt').length > 0 && $.trim($('#err_msg_cnt').text()) != '') {
            $('#var_msg_cnt').fadeIn('slow');
            setTimeout(function () {
                Project.closeMessage();
            }, Project.timer);
        }
    },
    getMessageStyle: function () {
        var msg_style = 'default';
        console.log(el_tpl_settings['flash_message_style']);
        if (typeof el_tpl_settings != "undefined" && typeof el_tpl_settings == "object") {
            if ('flash_message_style' in el_tpl_settings) {
                if (el_tpl_settings['flash_message_style'] == "toastr") {
                    msg_style = 'toastr';
                }
            }
        }
        return msg_style;
    },
    setFlashToToastr: function () {
        var message, options = {};
        message = $.trim($('#err_msg_cnt').text());
        options["closeButton"] = true;
        options["positionClass"] = "toast-top-right";
        options["timeOut"] = Project.timer;
        if ($("#err_msg_cnt").hasClass("alert-error")) {
            Project.showUIMessage('', message, 0, options);
        } else if ($("#err_msg_cnt").hasClass("alert-warning")) {
            Project.showUIMessage('', message, 2, options);
        } else if ($("#err_msg_cnt").hasClass("alert-success")) {
            Project.showUIMessage('', message, 1, options);
        } else {
            Project.showUIMessage('', message, 3, options);
        }
    },
    showUIMessage: function (title, message, status, options) {
        options = (options) ? options : {};
        if (status == 0) {
            toastr.error(message, title, options);
        } else if (status == 1) {
            toastr.success(message, title, options);
        } else if (status == 2) {
            toastr.warning(message, title, options);
        } else {
            toastr.info(message, title, options);
        }
    }
};
var matched, browser;
jQuery.uaMatch = function (ua) {
    ua = ua.toLowerCase();
    var match = /(chrome)[ \/]([\w.]+)/.exec(ua) ||
            /(webkit)[ \/]([\w.]+)/.exec(ua) ||
            /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) ||
            /(msie) ([\w.]+)/.exec(ua) ||
            ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) ||
            [];
    return {
        browser: match[ 1 ] || "",
        version: match[ 2 ] || "0"
    };
};
matched = jQuery.uaMatch(navigator.userAgent);
browser = {};
if (matched.browser) {
    browser[ matched.browser ] = true;
    browser.version = matched.version;
}
// Chrome is Webkit, but Webkit is also Safari.
if (browser.chrome) {
    browser.webkit = true;
} else if (browser.webkit) {
    browser.safari = true;
}
jQuery.browser = browser;;
/*! jQuery UI - v1.9.2 - 2014-08-31 */
(function(e,t){function i(t,i){var n,a,r,o=t.nodeName.toLowerCase();return"area"===o?(n=t.parentNode,a=n.name,t.href&&a&&"map"===n.nodeName.toLowerCase()?(r=e("img[usemap=#"+a+"]")[0],!!r&&s(r)):!1):(/input|select|textarea|button|object/.test(o)?!t.disabled:"a"===o?t.href||i:i)&&s(t)}function s(t){return e.expr.filters.visible(t)&&!e(t).parents().andSelf().filter(function(){return"hidden"===e.css(this,"visibility")}).length}var n=0,a=/^ui-id-\d+$/;e.ui=e.ui||{},e.ui.version||(e.extend(e.ui,{version:"1.9.2",keyCode:{BACKSPACE:8,COMMA:188,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,NUMPAD_ADD:107,NUMPAD_DECIMAL:110,NUMPAD_DIVIDE:111,NUMPAD_ENTER:108,NUMPAD_MULTIPLY:106,NUMPAD_SUBTRACT:109,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SPACE:32,TAB:9,UP:38}}),e.fn.extend({_focus:e.fn.focus,focus:function(t,i){return"number"==typeof t?this.each(function(){var s=this;setTimeout(function(){e(s).focus(),i&&i.call(s)},t)}):this._focus.apply(this,arguments)},scrollParent:function(){var t;return t=e.ui.ie&&/(static|relative)/.test(this.css("position"))||/absolute/.test(this.css("position"))?this.parents().filter(function(){return/(relative|absolute|fixed)/.test(e.css(this,"position"))&&/(auto|scroll)/.test(e.css(this,"overflow")+e.css(this,"overflow-y")+e.css(this,"overflow-x"))}).eq(0):this.parents().filter(function(){return/(auto|scroll)/.test(e.css(this,"overflow")+e.css(this,"overflow-y")+e.css(this,"overflow-x"))}).eq(0),/fixed/.test(this.css("position"))||!t.length?e(document):t},zIndex:function(i){if(i!==t)return this.css("zIndex",i);if(this.length)for(var s,n,a=e(this[0]);a.length&&a[0]!==document;){if(s=a.css("position"),("absolute"===s||"relative"===s||"fixed"===s)&&(n=parseInt(a.css("zIndex"),10),!isNaN(n)&&0!==n))return n;a=a.parent()}return 0},uniqueId:function(){return this.each(function(){this.id||(this.id="ui-id-"+ ++n)})},removeUniqueId:function(){return this.each(function(){a.test(this.id)&&e(this).removeAttr("id")})}}),e.extend(e.expr[":"],{data:e.expr.createPseudo?e.expr.createPseudo(function(t){return function(i){return!!e.data(i,t)}}):function(t,i,s){return!!e.data(t,s[3])},focusable:function(t){return i(t,!isNaN(e.attr(t,"tabindex")))},tabbable:function(t){var s=e.attr(t,"tabindex"),n=isNaN(s);return(n||s>=0)&&i(t,!n)}}),e(function(){var t=document.body,i=t.appendChild(i=document.createElement("div"));i.offsetHeight,e.extend(i.style,{minHeight:"100px",height:"auto",padding:0,borderWidth:0}),e.support.minHeight=100===i.offsetHeight,e.support.selectstart="onselectstart"in i,t.removeChild(i).style.display="none"}),e("<a>").outerWidth(1).jquery||e.each(["Width","Height"],function(i,s){function n(t,i,s,n){return e.each(a,function(){i-=parseFloat(e.css(t,"padding"+this))||0,s&&(i-=parseFloat(e.css(t,"border"+this+"Width"))||0),n&&(i-=parseFloat(e.css(t,"margin"+this))||0)}),i}var a="Width"===s?["Left","Right"]:["Top","Bottom"],r=s.toLowerCase(),o={innerWidth:e.fn.innerWidth,innerHeight:e.fn.innerHeight,outerWidth:e.fn.outerWidth,outerHeight:e.fn.outerHeight};e.fn["inner"+s]=function(i){return i===t?o["inner"+s].call(this):this.each(function(){e(this).css(r,n(this,i)+"px")})},e.fn["outer"+s]=function(t,i){return"number"!=typeof t?o["outer"+s].call(this,t):this.each(function(){e(this).css(r,n(this,t,!0,i)+"px")})}}),e("<a>").data("a-b","a").removeData("a-b").data("a-b")&&(e.fn.removeData=function(t){return function(i){return arguments.length?t.call(this,e.camelCase(i)):t.call(this)}}(e.fn.removeData)),function(){var t=/msie ([\w.]+)/.exec(navigator.userAgent.toLowerCase())||[];e.ui.ie=t.length?!0:!1,e.ui.ie6=6===parseFloat(t[1],10)}(),e.fn.extend({disableSelection:function(){return this.bind((e.support.selectstart?"selectstart":"mousedown")+".ui-disableSelection",function(e){e.preventDefault()})},enableSelection:function(){return this.unbind(".ui-disableSelection")}}),e.extend(e.ui,{plugin:{add:function(t,i,s){var n,a=e.ui[t].prototype;for(n in s)a.plugins[n]=a.plugins[n]||[],a.plugins[n].push([i,s[n]])},call:function(e,t,i){var s,n=e.plugins[t];if(n&&e.element[0].parentNode&&11!==e.element[0].parentNode.nodeType)for(s=0;n.length>s;s++)e.options[n[s][0]]&&n[s][1].apply(e.element,i)}},contains:e.contains,hasScroll:function(t,i){if("hidden"===e(t).css("overflow"))return!1;var s=i&&"left"===i?"scrollLeft":"scrollTop",n=!1;return t[s]>0?!0:(t[s]=1,n=t[s]>0,t[s]=0,n)},isOverAxis:function(e,t,i){return e>t&&t+i>e},isOver:function(t,i,s,n,a,r){return e.ui.isOverAxis(t,s,a)&&e.ui.isOverAxis(i,n,r)}}))})(jQuery);(function(e,t){var i=0,s=Array.prototype.slice,n=e.cleanData;e.cleanData=function(t){for(var i,s=0;null!=(i=t[s]);s++)try{e(i).triggerHandler("remove")}catch(a){}n(t)},e.widget=function(i,s,n){var a,o,r,h,l=i.split(".")[0];i=i.split(".")[1],a=l+"-"+i,n||(n=s,s=e.Widget),e.expr[":"][a.toLowerCase()]=function(t){return!!e.data(t,a)},e[l]=e[l]||{},o=e[l][i],r=e[l][i]=function(e,i){return this._createWidget?(arguments.length&&this._createWidget(e,i),t):new r(e,i)},e.extend(r,o,{version:n.version,_proto:e.extend({},n),_childConstructors:[]}),h=new s,h.options=e.widget.extend({},h.options),e.each(n,function(t,i){e.isFunction(i)&&(n[t]=function(){var e=function(){return s.prototype[t].apply(this,arguments)},n=function(e){return s.prototype[t].apply(this,e)};return function(){var t,s=this._super,a=this._superApply;return this._super=e,this._superApply=n,t=i.apply(this,arguments),this._super=s,this._superApply=a,t}}())}),r.prototype=e.widget.extend(h,{widgetEventPrefix:o?h.widgetEventPrefix:i},n,{constructor:r,namespace:l,widgetName:i,widgetBaseClass:a,widgetFullName:a}),o?(e.each(o._childConstructors,function(t,i){var s=i.prototype;e.widget(s.namespace+"."+s.widgetName,r,i._proto)}),delete o._childConstructors):s._childConstructors.push(r),e.widget.bridge(i,r)},e.widget.extend=function(i){for(var n,a,o=s.call(arguments,1),r=0,h=o.length;h>r;r++)for(n in o[r])a=o[r][n],o[r].hasOwnProperty(n)&&a!==t&&(i[n]=e.isPlainObject(a)?e.isPlainObject(i[n])?e.widget.extend({},i[n],a):e.widget.extend({},a):a);return i},e.widget.bridge=function(i,n){var a=n.prototype.widgetFullName||i;e.fn[i]=function(o){var r="string"==typeof o,h=s.call(arguments,1),l=this;return o=!r&&h.length?e.widget.extend.apply(null,[o].concat(h)):o,r?this.each(function(){var s,n=e.data(this,a);return n?e.isFunction(n[o])&&"_"!==o.charAt(0)?(s=n[o].apply(n,h),s!==n&&s!==t?(l=s&&s.jquery?l.pushStack(s.get()):s,!1):t):e.error("no such method '"+o+"' for "+i+" widget instance"):e.error("cannot call methods on "+i+" prior to initialization; "+"attempted to call method '"+o+"'")}):this.each(function(){var t=e.data(this,a);t?t.option(o||{})._init():e.data(this,a,new n(o,this))}),l}},e.Widget=function(){},e.Widget._childConstructors=[],e.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{disabled:!1,create:null},_createWidget:function(t,s){s=e(s||this.defaultElement||this)[0],this.element=e(s),this.uuid=i++,this.eventNamespace="."+this.widgetName+this.uuid,this.options=e.widget.extend({},this.options,this._getCreateOptions(),t),this.bindings=e(),this.hoverable=e(),this.focusable=e(),s!==this&&(e.data(s,this.widgetName,this),e.data(s,this.widgetFullName,this),this._on(!0,this.element,{remove:function(e){e.target===s&&this.destroy()}}),this.document=e(s.style?s.ownerDocument:s.document||s),this.window=e(this.document[0].defaultView||this.document[0].parentWindow)),this._create(),this._trigger("create",null,this._getCreateEventData()),this._init()},_getCreateOptions:e.noop,_getCreateEventData:e.noop,_create:e.noop,_init:e.noop,destroy:function(){this._destroy(),this.element.unbind(this.eventNamespace).removeData(this.widgetName).removeData(this.widgetFullName).removeData(e.camelCase(this.widgetFullName)),this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName+"-disabled "+"ui-state-disabled"),this.bindings.unbind(this.eventNamespace),this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus")},_destroy:e.noop,widget:function(){return this.element},option:function(i,s){var n,a,o,r=i;if(0===arguments.length)return e.widget.extend({},this.options);if("string"==typeof i)if(r={},n=i.split("."),i=n.shift(),n.length){for(a=r[i]=e.widget.extend({},this.options[i]),o=0;n.length-1>o;o++)a[n[o]]=a[n[o]]||{},a=a[n[o]];if(i=n.pop(),s===t)return a[i]===t?null:a[i];a[i]=s}else{if(s===t)return this.options[i]===t?null:this.options[i];r[i]=s}return this._setOptions(r),this},_setOptions:function(e){var t;for(t in e)this._setOption(t,e[t]);return this},_setOption:function(e,t){return this.options[e]=t,"disabled"===e&&(this.widget().toggleClass(this.widgetFullName+"-disabled ui-state-disabled",!!t).attr("aria-disabled",t),this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus")),this},enable:function(){return this._setOption("disabled",!1)},disable:function(){return this._setOption("disabled",!0)},_on:function(i,s,n){var a,o=this;"boolean"!=typeof i&&(n=s,s=i,i=!1),n?(s=a=e(s),this.bindings=this.bindings.add(s)):(n=s,s=this.element,a=this.widget()),e.each(n,function(n,r){function h(){return i||o.options.disabled!==!0&&!e(this).hasClass("ui-state-disabled")?("string"==typeof r?o[r]:r).apply(o,arguments):t}"string"!=typeof r&&(h.guid=r.guid=r.guid||h.guid||e.guid++);var l=n.match(/^(\w+)\s*(.*)$/),u=l[1]+o.eventNamespace,c=l[2];c?a.delegate(c,u,h):s.bind(u,h)})},_off:function(e,t){t=(t||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace,e.unbind(t).undelegate(t)},_delay:function(e,t){function i(){return("string"==typeof e?s[e]:e).apply(s,arguments)}var s=this;return setTimeout(i,t||0)},_hoverable:function(t){this.hoverable=this.hoverable.add(t),this._on(t,{mouseenter:function(t){e(t.currentTarget).addClass("ui-state-hover")},mouseleave:function(t){e(t.currentTarget).removeClass("ui-state-hover")}})},_focusable:function(t){this.focusable=this.focusable.add(t),this._on(t,{focusin:function(t){e(t.currentTarget).addClass("ui-state-focus")},focusout:function(t){e(t.currentTarget).removeClass("ui-state-focus")}})},_trigger:function(t,i,s){var n,a,o=this.options[t];if(s=s||{},i=e.Event(i),i.type=(t===this.widgetEventPrefix?t:this.widgetEventPrefix+t).toLowerCase(),i.target=this.element[0],a=i.originalEvent)for(n in a)n in i||(i[n]=a[n]);return this.element.trigger(i,s),!(e.isFunction(o)&&o.apply(this.element[0],[i].concat(s))===!1||i.isDefaultPrevented())}},e.each({show:"fadeIn",hide:"fadeOut"},function(t,i){e.Widget.prototype["_"+t]=function(s,n,a){"string"==typeof n&&(n={effect:n});var o,r=n?n===!0||"number"==typeof n?i:n.effect||i:t;n=n||{},"number"==typeof n&&(n={duration:n}),o=!e.isEmptyObject(n),n.complete=a,n.delay&&s.delay(n.delay),o&&e.effects&&(e.effects.effect[r]||e.uiBackCompat!==!1&&e.effects[r])?s[t](n):r!==t&&s[r]?s[r](n.duration,n.easing,a):s.queue(function(i){e(this)[t](),a&&a.call(s[0]),i()})}}),e.uiBackCompat!==!1&&(e.Widget.prototype._getCreateOptions=function(){return e.metadata&&e.metadata.get(this.element[0])[this.widgetName]})})(jQuery);(function(e){var t=!1;e(document).mouseup(function(){t=!1}),e.widget("ui.mouse",{version:"1.9.2",options:{cancel:"input,textarea,button,select,option",distance:1,delay:0},_mouseInit:function(){var t=this;this.element.bind("mousedown."+this.widgetName,function(e){return t._mouseDown(e)}).bind("click."+this.widgetName,function(i){return!0===e.data(i.target,t.widgetName+".preventClickEvent")?(e.removeData(i.target,t.widgetName+".preventClickEvent"),i.stopImmediatePropagation(),!1):undefined}),this.started=!1},_mouseDestroy:function(){this.element.unbind("."+this.widgetName),this._mouseMoveDelegate&&e(document).unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate)},_mouseDown:function(i){if(!t){this._mouseStarted&&this._mouseUp(i),this._mouseDownEvent=i;var s=this,n=1===i.which,a="string"==typeof this.options.cancel&&i.target.nodeName?e(i.target).closest(this.options.cancel).length:!1;return n&&!a&&this._mouseCapture(i)?(this.mouseDelayMet=!this.options.delay,this.mouseDelayMet||(this._mouseDelayTimer=setTimeout(function(){s.mouseDelayMet=!0},this.options.delay)),this._mouseDistanceMet(i)&&this._mouseDelayMet(i)&&(this._mouseStarted=this._mouseStart(i)!==!1,!this._mouseStarted)?(i.preventDefault(),!0):(!0===e.data(i.target,this.widgetName+".preventClickEvent")&&e.removeData(i.target,this.widgetName+".preventClickEvent"),this._mouseMoveDelegate=function(e){return s._mouseMove(e)},this._mouseUpDelegate=function(e){return s._mouseUp(e)},e(document).bind("mousemove."+this.widgetName,this._mouseMoveDelegate).bind("mouseup."+this.widgetName,this._mouseUpDelegate),i.preventDefault(),t=!0,!0)):!0}},_mouseMove:function(t){return!e.ui.ie||document.documentMode>=9||t.button?this._mouseStarted?(this._mouseDrag(t),t.preventDefault()):(this._mouseDistanceMet(t)&&this._mouseDelayMet(t)&&(this._mouseStarted=this._mouseStart(this._mouseDownEvent,t)!==!1,this._mouseStarted?this._mouseDrag(t):this._mouseUp(t)),!this._mouseStarted):this._mouseUp(t)},_mouseUp:function(t){return e(document).unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate),this._mouseStarted&&(this._mouseStarted=!1,t.target===this._mouseDownEvent.target&&e.data(t.target,this.widgetName+".preventClickEvent",!0),this._mouseStop(t)),!1},_mouseDistanceMet:function(e){return Math.max(Math.abs(this._mouseDownEvent.pageX-e.pageX),Math.abs(this._mouseDownEvent.pageY-e.pageY))>=this.options.distance},_mouseDelayMet:function(){return this.mouseDelayMet},_mouseStart:function(){},_mouseDrag:function(){},_mouseStop:function(){},_mouseCapture:function(){return!0}})})(jQuery);(function(e,t){function i(e,t,i){return[parseInt(e[0],10)*(c.test(e[0])?t/100:1),parseInt(e[1],10)*(c.test(e[1])?i/100:1)]}function s(t,i){return parseInt(e.css(t,i),10)||0}e.ui=e.ui||{};var n,a=Math.max,o=Math.abs,r=Math.round,h=/left|center|right/,l=/top|center|bottom/,u=/[\+\-]\d+%?/,d=/^\w+/,c=/%$/,p=e.fn.position;e.position={scrollbarWidth:function(){if(n!==t)return n;var i,s,a=e("<div style='display:block;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"),o=a.children()[0];return e("body").append(a),i=o.offsetWidth,a.css("overflow","scroll"),s=o.offsetWidth,i===s&&(s=a[0].clientWidth),a.remove(),n=i-s},getScrollInfo:function(t){var i=t.isWindow?"":t.element.css("overflow-x"),s=t.isWindow?"":t.element.css("overflow-y"),n="scroll"===i||"auto"===i&&t.width<t.element[0].scrollWidth,a="scroll"===s||"auto"===s&&t.height<t.element[0].scrollHeight;return{width:n?e.position.scrollbarWidth():0,height:a?e.position.scrollbarWidth():0}},getWithinInfo:function(t){var i=e(t||window),s=e.isWindow(i[0]);return{element:i,isWindow:s,offset:i.offset()||{left:0,top:0},scrollLeft:i.scrollLeft(),scrollTop:i.scrollTop(),width:s?i.width():i.outerWidth(),height:s?i.height():i.outerHeight()}}},e.fn.position=function(t){if(!t||!t.of)return p.apply(this,arguments);t=e.extend({},t);var n,c,f,m,g,v=e(t.of),y=e.position.getWithinInfo(t.within),b=e.position.getScrollInfo(y),_=v[0],x=(t.collision||"flip").split(" "),k={};return 9===_.nodeType?(c=v.width(),f=v.height(),m={top:0,left:0}):e.isWindow(_)?(c=v.width(),f=v.height(),m={top:v.scrollTop(),left:v.scrollLeft()}):_.preventDefault?(t.at="left top",c=f=0,m={top:_.pageY,left:_.pageX}):(c=v.outerWidth(),f=v.outerHeight(),m=v.offset()),g=e.extend({},m),e.each(["my","at"],function(){var e,i,s=(t[this]||"").split(" ");1===s.length&&(s=h.test(s[0])?s.concat(["center"]):l.test(s[0])?["center"].concat(s):["center","center"]),s[0]=h.test(s[0])?s[0]:"center",s[1]=l.test(s[1])?s[1]:"center",e=u.exec(s[0]),i=u.exec(s[1]),k[this]=[e?e[0]:0,i?i[0]:0],t[this]=[d.exec(s[0])[0],d.exec(s[1])[0]]}),1===x.length&&(x[1]=x[0]),"right"===t.at[0]?g.left+=c:"center"===t.at[0]&&(g.left+=c/2),"bottom"===t.at[1]?g.top+=f:"center"===t.at[1]&&(g.top+=f/2),n=i(k.at,c,f),g.left+=n[0],g.top+=n[1],this.each(function(){var h,l,u=e(this),d=u.outerWidth(),p=u.outerHeight(),_=s(this,"marginLeft"),w=s(this,"marginTop"),T=d+_+s(this,"marginRight")+b.width,D=p+w+s(this,"marginBottom")+b.height,S=e.extend({},g),M=i(k.my,u.outerWidth(),u.outerHeight());"right"===t.my[0]?S.left-=d:"center"===t.my[0]&&(S.left-=d/2),"bottom"===t.my[1]?S.top-=p:"center"===t.my[1]&&(S.top-=p/2),S.left+=M[0],S.top+=M[1],e.support.offsetFractions||(S.left=r(S.left),S.top=r(S.top)),h={marginLeft:_,marginTop:w},e.each(["left","top"],function(i,s){e.ui.position[x[i]]&&e.ui.position[x[i]][s](S,{targetWidth:c,targetHeight:f,elemWidth:d,elemHeight:p,collisionPosition:h,collisionWidth:T,collisionHeight:D,offset:[n[0]+M[0],n[1]+M[1]],my:t.my,at:t.at,within:y,elem:u})}),e.fn.bgiframe&&u.bgiframe(),t.using&&(l=function(e){var i=m.left-S.left,s=i+c-d,n=m.top-S.top,r=n+f-p,h={target:{element:v,left:m.left,top:m.top,width:c,height:f},element:{element:u,left:S.left,top:S.top,width:d,height:p},horizontal:0>s?"left":i>0?"right":"center",vertical:0>r?"top":n>0?"bottom":"middle"};d>c&&c>o(i+s)&&(h.horizontal="center"),p>f&&f>o(n+r)&&(h.vertical="middle"),h.important=a(o(i),o(s))>a(o(n),o(r))?"horizontal":"vertical",t.using.call(this,e,h)}),u.offset(e.extend(S,{using:l}))})},e.ui.position={fit:{left:function(e,t){var i,s=t.within,n=s.isWindow?s.scrollLeft:s.offset.left,o=s.width,r=e.left-t.collisionPosition.marginLeft,h=n-r,l=r+t.collisionWidth-o-n;t.collisionWidth>o?h>0&&0>=l?(i=e.left+h+t.collisionWidth-o-n,e.left+=h-i):e.left=l>0&&0>=h?n:h>l?n+o-t.collisionWidth:n:h>0?e.left+=h:l>0?e.left-=l:e.left=a(e.left-r,e.left)},top:function(e,t){var i,s=t.within,n=s.isWindow?s.scrollTop:s.offset.top,o=t.within.height,r=e.top-t.collisionPosition.marginTop,h=n-r,l=r+t.collisionHeight-o-n;t.collisionHeight>o?h>0&&0>=l?(i=e.top+h+t.collisionHeight-o-n,e.top+=h-i):e.top=l>0&&0>=h?n:h>l?n+o-t.collisionHeight:n:h>0?e.top+=h:l>0?e.top-=l:e.top=a(e.top-r,e.top)}},flip:{left:function(e,t){var i,s,n=t.within,a=n.offset.left+n.scrollLeft,r=n.width,h=n.isWindow?n.scrollLeft:n.offset.left,l=e.left-t.collisionPosition.marginLeft,u=l-h,d=l+t.collisionWidth-r-h,c="left"===t.my[0]?-t.elemWidth:"right"===t.my[0]?t.elemWidth:0,p="left"===t.at[0]?t.targetWidth:"right"===t.at[0]?-t.targetWidth:0,f=-2*t.offset[0];0>u?(i=e.left+c+p+f+t.collisionWidth-r-a,(0>i||o(u)>i)&&(e.left+=c+p+f)):d>0&&(s=e.left-t.collisionPosition.marginLeft+c+p+f-h,(s>0||d>o(s))&&(e.left+=c+p+f))},top:function(e,t){var i,s,n=t.within,a=n.offset.top+n.scrollTop,r=n.height,h=n.isWindow?n.scrollTop:n.offset.top,l=e.top-t.collisionPosition.marginTop,u=l-h,d=l+t.collisionHeight-r-h,c="top"===t.my[1],p=c?-t.elemHeight:"bottom"===t.my[1]?t.elemHeight:0,f="top"===t.at[1]?t.targetHeight:"bottom"===t.at[1]?-t.targetHeight:0,m=-2*t.offset[1];0>u?(s=e.top+p+f+m+t.collisionHeight-r-a,e.top+p+f+m>u&&(0>s||o(u)>s)&&(e.top+=p+f+m)):d>0&&(i=e.top-t.collisionPosition.marginTop+p+f+m-h,e.top+p+f+m>d&&(i>0||d>o(i))&&(e.top+=p+f+m))}},flipfit:{left:function(){e.ui.position.flip.left.apply(this,arguments),e.ui.position.fit.left.apply(this,arguments)},top:function(){e.ui.position.flip.top.apply(this,arguments),e.ui.position.fit.top.apply(this,arguments)}}},function(){var t,i,s,n,a,o=document.getElementsByTagName("body")[0],r=document.createElement("div");t=document.createElement(o?"div":"body"),s={visibility:"hidden",width:0,height:0,border:0,margin:0,background:"none"},o&&e.extend(s,{position:"absolute",left:"-1000px",top:"-1000px"});for(a in s)t.style[a]=s[a];t.appendChild(r),i=o||document.documentElement,i.insertBefore(t,i.firstChild),r.style.cssText="position: absolute; left: 10.7432222px;",n=e(r).offset().left,e.support.offsetFractions=n>10&&11>n,t.innerHTML="",i.removeChild(t)}(),e.uiBackCompat!==!1&&function(e){var i=e.fn.position;e.fn.position=function(s){if(!s||!s.offset)return i.call(this,s);var n=s.offset.split(" "),a=s.at.split(" ");return 1===n.length&&(n[1]=n[0]),/^\d/.test(n[0])&&(n[0]="+"+n[0]),/^\d/.test(n[1])&&(n[1]="+"+n[1]),1===a.length&&(/left|center|right/.test(a[0])?a[1]="center":(a[1]=a[0],a[0]="center")),i.call(this,e.extend(s,{at:a[0]+n[0]+" "+a[1]+n[1],offset:t}))}}(jQuery)})(jQuery);(function(e){e.widget("ui.draggable",e.ui.mouse,{version:"1.9.2",widgetEventPrefix:"drag",options:{addClasses:!0,appendTo:"parent",axis:!1,connectToSortable:!1,containment:!1,cursor:"auto",cursorAt:!1,grid:!1,handle:!1,helper:"original",iframeFix:!1,opacity:!1,refreshPositions:!1,revert:!1,revertDuration:500,scope:"default",scroll:!0,scrollSensitivity:20,scrollSpeed:20,snap:!1,snapMode:"both",snapTolerance:20,stack:!1,zIndex:!1},_create:function(){"original"!=this.options.helper||/^(?:r|a|f)/.test(this.element.css("position"))||(this.element[0].style.position="relative"),this.options.addClasses&&this.element.addClass("ui-draggable"),this.options.disabled&&this.element.addClass("ui-draggable-disabled"),this._mouseInit()},_destroy:function(){this.element.removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled"),this._mouseDestroy()},_mouseCapture:function(t){var i=this.options;return this.helper||i.disabled||e(t.target).is(".ui-resizable-handle")?!1:(this.handle=this._getHandle(t),this.handle?(e(i.iframeFix===!0?"iframe":i.iframeFix).each(function(){e('<div class="ui-draggable-iframeFix" style="background: #fff;"></div>').css({width:this.offsetWidth+"px",height:this.offsetHeight+"px",position:"absolute",opacity:"0.001",zIndex:1e3}).css(e(this).offset()).appendTo("body")}),!0):!1)},_mouseStart:function(t){var i=this.options;return this.helper=this._createHelper(t),this.helper.addClass("ui-draggable-dragging"),this._cacheHelperProportions(),e.ui.ddmanager&&(e.ui.ddmanager.current=this),this._cacheMargins(),this.cssPosition=this.helper.css("position"),this.scrollParent=this.helper.scrollParent(),this.offset=this.positionAbs=this.element.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},e.extend(this.offset,{click:{left:t.pageX-this.offset.left,top:t.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.originalPosition=this.position=this._generatePosition(t),this.originalPageX=t.pageX,this.originalPageY=t.pageY,i.cursorAt&&this._adjustOffsetFromHelper(i.cursorAt),i.containment&&this._setContainment(),this._trigger("start",t)===!1?(this._clear(),!1):(this._cacheHelperProportions(),e.ui.ddmanager&&!i.dropBehaviour&&e.ui.ddmanager.prepareOffsets(this,t),this._mouseDrag(t,!0),e.ui.ddmanager&&e.ui.ddmanager.dragStart(this,t),!0)},_mouseDrag:function(t,i){if(this.position=this._generatePosition(t),this.positionAbs=this._convertPositionTo("absolute"),!i){var s=this._uiHash();if(this._trigger("drag",t,s)===!1)return this._mouseUp({}),!1;this.position=s.position}return this.options.axis&&"y"==this.options.axis||(this.helper[0].style.left=this.position.left+"px"),this.options.axis&&"x"==this.options.axis||(this.helper[0].style.top=this.position.top+"px"),e.ui.ddmanager&&e.ui.ddmanager.drag(this,t),!1},_mouseStop:function(t){var i=!1;e.ui.ddmanager&&!this.options.dropBehaviour&&(i=e.ui.ddmanager.drop(this,t)),this.dropped&&(i=this.dropped,this.dropped=!1);for(var s=this.element[0],n=!1;s&&(s=s.parentNode);)s==document&&(n=!0);if(!n&&"original"===this.options.helper)return!1;if("invalid"==this.options.revert&&!i||"valid"==this.options.revert&&i||this.options.revert===!0||e.isFunction(this.options.revert)&&this.options.revert.call(this.element,i)){var a=this;e(this.helper).animate(this.originalPosition,parseInt(this.options.revertDuration,10),function(){a._trigger("stop",t)!==!1&&a._clear()})}else this._trigger("stop",t)!==!1&&this._clear();return!1},_mouseUp:function(t){return e("div.ui-draggable-iframeFix").each(function(){this.parentNode.removeChild(this)}),e.ui.ddmanager&&e.ui.ddmanager.dragStop(this,t),e.ui.mouse.prototype._mouseUp.call(this,t)},cancel:function(){return this.helper.is(".ui-draggable-dragging")?this._mouseUp({}):this._clear(),this},_getHandle:function(t){var i=this.options.handle&&e(this.options.handle,this.element).length?!1:!0;return e(this.options.handle,this.element).find("*").andSelf().each(function(){this==t.target&&(i=!0)}),i},_createHelper:function(t){var i=this.options,s=e.isFunction(i.helper)?e(i.helper.apply(this.element[0],[t])):"clone"==i.helper?this.element.clone().removeAttr("id"):this.element;return s.parents("body").length||s.appendTo("parent"==i.appendTo?this.element[0].parentNode:i.appendTo),s[0]==this.element[0]||/(fixed|absolute)/.test(s.css("position"))||s.css("position","absolute"),s},_adjustOffsetFromHelper:function(t){"string"==typeof t&&(t=t.split(" ")),e.isArray(t)&&(t={left:+t[0],top:+t[1]||0}),"left"in t&&(this.offset.click.left=t.left+this.margins.left),"right"in t&&(this.offset.click.left=this.helperProportions.width-t.right+this.margins.left),"top"in t&&(this.offset.click.top=t.top+this.margins.top),"bottom"in t&&(this.offset.click.top=this.helperProportions.height-t.bottom+this.margins.top)},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var t=this.offsetParent.offset();return"absolute"==this.cssPosition&&this.scrollParent[0]!=document&&e.contains(this.scrollParent[0],this.offsetParent[0])&&(t.left+=this.scrollParent.scrollLeft(),t.top+=this.scrollParent.scrollTop()),(this.offsetParent[0]==document.body||this.offsetParent[0].tagName&&"html"==this.offsetParent[0].tagName.toLowerCase()&&e.ui.ie)&&(t={top:0,left:0}),{top:t.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:t.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"==this.cssPosition){var e=this.element.position();return{top:e.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:e.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.element.css("marginLeft"),10)||0,top:parseInt(this.element.css("marginTop"),10)||0,right:parseInt(this.element.css("marginRight"),10)||0,bottom:parseInt(this.element.css("marginBottom"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var t=this.options;if("parent"==t.containment&&(t.containment=this.helper[0].parentNode),("document"==t.containment||"window"==t.containment)&&(this.containment=["document"==t.containment?0:e(window).scrollLeft()-this.offset.relative.left-this.offset.parent.left,"document"==t.containment?0:e(window).scrollTop()-this.offset.relative.top-this.offset.parent.top,("document"==t.containment?0:e(window).scrollLeft())+e("document"==t.containment?document:window).width()-this.helperProportions.width-this.margins.left,("document"==t.containment?0:e(window).scrollTop())+(e("document"==t.containment?document:window).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]),/^(document|window|parent)$/.test(t.containment)||t.containment.constructor==Array)t.containment.constructor==Array&&(this.containment=t.containment);else{var i=e(t.containment),s=i[0];if(!s)return;i.offset();var n="hidden"!=e(s).css("overflow");this.containment=[(parseInt(e(s).css("borderLeftWidth"),10)||0)+(parseInt(e(s).css("paddingLeft"),10)||0),(parseInt(e(s).css("borderTopWidth"),10)||0)+(parseInt(e(s).css("paddingTop"),10)||0),(n?Math.max(s.scrollWidth,s.offsetWidth):s.offsetWidth)-(parseInt(e(s).css("borderLeftWidth"),10)||0)-(parseInt(e(s).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left-this.margins.right,(n?Math.max(s.scrollHeight,s.offsetHeight):s.offsetHeight)-(parseInt(e(s).css("borderTopWidth"),10)||0)-(parseInt(e(s).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top-this.margins.bottom],this.relative_container=i}},_convertPositionTo:function(t,i){i||(i=this.position);var s="absolute"==t?1:-1,n=(this.options,"absolute"!=this.cssPosition||this.scrollParent[0]!=document&&e.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent),a=/(html|body)/i.test(n[0].tagName);return{top:i.top+this.offset.relative.top*s+this.offset.parent.top*s-("fixed"==this.cssPosition?-this.scrollParent.scrollTop():a?0:n.scrollTop())*s,left:i.left+this.offset.relative.left*s+this.offset.parent.left*s-("fixed"==this.cssPosition?-this.scrollParent.scrollLeft():a?0:n.scrollLeft())*s}},_generatePosition:function(t){var i=this.options,s="absolute"!=this.cssPosition||this.scrollParent[0]!=document&&e.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,n=/(html|body)/i.test(s[0].tagName),a=t.pageX,r=t.pageY;if(this.originalPosition){var o;if(this.containment){if(this.relative_container){var h=this.relative_container.offset();o=[this.containment[0]+h.left,this.containment[1]+h.top,this.containment[2]+h.left,this.containment[3]+h.top]}else o=this.containment;t.pageX-this.offset.click.left<o[0]&&(a=o[0]+this.offset.click.left),t.pageY-this.offset.click.top<o[1]&&(r=o[1]+this.offset.click.top),t.pageX-this.offset.click.left>o[2]&&(a=o[2]+this.offset.click.left),t.pageY-this.offset.click.top>o[3]&&(r=o[3]+this.offset.click.top)}if(i.grid){var l=i.grid[1]?this.originalPageY+Math.round((r-this.originalPageY)/i.grid[1])*i.grid[1]:this.originalPageY;r=o?l-this.offset.click.top<o[1]||l-this.offset.click.top>o[3]?l-this.offset.click.top<o[1]?l+i.grid[1]:l-i.grid[1]:l:l;var u=i.grid[0]?this.originalPageX+Math.round((a-this.originalPageX)/i.grid[0])*i.grid[0]:this.originalPageX;a=o?u-this.offset.click.left<o[0]||u-this.offset.click.left>o[2]?u-this.offset.click.left<o[0]?u+i.grid[0]:u-i.grid[0]:u:u}}return{top:r-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"==this.cssPosition?-this.scrollParent.scrollTop():n?0:s.scrollTop()),left:a-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"==this.cssPosition?-this.scrollParent.scrollLeft():n?0:s.scrollLeft())}},_clear:function(){this.helper.removeClass("ui-draggable-dragging"),this.helper[0]==this.element[0]||this.cancelHelperRemoval||this.helper.remove(),this.helper=null,this.cancelHelperRemoval=!1},_trigger:function(t,i,s){return s=s||this._uiHash(),e.ui.plugin.call(this,t,[i,s]),"drag"==t&&(this.positionAbs=this._convertPositionTo("absolute")),e.Widget.prototype._trigger.call(this,t,i,s)},plugins:{},_uiHash:function(){return{helper:this.helper,position:this.position,originalPosition:this.originalPosition,offset:this.positionAbs}}}),e.ui.plugin.add("draggable","connectToSortable",{start:function(t,i){var s=e(this).data("draggable"),n=s.options,a=e.extend({},i,{item:s.element});s.sortables=[],e(n.connectToSortable).each(function(){var i=e.data(this,"sortable");i&&!i.options.disabled&&(s.sortables.push({instance:i,shouldRevert:i.options.revert}),i.refreshPositions(),i._trigger("activate",t,a))})},stop:function(t,i){var s=e(this).data("draggable"),n=e.extend({},i,{item:s.element});e.each(s.sortables,function(){this.instance.isOver?(this.instance.isOver=0,s.cancelHelperRemoval=!0,this.instance.cancelHelperRemoval=!1,this.shouldRevert&&(this.instance.options.revert=!0),this.instance._mouseStop(t),this.instance.options.helper=this.instance.options._helper,"original"==s.options.helper&&this.instance.currentItem.css({top:"auto",left:"auto"})):(this.instance.cancelHelperRemoval=!1,this.instance._trigger("deactivate",t,n))})},drag:function(t,i){var s=e(this).data("draggable"),n=this;e.each(s.sortables,function(){var a=!1,r=this;this.instance.positionAbs=s.positionAbs,this.instance.helperProportions=s.helperProportions,this.instance.offset.click=s.offset.click,this.instance._intersectsWith(this.instance.containerCache)&&(a=!0,e.each(s.sortables,function(){return this.instance.positionAbs=s.positionAbs,this.instance.helperProportions=s.helperProportions,this.instance.offset.click=s.offset.click,this!=r&&this.instance._intersectsWith(this.instance.containerCache)&&e.ui.contains(r.instance.element[0],this.instance.element[0])&&(a=!1),a})),a?(this.instance.isOver||(this.instance.isOver=1,this.instance.currentItem=e(n).clone().removeAttr("id").appendTo(this.instance.element).data("sortable-item",!0),this.instance.options._helper=this.instance.options.helper,this.instance.options.helper=function(){return i.helper[0]},t.target=this.instance.currentItem[0],this.instance._mouseCapture(t,!0),this.instance._mouseStart(t,!0,!0),this.instance.offset.click.top=s.offset.click.top,this.instance.offset.click.left=s.offset.click.left,this.instance.offset.parent.left-=s.offset.parent.left-this.instance.offset.parent.left,this.instance.offset.parent.top-=s.offset.parent.top-this.instance.offset.parent.top,s._trigger("toSortable",t),s.dropped=this.instance.element,s.currentItem=s.element,this.instance.fromOutside=s),this.instance.currentItem&&this.instance._mouseDrag(t)):this.instance.isOver&&(this.instance.isOver=0,this.instance.cancelHelperRemoval=!0,this.instance.options.revert=!1,this.instance._trigger("out",t,this.instance._uiHash(this.instance)),this.instance._mouseStop(t,!0),this.instance.options.helper=this.instance.options._helper,this.instance.currentItem.remove(),this.instance.placeholder&&this.instance.placeholder.remove(),s._trigger("fromSortable",t),s.dropped=!1)})}}),e.ui.plugin.add("draggable","cursor",{start:function(){var t=e("body"),i=e(this).data("draggable").options;t.css("cursor")&&(i._cursor=t.css("cursor")),t.css("cursor",i.cursor)},stop:function(){var t=e(this).data("draggable").options;t._cursor&&e("body").css("cursor",t._cursor)}}),e.ui.plugin.add("draggable","opacity",{start:function(t,i){var s=e(i.helper),n=e(this).data("draggable").options;s.css("opacity")&&(n._opacity=s.css("opacity")),s.css("opacity",n.opacity)},stop:function(t,i){var s=e(this).data("draggable").options;s._opacity&&e(i.helper).css("opacity",s._opacity)}}),e.ui.plugin.add("draggable","scroll",{start:function(){var t=e(this).data("draggable");t.scrollParent[0]!=document&&"HTML"!=t.scrollParent[0].tagName&&(t.overflowOffset=t.scrollParent.offset())},drag:function(t){var i=e(this).data("draggable"),s=i.options,n=!1;i.scrollParent[0]!=document&&"HTML"!=i.scrollParent[0].tagName?(s.axis&&"x"==s.axis||(i.overflowOffset.top+i.scrollParent[0].offsetHeight-t.pageY<s.scrollSensitivity?i.scrollParent[0].scrollTop=n=i.scrollParent[0].scrollTop+s.scrollSpeed:t.pageY-i.overflowOffset.top<s.scrollSensitivity&&(i.scrollParent[0].scrollTop=n=i.scrollParent[0].scrollTop-s.scrollSpeed)),s.axis&&"y"==s.axis||(i.overflowOffset.left+i.scrollParent[0].offsetWidth-t.pageX<s.scrollSensitivity?i.scrollParent[0].scrollLeft=n=i.scrollParent[0].scrollLeft+s.scrollSpeed:t.pageX-i.overflowOffset.left<s.scrollSensitivity&&(i.scrollParent[0].scrollLeft=n=i.scrollParent[0].scrollLeft-s.scrollSpeed))):(s.axis&&"x"==s.axis||(t.pageY-e(document).scrollTop()<s.scrollSensitivity?n=e(document).scrollTop(e(document).scrollTop()-s.scrollSpeed):e(window).height()-(t.pageY-e(document).scrollTop())<s.scrollSensitivity&&(n=e(document).scrollTop(e(document).scrollTop()+s.scrollSpeed))),s.axis&&"y"==s.axis||(t.pageX-e(document).scrollLeft()<s.scrollSensitivity?n=e(document).scrollLeft(e(document).scrollLeft()-s.scrollSpeed):e(window).width()-(t.pageX-e(document).scrollLeft())<s.scrollSensitivity&&(n=e(document).scrollLeft(e(document).scrollLeft()+s.scrollSpeed)))),n!==!1&&e.ui.ddmanager&&!s.dropBehaviour&&e.ui.ddmanager.prepareOffsets(i,t)}}),e.ui.plugin.add("draggable","snap",{start:function(){var t=e(this).data("draggable"),i=t.options;t.snapElements=[],e(i.snap.constructor!=String?i.snap.items||":data(draggable)":i.snap).each(function(){var i=e(this),s=i.offset();this!=t.element[0]&&t.snapElements.push({item:this,width:i.outerWidth(),height:i.outerHeight(),top:s.top,left:s.left})})},drag:function(t,i){for(var s=e(this).data("draggable"),n=s.options,a=n.snapTolerance,r=i.offset.left,o=r+s.helperProportions.width,h=i.offset.top,l=h+s.helperProportions.height,u=s.snapElements.length-1;u>=0;u--){var d=s.snapElements[u].left,c=d+s.snapElements[u].width,p=s.snapElements[u].top,f=p+s.snapElements[u].height;if(r>d-a&&c+a>r&&h>p-a&&f+a>h||r>d-a&&c+a>r&&l>p-a&&f+a>l||o>d-a&&c+a>o&&h>p-a&&f+a>h||o>d-a&&c+a>o&&l>p-a&&f+a>l){if("inner"!=n.snapMode){var m=a>=Math.abs(p-l),g=a>=Math.abs(f-h),v=a>=Math.abs(d-o),y=a>=Math.abs(c-r);m&&(i.position.top=s._convertPositionTo("relative",{top:p-s.helperProportions.height,left:0}).top-s.margins.top),g&&(i.position.top=s._convertPositionTo("relative",{top:f,left:0}).top-s.margins.top),v&&(i.position.left=s._convertPositionTo("relative",{top:0,left:d-s.helperProportions.width}).left-s.margins.left),y&&(i.position.left=s._convertPositionTo("relative",{top:0,left:c}).left-s.margins.left)}var b=m||g||v||y;if("outer"!=n.snapMode){var m=a>=Math.abs(p-h),g=a>=Math.abs(f-l),v=a>=Math.abs(d-r),y=a>=Math.abs(c-o);m&&(i.position.top=s._convertPositionTo("relative",{top:p,left:0}).top-s.margins.top),g&&(i.position.top=s._convertPositionTo("relative",{top:f-s.helperProportions.height,left:0}).top-s.margins.top),v&&(i.position.left=s._convertPositionTo("relative",{top:0,left:d}).left-s.margins.left),y&&(i.position.left=s._convertPositionTo("relative",{top:0,left:c-s.helperProportions.width}).left-s.margins.left)}!s.snapElements[u].snapping&&(m||g||v||y||b)&&s.options.snap.snap&&s.options.snap.snap.call(s.element,t,e.extend(s._uiHash(),{snapItem:s.snapElements[u].item})),s.snapElements[u].snapping=m||g||v||y||b}else s.snapElements[u].snapping&&s.options.snap.release&&s.options.snap.release.call(s.element,t,e.extend(s._uiHash(),{snapItem:s.snapElements[u].item})),s.snapElements[u].snapping=!1}}}),e.ui.plugin.add("draggable","stack",{start:function(){var t=e(this).data("draggable").options,i=e.makeArray(e(t.stack)).sort(function(t,i){return(parseInt(e(t).css("zIndex"),10)||0)-(parseInt(e(i).css("zIndex"),10)||0)});if(i.length){var s=parseInt(i[0].style.zIndex)||0;e(i).each(function(e){this.style.zIndex=s+e}),this[0].style.zIndex=s+i.length}}}),e.ui.plugin.add("draggable","zIndex",{start:function(t,i){var s=e(i.helper),n=e(this).data("draggable").options;s.css("zIndex")&&(n._zIndex=s.css("zIndex")),s.css("zIndex",n.zIndex)},stop:function(t,i){var s=e(this).data("draggable").options;s._zIndex&&e(i.helper).css("zIndex",s._zIndex)}})})(jQuery);(function(e){e.widget("ui.droppable",{version:"1.9.2",widgetEventPrefix:"drop",options:{accept:"*",activeClass:!1,addClasses:!0,greedy:!1,hoverClass:!1,scope:"default",tolerance:"intersect"},_create:function(){var t=this.options,i=t.accept;this.isover=0,this.isout=1,this.accept=e.isFunction(i)?i:function(e){return e.is(i)},this.proportions={width:this.element[0].offsetWidth,height:this.element[0].offsetHeight},e.ui.ddmanager.droppables[t.scope]=e.ui.ddmanager.droppables[t.scope]||[],e.ui.ddmanager.droppables[t.scope].push(this),t.addClasses&&this.element.addClass("ui-droppable")},_destroy:function(){for(var t=e.ui.ddmanager.droppables[this.options.scope],i=0;t.length>i;i++)t[i]==this&&t.splice(i,1);this.element.removeClass("ui-droppable ui-droppable-disabled")},_setOption:function(t,i){"accept"==t&&(this.accept=e.isFunction(i)?i:function(e){return e.is(i)}),e.Widget.prototype._setOption.apply(this,arguments)},_activate:function(t){var i=e.ui.ddmanager.current;this.options.activeClass&&this.element.addClass(this.options.activeClass),i&&this._trigger("activate",t,this.ui(i))},_deactivate:function(t){var i=e.ui.ddmanager.current;this.options.activeClass&&this.element.removeClass(this.options.activeClass),i&&this._trigger("deactivate",t,this.ui(i))},_over:function(t){var i=e.ui.ddmanager.current;i&&(i.currentItem||i.element)[0]!=this.element[0]&&this.accept.call(this.element[0],i.currentItem||i.element)&&(this.options.hoverClass&&this.element.addClass(this.options.hoverClass),this._trigger("over",t,this.ui(i)))},_out:function(t){var i=e.ui.ddmanager.current;i&&(i.currentItem||i.element)[0]!=this.element[0]&&this.accept.call(this.element[0],i.currentItem||i.element)&&(this.options.hoverClass&&this.element.removeClass(this.options.hoverClass),this._trigger("out",t,this.ui(i)))},_drop:function(t,i){var s=i||e.ui.ddmanager.current;if(!s||(s.currentItem||s.element)[0]==this.element[0])return!1;var n=!1;return this.element.find(":data(droppable)").not(".ui-draggable-dragging").each(function(){var t=e.data(this,"droppable");return t.options.greedy&&!t.options.disabled&&t.options.scope==s.options.scope&&t.accept.call(t.element[0],s.currentItem||s.element)&&e.ui.intersect(s,e.extend(t,{offset:t.element.offset()}),t.options.tolerance)?(n=!0,!1):undefined}),n?!1:this.accept.call(this.element[0],s.currentItem||s.element)?(this.options.activeClass&&this.element.removeClass(this.options.activeClass),this.options.hoverClass&&this.element.removeClass(this.options.hoverClass),this._trigger("drop",t,this.ui(s)),this.element):!1},ui:function(e){return{draggable:e.currentItem||e.element,helper:e.helper,position:e.position,offset:e.positionAbs}}}),e.ui.intersect=function(t,i,s){if(!i.offset)return!1;var n=(t.positionAbs||t.position.absolute).left,a=n+t.helperProportions.width,r=(t.positionAbs||t.position.absolute).top,o=r+t.helperProportions.height,h=i.offset.left,l=h+i.proportions.width,u=i.offset.top,d=u+i.proportions.height;switch(s){case"fit":return n>=h&&l>=a&&r>=u&&d>=o;case"intersect":return n+t.helperProportions.width/2>h&&l>a-t.helperProportions.width/2&&r+t.helperProportions.height/2>u&&d>o-t.helperProportions.height/2;case"pointer":var c=(t.positionAbs||t.position.absolute).left+(t.clickOffset||t.offset.click).left,p=(t.positionAbs||t.position.absolute).top+(t.clickOffset||t.offset.click).top,f=e.ui.isOver(p,c,u,h,i.proportions.height,i.proportions.width);return f;case"touch":return(r>=u&&d>=r||o>=u&&d>=o||u>r&&o>d)&&(n>=h&&l>=n||a>=h&&l>=a||h>n&&a>l);default:return!1}},e.ui.ddmanager={current:null,droppables:{"default":[]},prepareOffsets:function(t,i){var s=e.ui.ddmanager.droppables[t.options.scope]||[],n=i?i.type:null,a=(t.currentItem||t.element).find(":data(droppable)").andSelf();e:for(var r=0;s.length>r;r++)if(!(s[r].options.disabled||t&&!s[r].accept.call(s[r].element[0],t.currentItem||t.element))){for(var o=0;a.length>o;o++)if(a[o]==s[r].element[0]){s[r].proportions.height=0;continue e}s[r].visible="none"!=s[r].element.css("display"),s[r].visible&&("mousedown"==n&&s[r]._activate.call(s[r],i),s[r].offset=s[r].element.offset(),s[r].proportions={width:s[r].element[0].offsetWidth,height:s[r].element[0].offsetHeight})}},drop:function(t,i){var s=!1;return e.each(e.ui.ddmanager.droppables[t.options.scope]||[],function(){this.options&&(!this.options.disabled&&this.visible&&e.ui.intersect(t,this,this.options.tolerance)&&(s=this._drop.call(this,i)||s),!this.options.disabled&&this.visible&&this.accept.call(this.element[0],t.currentItem||t.element)&&(this.isout=1,this.isover=0,this._deactivate.call(this,i)))}),s},dragStart:function(t,i){t.element.parentsUntil("body").bind("scroll.droppable",function(){t.options.refreshPositions||e.ui.ddmanager.prepareOffsets(t,i)})},drag:function(t,i){t.options.refreshPositions&&e.ui.ddmanager.prepareOffsets(t,i),e.each(e.ui.ddmanager.droppables[t.options.scope]||[],function(){if(!this.options.disabled&&!this.greedyChild&&this.visible){var s=e.ui.intersect(t,this,this.options.tolerance),n=s||1!=this.isover?s&&0==this.isover?"isover":null:"isout";if(n){var a;if(this.options.greedy){var r=this.options.scope,o=this.element.parents(":data(droppable)").filter(function(){return e.data(this,"droppable").options.scope===r});o.length&&(a=e.data(o[0],"droppable"),a.greedyChild="isover"==n?1:0)}a&&"isover"==n&&(a.isover=0,a.isout=1,a._out.call(a,i)),this[n]=1,this["isout"==n?"isover":"isout"]=0,this["isover"==n?"_over":"_out"].call(this,i),a&&"isout"==n&&(a.isout=0,a.isover=1,a._over.call(a,i))}}})},dragStop:function(t,i){t.element.parentsUntil("body").unbind("scroll.droppable"),t.options.refreshPositions||e.ui.ddmanager.prepareOffsets(t,i)}}})(jQuery);(function(e){e.widget("ui.resizable",e.ui.mouse,{version:"1.9.2",widgetEventPrefix:"resize",options:{alsoResize:!1,animate:!1,animateDuration:"slow",animateEasing:"swing",aspectRatio:!1,autoHide:!1,containment:!1,ghost:!1,grid:!1,handles:"e,s,se",helper:!1,maxHeight:null,maxWidth:null,minHeight:10,minWidth:10,zIndex:1e3},_create:function(){var t=this,i=this.options;if(this.element.addClass("ui-resizable"),e.extend(this,{_aspectRatio:!!i.aspectRatio,aspectRatio:i.aspectRatio,originalElement:this.element,_proportionallyResizeElements:[],_helper:i.helper||i.ghost||i.animate?i.helper||"ui-resizable-helper":null}),this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)&&(this.element.wrap(e('<div class="ui-wrapper" style="overflow: hidden;"></div>').css({position:this.element.css("position"),width:this.element.outerWidth(),height:this.element.outerHeight(),top:this.element.css("top"),left:this.element.css("left")})),this.element=this.element.parent().data("resizable",this.element.data("resizable")),this.elementIsWrapper=!0,this.element.css({marginLeft:this.originalElement.css("marginLeft"),marginTop:this.originalElement.css("marginTop"),marginRight:this.originalElement.css("marginRight"),marginBottom:this.originalElement.css("marginBottom")}),this.originalElement.css({marginLeft:0,marginTop:0,marginRight:0,marginBottom:0}),this.originalResizeStyle=this.originalElement.css("resize"),this.originalElement.css("resize","none"),this._proportionallyResizeElements.push(this.originalElement.css({position:"static",zoom:1,display:"block"})),this.originalElement.css({margin:this.originalElement.css("margin")}),this._proportionallyResize()),this.handles=i.handles||(e(".ui-resizable-handle",this.element).length?{n:".ui-resizable-n",e:".ui-resizable-e",s:".ui-resizable-s",w:".ui-resizable-w",se:".ui-resizable-se",sw:".ui-resizable-sw",ne:".ui-resizable-ne",nw:".ui-resizable-nw"}:"e,s,se"),this.handles.constructor==String){"all"==this.handles&&(this.handles="n,e,s,w,se,sw,ne,nw");var s=this.handles.split(",");this.handles={};for(var n=0;s.length>n;n++){var a=e.trim(s[n]),o="ui-resizable-"+a,r=e('<div class="ui-resizable-handle '+o+'"></div>');r.css({zIndex:i.zIndex}),"se"==a&&r.addClass("ui-icon ui-icon-gripsmall-diagonal-se"),this.handles[a]=".ui-resizable-"+a,this.element.append(r)}}this._renderAxis=function(t){t=t||this.element;for(var i in this.handles){if(this.handles[i].constructor==String&&(this.handles[i]=e(this.handles[i],this.element).show()),this.elementIsWrapper&&this.originalElement[0].nodeName.match(/textarea|input|select|button/i)){var s=e(this.handles[i],this.element),n=0;n=/sw|ne|nw|se|n|s/.test(i)?s.outerHeight():s.outerWidth();var a=["padding",/ne|nw|n/.test(i)?"Top":/se|sw|s/.test(i)?"Bottom":/^e$/.test(i)?"Right":"Left"].join("");t.css(a,n),this._proportionallyResize()}e(this.handles[i]).length}},this._renderAxis(this.element),this._handles=e(".ui-resizable-handle",this.element).disableSelection(),this._handles.mouseover(function(){if(!t.resizing){if(this.className)var e=this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);t.axis=e&&e[1]?e[1]:"se"}}),i.autoHide&&(this._handles.hide(),e(this.element).addClass("ui-resizable-autohide").mouseenter(function(){i.disabled||(e(this).removeClass("ui-resizable-autohide"),t._handles.show())}).mouseleave(function(){i.disabled||t.resizing||(e(this).addClass("ui-resizable-autohide"),t._handles.hide())})),this._mouseInit()},_destroy:function(){this._mouseDestroy();var t=function(t){e(t).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing").removeData("resizable").removeData("ui-resizable").unbind(".resizable").find(".ui-resizable-handle").remove()};if(this.elementIsWrapper){t(this.element);var i=this.element;this.originalElement.css({position:i.css("position"),width:i.outerWidth(),height:i.outerHeight(),top:i.css("top"),left:i.css("left")}).insertAfter(i),i.remove()}return this.originalElement.css("resize",this.originalResizeStyle),t(this.originalElement),this},_mouseCapture:function(t){var i=!1;for(var s in this.handles)e(this.handles[s])[0]==t.target&&(i=!0);return!this.options.disabled&&i},_mouseStart:function(i){var s=this.options,n=this.element.position(),a=this.element;this.resizing=!0,this.documentScroll={top:e(document).scrollTop(),left:e(document).scrollLeft()},(a.is(".ui-draggable")||/absolute/.test(a.css("position")))&&a.css({position:"absolute",top:n.top,left:n.left}),this._renderProxy();var o=t(this.helper.css("left")),r=t(this.helper.css("top"));s.containment&&(o+=e(s.containment).scrollLeft()||0,r+=e(s.containment).scrollTop()||0),this.offset=this.helper.offset(),this.position={left:o,top:r},this.size=this._helper?{width:a.outerWidth(),height:a.outerHeight()}:{width:a.width(),height:a.height()},this.originalSize=this._helper?{width:a.outerWidth(),height:a.outerHeight()}:{width:a.width(),height:a.height()},this.originalPosition={left:o,top:r},this.sizeDiff={width:a.outerWidth()-a.width(),height:a.outerHeight()-a.height()},this.originalMousePosition={left:i.pageX,top:i.pageY},this.aspectRatio="number"==typeof s.aspectRatio?s.aspectRatio:this.originalSize.width/this.originalSize.height||1;var h=e(".ui-resizable-"+this.axis).css("cursor");return e("body").css("cursor","auto"==h?this.axis+"-resize":h),a.addClass("ui-resizable-resizing"),this._propagate("start",i),!0},_mouseDrag:function(e){var t=this.helper,i=(this.options,this.originalMousePosition),s=this.axis,n=e.pageX-i.left||0,a=e.pageY-i.top||0,o=this._change[s];if(!o)return!1;var r=o.apply(this,[e,n,a]);return this._updateVirtualBoundaries(e.shiftKey),(this._aspectRatio||e.shiftKey)&&(r=this._updateRatio(r,e)),r=this._respectSize(r,e),this._propagate("resize",e),t.css({top:this.position.top+"px",left:this.position.left+"px",width:this.size.width+"px",height:this.size.height+"px"}),!this._helper&&this._proportionallyResizeElements.length&&this._proportionallyResize(),this._updateCache(r),this._trigger("resize",e,this.ui()),!1},_mouseStop:function(t){this.resizing=!1;var i=this.options,s=this;if(this._helper){var n=this._proportionallyResizeElements,a=n.length&&/textarea/i.test(n[0].nodeName),o=a&&e.ui.hasScroll(n[0],"left")?0:s.sizeDiff.height,r=a?0:s.sizeDiff.width,h={width:s.helper.width()-r,height:s.helper.height()-o},l=parseInt(s.element.css("left"),10)+(s.position.left-s.originalPosition.left)||null,u=parseInt(s.element.css("top"),10)+(s.position.top-s.originalPosition.top)||null;i.animate||this.element.css(e.extend(h,{top:u,left:l})),s.helper.height(s.size.height),s.helper.width(s.size.width),this._helper&&!i.animate&&this._proportionallyResize()}return e("body").css("cursor","auto"),this.element.removeClass("ui-resizable-resizing"),this._propagate("stop",t),this._helper&&this.helper.remove(),!1},_updateVirtualBoundaries:function(e){var t,s,n,a,o,r=this.options;o={minWidth:i(r.minWidth)?r.minWidth:0,maxWidth:i(r.maxWidth)?r.maxWidth:1/0,minHeight:i(r.minHeight)?r.minHeight:0,maxHeight:i(r.maxHeight)?r.maxHeight:1/0},(this._aspectRatio||e)&&(t=o.minHeight*this.aspectRatio,n=o.minWidth/this.aspectRatio,s=o.maxHeight*this.aspectRatio,a=o.maxWidth/this.aspectRatio,t>o.minWidth&&(o.minWidth=t),n>o.minHeight&&(o.minHeight=n),o.maxWidth>s&&(o.maxWidth=s),o.maxHeight>a&&(o.maxHeight=a)),this._vBoundaries=o},_updateCache:function(e){this.options,this.offset=this.helper.offset(),i(e.left)&&(this.position.left=e.left),i(e.top)&&(this.position.top=e.top),i(e.height)&&(this.size.height=e.height),i(e.width)&&(this.size.width=e.width)},_updateRatio:function(e){var t=(this.options,this.position),s=this.size,n=this.axis;return i(e.height)?e.width=e.height*this.aspectRatio:i(e.width)&&(e.height=e.width/this.aspectRatio),"sw"==n&&(e.left=t.left+(s.width-e.width),e.top=null),"nw"==n&&(e.top=t.top+(s.height-e.height),e.left=t.left+(s.width-e.width)),e},_respectSize:function(e,t){var s=(this.helper,this._vBoundaries),n=(this._aspectRatio||t.shiftKey,this.axis),a=i(e.width)&&s.maxWidth&&s.maxWidth<e.width,o=i(e.height)&&s.maxHeight&&s.maxHeight<e.height,r=i(e.width)&&s.minWidth&&s.minWidth>e.width,h=i(e.height)&&s.minHeight&&s.minHeight>e.height;r&&(e.width=s.minWidth),h&&(e.height=s.minHeight),a&&(e.width=s.maxWidth),o&&(e.height=s.maxHeight);var l=this.originalPosition.left+this.originalSize.width,u=this.position.top+this.size.height,d=/sw|nw|w/.test(n),c=/nw|ne|n/.test(n);r&&d&&(e.left=l-s.minWidth),a&&d&&(e.left=l-s.maxWidth),h&&c&&(e.top=u-s.minHeight),o&&c&&(e.top=u-s.maxHeight);var p=!e.width&&!e.height;return p&&!e.left&&e.top?e.top=null:p&&!e.top&&e.left&&(e.left=null),e},_proportionallyResize:function(){if(this.options,this._proportionallyResizeElements.length)for(var t=this.helper||this.element,i=0;this._proportionallyResizeElements.length>i;i++){var s=this._proportionallyResizeElements[i];if(!this.borderDif){var n=[s.css("borderTopWidth"),s.css("borderRightWidth"),s.css("borderBottomWidth"),s.css("borderLeftWidth")],a=[s.css("paddingTop"),s.css("paddingRight"),s.css("paddingBottom"),s.css("paddingLeft")];this.borderDif=e.map(n,function(e,t){var i=parseInt(e,10)||0,s=parseInt(a[t],10)||0;return i+s})}s.css({height:t.height()-this.borderDif[0]-this.borderDif[2]||0,width:t.width()-this.borderDif[1]-this.borderDif[3]||0})}},_renderProxy:function(){var t=this.element,i=this.options;if(this.elementOffset=t.offset(),this._helper){this.helper=this.helper||e('<div style="overflow:hidden;"></div>');var s=e.ui.ie6?1:0,n=e.ui.ie6?2:-1;this.helper.addClass(this._helper).css({width:this.element.outerWidth()+n,height:this.element.outerHeight()+n,position:"absolute",left:this.elementOffset.left-s+"px",top:this.elementOffset.top-s+"px",zIndex:++i.zIndex}),this.helper.appendTo("body").disableSelection()}else this.helper=this.element},_change:{e:function(e,t){return{width:this.originalSize.width+t}},w:function(e,t){var i=(this.options,this.originalSize),s=this.originalPosition;return{left:s.left+t,width:i.width-t}},n:function(e,t,i){var s=(this.options,this.originalSize),n=this.originalPosition;return{top:n.top+i,height:s.height-i}},s:function(e,t,i){return{height:this.originalSize.height+i}},se:function(t,i,s){return e.extend(this._change.s.apply(this,arguments),this._change.e.apply(this,[t,i,s]))},sw:function(t,i,s){return e.extend(this._change.s.apply(this,arguments),this._change.w.apply(this,[t,i,s]))},ne:function(t,i,s){return e.extend(this._change.n.apply(this,arguments),this._change.e.apply(this,[t,i,s]))},nw:function(t,i,s){return e.extend(this._change.n.apply(this,arguments),this._change.w.apply(this,[t,i,s]))}},_propagate:function(t,i){e.ui.plugin.call(this,t,[i,this.ui()]),"resize"!=t&&this._trigger(t,i,this.ui())},plugins:{},ui:function(){return{originalElement:this.originalElement,element:this.element,helper:this.helper,position:this.position,size:this.size,originalSize:this.originalSize,originalPosition:this.originalPosition}}}),e.ui.plugin.add("resizable","alsoResize",{start:function(){var t=e(this).data("resizable"),i=t.options,s=function(t){e(t).each(function(){var t=e(this);t.data("resizable-alsoresize",{width:parseInt(t.width(),10),height:parseInt(t.height(),10),left:parseInt(t.css("left"),10),top:parseInt(t.css("top"),10)})})};"object"!=typeof i.alsoResize||i.alsoResize.parentNode?s(i.alsoResize):i.alsoResize.length?(i.alsoResize=i.alsoResize[0],s(i.alsoResize)):e.each(i.alsoResize,function(e){s(e)})},resize:function(t,i){var s=e(this).data("resizable"),n=s.options,a=s.originalSize,o=s.originalPosition,r={height:s.size.height-a.height||0,width:s.size.width-a.width||0,top:s.position.top-o.top||0,left:s.position.left-o.left||0},h=function(t,s){e(t).each(function(){var t=e(this),n=e(this).data("resizable-alsoresize"),a={},o=s&&s.length?s:t.parents(i.originalElement[0]).length?["width","height"]:["width","height","top","left"];e.each(o,function(e,t){var i=(n[t]||0)+(r[t]||0);i&&i>=0&&(a[t]=i||null)}),t.css(a)})};"object"!=typeof n.alsoResize||n.alsoResize.nodeType?h(n.alsoResize):e.each(n.alsoResize,function(e,t){h(e,t)})},stop:function(){e(this).removeData("resizable-alsoresize")}}),e.ui.plugin.add("resizable","animate",{stop:function(t){var i=e(this).data("resizable"),s=i.options,n=i._proportionallyResizeElements,a=n.length&&/textarea/i.test(n[0].nodeName),o=a&&e.ui.hasScroll(n[0],"left")?0:i.sizeDiff.height,r=a?0:i.sizeDiff.width,h={width:i.size.width-r,height:i.size.height-o},l=parseInt(i.element.css("left"),10)+(i.position.left-i.originalPosition.left)||null,u=parseInt(i.element.css("top"),10)+(i.position.top-i.originalPosition.top)||null;i.element.animate(e.extend(h,u&&l?{top:u,left:l}:{}),{duration:s.animateDuration,easing:s.animateEasing,step:function(){var s={width:parseInt(i.element.css("width"),10),height:parseInt(i.element.css("height"),10),top:parseInt(i.element.css("top"),10),left:parseInt(i.element.css("left"),10)};n&&n.length&&e(n[0]).css({width:s.width,height:s.height}),i._updateCache(s),i._propagate("resize",t)}})}}),e.ui.plugin.add("resizable","containment",{start:function(){var i=e(this).data("resizable"),s=i.options,n=i.element,a=s.containment,o=a instanceof e?a.get(0):/parent/.test(a)?n.parent().get(0):a;if(o)if(i.containerElement=e(o),/document/.test(a)||a==document)i.containerOffset={left:0,top:0},i.containerPosition={left:0,top:0},i.parentData={element:e(document),left:0,top:0,width:e(document).width(),height:e(document).height()||document.body.parentNode.scrollHeight};else{var r=e(o),h=[];e(["Top","Right","Left","Bottom"]).each(function(e,i){h[e]=t(r.css("padding"+i))}),i.containerOffset=r.offset(),i.containerPosition=r.position(),i.containerSize={height:r.innerHeight()-h[3],width:r.innerWidth()-h[1]};var l=i.containerOffset,u=i.containerSize.height,d=i.containerSize.width,c=e.ui.hasScroll(o,"left")?o.scrollWidth:d,p=e.ui.hasScroll(o)?o.scrollHeight:u;i.parentData={element:o,left:l.left,top:l.top,width:c,height:p}}},resize:function(t){var i=e(this).data("resizable"),s=i.options,n=(i.containerSize,i.containerOffset),a=(i.size,i.position),o=i._aspectRatio||t.shiftKey,r={top:0,left:0},h=i.containerElement;h[0]!=document&&/static/.test(h.css("position"))&&(r=n),a.left<(i._helper?n.left:0)&&(i.size.width=i.size.width+(i._helper?i.position.left-n.left:i.position.left-r.left),o&&(i.size.height=i.size.width/i.aspectRatio),i.position.left=s.helper?n.left:0),a.top<(i._helper?n.top:0)&&(i.size.height=i.size.height+(i._helper?i.position.top-n.top:i.position.top),o&&(i.size.width=i.size.height*i.aspectRatio),i.position.top=i._helper?n.top:0),i.offset.left=i.parentData.left+i.position.left,i.offset.top=i.parentData.top+i.position.top;var l=Math.abs((i._helper?i.offset.left-r.left:i.offset.left-r.left)+i.sizeDiff.width),u=Math.abs((i._helper?i.offset.top-r.top:i.offset.top-n.top)+i.sizeDiff.height),d=i.containerElement.get(0)==i.element.parent().get(0),c=/relative|absolute/.test(i.containerElement.css("position"));d&&c&&(l-=i.parentData.left),l+i.size.width>=i.parentData.width&&(i.size.width=i.parentData.width-l,o&&(i.size.height=i.size.width/i.aspectRatio)),u+i.size.height>=i.parentData.height&&(i.size.height=i.parentData.height-u,o&&(i.size.width=i.size.height*i.aspectRatio))},stop:function(){var t=e(this).data("resizable"),i=t.options,s=(t.position,t.containerOffset),n=t.containerPosition,a=t.containerElement,o=e(t.helper),r=o.offset(),h=o.outerWidth()-t.sizeDiff.width,l=o.outerHeight()-t.sizeDiff.height;t._helper&&!i.animate&&/relative/.test(a.css("position"))&&e(this).css({left:r.left-n.left-s.left,width:h,height:l}),t._helper&&!i.animate&&/static/.test(a.css("position"))&&e(this).css({left:r.left-n.left-s.left,width:h,height:l})}}),e.ui.plugin.add("resizable","ghost",{start:function(){var t=e(this).data("resizable"),i=t.options,s=t.size;t.ghost=t.originalElement.clone(),t.ghost.css({opacity:.25,display:"block",position:"relative",height:s.height,width:s.width,margin:0,left:0,top:0}).addClass("ui-resizable-ghost").addClass("string"==typeof i.ghost?i.ghost:""),t.ghost.appendTo(t.helper)},resize:function(){var t=e(this).data("resizable");t.options,t.ghost&&t.ghost.css({position:"relative",height:t.size.height,width:t.size.width})},stop:function(){var t=e(this).data("resizable");t.options,t.ghost&&t.helper&&t.helper.get(0).removeChild(t.ghost.get(0))}}),e.ui.plugin.add("resizable","grid",{resize:function(t){var i=e(this).data("resizable"),s=i.options,n=i.size,a=i.originalSize,o=i.originalPosition,r=i.axis;s._aspectRatio||t.shiftKey,s.grid="number"==typeof s.grid?[s.grid,s.grid]:s.grid;var h=Math.round((n.width-a.width)/(s.grid[0]||1))*(s.grid[0]||1),l=Math.round((n.height-a.height)/(s.grid[1]||1))*(s.grid[1]||1);/^(se|s|e)$/.test(r)?(i.size.width=a.width+h,i.size.height=a.height+l):/^(ne)$/.test(r)?(i.size.width=a.width+h,i.size.height=a.height+l,i.position.top=o.top-l):/^(sw)$/.test(r)?(i.size.width=a.width+h,i.size.height=a.height+l,i.position.left=o.left-h):(i.size.width=a.width+h,i.size.height=a.height+l,i.position.top=o.top-l,i.position.left=o.left-h)}});var t=function(e){return parseInt(e,10)||0},i=function(e){return!isNaN(parseInt(e,10))}})(jQuery);(function(e){e.widget("ui.selectable",e.ui.mouse,{version:"1.9.2",options:{appendTo:"body",autoRefresh:!0,distance:0,filter:"*",tolerance:"touch"},_create:function(){var t=this;this.element.addClass("ui-selectable"),this.dragged=!1;var i;this.refresh=function(){i=e(t.options.filter,t.element[0]),i.addClass("ui-selectee"),i.each(function(){var t=e(this),i=t.offset();e.data(this,"selectable-item",{element:this,$element:t,left:i.left,top:i.top,right:i.left+t.outerWidth(),bottom:i.top+t.outerHeight(),startselected:!1,selected:t.hasClass("ui-selected"),selecting:t.hasClass("ui-selecting"),unselecting:t.hasClass("ui-unselecting")})})},this.refresh(),this.selectees=i.addClass("ui-selectee"),this._mouseInit(),this.helper=e("<div class='ui-selectable-helper'></div>")},_destroy:function(){this.selectees.removeClass("ui-selectee").removeData("selectable-item"),this.element.removeClass("ui-selectable ui-selectable-disabled"),this._mouseDestroy()},_mouseStart:function(t){var i=this;if(this.opos=[t.pageX,t.pageY],!this.options.disabled){var s=this.options;this.selectees=e(s.filter,this.element[0]),this._trigger("start",t),e(s.appendTo).append(this.helper),this.helper.css({left:t.clientX,top:t.clientY,width:0,height:0}),s.autoRefresh&&this.refresh(),this.selectees.filter(".ui-selected").each(function(){var s=e.data(this,"selectable-item");s.startselected=!0,t.metaKey||t.ctrlKey||(s.$element.removeClass("ui-selected"),s.selected=!1,s.$element.addClass("ui-unselecting"),s.unselecting=!0,i._trigger("unselecting",t,{unselecting:s.element}))}),e(t.target).parents().andSelf().each(function(){var s=e.data(this,"selectable-item");if(s){var n=!t.metaKey&&!t.ctrlKey||!s.$element.hasClass("ui-selected");return s.$element.removeClass(n?"ui-unselecting":"ui-selected").addClass(n?"ui-selecting":"ui-unselecting"),s.unselecting=!n,s.selecting=n,s.selected=n,n?i._trigger("selecting",t,{selecting:s.element}):i._trigger("unselecting",t,{unselecting:s.element}),!1}})}},_mouseDrag:function(t){var i=this;if(this.dragged=!0,!this.options.disabled){var s=this.options,n=this.opos[0],a=this.opos[1],o=t.pageX,r=t.pageY;if(n>o){var h=o;o=n,n=h}if(a>r){var h=r;r=a,a=h}return this.helper.css({left:n,top:a,width:o-n,height:r-a}),this.selectees.each(function(){var h=e.data(this,"selectable-item");if(h&&h.element!=i.element[0]){var l=!1;"touch"==s.tolerance?l=!(h.left>o||n>h.right||h.top>r||a>h.bottom):"fit"==s.tolerance&&(l=h.left>n&&o>h.right&&h.top>a&&r>h.bottom),l?(h.selected&&(h.$element.removeClass("ui-selected"),h.selected=!1),h.unselecting&&(h.$element.removeClass("ui-unselecting"),h.unselecting=!1),h.selecting||(h.$element.addClass("ui-selecting"),h.selecting=!0,i._trigger("selecting",t,{selecting:h.element}))):(h.selecting&&((t.metaKey||t.ctrlKey)&&h.startselected?(h.$element.removeClass("ui-selecting"),h.selecting=!1,h.$element.addClass("ui-selected"),h.selected=!0):(h.$element.removeClass("ui-selecting"),h.selecting=!1,h.startselected&&(h.$element.addClass("ui-unselecting"),h.unselecting=!0),i._trigger("unselecting",t,{unselecting:h.element}))),h.selected&&(t.metaKey||t.ctrlKey||h.startselected||(h.$element.removeClass("ui-selected"),h.selected=!1,h.$element.addClass("ui-unselecting"),h.unselecting=!0,i._trigger("unselecting",t,{unselecting:h.element}))))}}),!1}},_mouseStop:function(t){var i=this;return this.dragged=!1,this.options,e(".ui-unselecting",this.element[0]).each(function(){var s=e.data(this,"selectable-item");s.$element.removeClass("ui-unselecting"),s.unselecting=!1,s.startselected=!1,i._trigger("unselected",t,{unselected:s.element})}),e(".ui-selecting",this.element[0]).each(function(){var s=e.data(this,"selectable-item");s.$element.removeClass("ui-selecting").addClass("ui-selected"),s.selecting=!1,s.selected=!0,s.startselected=!0,i._trigger("selected",t,{selected:s.element})}),this._trigger("stop",t),this.helper.remove(),!1}})})(jQuery);(function(e){e.widget("ui.sortable",e.ui.mouse,{version:"1.9.2",widgetEventPrefix:"sort",ready:!1,options:{appendTo:"parent",axis:!1,connectWith:!1,containment:!1,cursor:"auto",cursorAt:!1,dropOnEmpty:!0,forcePlaceholderSize:!1,forceHelperSize:!1,grid:!1,handle:!1,helper:"original",items:"> *",opacity:!1,placeholder:!1,revert:!1,scroll:!0,scrollSensitivity:20,scrollSpeed:20,scope:"default",tolerance:"intersect",zIndex:1e3},_create:function(){var e=this.options;this.containerCache={},this.element.addClass("ui-sortable"),this.refresh(),this.floating=this.items.length?"x"===e.axis||/left|right/.test(this.items[0].item.css("float"))||/inline|table-cell/.test(this.items[0].item.css("display")):!1,this.offset=this.element.offset(),this._mouseInit(),this.ready=!0},_destroy:function(){this.element.removeClass("ui-sortable ui-sortable-disabled"),this._mouseDestroy();for(var e=this.items.length-1;e>=0;e--)this.items[e].item.removeData(this.widgetName+"-item");return this},_setOption:function(t,i){"disabled"===t?(this.options[t]=i,this.widget().toggleClass("ui-sortable-disabled",!!i)):e.Widget.prototype._setOption.apply(this,arguments)},_mouseCapture:function(t,i){var s=this;if(this.reverting)return!1;if(this.options.disabled||"static"==this.options.type)return!1;this._refreshItems(t);var n=null;if(e(t.target).parents().each(function(){return e.data(this,s.widgetName+"-item")==s?(n=e(this),!1):undefined}),e.data(t.target,s.widgetName+"-item")==s&&(n=e(t.target)),!n)return!1;if(this.options.handle&&!i){var a=!1;if(e(this.options.handle,n).find("*").andSelf().each(function(){this==t.target&&(a=!0)}),!a)return!1}return this.currentItem=n,this._removeCurrentsFromItems(),!0},_mouseStart:function(t,i,s){var n=this.options;if(this.currentContainer=this,this.refreshPositions(),this.helper=this._createHelper(t),this._cacheHelperProportions(),this._cacheMargins(),this.scrollParent=this.helper.scrollParent(),this.offset=this.currentItem.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},e.extend(this.offset,{click:{left:t.pageX-this.offset.left,top:t.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.helper.css("position","absolute"),this.cssPosition=this.helper.css("position"),this.originalPosition=this._generatePosition(t),this.originalPageX=t.pageX,this.originalPageY=t.pageY,n.cursorAt&&this._adjustOffsetFromHelper(n.cursorAt),this.domPosition={prev:this.currentItem.prev()[0],parent:this.currentItem.parent()[0]},this.helper[0]!=this.currentItem[0]&&this.currentItem.hide(),this._createPlaceholder(),n.containment&&this._setContainment(),n.cursor&&(e("body").css("cursor")&&(this._storedCursor=e("body").css("cursor")),e("body").css("cursor",n.cursor)),n.opacity&&(this.helper.css("opacity")&&(this._storedOpacity=this.helper.css("opacity")),this.helper.css("opacity",n.opacity)),n.zIndex&&(this.helper.css("zIndex")&&(this._storedZIndex=this.helper.css("zIndex")),this.helper.css("zIndex",n.zIndex)),this.scrollParent[0]!=document&&"HTML"!=this.scrollParent[0].tagName&&(this.overflowOffset=this.scrollParent.offset()),this._trigger("start",t,this._uiHash()),this._preserveHelperProportions||this._cacheHelperProportions(),!s)for(var a=this.containers.length-1;a>=0;a--)this.containers[a]._trigger("activate",t,this._uiHash(this));return e.ui.ddmanager&&(e.ui.ddmanager.current=this),e.ui.ddmanager&&!n.dropBehaviour&&e.ui.ddmanager.prepareOffsets(this,t),this.dragging=!0,this.helper.addClass("ui-sortable-helper"),this._mouseDrag(t),!0},_mouseDrag:function(t){if(this.position=this._generatePosition(t),this.positionAbs=this._convertPositionTo("absolute"),this.lastPositionAbs||(this.lastPositionAbs=this.positionAbs),this.options.scroll){var i=this.options,s=!1;this.scrollParent[0]!=document&&"HTML"!=this.scrollParent[0].tagName?(this.overflowOffset.top+this.scrollParent[0].offsetHeight-t.pageY<i.scrollSensitivity?this.scrollParent[0].scrollTop=s=this.scrollParent[0].scrollTop+i.scrollSpeed:t.pageY-this.overflowOffset.top<i.scrollSensitivity&&(this.scrollParent[0].scrollTop=s=this.scrollParent[0].scrollTop-i.scrollSpeed),this.overflowOffset.left+this.scrollParent[0].offsetWidth-t.pageX<i.scrollSensitivity?this.scrollParent[0].scrollLeft=s=this.scrollParent[0].scrollLeft+i.scrollSpeed:t.pageX-this.overflowOffset.left<i.scrollSensitivity&&(this.scrollParent[0].scrollLeft=s=this.scrollParent[0].scrollLeft-i.scrollSpeed)):(t.pageY-e(document).scrollTop()<i.scrollSensitivity?s=e(document).scrollTop(e(document).scrollTop()-i.scrollSpeed):e(window).height()-(t.pageY-e(document).scrollTop())<i.scrollSensitivity&&(s=e(document).scrollTop(e(document).scrollTop()+i.scrollSpeed)),t.pageX-e(document).scrollLeft()<i.scrollSensitivity?s=e(document).scrollLeft(e(document).scrollLeft()-i.scrollSpeed):e(window).width()-(t.pageX-e(document).scrollLeft())<i.scrollSensitivity&&(s=e(document).scrollLeft(e(document).scrollLeft()+i.scrollSpeed))),s!==!1&&e.ui.ddmanager&&!i.dropBehaviour&&e.ui.ddmanager.prepareOffsets(this,t)}this.positionAbs=this._convertPositionTo("absolute"),this.options.axis&&"y"==this.options.axis||(this.helper[0].style.left=this.position.left+"px"),this.options.axis&&"x"==this.options.axis||(this.helper[0].style.top=this.position.top+"px");for(var n=this.items.length-1;n>=0;n--){var a=this.items[n],o=a.item[0],r=this._intersectsWithPointer(a);if(r&&a.instance===this.currentContainer&&o!=this.currentItem[0]&&this.placeholder[1==r?"next":"prev"]()[0]!=o&&!e.contains(this.placeholder[0],o)&&("semi-dynamic"==this.options.type?!e.contains(this.element[0],o):!0)){if(this.direction=1==r?"down":"up","pointer"!=this.options.tolerance&&!this._intersectsWithSides(a))break;this._rearrange(t,a),this._trigger("change",t,this._uiHash());break}}return this._contactContainers(t),e.ui.ddmanager&&e.ui.ddmanager.drag(this,t),this._trigger("sort",t,this._uiHash()),this.lastPositionAbs=this.positionAbs,!1},_mouseStop:function(t,i){if(t){if(e.ui.ddmanager&&!this.options.dropBehaviour&&e.ui.ddmanager.drop(this,t),this.options.revert){var s=this,n=this.placeholder.offset();this.reverting=!0,e(this.helper).animate({left:n.left-this.offset.parent.left-this.margins.left+(this.offsetParent[0]==document.body?0:this.offsetParent[0].scrollLeft),top:n.top-this.offset.parent.top-this.margins.top+(this.offsetParent[0]==document.body?0:this.offsetParent[0].scrollTop)},parseInt(this.options.revert,10)||500,function(){s._clear(t)})}else this._clear(t,i);return!1}},cancel:function(){if(this.dragging){this._mouseUp({target:null}),"original"==this.options.helper?this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper"):this.currentItem.show();for(var t=this.containers.length-1;t>=0;t--)this.containers[t]._trigger("deactivate",null,this._uiHash(this)),this.containers[t].containerCache.over&&(this.containers[t]._trigger("out",null,this._uiHash(this)),this.containers[t].containerCache.over=0)}return this.placeholder&&(this.placeholder[0].parentNode&&this.placeholder[0].parentNode.removeChild(this.placeholder[0]),"original"!=this.options.helper&&this.helper&&this.helper[0].parentNode&&this.helper.remove(),e.extend(this,{helper:null,dragging:!1,reverting:!1,_noFinalSort:null}),this.domPosition.prev?e(this.domPosition.prev).after(this.currentItem):e(this.domPosition.parent).prepend(this.currentItem)),this},serialize:function(t){var i=this._getItemsAsjQuery(t&&t.connected),s=[];return t=t||{},e(i).each(function(){var i=(e(t.item||this).attr(t.attribute||"id")||"").match(t.expression||/(.+)[-=_](.+)/);i&&s.push((t.key||i[1]+"[]")+"="+(t.key&&t.expression?i[1]:i[2]))}),!s.length&&t.key&&s.push(t.key+"="),s.join("&")},toArray:function(t){var i=this._getItemsAsjQuery(t&&t.connected),s=[];return t=t||{},i.each(function(){s.push(e(t.item||this).attr(t.attribute||"id")||"")}),s},_intersectsWith:function(e){var t=this.positionAbs.left,i=t+this.helperProportions.width,s=this.positionAbs.top,n=s+this.helperProportions.height,a=e.left,o=a+e.width,r=e.top,h=r+e.height,l=this.offset.click.top,u=this.offset.click.left,c=s+l>r&&h>s+l&&t+u>a&&o>t+u;return"pointer"==this.options.tolerance||this.options.forcePointerForContainers||"pointer"!=this.options.tolerance&&this.helperProportions[this.floating?"width":"height"]>e[this.floating?"width":"height"]?c:t+this.helperProportions.width/2>a&&o>i-this.helperProportions.width/2&&s+this.helperProportions.height/2>r&&h>n-this.helperProportions.height/2},_intersectsWithPointer:function(t){var i="x"===this.options.axis||e.ui.isOverAxis(this.positionAbs.top+this.offset.click.top,t.top,t.height),s="y"===this.options.axis||e.ui.isOverAxis(this.positionAbs.left+this.offset.click.left,t.left,t.width),n=i&&s,a=this._getDragVerticalDirection(),o=this._getDragHorizontalDirection();return n?this.floating?o&&"right"==o||"down"==a?2:1:a&&("down"==a?2:1):!1},_intersectsWithSides:function(t){var i=e.ui.isOverAxis(this.positionAbs.top+this.offset.click.top,t.top+t.height/2,t.height),s=e.ui.isOverAxis(this.positionAbs.left+this.offset.click.left,t.left+t.width/2,t.width),n=this._getDragVerticalDirection(),a=this._getDragHorizontalDirection();return this.floating&&a?"right"==a&&s||"left"==a&&!s:n&&("down"==n&&i||"up"==n&&!i)},_getDragVerticalDirection:function(){var e=this.positionAbs.top-this.lastPositionAbs.top;return 0!=e&&(e>0?"down":"up")},_getDragHorizontalDirection:function(){var e=this.positionAbs.left-this.lastPositionAbs.left;return 0!=e&&(e>0?"right":"left")},refresh:function(e){return this._refreshItems(e),this.refreshPositions(),this},_connectWith:function(){var e=this.options;return e.connectWith.constructor==String?[e.connectWith]:e.connectWith},_getItemsAsjQuery:function(t){var i=[],s=[],n=this._connectWith();if(n&&t)for(var a=n.length-1;a>=0;a--)for(var o=e(n[a]),r=o.length-1;r>=0;r--){var h=e.data(o[r],this.widgetName);h&&h!=this&&!h.options.disabled&&s.push([e.isFunction(h.options.items)?h.options.items.call(h.element):e(h.options.items,h.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),h])}s.push([e.isFunction(this.options.items)?this.options.items.call(this.element,null,{options:this.options,item:this.currentItem}):e(this.options.items,this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),this]);for(var a=s.length-1;a>=0;a--)s[a][0].each(function(){i.push(this)});return e(i)},_removeCurrentsFromItems:function(){var t=this.currentItem.find(":data("+this.widgetName+"-item)");this.items=e.grep(this.items,function(e){for(var i=0;t.length>i;i++)if(t[i]==e.item[0])return!1;return!0})},_refreshItems:function(t){this.items=[],this.containers=[this];var i=this.items,s=[[e.isFunction(this.options.items)?this.options.items.call(this.element[0],t,{item:this.currentItem}):e(this.options.items,this.element),this]],n=this._connectWith();if(n&&this.ready)for(var a=n.length-1;a>=0;a--)for(var o=e(n[a]),r=o.length-1;r>=0;r--){var h=e.data(o[r],this.widgetName);h&&h!=this&&!h.options.disabled&&(s.push([e.isFunction(h.options.items)?h.options.items.call(h.element[0],t,{item:this.currentItem}):e(h.options.items,h.element),h]),this.containers.push(h))}for(var a=s.length-1;a>=0;a--)for(var l=s[a][1],u=s[a][0],r=0,c=u.length;c>r;r++){var d=e(u[r]);d.data(this.widgetName+"-item",l),i.push({item:d,instance:l,width:0,height:0,left:0,top:0})}},refreshPositions:function(t){this.offsetParent&&this.helper&&(this.offset.parent=this._getParentOffset());for(var i=this.items.length-1;i>=0;i--){var s=this.items[i];if(s.instance==this.currentContainer||!this.currentContainer||s.item[0]==this.currentItem[0]){var n=this.options.toleranceElement?e(this.options.toleranceElement,s.item):s.item;t||(s.width=n.outerWidth(),s.height=n.outerHeight());var a=n.offset();s.left=a.left,s.top=a.top}}if(this.options.custom&&this.options.custom.refreshContainers)this.options.custom.refreshContainers.call(this);else for(var i=this.containers.length-1;i>=0;i--){var a=this.containers[i].element.offset();this.containers[i].containerCache.left=a.left,this.containers[i].containerCache.top=a.top,this.containers[i].containerCache.width=this.containers[i].element.outerWidth(),this.containers[i].containerCache.height=this.containers[i].element.outerHeight()}return this},_createPlaceholder:function(t){t=t||this;var i=t.options;if(!i.placeholder||i.placeholder.constructor==String){var s=i.placeholder;i.placeholder={element:function(){var i=e(document.createElement(t.currentItem[0].nodeName)).addClass(s||t.currentItem[0].className+" ui-sortable-placeholder").removeClass("ui-sortable-helper")[0];return s||(i.style.visibility="hidden"),i},update:function(e,n){(!s||i.forcePlaceholderSize)&&(n.height()||n.height(t.currentItem.innerHeight()-parseInt(t.currentItem.css("paddingTop")||0,10)-parseInt(t.currentItem.css("paddingBottom")||0,10)),n.width()||n.width(t.currentItem.innerWidth()-parseInt(t.currentItem.css("paddingLeft")||0,10)-parseInt(t.currentItem.css("paddingRight")||0,10)))}}}t.placeholder=e(i.placeholder.element.call(t.element,t.currentItem)),t.currentItem.after(t.placeholder),i.placeholder.update(t,t.placeholder)},_contactContainers:function(t){for(var i=null,s=null,n=this.containers.length-1;n>=0;n--)if(!e.contains(this.currentItem[0],this.containers[n].element[0]))if(this._intersectsWith(this.containers[n].containerCache)){if(i&&e.contains(this.containers[n].element[0],i.element[0]))continue;i=this.containers[n],s=n}else this.containers[n].containerCache.over&&(this.containers[n]._trigger("out",t,this._uiHash(this)),this.containers[n].containerCache.over=0);if(i)if(1===this.containers.length)this.containers[s]._trigger("over",t,this._uiHash(this)),this.containers[s].containerCache.over=1;else{for(var a=1e4,o=null,r=this.containers[s].floating?"left":"top",h=this.containers[s].floating?"width":"height",l=this.positionAbs[r]+this.offset.click[r],u=this.items.length-1;u>=0;u--)if(e.contains(this.containers[s].element[0],this.items[u].item[0])&&this.items[u].item[0]!=this.currentItem[0]){var c=this.items[u].item.offset()[r],d=!1;Math.abs(c-l)>Math.abs(c+this.items[u][h]-l)&&(d=!0,c+=this.items[u][h]),a>Math.abs(c-l)&&(a=Math.abs(c-l),o=this.items[u],this.direction=d?"up":"down")}if(!o&&!this.options.dropOnEmpty)return;this.currentContainer=this.containers[s],o?this._rearrange(t,o,null,!0):this._rearrange(t,null,this.containers[s].element,!0),this._trigger("change",t,this._uiHash()),this.containers[s]._trigger("change",t,this._uiHash(this)),this.options.placeholder.update(this.currentContainer,this.placeholder),this.containers[s]._trigger("over",t,this._uiHash(this)),this.containers[s].containerCache.over=1}},_createHelper:function(t){var i=this.options,s=e.isFunction(i.helper)?e(i.helper.apply(this.element[0],[t,this.currentItem])):"clone"==i.helper?this.currentItem.clone():this.currentItem;return s.parents("body").length||e("parent"!=i.appendTo?i.appendTo:this.currentItem[0].parentNode)[0].appendChild(s[0]),s[0]==this.currentItem[0]&&(this._storedCSS={width:this.currentItem[0].style.width,height:this.currentItem[0].style.height,position:this.currentItem.css("position"),top:this.currentItem.css("top"),left:this.currentItem.css("left")}),(""==s[0].style.width||i.forceHelperSize)&&s.width(this.currentItem.width()),(""==s[0].style.height||i.forceHelperSize)&&s.height(this.currentItem.height()),s},_adjustOffsetFromHelper:function(t){"string"==typeof t&&(t=t.split(" ")),e.isArray(t)&&(t={left:+t[0],top:+t[1]||0}),"left"in t&&(this.offset.click.left=t.left+this.margins.left),"right"in t&&(this.offset.click.left=this.helperProportions.width-t.right+this.margins.left),"top"in t&&(this.offset.click.top=t.top+this.margins.top),"bottom"in t&&(this.offset.click.top=this.helperProportions.height-t.bottom+this.margins.top)},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var t=this.offsetParent.offset();return"absolute"==this.cssPosition&&this.scrollParent[0]!=document&&e.contains(this.scrollParent[0],this.offsetParent[0])&&(t.left+=this.scrollParent.scrollLeft(),t.top+=this.scrollParent.scrollTop()),(this.offsetParent[0]==document.body||this.offsetParent[0].tagName&&"html"==this.offsetParent[0].tagName.toLowerCase()&&e.ui.ie)&&(t={top:0,left:0}),{top:t.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:t.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"==this.cssPosition){var e=this.currentItem.position();return{top:e.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:e.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.currentItem.css("marginLeft"),10)||0,top:parseInt(this.currentItem.css("marginTop"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var t=this.options;if("parent"==t.containment&&(t.containment=this.helper[0].parentNode),("document"==t.containment||"window"==t.containment)&&(this.containment=[0-this.offset.relative.left-this.offset.parent.left,0-this.offset.relative.top-this.offset.parent.top,e("document"==t.containment?document:window).width()-this.helperProportions.width-this.margins.left,(e("document"==t.containment?document:window).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]),!/^(document|window|parent)$/.test(t.containment)){var i=e(t.containment)[0],s=e(t.containment).offset(),n="hidden"!=e(i).css("overflow");this.containment=[s.left+(parseInt(e(i).css("borderLeftWidth"),10)||0)+(parseInt(e(i).css("paddingLeft"),10)||0)-this.margins.left,s.top+(parseInt(e(i).css("borderTopWidth"),10)||0)+(parseInt(e(i).css("paddingTop"),10)||0)-this.margins.top,s.left+(n?Math.max(i.scrollWidth,i.offsetWidth):i.offsetWidth)-(parseInt(e(i).css("borderLeftWidth"),10)||0)-(parseInt(e(i).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left,s.top+(n?Math.max(i.scrollHeight,i.offsetHeight):i.offsetHeight)-(parseInt(e(i).css("borderTopWidth"),10)||0)-(parseInt(e(i).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top]}},_convertPositionTo:function(t,i){i||(i=this.position);var s="absolute"==t?1:-1,n=(this.options,"absolute"!=this.cssPosition||this.scrollParent[0]!=document&&e.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent),a=/(html|body)/i.test(n[0].tagName);return{top:i.top+this.offset.relative.top*s+this.offset.parent.top*s-("fixed"==this.cssPosition?-this.scrollParent.scrollTop():a?0:n.scrollTop())*s,left:i.left+this.offset.relative.left*s+this.offset.parent.left*s-("fixed"==this.cssPosition?-this.scrollParent.scrollLeft():a?0:n.scrollLeft())*s}},_generatePosition:function(t){var i=this.options,s="absolute"!=this.cssPosition||this.scrollParent[0]!=document&&e.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,n=/(html|body)/i.test(s[0].tagName);"relative"!=this.cssPosition||this.scrollParent[0]!=document&&this.scrollParent[0]!=this.offsetParent[0]||(this.offset.relative=this._getRelativeOffset());var a=t.pageX,o=t.pageY;if(this.originalPosition&&(this.containment&&(t.pageX-this.offset.click.left<this.containment[0]&&(a=this.containment[0]+this.offset.click.left),t.pageY-this.offset.click.top<this.containment[1]&&(o=this.containment[1]+this.offset.click.top),t.pageX-this.offset.click.left>this.containment[2]&&(a=this.containment[2]+this.offset.click.left),t.pageY-this.offset.click.top>this.containment[3]&&(o=this.containment[3]+this.offset.click.top)),i.grid)){var r=this.originalPageY+Math.round((o-this.originalPageY)/i.grid[1])*i.grid[1];o=this.containment?r-this.offset.click.top<this.containment[1]||r-this.offset.click.top>this.containment[3]?r-this.offset.click.top<this.containment[1]?r+i.grid[1]:r-i.grid[1]:r:r;var h=this.originalPageX+Math.round((a-this.originalPageX)/i.grid[0])*i.grid[0];a=this.containment?h-this.offset.click.left<this.containment[0]||h-this.offset.click.left>this.containment[2]?h-this.offset.click.left<this.containment[0]?h+i.grid[0]:h-i.grid[0]:h:h}return{top:o-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"==this.cssPosition?-this.scrollParent.scrollTop():n?0:s.scrollTop()),left:a-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"==this.cssPosition?-this.scrollParent.scrollLeft():n?0:s.scrollLeft())}},_rearrange:function(e,t,i,s){i?i[0].appendChild(this.placeholder[0]):t.item[0].parentNode.insertBefore(this.placeholder[0],"down"==this.direction?t.item[0]:t.item[0].nextSibling),this.counter=this.counter?++this.counter:1;var n=this.counter;this._delay(function(){n==this.counter&&this.refreshPositions(!s)})},_clear:function(t,i){this.reverting=!1;var s=[];if(!this._noFinalSort&&this.currentItem.parent().length&&this.placeholder.before(this.currentItem),this._noFinalSort=null,this.helper[0]==this.currentItem[0]){for(var n in this._storedCSS)("auto"==this._storedCSS[n]||"static"==this._storedCSS[n])&&(this._storedCSS[n]="");this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper")}else this.currentItem.show();this.fromOutside&&!i&&s.push(function(e){this._trigger("receive",e,this._uiHash(this.fromOutside))}),!this.fromOutside&&this.domPosition.prev==this.currentItem.prev().not(".ui-sortable-helper")[0]&&this.domPosition.parent==this.currentItem.parent()[0]||i||s.push(function(e){this._trigger("update",e,this._uiHash())}),this!==this.currentContainer&&(i||(s.push(function(e){this._trigger("remove",e,this._uiHash())}),s.push(function(e){return function(t){e._trigger("receive",t,this._uiHash(this))}}.call(this,this.currentContainer)),s.push(function(e){return function(t){e._trigger("update",t,this._uiHash(this))}}.call(this,this.currentContainer))));for(var n=this.containers.length-1;n>=0;n--)i||s.push(function(e){return function(t){e._trigger("deactivate",t,this._uiHash(this))}}.call(this,this.containers[n])),this.containers[n].containerCache.over&&(s.push(function(e){return function(t){e._trigger("out",t,this._uiHash(this))}}.call(this,this.containers[n])),this.containers[n].containerCache.over=0);if(this._storedCursor&&e("body").css("cursor",this._storedCursor),this._storedOpacity&&this.helper.css("opacity",this._storedOpacity),this._storedZIndex&&this.helper.css("zIndex","auto"==this._storedZIndex?"":this._storedZIndex),this.dragging=!1,this.cancelHelperRemoval){if(!i){this._trigger("beforeStop",t,this._uiHash());for(var n=0;s.length>n;n++)s[n].call(this,t);this._trigger("stop",t,this._uiHash())}return this.fromOutside=!1,!1}if(i||this._trigger("beforeStop",t,this._uiHash()),this.placeholder[0].parentNode.removeChild(this.placeholder[0]),this.helper[0]!=this.currentItem[0]&&this.helper.remove(),this.helper=null,!i){for(var n=0;s.length>n;n++)s[n].call(this,t);this._trigger("stop",t,this._uiHash())}return this.fromOutside=!1,!0},_trigger:function(){e.Widget.prototype._trigger.apply(this,arguments)===!1&&this.cancel()},_uiHash:function(t){var i=t||this;return{helper:i.helper,placeholder:i.placeholder||e([]),position:i.position,originalPosition:i.originalPosition,offset:i.positionAbs,item:i.currentItem,sender:t?t.element:null}}})})(jQuery);(function(e){var t=0,i={},s={};i.height=i.paddingTop=i.paddingBottom=i.borderTopWidth=i.borderBottomWidth="hide",s.height=s.paddingTop=s.paddingBottom=s.borderTopWidth=s.borderBottomWidth="show",e.widget("ui.accordion",{version:"1.9.2",options:{active:0,animate:{},collapsible:!1,event:"click",header:"> li > :first-child,> :not(li):even",heightStyle:"auto",icons:{activeHeader:"ui-icon-triangle-1-s",header:"ui-icon-triangle-1-e"},activate:null,beforeActivate:null},_create:function(){var i=this.accordionId="ui-accordion-"+(this.element.attr("id")||++t),s=this.options;this.prevShow=this.prevHide=e(),this.element.addClass("ui-accordion ui-widget ui-helper-reset"),this.headers=this.element.find(s.header).addClass("ui-accordion-header ui-helper-reset ui-state-default ui-corner-all"),this._hoverable(this.headers),this._focusable(this.headers),this.headers.next().addClass("ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom").hide(),s.collapsible||s.active!==!1&&null!=s.active||(s.active=0),0>s.active&&(s.active+=this.headers.length),this.active=this._findActive(s.active).addClass("ui-accordion-header-active ui-state-active").toggleClass("ui-corner-all ui-corner-top"),this.active.next().addClass("ui-accordion-content-active").show(),this._createIcons(),this.refresh(),this.element.attr("role","tablist"),this.headers.attr("role","tab").each(function(t){var s=e(this),n=s.attr("id"),a=s.next(),r=a.attr("id");n||(n=i+"-header-"+t,s.attr("id",n)),r||(r=i+"-panel-"+t,a.attr("id",r)),s.attr("aria-controls",r),a.attr("aria-labelledby",n)}).next().attr("role","tabpanel"),this.headers.not(this.active).attr({"aria-selected":"false",tabIndex:-1}).next().attr({"aria-expanded":"false","aria-hidden":"true"}).hide(),this.active.length?this.active.attr({"aria-selected":"true",tabIndex:0}).next().attr({"aria-expanded":"true","aria-hidden":"false"}):this.headers.eq(0).attr("tabIndex",0),this._on(this.headers,{keydown:"_keydown"}),this._on(this.headers.next(),{keydown:"_panelKeyDown"}),this._setupEvents(s.event)},_getCreateEventData:function(){return{header:this.active,content:this.active.length?this.active.next():e()}},_createIcons:function(){var t=this.options.icons;t&&(e("<span>").addClass("ui-accordion-header-icon ui-icon "+t.header).prependTo(this.headers),this.active.children(".ui-accordion-header-icon").removeClass(t.header).addClass(t.activeHeader),this.headers.addClass("ui-accordion-icons"))},_destroyIcons:function(){this.headers.removeClass("ui-accordion-icons").children(".ui-accordion-header-icon").remove()},_destroy:function(){var e;this.element.removeClass("ui-accordion ui-widget ui-helper-reset").removeAttr("role"),this.headers.removeClass("ui-accordion-header ui-accordion-header-active ui-helper-reset ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top").removeAttr("role").removeAttr("aria-selected").removeAttr("aria-controls").removeAttr("tabIndex").each(function(){/^ui-accordion/.test(this.id)&&this.removeAttribute("id")}),this._destroyIcons(),e=this.headers.next().css("display","").removeAttr("role").removeAttr("aria-expanded").removeAttr("aria-hidden").removeAttr("aria-labelledby").removeClass("ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-state-disabled").each(function(){/^ui-accordion/.test(this.id)&&this.removeAttribute("id")}),"content"!==this.options.heightStyle&&e.css("height","")},_setOption:function(e,t){return"active"===e?(this._activate(t),undefined):("event"===e&&(this.options.event&&this._off(this.headers,this.options.event),this._setupEvents(t)),this._super(e,t),"collapsible"!==e||t||this.options.active!==!1||this._activate(0),"icons"===e&&(this._destroyIcons(),t&&this._createIcons()),"disabled"===e&&this.headers.add(this.headers.next()).toggleClass("ui-state-disabled",!!t),undefined)},_keydown:function(t){if(!t.altKey&&!t.ctrlKey){var i=e.ui.keyCode,s=this.headers.length,n=this.headers.index(t.target),a=!1;switch(t.keyCode){case i.RIGHT:case i.DOWN:a=this.headers[(n+1)%s];break;case i.LEFT:case i.UP:a=this.headers[(n-1+s)%s];break;case i.SPACE:case i.ENTER:this._eventHandler(t);break;case i.HOME:a=this.headers[0];break;case i.END:a=this.headers[s-1]}a&&(e(t.target).attr("tabIndex",-1),e(a).attr("tabIndex",0),a.focus(),t.preventDefault())}},_panelKeyDown:function(t){t.keyCode===e.ui.keyCode.UP&&t.ctrlKey&&e(t.currentTarget).prev().focus()},refresh:function(){var t,i,s=this.options.heightStyle,n=this.element.parent();"fill"===s?(e.support.minHeight||(i=n.css("overflow"),n.css("overflow","hidden")),t=n.height(),this.element.siblings(":visible").each(function(){var i=e(this),s=i.css("position");"absolute"!==s&&"fixed"!==s&&(t-=i.outerHeight(!0))}),i&&n.css("overflow",i),this.headers.each(function(){t-=e(this).outerHeight(!0)}),this.headers.next().each(function(){e(this).height(Math.max(0,t-e(this).innerHeight()+e(this).height()))}).css("overflow","auto")):"auto"===s&&(t=0,this.headers.next().each(function(){t=Math.max(t,e(this).css("height","").height())}).height(t))},_activate:function(t){var i=this._findActive(t)[0];i!==this.active[0]&&(i=i||this.active[0],this._eventHandler({target:i,currentTarget:i,preventDefault:e.noop}))},_findActive:function(t){return"number"==typeof t?this.headers.eq(t):e()},_setupEvents:function(t){var i={};t&&(e.each(t.split(" "),function(e,t){i[t]="_eventHandler"}),this._on(this.headers,i))},_eventHandler:function(t){var i=this.options,s=this.active,n=e(t.currentTarget),a=n[0]===s[0],r=a&&i.collapsible,o=r?e():n.next(),h=s.next(),l={oldHeader:s,oldPanel:h,newHeader:r?e():n,newPanel:o};t.preventDefault(),a&&!i.collapsible||this._trigger("beforeActivate",t,l)===!1||(i.active=r?!1:this.headers.index(n),this.active=a?e():n,this._toggle(l),s.removeClass("ui-accordion-header-active ui-state-active"),i.icons&&s.children(".ui-accordion-header-icon").removeClass(i.icons.activeHeader).addClass(i.icons.header),a||(n.removeClass("ui-corner-all").addClass("ui-accordion-header-active ui-state-active ui-corner-top"),i.icons&&n.children(".ui-accordion-header-icon").removeClass(i.icons.header).addClass(i.icons.activeHeader),n.next().addClass("ui-accordion-content-active")))},_toggle:function(t){var i=t.newPanel,s=this.prevShow.length?this.prevShow:t.oldPanel;this.prevShow.add(this.prevHide).stop(!0,!0),this.prevShow=i,this.prevHide=s,this.options.animate?this._animate(i,s,t):(s.hide(),i.show(),this._toggleComplete(t)),s.attr({"aria-expanded":"false","aria-hidden":"true"}),s.prev().attr("aria-selected","false"),i.length&&s.length?s.prev().attr("tabIndex",-1):i.length&&this.headers.filter(function(){return 0===e(this).attr("tabIndex")}).attr("tabIndex",-1),i.attr({"aria-expanded":"true","aria-hidden":"false"}).prev().attr({"aria-selected":"true",tabIndex:0})},_animate:function(e,t,n){var a,r,o,h=this,l=0,u=e.length&&(!t.length||e.index()<t.index()),d=this.options.animate||{},c=u&&d.down||d,p=function(){h._toggleComplete(n)};return"number"==typeof c&&(o=c),"string"==typeof c&&(r=c),r=r||c.easing||d.easing,o=o||c.duration||d.duration,t.length?e.length?(a=e.show().outerHeight(),t.animate(i,{duration:o,easing:r,step:function(e,t){t.now=Math.round(e)}}),e.hide().animate(s,{duration:o,easing:r,complete:p,step:function(e,i){i.now=Math.round(e),"height"!==i.prop?l+=i.now:"content"!==h.options.heightStyle&&(i.now=Math.round(a-t.outerHeight()-l),l=0)}}),undefined):t.animate(i,o,r,p):e.animate(s,o,r,p)},_toggleComplete:function(e){var t=e.oldPanel;t.removeClass("ui-accordion-content-active").prev().removeClass("ui-corner-top").addClass("ui-corner-all"),t.length&&(t.parent()[0].className=t.parent()[0].className),this._trigger("activate",null,e)}}),e.uiBackCompat!==!1&&(function(e,t){e.extend(t.options,{navigation:!1,navigationFilter:function(){return this.href.toLowerCase()===location.href.toLowerCase()}});var i=t._create;t._create=function(){if(this.options.navigation){var t=this,s=this.element.find(this.options.header),n=s.next(),a=s.add(n).find("a").filter(this.options.navigationFilter)[0];a&&s.add(n).each(function(i){return e.contains(this,a)?(t.options.active=Math.floor(i/2),!1):undefined})}i.call(this)}}(jQuery,jQuery.ui.accordion.prototype),function(e,t){e.extend(t.options,{heightStyle:null,autoHeight:!0,clearStyle:!1,fillSpace:!1});var i=t._create,s=t._setOption;e.extend(t,{_create:function(){this.options.heightStyle=this.options.heightStyle||this._mergeHeightStyle(),i.call(this)},_setOption:function(e){("autoHeight"===e||"clearStyle"===e||"fillSpace"===e)&&(this.options.heightStyle=this._mergeHeightStyle()),s.apply(this,arguments)},_mergeHeightStyle:function(){var e=this.options;return e.fillSpace?"fill":e.clearStyle?"content":e.autoHeight?"auto":undefined}})}(jQuery,jQuery.ui.accordion.prototype),function(e,t){e.extend(t.options.icons,{activeHeader:null,headerSelected:"ui-icon-triangle-1-s"});var i=t._createIcons;t._createIcons=function(){this.options.icons&&(this.options.icons.activeHeader=this.options.icons.activeHeader||this.options.icons.headerSelected),i.call(this)}}(jQuery,jQuery.ui.accordion.prototype),function(e,t){t.activate=t._activate;var i=t._findActive;t._findActive=function(e){return-1===e&&(e=!1),e&&"number"!=typeof e&&(e=this.headers.index(this.headers.filter(e)),-1===e&&(e=!1)),i.call(this,e)}}(jQuery,jQuery.ui.accordion.prototype),jQuery.ui.accordion.prototype.resize=jQuery.ui.accordion.prototype.refresh,function(e,t){e.extend(t.options,{change:null,changestart:null});var i=t._trigger;t._trigger=function(e,t,s){var n=i.apply(this,arguments);return n?("beforeActivate"===e?n=i.call(this,"changestart",t,{oldHeader:s.oldHeader,oldContent:s.oldPanel,newHeader:s.newHeader,newContent:s.newPanel}):"activate"===e&&(n=i.call(this,"change",t,{oldHeader:s.oldHeader,oldContent:s.oldPanel,newHeader:s.newHeader,newContent:s.newPanel})),n):!1}}(jQuery,jQuery.ui.accordion.prototype),function(e,t){e.extend(t.options,{animate:null,animated:"slide"});var i=t._create;t._create=function(){var e=this.options;null===e.animate&&(e.animate=e.animated?"slide"===e.animated?300:"bounceslide"===e.animated?{duration:200,down:{easing:"easeOutBounce",duration:1e3}}:e.animated:!1),i.call(this)}}(jQuery,jQuery.ui.accordion.prototype))})(jQuery);(function(e){var t=0;e.widget("ui.autocomplete",{version:"1.9.2",defaultElement:"<input>",options:{appendTo:"body",autoFocus:!1,delay:300,minLength:1,position:{my:"left top",at:"left bottom",collision:"none"},source:null,change:null,close:null,focus:null,open:null,response:null,search:null,select:null},pending:0,_create:function(){var t,i,s;this.isMultiLine=this._isMultiLine(),this.valueMethod=this.element[this.element.is("input,textarea")?"val":"text"],this.isNewMenu=!0,this.element.addClass("ui-autocomplete-input").attr("autocomplete","off"),this._on(this.element,{keydown:function(n){if(this.element.prop("readOnly"))return t=!0,s=!0,i=!0,undefined;t=!1,s=!1,i=!1;var a=e.ui.keyCode;switch(n.keyCode){case a.PAGE_UP:t=!0,this._move("previousPage",n);break;case a.PAGE_DOWN:t=!0,this._move("nextPage",n);break;case a.UP:t=!0,this._keyEvent("previous",n);break;case a.DOWN:t=!0,this._keyEvent("next",n);break;case a.ENTER:case a.NUMPAD_ENTER:this.menu.active&&(t=!0,n.preventDefault(),this.menu.select(n));break;case a.TAB:this.menu.active&&this.menu.select(n);break;case a.ESCAPE:this.menu.element.is(":visible")&&(this._value(this.term),this.close(n),n.preventDefault());break;default:i=!0,this._searchTimeout(n)}},keypress:function(s){if(t)return t=!1,s.preventDefault(),undefined;if(!i){var n=e.ui.keyCode;switch(s.keyCode){case n.PAGE_UP:this._move("previousPage",s);break;case n.PAGE_DOWN:this._move("nextPage",s);break;case n.UP:this._keyEvent("previous",s);break;case n.DOWN:this._keyEvent("next",s)}}},input:function(e){return s?(s=!1,e.preventDefault(),undefined):(this._searchTimeout(e),undefined)},focus:function(){this.selectedItem=null,this.previous=this._value()},blur:function(e){return this.cancelBlur?(delete this.cancelBlur,undefined):(clearTimeout(this.searching),this.close(e),this._change(e),undefined)}}),this._initSource(),this.menu=e("<ul>").addClass("ui-autocomplete").appendTo(this.document.find(this.options.appendTo||"body")[0]).menu({input:e(),role:null}).zIndex(this.element.zIndex()+1).hide().data("menu"),this._on(this.menu.element,{mousedown:function(t){t.preventDefault(),this.cancelBlur=!0,this._delay(function(){delete this.cancelBlur});var i=this.menu.element[0];e(t.target).closest(".ui-menu-item").length||this._delay(function(){var t=this;this.document.one("mousedown",function(s){s.target===t.element[0]||s.target===i||e.contains(i,s.target)||t.close()})})},menufocus:function(t,i){if(this.isNewMenu&&(this.isNewMenu=!1,t.originalEvent&&/^mouse/.test(t.originalEvent.type)))return this.menu.blur(),this.document.one("mousemove",function(){e(t.target).trigger(t.originalEvent)}),undefined;var s=i.item.data("ui-autocomplete-item")||i.item.data("item.autocomplete");!1!==this._trigger("focus",t,{item:s})?t.originalEvent&&/^key/.test(t.originalEvent.type)&&this._value(s.value):this.liveRegion.text(s.value)},menuselect:function(e,t){var i=t.item.data("ui-autocomplete-item")||t.item.data("item.autocomplete"),s=this.previous;this.element[0]!==this.document[0].activeElement&&(this.element.focus(),this.previous=s,this._delay(function(){this.previous=s,this.selectedItem=i})),!1!==this._trigger("select",e,{item:i})&&this._value(i.value),this.term=this._value(),this.close(e),this.selectedItem=i}}),this.liveRegion=e("<span>",{role:"status","aria-live":"polite"}).addClass("ui-helper-hidden-accessible").insertAfter(this.element),e.fn.bgiframe&&this.menu.element.bgiframe(),this._on(this.window,{beforeunload:function(){this.element.removeAttr("autocomplete")}})},_destroy:function(){clearTimeout(this.searching),this.element.removeClass("ui-autocomplete-input").removeAttr("autocomplete"),this.menu.element.remove(),this.liveRegion.remove()},_setOption:function(e,t){this._super(e,t),"source"===e&&this._initSource(),"appendTo"===e&&this.menu.element.appendTo(this.document.find(t||"body")[0]),"disabled"===e&&t&&this.xhr&&this.xhr.abort()},_isMultiLine:function(){return this.element.is("textarea")?!0:this.element.is("input")?!1:this.element.prop("isContentEditable")},_initSource:function(){var t,i,s=this;e.isArray(this.options.source)?(t=this.options.source,this.source=function(i,s){s(e.ui.autocomplete.filter(t,i.term))}):"string"==typeof this.options.source?(i=this.options.source,this.source=function(t,n){s.xhr&&s.xhr.abort(),s.xhr=e.ajax({url:i,data:t,dataType:"json",success:function(e){n(e)},error:function(){n([])}})}):this.source=this.options.source},_searchTimeout:function(e){clearTimeout(this.searching),this.searching=this._delay(function(){this.term!==this._value()&&(this.selectedItem=null,this.search(null,e))},this.options.delay)},search:function(e,t){return e=null!=e?e:this._value(),this.term=this._value(),e.length<this.options.minLength?this.close(t):this._trigger("search",t)!==!1?this._search(e):undefined},_search:function(e){this.pending++,this.element.addClass("ui-autocomplete-loading"),this.cancelSearch=!1,this.source({term:e},this._response())},_response:function(){var e=this,i=++t;return function(s){i===t&&e.__response(s),e.pending--,e.pending||e.element.removeClass("ui-autocomplete-loading")}},__response:function(e){e&&(e=this._normalize(e)),this._trigger("response",null,{content:e}),!this.options.disabled&&e&&e.length&&!this.cancelSearch?(this._suggest(e),this._trigger("open")):this._close()},close:function(e){this.cancelSearch=!0,this._close(e)},_close:function(e){this.menu.element.is(":visible")&&(this.menu.element.hide(),this.menu.blur(),this.isNewMenu=!0,this._trigger("close",e))},_change:function(e){this.previous!==this._value()&&this._trigger("change",e,{item:this.selectedItem})},_normalize:function(t){return t.length&&t[0].label&&t[0].value?t:e.map(t,function(t){return"string"==typeof t?{label:t,value:t}:e.extend({label:t.label||t.value,value:t.value||t.label},t)})},_suggest:function(t){var i=this.menu.element.empty().zIndex(this.element.zIndex()+1);this._renderMenu(i,t),this.menu.refresh(),i.show(),this._resizeMenu(),i.position(e.extend({of:this.element},this.options.position)),this.options.autoFocus&&this.menu.next()},_resizeMenu:function(){var e=this.menu.element;e.outerWidth(Math.max(e.width("").outerWidth()+1,this.element.outerWidth()))},_renderMenu:function(t,i){var s=this;e.each(i,function(e,i){s._renderItemData(t,i)})},_renderItemData:function(e,t){return this._renderItem(e,t).data("ui-autocomplete-item",t)},_renderItem:function(t,i){return e("<li>").append(e("<a>").text(i.label)).appendTo(t)},_move:function(e,t){return this.menu.element.is(":visible")?this.menu.isFirstItem()&&/^previous/.test(e)||this.menu.isLastItem()&&/^next/.test(e)?(this._value(this.term),this.menu.blur(),undefined):(this.menu[e](t),undefined):(this.search(null,t),undefined)},widget:function(){return this.menu.element},_value:function(){return this.valueMethod.apply(this.element,arguments)},_keyEvent:function(e,t){(!this.isMultiLine||this.menu.element.is(":visible"))&&(this._move(e,t),t.preventDefault())}}),e.extend(e.ui.autocomplete,{escapeRegex:function(e){return e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")},filter:function(t,i){var s=RegExp(e.ui.autocomplete.escapeRegex(i),"i");return e.grep(t,function(e){return s.test(e.label||e.value||e)})}}),e.widget("ui.autocomplete",e.ui.autocomplete,{options:{messages:{noResults:"No search results.",results:function(e){return e+(e>1?" results are":" result is")+" available, use up and down arrow keys to navigate."}}},__response:function(e){var t;this._superApply(arguments),this.options.disabled||this.cancelSearch||(t=e&&e.length?this.options.messages.results(e.length):this.options.messages.noResults,this.liveRegion.text(t))}})})(jQuery);(function(e){var t,i,s,n,a="ui-button ui-widget ui-state-default ui-corner-all",r="ui-state-hover ui-state-active ",o="ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only",h=function(){var t=e(this).find(":ui-button");setTimeout(function(){t.button("refresh")},1)},l=function(t){var i=t.name,s=t.form,n=e([]);return i&&(n=s?e(s).find("[name='"+i+"']"):e("[name='"+i+"']",t.ownerDocument).filter(function(){return!this.form})),n};e.widget("ui.button",{version:"1.9.2",defaultElement:"<button>",options:{disabled:null,text:!0,label:null,icons:{primary:null,secondary:null}},_create:function(){this.element.closest("form").unbind("reset"+this.eventNamespace).bind("reset"+this.eventNamespace,h),"boolean"!=typeof this.options.disabled?this.options.disabled=!!this.element.prop("disabled"):this.element.prop("disabled",this.options.disabled),this._determineButtonType(),this.hasTitle=!!this.buttonElement.attr("title");var r=this,o=this.options,u="checkbox"===this.type||"radio"===this.type,d=u?"":"ui-state-active",c="ui-state-focus";null===o.label&&(o.label="input"===this.type?this.buttonElement.val():this.buttonElement.html()),this._hoverable(this.buttonElement),this.buttonElement.addClass(a).attr("role","button").bind("mouseenter"+this.eventNamespace,function(){o.disabled||this===t&&e(this).addClass("ui-state-active")}).bind("mouseleave"+this.eventNamespace,function(){o.disabled||e(this).removeClass(d)}).bind("click"+this.eventNamespace,function(e){o.disabled&&(e.preventDefault(),e.stopImmediatePropagation())}),this.element.bind("focus"+this.eventNamespace,function(){r.buttonElement.addClass(c)}).bind("blur"+this.eventNamespace,function(){r.buttonElement.removeClass(c)}),u&&(this.element.bind("change"+this.eventNamespace,function(){n||r.refresh()}),this.buttonElement.bind("mousedown"+this.eventNamespace,function(e){o.disabled||(n=!1,i=e.pageX,s=e.pageY)}).bind("mouseup"+this.eventNamespace,function(e){o.disabled||(i!==e.pageX||s!==e.pageY)&&(n=!0)})),"checkbox"===this.type?this.buttonElement.bind("click"+this.eventNamespace,function(){return o.disabled||n?!1:(e(this).toggleClass("ui-state-active"),r.buttonElement.attr("aria-pressed",r.element[0].checked),undefined)}):"radio"===this.type?this.buttonElement.bind("click"+this.eventNamespace,function(){if(o.disabled||n)return!1;e(this).addClass("ui-state-active"),r.buttonElement.attr("aria-pressed","true");var t=r.element[0];l(t).not(t).map(function(){return e(this).button("widget")[0]}).removeClass("ui-state-active").attr("aria-pressed","false")}):(this.buttonElement.bind("mousedown"+this.eventNamespace,function(){return o.disabled?!1:(e(this).addClass("ui-state-active"),t=this,r.document.one("mouseup",function(){t=null}),undefined)}).bind("mouseup"+this.eventNamespace,function(){return o.disabled?!1:(e(this).removeClass("ui-state-active"),undefined)}).bind("keydown"+this.eventNamespace,function(t){return o.disabled?!1:((t.keyCode===e.ui.keyCode.SPACE||t.keyCode===e.ui.keyCode.ENTER)&&e(this).addClass("ui-state-active"),undefined)}).bind("keyup"+this.eventNamespace,function(){e(this).removeClass("ui-state-active")}),this.buttonElement.is("a")&&this.buttonElement.keyup(function(t){t.keyCode===e.ui.keyCode.SPACE&&e(this).click()})),this._setOption("disabled",o.disabled),this._resetButton()},_determineButtonType:function(){var e,t,i;this.type=this.element.is("[type=checkbox]")?"checkbox":this.element.is("[type=radio]")?"radio":this.element.is("input")?"input":"button","checkbox"===this.type||"radio"===this.type?(e=this.element.parents().last(),t="label[for='"+this.element.attr("id")+"']",this.buttonElement=e.find(t),this.buttonElement.length||(e=e.length?e.siblings():this.element.siblings(),this.buttonElement=e.filter(t),this.buttonElement.length||(this.buttonElement=e.find(t))),this.element.addClass("ui-helper-hidden-accessible"),i=this.element.is(":checked"),i&&this.buttonElement.addClass("ui-state-active"),this.buttonElement.prop("aria-pressed",i)):this.buttonElement=this.element},widget:function(){return this.buttonElement},_destroy:function(){this.element.removeClass("ui-helper-hidden-accessible"),this.buttonElement.removeClass(a+" "+r+" "+o).removeAttr("role").removeAttr("aria-pressed").html(this.buttonElement.find(".ui-button-text").html()),this.hasTitle||this.buttonElement.removeAttr("title")},_setOption:function(e,t){return this._super(e,t),"disabled"===e?(t?this.element.prop("disabled",!0):this.element.prop("disabled",!1),undefined):(this._resetButton(),undefined)},refresh:function(){var t=this.element.is("input, button")?this.element.is(":disabled"):this.element.hasClass("ui-button-disabled");t!==this.options.disabled&&this._setOption("disabled",t),"radio"===this.type?l(this.element[0]).each(function(){e(this).is(":checked")?e(this).button("widget").addClass("ui-state-active").attr("aria-pressed","true"):e(this).button("widget").removeClass("ui-state-active").attr("aria-pressed","false")}):"checkbox"===this.type&&(this.element.is(":checked")?this.buttonElement.addClass("ui-state-active").attr("aria-pressed","true"):this.buttonElement.removeClass("ui-state-active").attr("aria-pressed","false"))},_resetButton:function(){if("input"===this.type)return this.options.label&&this.element.val(this.options.label),undefined;var t=this.buttonElement.removeClass(o),i=e("<span></span>",this.document[0]).addClass("ui-button-text").html(this.options.label).appendTo(t.empty()).text(),s=this.options.icons,n=s.primary&&s.secondary,a=[];s.primary||s.secondary?(this.options.text&&a.push("ui-button-text-icon"+(n?"s":s.primary?"-primary":"-secondary")),s.primary&&t.prepend("<span class='ui-button-icon-primary ui-icon "+s.primary+"'></span>"),s.secondary&&t.append("<span class='ui-button-icon-secondary ui-icon "+s.secondary+"'></span>"),this.options.text||(a.push(n?"ui-button-icons-only":"ui-button-icon-only"),this.hasTitle||t.attr("title",e.trim(i)))):a.push("ui-button-text-only"),t.addClass(a.join(" "))}}),e.widget("ui.buttonset",{version:"1.9.2",options:{items:"button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(button)"},_create:function(){this.element.addClass("ui-buttonset")},_init:function(){this.refresh()},_setOption:function(e,t){"disabled"===e&&this.buttons.button("option",e,t),this._super(e,t)},refresh:function(){var t="rtl"===this.element.css("direction");this.buttons=this.element.find(this.options.items).filter(":ui-button").button("refresh").end().not(":ui-button").button().end().map(function(){return e(this).button("widget")[0]}).removeClass("ui-corner-all ui-corner-left ui-corner-right").filter(":first").addClass(t?"ui-corner-right":"ui-corner-left").end().filter(":last").addClass(t?"ui-corner-left":"ui-corner-right").end().end()},_destroy:function(){this.element.removeClass("ui-buttonset"),this.buttons.map(function(){return e(this).button("widget")[0]}).removeClass("ui-corner-left ui-corner-right").end().button("destroy")}})})(jQuery);(function($,undefined){function Datepicker(){this.debug=!1,this._curInst=null,this._keyEvent=!1,this._disabledInputs=[],this._datepickerShowing=!1,this._inDialog=!1,this._mainDivId="ui-datepicker-div",this._inlineClass="ui-datepicker-inline",this._appendClass="ui-datepicker-append",this._triggerClass="ui-datepicker-trigger",this._dialogClass="ui-datepicker-dialog",this._disableClass="ui-datepicker-disabled",this._unselectableClass="ui-datepicker-unselectable",this._currentClass="ui-datepicker-current-day",this._dayOverClass="ui-datepicker-days-cell-over",this.regional=[],this.regional[""]={closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"mm/dd/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},this._defaults={showOn:"focus",showAnim:"fadeIn",showOptions:{},defaultDate:null,appendText:"",buttonText:"...",buttonImage:"",buttonImageOnly:!1,hideIfNoPrevNext:!1,navigationAsDateFormat:!1,gotoCurrent:!1,changeMonth:!1,changeYear:!1,yearRange:"c-10:c+10",showOtherMonths:!1,selectOtherMonths:!1,showWeek:!1,calculateWeek:this.iso8601Week,shortYearCutoff:"+10",minDate:null,maxDate:null,duration:"fast",beforeShowDay:null,beforeShow:null,onSelect:null,onChangeMonthYear:null,onClose:null,numberOfMonths:1,showCurrentAtPos:0,stepMonths:1,stepBigMonths:12,altField:"",altFormat:"",constrainInput:!0,showButtonPanel:!1,autoSize:!1,disabled:!1},$.extend(this._defaults,this.regional[""]),this.dpDiv=bindHover($('<div id="'+this._mainDivId+'" class="ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>'))}function bindHover(e){var t="button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";return e.delegate(t,"mouseout",function(){$(this).removeClass("ui-state-hover"),-1!=this.className.indexOf("ui-datepicker-prev")&&$(this).removeClass("ui-datepicker-prev-hover"),-1!=this.className.indexOf("ui-datepicker-next")&&$(this).removeClass("ui-datepicker-next-hover")}).delegate(t,"mouseover",function(){$.datepicker._isDisabledDatepicker(instActive.inline?e.parent()[0]:instActive.input[0])||($(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover"),$(this).addClass("ui-state-hover"),-1!=this.className.indexOf("ui-datepicker-prev")&&$(this).addClass("ui-datepicker-prev-hover"),-1!=this.className.indexOf("ui-datepicker-next")&&$(this).addClass("ui-datepicker-next-hover"))})}function extendRemove(e,t){$.extend(e,t);for(var i in t)(null==t[i]||t[i]==undefined)&&(e[i]=t[i]);return e}$.extend($.ui,{datepicker:{version:"1.9.2"}});var PROP_NAME="datepicker",dpuuid=(new Date).getTime(),instActive;$.extend(Datepicker.prototype,{markerClassName:"hasDatepicker",maxRows:4,log:function(){this.debug&&console.log.apply("",arguments)},_widgetDatepicker:function(){return this.dpDiv},setDefaults:function(e){return extendRemove(this._defaults,e||{}),this},_attachDatepicker:function(target,settings){var inlineSettings=null;for(var attrName in this._defaults){var attrValue=target.getAttribute("date:"+attrName);if(attrValue){inlineSettings=inlineSettings||{};try{inlineSettings[attrName]=eval(attrValue)}catch(err){inlineSettings[attrName]=attrValue}}}var nodeName=target.nodeName.toLowerCase(),inline="div"==nodeName||"span"==nodeName;target.id||(this.uuid+=1,target.id="dp"+this.uuid);var inst=this._newInst($(target),inline);inst.settings=$.extend({},settings||{},inlineSettings||{}),"input"==nodeName?this._connectDatepicker(target,inst):inline&&this._inlineDatepicker(target,inst)},_newInst:function(e,t){var i=e[0].id.replace(/([^A-Za-z0-9_-])/g,"\\\\$1");return{id:i,input:e,selectedDay:0,selectedMonth:0,selectedYear:0,drawMonth:0,drawYear:0,inline:t,dpDiv:t?bindHover($('<div class="'+this._inlineClass+' ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>')):this.dpDiv}},_connectDatepicker:function(e,t){var i=$(e);t.append=$([]),t.trigger=$([]),i.hasClass(this.markerClassName)||(this._attachments(i,t),i.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp).bind("setData.datepicker",function(e,i,s){t.settings[i]=s}).bind("getData.datepicker",function(e,i){return this._get(t,i)}),this._autoSize(t),$.data(e,PROP_NAME,t),t.settings.disabled&&this._disableDatepicker(e))},_attachments:function(e,t){var i=this._get(t,"appendText"),s=this._get(t,"isRTL");t.append&&t.append.remove(),i&&(t.append=$('<span class="'+this._appendClass+'">'+i+"</span>"),e[s?"before":"after"](t.append)),e.unbind("focus",this._showDatepicker),t.trigger&&t.trigger.remove();var a=this._get(t,"showOn");if(("focus"==a||"both"==a)&&e.focus(this._showDatepicker),"button"==a||"both"==a){var n=this._get(t,"buttonText"),r=this._get(t,"buttonImage");t.trigger=$(this._get(t,"buttonImageOnly")?$("<img/>").addClass(this._triggerClass).attr({src:r,alt:n,title:n}):$('<button type="button"></button>').addClass(this._triggerClass).html(""==r?n:$("<img/>").attr({src:r,alt:n,title:n}))),e[s?"before":"after"](t.trigger),t.trigger.click(function(){return $.datepicker._datepickerShowing&&$.datepicker._lastInput==e[0]?$.datepicker._hideDatepicker():$.datepicker._datepickerShowing&&$.datepicker._lastInput!=e[0]?($.datepicker._hideDatepicker(),$.datepicker._showDatepicker(e[0])):$.datepicker._showDatepicker(e[0]),!1})}},_autoSize:function(e){if(this._get(e,"autoSize")&&!e.inline){var t=new Date(2009,11,20),i=this._get(e,"dateFormat");if(i.match(/[DM]/)){var s=function(e){for(var t=0,i=0,s=0;e.length>s;s++)e[s].length>t&&(t=e[s].length,i=s);return i};t.setMonth(s(this._get(e,i.match(/MM/)?"monthNames":"monthNamesShort"))),t.setDate(s(this._get(e,i.match(/DD/)?"dayNames":"dayNamesShort"))+20-t.getDay())}e.input.attr("size",this._formatDate(e,t).length)}},_inlineDatepicker:function(e,t){var i=$(e);i.hasClass(this.markerClassName)||(i.addClass(this.markerClassName).append(t.dpDiv).bind("setData.datepicker",function(e,i,s){t.settings[i]=s}).bind("getData.datepicker",function(e,i){return this._get(t,i)}),$.data(e,PROP_NAME,t),this._setDate(t,this._getDefaultDate(t),!0),this._updateDatepicker(t),this._updateAlternate(t),t.settings.disabled&&this._disableDatepicker(e),t.dpDiv.css("display","block"))},_dialogDatepicker:function(e,t,i,s,a){var n=this._dialogInst;if(!n){this.uuid+=1;var r="dp"+this.uuid;this._dialogInput=$('<input type="text" id="'+r+'" style="position: absolute; top: -100px; width: 0px;"/>'),this._dialogInput.keydown(this._doKeyDown),$("body").append(this._dialogInput),n=this._dialogInst=this._newInst(this._dialogInput,!1),n.settings={},$.data(this._dialogInput[0],PROP_NAME,n)}if(extendRemove(n.settings,s||{}),t=t&&t.constructor==Date?this._formatDate(n,t):t,this._dialogInput.val(t),this._pos=a?a.length?a:[a.pageX,a.pageY]:null,!this._pos){var o=document.documentElement.clientWidth,h=document.documentElement.clientHeight,l=document.documentElement.scrollLeft||document.body.scrollLeft,u=document.documentElement.scrollTop||document.body.scrollTop;this._pos=[o/2-100+l,h/2-150+u]}return this._dialogInput.css("left",this._pos[0]+20+"px").css("top",this._pos[1]+"px"),n.settings.onSelect=i,this._inDialog=!0,this.dpDiv.addClass(this._dialogClass),this._showDatepicker(this._dialogInput[0]),$.blockUI&&$.blockUI(this.dpDiv),$.data(this._dialogInput[0],PROP_NAME,n),this},_destroyDatepicker:function(e){var t=$(e),i=$.data(e,PROP_NAME);if(t.hasClass(this.markerClassName)){var s=e.nodeName.toLowerCase();$.removeData(e,PROP_NAME),"input"==s?(i.append.remove(),i.trigger.remove(),t.removeClass(this.markerClassName).unbind("focus",this._showDatepicker).unbind("keydown",this._doKeyDown).unbind("keypress",this._doKeyPress).unbind("keyup",this._doKeyUp)):("div"==s||"span"==s)&&t.removeClass(this.markerClassName).empty()}},_enableDatepicker:function(e){var t=$(e),i=$.data(e,PROP_NAME);if(t.hasClass(this.markerClassName)){var s=e.nodeName.toLowerCase();if("input"==s)e.disabled=!1,i.trigger.filter("button").each(function(){this.disabled=!1}).end().filter("img").css({opacity:"1.0",cursor:""});else if("div"==s||"span"==s){var a=t.children("."+this._inlineClass);a.children().removeClass("ui-state-disabled"),a.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",!1)}this._disabledInputs=$.map(this._disabledInputs,function(t){return t==e?null:t})}},_disableDatepicker:function(e){var t=$(e),i=$.data(e,PROP_NAME);if(t.hasClass(this.markerClassName)){var s=e.nodeName.toLowerCase();if("input"==s)e.disabled=!0,i.trigger.filter("button").each(function(){this.disabled=!0}).end().filter("img").css({opacity:"0.5",cursor:"default"});else if("div"==s||"span"==s){var a=t.children("."+this._inlineClass);a.children().addClass("ui-state-disabled"),a.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",!0)}this._disabledInputs=$.map(this._disabledInputs,function(t){return t==e?null:t}),this._disabledInputs[this._disabledInputs.length]=e}},_isDisabledDatepicker:function(e){if(!e)return!1;for(var t=0;this._disabledInputs.length>t;t++)if(this._disabledInputs[t]==e)return!0;return!1},_getInst:function(e){try{return $.data(e,PROP_NAME)}catch(t){throw"Missing instance data for this datepicker"}},_optionDatepicker:function(e,t,i){var s=this._getInst(e);if(2==arguments.length&&"string"==typeof t)return"defaults"==t?$.extend({},$.datepicker._defaults):s?"all"==t?$.extend({},s.settings):this._get(s,t):null;var a=t||{};if("string"==typeof t&&(a={},a[t]=i),s){this._curInst==s&&this._hideDatepicker();var n=this._getDateDatepicker(e,!0),r=this._getMinMaxDate(s,"min"),o=this._getMinMaxDate(s,"max");extendRemove(s.settings,a),null!==r&&a.dateFormat!==undefined&&a.minDate===undefined&&(s.settings.minDate=this._formatDate(s,r)),null!==o&&a.dateFormat!==undefined&&a.maxDate===undefined&&(s.settings.maxDate=this._formatDate(s,o)),this._attachments($(e),s),this._autoSize(s),this._setDate(s,n),this._updateAlternate(s),this._updateDatepicker(s)}},_changeDatepicker:function(e,t,i){this._optionDatepicker(e,t,i)},_refreshDatepicker:function(e){var t=this._getInst(e);t&&this._updateDatepicker(t)},_setDateDatepicker:function(e,t){var i=this._getInst(e);i&&(this._setDate(i,t),this._updateDatepicker(i),this._updateAlternate(i))},_getDateDatepicker:function(e,t){var i=this._getInst(e);return i&&!i.inline&&this._setDateFromField(i,t),i?this._getDate(i):null},_doKeyDown:function(e){var t=$.datepicker._getInst(e.target),i=!0,s=t.dpDiv.is(".ui-datepicker-rtl");if(t._keyEvent=!0,$.datepicker._datepickerShowing)switch(e.keyCode){case 9:$.datepicker._hideDatepicker(),i=!1;break;case 13:var a=$("td."+$.datepicker._dayOverClass+":not(."+$.datepicker._currentClass+")",t.dpDiv);a[0]&&$.datepicker._selectDay(e.target,t.selectedMonth,t.selectedYear,a[0]);var n=$.datepicker._get(t,"onSelect");if(n){var r=$.datepicker._formatDate(t);n.apply(t.input?t.input[0]:null,[r,t])}else $.datepicker._hideDatepicker();return!1;case 27:$.datepicker._hideDatepicker();break;case 33:$.datepicker._adjustDate(e.target,e.ctrlKey?-$.datepicker._get(t,"stepBigMonths"):-$.datepicker._get(t,"stepMonths"),"M");break;case 34:$.datepicker._adjustDate(e.target,e.ctrlKey?+$.datepicker._get(t,"stepBigMonths"):+$.datepicker._get(t,"stepMonths"),"M");break;case 35:(e.ctrlKey||e.metaKey)&&$.datepicker._clearDate(e.target),i=e.ctrlKey||e.metaKey;break;case 36:(e.ctrlKey||e.metaKey)&&$.datepicker._gotoToday(e.target),i=e.ctrlKey||e.metaKey;break;case 37:(e.ctrlKey||e.metaKey)&&$.datepicker._adjustDate(e.target,s?1:-1,"D"),i=e.ctrlKey||e.metaKey,e.originalEvent.altKey&&$.datepicker._adjustDate(e.target,e.ctrlKey?-$.datepicker._get(t,"stepBigMonths"):-$.datepicker._get(t,"stepMonths"),"M");break;case 38:(e.ctrlKey||e.metaKey)&&$.datepicker._adjustDate(e.target,-7,"D"),i=e.ctrlKey||e.metaKey;break;case 39:(e.ctrlKey||e.metaKey)&&$.datepicker._adjustDate(e.target,s?-1:1,"D"),i=e.ctrlKey||e.metaKey,e.originalEvent.altKey&&$.datepicker._adjustDate(e.target,e.ctrlKey?+$.datepicker._get(t,"stepBigMonths"):+$.datepicker._get(t,"stepMonths"),"M");break;case 40:(e.ctrlKey||e.metaKey)&&$.datepicker._adjustDate(e.target,7,"D"),i=e.ctrlKey||e.metaKey;break;default:i=!1}else 36==e.keyCode&&e.ctrlKey?$.datepicker._showDatepicker(this):i=!1;i&&(e.preventDefault(),e.stopPropagation())},_doKeyPress:function(e){var t=$.datepicker._getInst(e.target);if($.datepicker._get(t,"constrainInput")){var i=$.datepicker._possibleChars($.datepicker._get(t,"dateFormat")),s=String.fromCharCode(e.charCode==undefined?e.keyCode:e.charCode);return e.ctrlKey||e.metaKey||" ">s||!i||i.indexOf(s)>-1}},_doKeyUp:function(e){var t=$.datepicker._getInst(e.target);if(t.input.val()!=t.lastVal)try{var i=$.datepicker.parseDate($.datepicker._get(t,"dateFormat"),t.input?t.input.val():null,$.datepicker._getFormatConfig(t));i&&($.datepicker._setDateFromField(t),$.datepicker._updateAlternate(t),$.datepicker._updateDatepicker(t))}catch(s){$.datepicker.log(s)}return!0},_showDatepicker:function(e){if(e=e.target||e,"input"!=e.nodeName.toLowerCase()&&(e=$("input",e.parentNode)[0]),!$.datepicker._isDisabledDatepicker(e)&&$.datepicker._lastInput!=e){var t=$.datepicker._getInst(e);$.datepicker._curInst&&$.datepicker._curInst!=t&&($.datepicker._curInst.dpDiv.stop(!0,!0),t&&$.datepicker._datepickerShowing&&$.datepicker._hideDatepicker($.datepicker._curInst.input[0]));var i=$.datepicker._get(t,"beforeShow"),s=i?i.apply(e,[e,t]):{};if(s!==!1){extendRemove(t.settings,s),t.lastVal=null,$.datepicker._lastInput=e,$.datepicker._setDateFromField(t),$.datepicker._inDialog&&(e.value=""),$.datepicker._pos||($.datepicker._pos=$.datepicker._findPos(e),$.datepicker._pos[1]+=e.offsetHeight);var a=!1;$(e).parents().each(function(){return a|="fixed"==$(this).css("position"),!a});var n={left:$.datepicker._pos[0],top:$.datepicker._pos[1]};if($.datepicker._pos=null,t.dpDiv.empty(),t.dpDiv.css({position:"absolute",display:"block",top:"-1000px"}),$.datepicker._updateDatepicker(t),n=$.datepicker._checkOffset(t,n,a),t.dpDiv.css({position:$.datepicker._inDialog&&$.blockUI?"static":a?"fixed":"absolute",display:"none",left:n.left+"px",top:n.top+"px"}),!t.inline){var r=$.datepicker._get(t,"showAnim"),o=$.datepicker._get(t,"duration"),h=function(){var e=t.dpDiv.find("iframe.ui-datepicker-cover");if(e.length){var i=$.datepicker._getBorders(t.dpDiv);e.css({left:-i[0],top:-i[1],width:t.dpDiv.outerWidth(),height:t.dpDiv.outerHeight()})}};t.dpDiv.zIndex($(e).zIndex()+1),$.datepicker._datepickerShowing=!0,$.effects&&($.effects.effect[r]||$.effects[r])?t.dpDiv.show(r,$.datepicker._get(t,"showOptions"),o,h):t.dpDiv[r||"show"](r?o:null,h),r&&o||h(),t.input.is(":visible")&&!t.input.is(":disabled")&&t.input.focus(),$.datepicker._curInst=t}}}},_updateDatepicker:function(e){this.maxRows=4;var t=$.datepicker._getBorders(e.dpDiv);instActive=e,e.dpDiv.empty().append(this._generateHTML(e)),this._attachHandlers(e);var i=e.dpDiv.find("iframe.ui-datepicker-cover");i.length&&i.css({left:-t[0],top:-t[1],width:e.dpDiv.outerWidth(),height:e.dpDiv.outerHeight()}),e.dpDiv.find("."+this._dayOverClass+" a").mouseover();var s=this._getNumberOfMonths(e),a=s[1],n=17;if(e.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width(""),a>1&&e.dpDiv.addClass("ui-datepicker-multi-"+a).css("width",n*a+"em"),e.dpDiv[(1!=s[0]||1!=s[1]?"add":"remove")+"Class"]("ui-datepicker-multi"),e.dpDiv[(this._get(e,"isRTL")?"add":"remove")+"Class"]("ui-datepicker-rtl"),e==$.datepicker._curInst&&$.datepicker._datepickerShowing&&e.input&&e.input.is(":visible")&&!e.input.is(":disabled")&&e.input[0]!=document.activeElement&&e.input.focus(),e.yearshtml){var r=e.yearshtml;setTimeout(function(){r===e.yearshtml&&e.yearshtml&&e.dpDiv.find("select.ui-datepicker-year:first").replaceWith(e.yearshtml),r=e.yearshtml=null},0)}},_getBorders:function(e){var t=function(e){return{thin:1,medium:2,thick:3}[e]||e};return[parseFloat(t(e.css("border-left-width"))),parseFloat(t(e.css("border-top-width")))]},_checkOffset:function(e,t,i){var s=e.dpDiv.outerWidth(),a=e.dpDiv.outerHeight(),n=e.input?e.input.outerWidth():0,r=e.input?e.input.outerHeight():0,o=document.documentElement.clientWidth+(i?0:$(document).scrollLeft()),h=document.documentElement.clientHeight+(i?0:$(document).scrollTop());return t.left-=this._get(e,"isRTL")?s-n:0,t.left-=i&&t.left==e.input.offset().left?$(document).scrollLeft():0,t.top-=i&&t.top==e.input.offset().top+r?$(document).scrollTop():0,t.left-=Math.min(t.left,t.left+s>o&&o>s?Math.abs(t.left+s-o):0),t.top-=Math.min(t.top,t.top+a>h&&h>a?Math.abs(a+r):0),t},_findPos:function(e){for(var t=this._getInst(e),i=this._get(t,"isRTL");e&&("hidden"==e.type||1!=e.nodeType||$.expr.filters.hidden(e));)e=e[i?"previousSibling":"nextSibling"];var s=$(e).offset();return[s.left,s.top]},_hideDatepicker:function(e){var t=this._curInst;if(t&&(!e||t==$.data(e,PROP_NAME))&&this._datepickerShowing){var i=this._get(t,"showAnim"),s=this._get(t,"duration"),a=function(){$.datepicker._tidyDialog(t)};$.effects&&($.effects.effect[i]||$.effects[i])?t.dpDiv.hide(i,$.datepicker._get(t,"showOptions"),s,a):t.dpDiv["slideDown"==i?"slideUp":"fadeIn"==i?"fadeOut":"hide"](i?s:null,a),i||a(),this._datepickerShowing=!1;var n=this._get(t,"onClose");n&&n.apply(t.input?t.input[0]:null,[t.input?t.input.val():"",t]),this._lastInput=null,this._inDialog&&(this._dialogInput.css({position:"absolute",left:"0",top:"-100px"}),$.blockUI&&($.unblockUI(),$("body").append(this.dpDiv))),this._inDialog=!1}},_tidyDialog:function(e){e.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar")},_checkExternalClick:function(e){if($.datepicker._curInst){var t=$(e.target),i=$.datepicker._getInst(t[0]);(t[0].id!=$.datepicker._mainDivId&&0==t.parents("#"+$.datepicker._mainDivId).length&&!t.hasClass($.datepicker.markerClassName)&&!t.closest("."+$.datepicker._triggerClass).length&&$.datepicker._datepickerShowing&&(!$.datepicker._inDialog||!$.blockUI)||t.hasClass($.datepicker.markerClassName)&&$.datepicker._curInst!=i)&&$.datepicker._hideDatepicker()}},_adjustDate:function(e,t,i){var s=$(e),a=this._getInst(s[0]);this._isDisabledDatepicker(s[0])||(this._adjustInstDate(a,t+("M"==i?this._get(a,"showCurrentAtPos"):0),i),this._updateDatepicker(a))},_gotoToday:function(e){var t=$(e),i=this._getInst(t[0]);if(this._get(i,"gotoCurrent")&&i.currentDay)i.selectedDay=i.currentDay,i.drawMonth=i.selectedMonth=i.currentMonth,i.drawYear=i.selectedYear=i.currentYear;else{var s=new Date;i.selectedDay=s.getDate(),i.drawMonth=i.selectedMonth=s.getMonth(),i.drawYear=i.selectedYear=s.getFullYear()}this._notifyChange(i),this._adjustDate(t)},_selectMonthYear:function(e,t,i){var s=$(e),a=this._getInst(s[0]);a["selected"+("M"==i?"Month":"Year")]=a["draw"+("M"==i?"Month":"Year")]=parseInt(t.options[t.selectedIndex].value,10),this._notifyChange(a),this._adjustDate(s)},_selectDay:function(e,t,i,s){var a=$(e);if(!$(s).hasClass(this._unselectableClass)&&!this._isDisabledDatepicker(a[0])){var n=this._getInst(a[0]);n.selectedDay=n.currentDay=$("a",s).html(),n.selectedMonth=n.currentMonth=t,n.selectedYear=n.currentYear=i,this._selectDate(e,this._formatDate(n,n.currentDay,n.currentMonth,n.currentYear))}},_clearDate:function(e){var t=$(e);this._getInst(t[0]),this._selectDate(t,"")},_selectDate:function(e,t){var i=$(e),s=this._getInst(i[0]);t=null!=t?t:this._formatDate(s),s.input&&s.input.val(t),this._updateAlternate(s);var a=this._get(s,"onSelect");a?a.apply(s.input?s.input[0]:null,[t,s]):s.input&&s.input.trigger("change"),s.inline?this._updateDatepicker(s):(this._hideDatepicker(),this._lastInput=s.input[0],"object"!=typeof s.input[0]&&s.input.focus(),this._lastInput=null)},_updateAlternate:function(e){var t=this._get(e,"altField");if(t){var i=this._get(e,"altFormat")||this._get(e,"dateFormat"),s=this._getDate(e),a=this.formatDate(i,s,this._getFormatConfig(e));$(t).each(function(){$(this).val(a)})}},noWeekends:function(e){var t=e.getDay();return[t>0&&6>t,""]},iso8601Week:function(e){var t=new Date(e.getTime());t.setDate(t.getDate()+4-(t.getDay()||7));var i=t.getTime();return t.setMonth(0),t.setDate(1),Math.floor(Math.round((i-t)/864e5)/7)+1},parseDate:function(e,t,i){if(null==e||null==t)throw"Invalid arguments";if(t="object"==typeof t?""+t:t+"",""==t)return null;var s=(i?i.shortYearCutoff:null)||this._defaults.shortYearCutoff;s="string"!=typeof s?s:(new Date).getFullYear()%100+parseInt(s,10);for(var a=(i?i.dayNamesShort:null)||this._defaults.dayNamesShort,n=(i?i.dayNames:null)||this._defaults.dayNames,r=(i?i.monthNamesShort:null)||this._defaults.monthNamesShort,o=(i?i.monthNames:null)||this._defaults.monthNames,h=-1,l=-1,u=-1,d=-1,c=!1,p=function(t){var i=e.length>y+1&&e.charAt(y+1)==t;return i&&y++,i},f=function(e){var i=p(e),s="@"==e?14:"!"==e?20:"y"==e&&i?4:"o"==e?3:2,a=RegExp("^\\d{1,"+s+"}"),n=t.substring(v).match(a);if(!n)throw"Missing number at position "+v;return v+=n[0].length,parseInt(n[0],10)},m=function(e,i,s){var a=$.map(p(e)?s:i,function(e,t){return[[t,e]]}).sort(function(e,t){return-(e[1].length-t[1].length)}),n=-1;if($.each(a,function(e,i){var s=i[1];return t.substr(v,s.length).toLowerCase()==s.toLowerCase()?(n=i[0],v+=s.length,!1):undefined}),-1!=n)return n+1;throw"Unknown name at position "+v},g=function(){if(t.charAt(v)!=e.charAt(y))throw"Unexpected literal at position "+v;v++},v=0,y=0;e.length>y;y++)if(c)"'"!=e.charAt(y)||p("'")?g():c=!1;else switch(e.charAt(y)){case"d":u=f("d");break;case"D":m("D",a,n);break;case"o":d=f("o");break;case"m":l=f("m");break;case"M":l=m("M",r,o);break;case"y":h=f("y");break;case"@":var b=new Date(f("@"));h=b.getFullYear(),l=b.getMonth()+1,u=b.getDate();break;case"!":var b=new Date((f("!")-this._ticksTo1970)/1e4);h=b.getFullYear(),l=b.getMonth()+1,u=b.getDate();break;case"'":p("'")?g():c=!0;break;default:g()}if(t.length>v){var _=t.substr(v);if(!/^\s+/.test(_))throw"Extra/unparsed characters found in date: "+_}if(-1==h?h=(new Date).getFullYear():100>h&&(h+=(new Date).getFullYear()-(new Date).getFullYear()%100+(s>=h?0:-100)),d>-1)for(l=1,u=d;;){var x=this._getDaysInMonth(h,l-1);if(x>=u)break;l++,u-=x}var b=this._daylightSavingAdjust(new Date(h,l-1,u));if(b.getFullYear()!=h||b.getMonth()+1!=l||b.getDate()!=u)throw"Invalid date";return b},ATOM:"yy-mm-dd",COOKIE:"D, dd M yy",ISO_8601:"yy-mm-dd",RFC_822:"D, d M y",RFC_850:"DD, dd-M-y",RFC_1036:"D, d M y",RFC_1123:"D, d M yy",RFC_2822:"D, d M yy",RSS:"D, d M y",TICKS:"!",TIMESTAMP:"@",W3C:"yy-mm-dd",_ticksTo1970:1e7*60*60*24*(718685+Math.floor(492.5)-Math.floor(19.7)+Math.floor(4.925)),formatDate:function(e,t,i){if(!t)return"";var s=(i?i.dayNamesShort:null)||this._defaults.dayNamesShort,a=(i?i.dayNames:null)||this._defaults.dayNames,n=(i?i.monthNamesShort:null)||this._defaults.monthNamesShort,r=(i?i.monthNames:null)||this._defaults.monthNames,o=function(t){var i=e.length>c+1&&e.charAt(c+1)==t;return i&&c++,i},h=function(e,t,i){var s=""+t;if(o(e))for(;i>s.length;)s="0"+s;return s},l=function(e,t,i,s){return o(e)?s[t]:i[t]},u="",d=!1;if(t)for(var c=0;e.length>c;c++)if(d)"'"!=e.charAt(c)||o("'")?u+=e.charAt(c):d=!1;else switch(e.charAt(c)){case"d":u+=h("d",t.getDate(),2);break;case"D":u+=l("D",t.getDay(),s,a);break;case"o":u+=h("o",Math.round((new Date(t.getFullYear(),t.getMonth(),t.getDate()).getTime()-new Date(t.getFullYear(),0,0).getTime())/864e5),3);break;case"m":u+=h("m",t.getMonth()+1,2);break;case"M":u+=l("M",t.getMonth(),n,r);break;case"y":u+=o("y")?t.getFullYear():(10>t.getYear()%100?"0":"")+t.getYear()%100;break;case"@":u+=t.getTime();break;case"!":u+=1e4*t.getTime()+this._ticksTo1970;break;case"'":o("'")?u+="'":d=!0;break;default:u+=e.charAt(c)}return u},_possibleChars:function(e){for(var t="",i=!1,s=function(t){var i=e.length>a+1&&e.charAt(a+1)==t;return i&&a++,i},a=0;e.length>a;a++)if(i)"'"!=e.charAt(a)||s("'")?t+=e.charAt(a):i=!1;else switch(e.charAt(a)){case"d":case"m":case"y":case"@":t+="0123456789";break;case"D":case"M":return null;case"'":s("'")?t+="'":i=!0;break;default:t+=e.charAt(a)}return t},_get:function(e,t){return e.settings[t]!==undefined?e.settings[t]:this._defaults[t]},_setDateFromField:function(e,t){if(e.input.val()!=e.lastVal){var i,s,a=this._get(e,"dateFormat"),n=e.lastVal=e.input?e.input.val():null;i=s=this._getDefaultDate(e);var r=this._getFormatConfig(e);try{i=this.parseDate(a,n,r)||s}catch(o){this.log(o),n=t?"":n}e.selectedDay=i.getDate(),e.drawMonth=e.selectedMonth=i.getMonth(),e.drawYear=e.selectedYear=i.getFullYear(),e.currentDay=n?i.getDate():0,e.currentMonth=n?i.getMonth():0,e.currentYear=n?i.getFullYear():0,this._adjustInstDate(e)}},_getDefaultDate:function(e){return this._restrictMinMax(e,this._determineDate(e,this._get(e,"defaultDate"),new Date))},_determineDate:function(e,t,i){var s=function(e){var t=new Date;return t.setDate(t.getDate()+e),t},a=function(t){try{return $.datepicker.parseDate($.datepicker._get(e,"dateFormat"),t,$.datepicker._getFormatConfig(e))}catch(i){}for(var s=(t.toLowerCase().match(/^c/)?$.datepicker._getDate(e):null)||new Date,a=s.getFullYear(),n=s.getMonth(),r=s.getDate(),o=/([+-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,h=o.exec(t);h;){switch(h[2]||"d"){case"d":case"D":r+=parseInt(h[1],10);break;case"w":case"W":r+=7*parseInt(h[1],10);break;case"m":case"M":n+=parseInt(h[1],10),r=Math.min(r,$.datepicker._getDaysInMonth(a,n));break;case"y":case"Y":a+=parseInt(h[1],10),r=Math.min(r,$.datepicker._getDaysInMonth(a,n))}h=o.exec(t)}return new Date(a,n,r)},n=null==t||""===t?i:"string"==typeof t?a(t):"number"==typeof t?isNaN(t)?i:s(t):new Date(t.getTime());return n=n&&"Invalid Date"==""+n?i:n,n&&(n.setHours(0),n.setMinutes(0),n.setSeconds(0),n.setMilliseconds(0)),this._daylightSavingAdjust(n)},_daylightSavingAdjust:function(e){return e?(e.setHours(e.getHours()>12?e.getHours()+2:0),e):null},_setDate:function(e,t,i){var s=!t,a=e.selectedMonth,n=e.selectedYear,r=this._restrictMinMax(e,this._determineDate(e,t,new Date));e.selectedDay=e.currentDay=r.getDate(),e.drawMonth=e.selectedMonth=e.currentMonth=r.getMonth(),e.drawYear=e.selectedYear=e.currentYear=r.getFullYear(),a==e.selectedMonth&&n==e.selectedYear||i||this._notifyChange(e),this._adjustInstDate(e),e.input&&e.input.val(s?"":this._formatDate(e))},_getDate:function(e){var t=!e.currentYear||e.input&&""==e.input.val()?null:this._daylightSavingAdjust(new Date(e.currentYear,e.currentMonth,e.currentDay));return t},_attachHandlers:function(e){var t=this._get(e,"stepMonths"),i="#"+e.id.replace(/\\\\/g,"\\");e.dpDiv.find("[data-handler]").map(function(){var e={prev:function(){window["DP_jQuery_"+dpuuid].datepicker._adjustDate(i,-t,"M")},next:function(){window["DP_jQuery_"+dpuuid].datepicker._adjustDate(i,+t,"M")},hide:function(){window["DP_jQuery_"+dpuuid].datepicker._hideDatepicker()},today:function(){window["DP_jQuery_"+dpuuid].datepicker._gotoToday(i)},selectDay:function(){return window["DP_jQuery_"+dpuuid].datepicker._selectDay(i,+this.getAttribute("data-month"),+this.getAttribute("data-year"),this),!1},selectMonth:function(){return window["DP_jQuery_"+dpuuid].datepicker._selectMonthYear(i,this,"M"),!1},selectYear:function(){return window["DP_jQuery_"+dpuuid].datepicker._selectMonthYear(i,this,"Y"),!1}};$(this).bind(this.getAttribute("data-event"),e[this.getAttribute("data-handler")])})},_generateHTML:function(e){var t=new Date;t=this._daylightSavingAdjust(new Date(t.getFullYear(),t.getMonth(),t.getDate()));var i=this._get(e,"isRTL"),s=this._get(e,"showButtonPanel"),a=this._get(e,"hideIfNoPrevNext"),n=this._get(e,"navigationAsDateFormat"),r=this._getNumberOfMonths(e),o=this._get(e,"showCurrentAtPos"),h=this._get(e,"stepMonths"),l=1!=r[0]||1!=r[1],u=this._daylightSavingAdjust(e.currentDay?new Date(e.currentYear,e.currentMonth,e.currentDay):new Date(9999,9,9)),d=this._getMinMaxDate(e,"min"),c=this._getMinMaxDate(e,"max"),p=e.drawMonth-o,f=e.drawYear;if(0>p&&(p+=12,f--),c){var m=this._daylightSavingAdjust(new Date(c.getFullYear(),c.getMonth()-r[0]*r[1]+1,c.getDate()));for(m=d&&d>m?d:m;this._daylightSavingAdjust(new Date(f,p,1))>m;)p--,0>p&&(p=11,f--)}e.drawMonth=p,e.drawYear=f;var g=this._get(e,"prevText");g=n?this.formatDate(g,this._daylightSavingAdjust(new Date(f,p-h,1)),this._getFormatConfig(e)):g;var v=this._canAdjustMonth(e,-1,f,p)?'<a class="ui-datepicker-prev ui-corner-all" data-handler="prev" data-event="click" title="'+g+'"><span class="ui-icon ui-icon-circle-triangle-'+(i?"e":"w")+'">'+g+"</span></a>":a?"":'<a class="ui-datepicker-prev ui-corner-all ui-state-disabled" title="'+g+'"><span class="ui-icon ui-icon-circle-triangle-'+(i?"e":"w")+'">'+g+"</span></a>",y=this._get(e,"nextText");y=n?this.formatDate(y,this._daylightSavingAdjust(new Date(f,p+h,1)),this._getFormatConfig(e)):y;var b=this._canAdjustMonth(e,1,f,p)?'<a class="ui-datepicker-next ui-corner-all" data-handler="next" data-event="click" title="'+y+'"><span class="ui-icon ui-icon-circle-triangle-'+(i?"w":"e")+'">'+y+"</span></a>":a?"":'<a class="ui-datepicker-next ui-corner-all ui-state-disabled" title="'+y+'"><span class="ui-icon ui-icon-circle-triangle-'+(i?"w":"e")+'">'+y+"</span></a>",_=this._get(e,"currentText"),x=this._get(e,"gotoCurrent")&&e.currentDay?u:t;_=n?this.formatDate(_,x,this._getFormatConfig(e)):_;var k=e.inline?"":'<button type="button" class="ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all" data-handler="hide" data-event="click">'+this._get(e,"closeText")+"</button>",w=s?'<div class="ui-datepicker-buttonpane ui-widget-content">'+(i?k:"")+(this._isInRange(e,x)?'<button type="button" class="ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all" data-handler="today" data-event="click">'+_+"</button>":"")+(i?"":k)+"</div>":"",D=parseInt(this._get(e,"firstDay"),10);D=isNaN(D)?0:D;var T=this._get(e,"showWeek"),S=this._get(e,"dayNames");this._get(e,"dayNamesShort");var M=this._get(e,"dayNamesMin"),N=this._get(e,"monthNames"),C=this._get(e,"monthNamesShort"),A=this._get(e,"beforeShowDay"),P=this._get(e,"showOtherMonths"),I=this._get(e,"selectOtherMonths");this._get(e,"calculateWeek")||this.iso8601Week;for(var H=this._getDefaultDate(e),z="",F=0;r[0]>F;F++){var j="";this.maxRows=4;for(var E=0;r[1]>E;E++){var O=this._daylightSavingAdjust(new Date(f,p,e.selectedDay)),W=" ui-corner-all",L="";if(l){if(L+='<div class="ui-datepicker-group',r[1]>1)switch(E){case 0:L+=" ui-datepicker-group-first",W=" ui-corner-"+(i?"right":"left");break;case r[1]-1:L+=" ui-datepicker-group-last",W=" ui-corner-"+(i?"left":"right");break;default:L+=" ui-datepicker-group-middle",W=""}L+='">'}L+='<div class="ui-datepicker-header ui-widget-header ui-helper-clearfix'+W+'">'+(/all|left/.test(W)&&0==F?i?b:v:"")+(/all|right/.test(W)&&0==F?i?v:b:"")+this._generateMonthYearHeader(e,p,f,d,c,F>0||E>0,N,C)+'</div><table class="ui-datepicker-calendar"><thead>'+"<tr>";for(var R=T?'<th class="ui-datepicker-week-col">'+this._get(e,"weekHeader")+"</th>":"",Y=0;7>Y;Y++){var J=(Y+D)%7;R+="<th"+((Y+D+6)%7>=5?' class="ui-datepicker-week-end"':"")+">"+'<span title="'+S[J]+'">'+M[J]+"</span></th>"}L+=R+"</tr></thead><tbody>";var B=this._getDaysInMonth(f,p);f==e.selectedYear&&p==e.selectedMonth&&(e.selectedDay=Math.min(e.selectedDay,B));var Q=(this._getFirstDayOfMonth(f,p)-D+7)%7,K=Math.ceil((Q+B)/7),V=l?this.maxRows>K?this.maxRows:K:K;this.maxRows=V;for(var U=this._daylightSavingAdjust(new Date(f,p,1-Q)),q=0;V>q;q++){L+="<tr>";for(var G=T?'<td class="ui-datepicker-week-col">'+this._get(e,"calculateWeek")(U)+"</td>":"",Y=0;7>Y;Y++){var X=A?A.apply(e.input?e.input[0]:null,[U]):[!0,""],Z=U.getMonth()!=p,et=Z&&!I||!X[0]||d&&d>U||c&&U>c;G+='<td class="'+((Y+D+6)%7>=5?" ui-datepicker-week-end":"")+(Z?" ui-datepicker-other-month":"")+(U.getTime()==O.getTime()&&p==e.selectedMonth&&e._keyEvent||H.getTime()==U.getTime()&&H.getTime()==O.getTime()?" "+this._dayOverClass:"")+(et?" "+this._unselectableClass+" ui-state-disabled":"")+(Z&&!P?"":" "+X[1]+(U.getTime()==u.getTime()?" "+this._currentClass:"")+(U.getTime()==t.getTime()?" ui-datepicker-today":""))+'"'+(Z&&!P||!X[2]?"":' title="'+X[2]+'"')+(et?"":' data-handler="selectDay" data-event="click" data-month="'+U.getMonth()+'" data-year="'+U.getFullYear()+'"')+">"+(Z&&!P?"&#xa0;":et?'<span class="ui-state-default">'+U.getDate()+"</span>":'<a class="ui-state-default'+(U.getTime()==t.getTime()?" ui-state-highlight":"")+(U.getTime()==u.getTime()?" ui-state-active":"")+(Z?" ui-priority-secondary":"")+'" href="#">'+U.getDate()+"</a>")+"</td>",U.setDate(U.getDate()+1),U=this._daylightSavingAdjust(U)
}L+=G+"</tr>"}p++,p>11&&(p=0,f++),L+="</tbody></table>"+(l?"</div>"+(r[0]>0&&E==r[1]-1?'<div class="ui-datepicker-row-break"></div>':""):""),j+=L}z+=j}return z+=w+($.ui.ie6&&!e.inline?'<iframe src="javascript:false;" class="ui-datepicker-cover" frameborder="0"></iframe>':""),e._keyEvent=!1,z},_generateMonthYearHeader:function(e,t,i,s,a,n,r,o){var h=this._get(e,"changeMonth"),l=this._get(e,"changeYear"),u=this._get(e,"showMonthAfterYear"),d='<div class="ui-datepicker-title">',c="";if(n||!h)c+='<span class="ui-datepicker-month">'+r[t]+"</span>";else{var p=s&&s.getFullYear()==i,f=a&&a.getFullYear()==i;c+='<select class="ui-datepicker-month" data-handler="selectMonth" data-event="change">';for(var m=0;12>m;m++)(!p||m>=s.getMonth())&&(!f||a.getMonth()>=m)&&(c+='<option value="'+m+'"'+(m==t?' selected="selected"':"")+">"+o[m]+"</option>");c+="</select>"}if(u||(d+=c+(!n&&h&&l?"":"&#xa0;")),!e.yearshtml)if(e.yearshtml="",n||!l)d+='<span class="ui-datepicker-year">'+i+"</span>";else{var g=this._get(e,"yearRange").split(":"),v=(new Date).getFullYear(),y=function(e){var t=e.match(/c[+-].*/)?i+parseInt(e.substring(1),10):e.match(/[+-].*/)?v+parseInt(e,10):parseInt(e,10);return isNaN(t)?v:t},b=y(g[0]),_=Math.max(b,y(g[1]||""));for(b=s?Math.max(b,s.getFullYear()):b,_=a?Math.min(_,a.getFullYear()):_,e.yearshtml+='<select class="ui-datepicker-year" data-handler="selectYear" data-event="change">';_>=b;b++)e.yearshtml+='<option value="'+b+'"'+(b==i?' selected="selected"':"")+">"+b+"</option>";e.yearshtml+="</select>",d+=e.yearshtml,e.yearshtml=null}return d+=this._get(e,"yearSuffix"),u&&(d+=(!n&&h&&l?"":"&#xa0;")+c),d+="</div>"},_adjustInstDate:function(e,t,i){var s=e.drawYear+("Y"==i?t:0),a=e.drawMonth+("M"==i?t:0),n=Math.min(e.selectedDay,this._getDaysInMonth(s,a))+("D"==i?t:0),r=this._restrictMinMax(e,this._daylightSavingAdjust(new Date(s,a,n)));e.selectedDay=r.getDate(),e.drawMonth=e.selectedMonth=r.getMonth(),e.drawYear=e.selectedYear=r.getFullYear(),("M"==i||"Y"==i)&&this._notifyChange(e)},_restrictMinMax:function(e,t){var i=this._getMinMaxDate(e,"min"),s=this._getMinMaxDate(e,"max"),a=i&&i>t?i:t;return a=s&&a>s?s:a},_notifyChange:function(e){var t=this._get(e,"onChangeMonthYear");t&&t.apply(e.input?e.input[0]:null,[e.selectedYear,e.selectedMonth+1,e])},_getNumberOfMonths:function(e){var t=this._get(e,"numberOfMonths");return null==t?[1,1]:"number"==typeof t?[1,t]:t},_getMinMaxDate:function(e,t){return this._determineDate(e,this._get(e,t+"Date"),null)},_getDaysInMonth:function(e,t){return 32-this._daylightSavingAdjust(new Date(e,t,32)).getDate()},_getFirstDayOfMonth:function(e,t){return new Date(e,t,1).getDay()},_canAdjustMonth:function(e,t,i,s){var a=this._getNumberOfMonths(e),n=this._daylightSavingAdjust(new Date(i,s+(0>t?t:a[0]*a[1]),1));return 0>t&&n.setDate(this._getDaysInMonth(n.getFullYear(),n.getMonth())),this._isInRange(e,n)},_isInRange:function(e,t){var i=this._getMinMaxDate(e,"min"),s=this._getMinMaxDate(e,"max");return(!i||t.getTime()>=i.getTime())&&(!s||t.getTime()<=s.getTime())},_getFormatConfig:function(e){var t=this._get(e,"shortYearCutoff");return t="string"!=typeof t?t:(new Date).getFullYear()%100+parseInt(t,10),{shortYearCutoff:t,dayNamesShort:this._get(e,"dayNamesShort"),dayNames:this._get(e,"dayNames"),monthNamesShort:this._get(e,"monthNamesShort"),monthNames:this._get(e,"monthNames")}},_formatDate:function(e,t,i,s){t||(e.currentDay=e.selectedDay,e.currentMonth=e.selectedMonth,e.currentYear=e.selectedYear);var a=t?"object"==typeof t?t:this._daylightSavingAdjust(new Date(s,i,t)):this._daylightSavingAdjust(new Date(e.currentYear,e.currentMonth,e.currentDay));return this.formatDate(this._get(e,"dateFormat"),a,this._getFormatConfig(e))}}),$.fn.datepicker=function(e){if(!this.length)return this;$.datepicker.initialized||($(document).mousedown($.datepicker._checkExternalClick).find(document.body).append($.datepicker.dpDiv),$.datepicker.initialized=!0);var t=Array.prototype.slice.call(arguments,1);return"string"!=typeof e||"isDisabled"!=e&&"getDate"!=e&&"widget"!=e?"option"==e&&2==arguments.length&&"string"==typeof arguments[1]?$.datepicker["_"+e+"Datepicker"].apply($.datepicker,[this[0]].concat(t)):this.each(function(){"string"==typeof e?$.datepicker["_"+e+"Datepicker"].apply($.datepicker,[this].concat(t)):$.datepicker._attachDatepicker(this,e)}):$.datepicker["_"+e+"Datepicker"].apply($.datepicker,[this[0]].concat(t))},$.datepicker=new Datepicker,$.datepicker.initialized=!1,$.datepicker.uuid=(new Date).getTime(),$.datepicker.version="1.9.2",window["DP_jQuery_"+dpuuid]=$})(jQuery);(function(e,t){var i="ui-dialog ui-widget ui-widget-content ui-corner-all ",s={buttons:!0,height:!0,maxHeight:!0,maxWidth:!0,minHeight:!0,minWidth:!0,width:!0},a={maxHeight:!0,maxWidth:!0,minHeight:!0,minWidth:!0};e.widget("ui.dialog",{version:"1.9.2",options:{autoOpen:!0,buttons:{},closeOnEscape:!0,closeText:"close",dialogClass:"",draggable:!0,hide:null,height:"auto",maxHeight:!1,maxWidth:!1,minHeight:150,minWidth:150,modal:!1,position:{my:"center",at:"center",of:window,collision:"fit",using:function(t){var i=e(this).css(t).offset().top;0>i&&e(this).css("top",t.top-i)}},resizable:!0,show:null,stack:!0,title:"",width:300,zIndex:1e3},_create:function(){this.originalTitle=this.element.attr("title"),"string"!=typeof this.originalTitle&&(this.originalTitle=""),this.oldPosition={parent:this.element.parent(),index:this.element.parent().children().index(this.element)},this.options.title=this.options.title||this.originalTitle;var s,a,n,r,o,h=this,l=this.options,u=l.title||"&#160;";s=(this.uiDialog=e("<div>")).addClass(i+l.dialogClass).css({display:"none",outline:0,zIndex:l.zIndex}).attr("tabIndex",-1).keydown(function(t){l.closeOnEscape&&!t.isDefaultPrevented()&&t.keyCode&&t.keyCode===e.ui.keyCode.ESCAPE&&(h.close(t),t.preventDefault())}).mousedown(function(e){h.moveToTop(!1,e)}).appendTo("body"),this.element.show().removeAttr("title").addClass("ui-dialog-content ui-widget-content").appendTo(s),a=(this.uiDialogTitlebar=e("<div>")).addClass("ui-dialog-titlebar  ui-widget-header  ui-corner-all  ui-helper-clearfix").bind("mousedown",function(){s.focus()}).prependTo(s),n=e("<a href='#'></a>").addClass("ui-dialog-titlebar-close  ui-corner-all").attr("role","button").click(function(e){e.preventDefault(),h.close(e)}).appendTo(a),(this.uiDialogTitlebarCloseText=e("<span>")).addClass("ui-icon ui-icon-closethick").text(l.closeText).appendTo(n),r=e("<span>").uniqueId().addClass("ui-dialog-title").html(u).prependTo(a),o=(this.uiDialogButtonPane=e("<div>")).addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix"),(this.uiButtonSet=e("<div>")).addClass("ui-dialog-buttonset").appendTo(o),s.attr({role:"dialog","aria-labelledby":r.attr("id")}),a.find("*").add(a).disableSelection(),this._hoverable(n),this._focusable(n),l.draggable&&e.fn.draggable&&this._makeDraggable(),l.resizable&&e.fn.resizable&&this._makeResizable(),this._createButtons(l.buttons),this._isOpen=!1,e.fn.bgiframe&&s.bgiframe(),this._on(s,{keydown:function(i){if(l.modal&&i.keyCode===e.ui.keyCode.TAB){var a=e(":tabbable",s),n=a.filter(":first"),r=a.filter(":last");return i.target!==r[0]||i.shiftKey?i.target===n[0]&&i.shiftKey?(r.focus(1),!1):t:(n.focus(1),!1)}}})},_init:function(){this.options.autoOpen&&this.open()},_destroy:function(){var e,t=this.oldPosition;this.overlay&&this.overlay.destroy(),this.uiDialog.hide(),this.element.removeClass("ui-dialog-content ui-widget-content").hide().appendTo("body"),this.uiDialog.remove(),this.originalTitle&&this.element.attr("title",this.originalTitle),e=t.parent.children().eq(t.index),e.length&&e[0]!==this.element[0]?e.before(this.element):t.parent.append(this.element)},widget:function(){return this.uiDialog},close:function(t){var i,s,a=this;if(this._isOpen&&!1!==this._trigger("beforeClose",t))return this._isOpen=!1,this.overlay&&this.overlay.destroy(),this.options.hide?this._hide(this.uiDialog,this.options.hide,function(){a._trigger("close",t)}):(this.uiDialog.hide(),this._trigger("close",t)),e.ui.dialog.overlay.resize(),this.options.modal&&(i=0,e(".ui-dialog").each(function(){this!==a.uiDialog[0]&&(s=e(this).css("z-index"),isNaN(s)||(i=Math.max(i,s)))}),e.ui.dialog.maxZ=i),this},isOpen:function(){return this._isOpen},moveToTop:function(t,i){var s,a=this.options;return a.modal&&!t||!a.stack&&!a.modal?this._trigger("focus",i):(a.zIndex>e.ui.dialog.maxZ&&(e.ui.dialog.maxZ=a.zIndex),this.overlay&&(e.ui.dialog.maxZ+=1,e.ui.dialog.overlay.maxZ=e.ui.dialog.maxZ,this.overlay.$el.css("z-index",e.ui.dialog.overlay.maxZ)),s={scrollTop:this.element.scrollTop(),scrollLeft:this.element.scrollLeft()},e.ui.dialog.maxZ+=1,this.uiDialog.css("z-index",e.ui.dialog.maxZ),this.element.attr(s),this._trigger("focus",i),this)},open:function(){if(!this._isOpen){var t,i=this.options,s=this.uiDialog;return this._size(),this._position(i.position),s.show(i.show),this.overlay=i.modal?new e.ui.dialog.overlay(this):null,this.moveToTop(!0),t=this.element.find(":tabbable"),t.length||(t=this.uiDialogButtonPane.find(":tabbable"),t.length||(t=s)),t.eq(0).focus(),this._isOpen=!0,this._trigger("open"),this}},_createButtons:function(t){var i=this,s=!1;this.uiDialogButtonPane.remove(),this.uiButtonSet.empty(),"object"==typeof t&&null!==t&&e.each(t,function(){return!(s=!0)}),s?(e.each(t,function(t,s){var a,n;s=e.isFunction(s)?{click:s,text:t}:s,s=e.extend({type:"button"},s),n=s.click,s.click=function(){n.apply(i.element[0],arguments)},a=e("<button></button>",s).appendTo(i.uiButtonSet),e.fn.button&&a.button()}),this.uiDialog.addClass("ui-dialog-buttons"),this.uiDialogButtonPane.appendTo(this.uiDialog)):this.uiDialog.removeClass("ui-dialog-buttons")},_makeDraggable:function(){function t(e){return{position:e.position,offset:e.offset}}var i=this,s=this.options;this.uiDialog.draggable({cancel:".ui-dialog-content, .ui-dialog-titlebar-close",handle:".ui-dialog-titlebar",containment:"document",start:function(s,a){e(this).addClass("ui-dialog-dragging"),i._trigger("dragStart",s,t(a))},drag:function(e,s){i._trigger("drag",e,t(s))},stop:function(a,n){s.position=[n.position.left-i.document.scrollLeft(),n.position.top-i.document.scrollTop()],e(this).removeClass("ui-dialog-dragging"),i._trigger("dragStop",a,t(n)),e.ui.dialog.overlay.resize()}})},_makeResizable:function(i){function s(e){return{originalPosition:e.originalPosition,originalSize:e.originalSize,position:e.position,size:e.size}}i=i===t?this.options.resizable:i;var a=this,n=this.options,r=this.uiDialog.css("position"),o="string"==typeof i?i:"n,e,s,w,se,sw,ne,nw";this.uiDialog.resizable({cancel:".ui-dialog-content",containment:"document",alsoResize:this.element,maxWidth:n.maxWidth,maxHeight:n.maxHeight,minWidth:n.minWidth,minHeight:this._minHeight(),handles:o,start:function(t,i){e(this).addClass("ui-dialog-resizing"),a._trigger("resizeStart",t,s(i))},resize:function(e,t){a._trigger("resize",e,s(t))},stop:function(t,i){e(this).removeClass("ui-dialog-resizing"),n.height=e(this).height(),n.width=e(this).width(),a._trigger("resizeStop",t,s(i)),e.ui.dialog.overlay.resize()}}).css("position",r).find(".ui-resizable-se").addClass("ui-icon ui-icon-grip-diagonal-se")},_minHeight:function(){var e=this.options;return"auto"===e.height?e.minHeight:Math.min(e.minHeight,e.height)},_position:function(t){var i,s=[],a=[0,0];t?(("string"==typeof t||"object"==typeof t&&"0"in t)&&(s=t.split?t.split(" "):[t[0],t[1]],1===s.length&&(s[1]=s[0]),e.each(["left","top"],function(e,t){+s[e]===s[e]&&(a[e]=s[e],s[e]=t)}),t={my:s[0]+(0>a[0]?a[0]:"+"+a[0])+" "+s[1]+(0>a[1]?a[1]:"+"+a[1]),at:s.join(" ")}),t=e.extend({},e.ui.dialog.prototype.options.position,t)):t=e.ui.dialog.prototype.options.position,i=this.uiDialog.is(":visible"),i||this.uiDialog.show(),this.uiDialog.position(t),i||this.uiDialog.hide()},_setOptions:function(t){var i=this,n={},r=!1;e.each(t,function(e,t){i._setOption(e,t),e in s&&(r=!0),e in a&&(n[e]=t)}),r&&this._size(),this.uiDialog.is(":data(resizable)")&&this.uiDialog.resizable("option",n)},_setOption:function(t,s){var a,n,r=this.uiDialog;switch(t){case"buttons":this._createButtons(s);break;case"closeText":this.uiDialogTitlebarCloseText.text(""+s);break;case"dialogClass":r.removeClass(this.options.dialogClass).addClass(i+s);break;case"disabled":s?r.addClass("ui-dialog-disabled"):r.removeClass("ui-dialog-disabled");break;case"draggable":a=r.is(":data(draggable)"),a&&!s&&r.draggable("destroy"),!a&&s&&this._makeDraggable();break;case"position":this._position(s);break;case"resizable":n=r.is(":data(resizable)"),n&&!s&&r.resizable("destroy"),n&&"string"==typeof s&&r.resizable("option","handles",s),n||s===!1||this._makeResizable(s);break;case"title":e(".ui-dialog-title",this.uiDialogTitlebar).html(""+(s||"&#160;"))}this._super(t,s)},_size:function(){var t,i,s,a=this.options,n=this.uiDialog.is(":visible");this.element.show().css({width:"auto",minHeight:0,height:0}),a.minWidth>a.width&&(a.width=a.minWidth),t=this.uiDialog.css({height:"auto",width:a.width}).outerHeight(),i=Math.max(0,a.minHeight-t),"auto"===a.height?e.support.minHeight?this.element.css({minHeight:i,height:"auto"}):(this.uiDialog.show(),s=this.element.css("height","auto").height(),n||this.uiDialog.hide(),this.element.height(Math.max(s,i))):this.element.height(Math.max(a.height-t,0)),this.uiDialog.is(":data(resizable)")&&this.uiDialog.resizable("option","minHeight",this._minHeight())}}),e.extend(e.ui.dialog,{uuid:0,maxZ:0,getTitleId:function(e){var t=e.attr("id");return t||(this.uuid+=1,t=this.uuid),"ui-dialog-title-"+t},overlay:function(t){this.$el=e.ui.dialog.overlay.create(t)}}),e.extend(e.ui.dialog.overlay,{instances:[],oldInstances:[],maxZ:0,events:e.map("focus,mousedown,mouseup,keydown,keypress,click".split(","),function(e){return e+".dialog-overlay"}).join(" "),create:function(i){0===this.instances.length&&(setTimeout(function(){e.ui.dialog.overlay.instances.length&&e(document).bind(e.ui.dialog.overlay.events,function(i){return e(i.target).zIndex()<e.ui.dialog.overlay.maxZ?!1:t})},1),e(window).bind("resize.dialog-overlay",e.ui.dialog.overlay.resize));var s=this.oldInstances.pop()||e("<div>").addClass("ui-widget-overlay");return e(document).bind("keydown.dialog-overlay",function(t){var a=e.ui.dialog.overlay.instances;0!==a.length&&a[a.length-1]===s&&i.options.closeOnEscape&&!t.isDefaultPrevented()&&t.keyCode&&t.keyCode===e.ui.keyCode.ESCAPE&&(i.close(t),t.preventDefault())}),s.appendTo(document.body).css({width:this.width(),height:this.height()}),e.fn.bgiframe&&s.bgiframe(),this.instances.push(s),s},destroy:function(t){var i=e.inArray(t,this.instances),s=0;-1!==i&&this.oldInstances.push(this.instances.splice(i,1)[0]),0===this.instances.length&&e([document,window]).unbind(".dialog-overlay"),t.height(0).width(0).remove(),e.each(this.instances,function(){s=Math.max(s,this.css("z-index"))}),this.maxZ=s},height:function(){var t,i;return e.ui.ie?(t=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),i=Math.max(document.documentElement.offsetHeight,document.body.offsetHeight),i>t?e(window).height()+"px":t+"px"):e(document).height()+"px"},width:function(){var t,i;return e.ui.ie?(t=Math.max(document.documentElement.scrollWidth,document.body.scrollWidth),i=Math.max(document.documentElement.offsetWidth,document.body.offsetWidth),i>t?e(window).width()+"px":t+"px"):e(document).width()+"px"},resize:function(){var t=e([]);e.each(e.ui.dialog.overlay.instances,function(){t=t.add(this)}),t.css({width:0,height:0}).css({width:e.ui.dialog.overlay.width(),height:e.ui.dialog.overlay.height()})}}),e.extend(e.ui.dialog.overlay.prototype,{destroy:function(){e.ui.dialog.overlay.destroy(this.$el)}})})(jQuery);(function(e){var t=!1;e.widget("ui.menu",{version:"1.9.2",defaultElement:"<ul>",delay:300,options:{icons:{submenu:"ui-icon-carat-1-e"},menus:"ul",position:{my:"left top",at:"right top"},role:"menu",blur:null,focus:null,select:null},_create:function(){this.activeMenu=this.element,this.element.uniqueId().addClass("ui-menu ui-widget ui-widget-content ui-corner-all").toggleClass("ui-menu-icons",!!this.element.find(".ui-icon").length).attr({role:this.options.role,tabIndex:0}).bind("click"+this.eventNamespace,e.proxy(function(e){this.options.disabled&&e.preventDefault()},this)),this.options.disabled&&this.element.addClass("ui-state-disabled").attr("aria-disabled","true"),this._on({"mousedown .ui-menu-item > a":function(e){e.preventDefault()},"click .ui-state-disabled > a":function(e){e.preventDefault()},"click .ui-menu-item:has(a)":function(i){var s=e(i.target).closest(".ui-menu-item");!t&&s.not(".ui-state-disabled").length&&(t=!0,this.select(i),s.has(".ui-menu").length?this.expand(i):this.element.is(":focus")||(this.element.trigger("focus",[!0]),this.active&&1===this.active.parents(".ui-menu").length&&clearTimeout(this.timer)))},"mouseenter .ui-menu-item":function(t){var i=e(t.currentTarget);i.siblings().children(".ui-state-active").removeClass("ui-state-active"),this.focus(t,i)},mouseleave:"collapseAll","mouseleave .ui-menu":"collapseAll",focus:function(e,t){var i=this.active||this.element.children(".ui-menu-item").eq(0);t||this.focus(e,i)},blur:function(t){this._delay(function(){e.contains(this.element[0],this.document[0].activeElement)||this.collapseAll(t)})},keydown:"_keydown"}),this.refresh(),this._on(this.document,{click:function(i){e(i.target).closest(".ui-menu").length||this.collapseAll(i),t=!1}})},_destroy:function(){this.element.removeAttr("aria-activedescendant").find(".ui-menu").andSelf().removeClass("ui-menu ui-widget ui-widget-content ui-corner-all ui-menu-icons").removeAttr("role").removeAttr("tabIndex").removeAttr("aria-labelledby").removeAttr("aria-expanded").removeAttr("aria-hidden").removeAttr("aria-disabled").removeUniqueId().show(),this.element.find(".ui-menu-item").removeClass("ui-menu-item").removeAttr("role").removeAttr("aria-disabled").children("a").removeUniqueId().removeClass("ui-corner-all ui-state-hover").removeAttr("tabIndex").removeAttr("role").removeAttr("aria-haspopup").children().each(function(){var t=e(this);t.data("ui-menu-submenu-carat")&&t.remove()}),this.element.find(".ui-menu-divider").removeClass("ui-menu-divider ui-widget-content")},_keydown:function(t){function i(e){return e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}var s,n,a,o,r,h=!0;switch(t.keyCode){case e.ui.keyCode.PAGE_UP:this.previousPage(t);break;case e.ui.keyCode.PAGE_DOWN:this.nextPage(t);break;case e.ui.keyCode.HOME:this._move("first","first",t);break;case e.ui.keyCode.END:this._move("last","last",t);break;case e.ui.keyCode.UP:this.previous(t);break;case e.ui.keyCode.DOWN:this.next(t);break;case e.ui.keyCode.LEFT:this.collapse(t);break;case e.ui.keyCode.RIGHT:this.active&&!this.active.is(".ui-state-disabled")&&this.expand(t);break;case e.ui.keyCode.ENTER:case e.ui.keyCode.SPACE:this._activate(t);break;case e.ui.keyCode.ESCAPE:this.collapse(t);break;default:h=!1,n=this.previousFilter||"",a=String.fromCharCode(t.keyCode),o=!1,clearTimeout(this.filterTimer),a===n?o=!0:a=n+a,r=RegExp("^"+i(a),"i"),s=this.activeMenu.children(".ui-menu-item").filter(function(){return r.test(e(this).children("a").text())}),s=o&&-1!==s.index(this.active.next())?this.active.nextAll(".ui-menu-item"):s,s.length||(a=String.fromCharCode(t.keyCode),r=RegExp("^"+i(a),"i"),s=this.activeMenu.children(".ui-menu-item").filter(function(){return r.test(e(this).children("a").text())})),s.length?(this.focus(t,s),s.length>1?(this.previousFilter=a,this.filterTimer=this._delay(function(){delete this.previousFilter},1e3)):delete this.previousFilter):delete this.previousFilter}h&&t.preventDefault()},_activate:function(e){this.active.is(".ui-state-disabled")||(this.active.children("a[aria-haspopup='true']").length?this.expand(e):this.select(e))},refresh:function(){var t,i=this.options.icons.submenu,s=this.element.find(this.options.menus);s.filter(":not(.ui-menu)").addClass("ui-menu ui-widget ui-widget-content ui-corner-all").hide().attr({role:this.options.role,"aria-hidden":"true","aria-expanded":"false"}).each(function(){var t=e(this),s=t.prev("a"),n=e("<span>").addClass("ui-menu-icon ui-icon "+i).data("ui-menu-submenu-carat",!0);s.attr("aria-haspopup","true").prepend(n),t.attr("aria-labelledby",s.attr("id"))}),t=s.add(this.element),t.children(":not(.ui-menu-item):has(a)").addClass("ui-menu-item").attr("role","presentation").children("a").uniqueId().addClass("ui-corner-all").attr({tabIndex:-1,role:this._itemRole()}),t.children(":not(.ui-menu-item)").each(function(){var t=e(this);/[^\-â€”â€“\s]/.test(t.text())||t.addClass("ui-widget-content ui-menu-divider")}),t.children(".ui-state-disabled").attr("aria-disabled","true"),this.active&&!e.contains(this.element[0],this.active[0])&&this.blur()},_itemRole:function(){return{menu:"menuitem",listbox:"option"}[this.options.role]},focus:function(e,t){var i,s;this.blur(e,e&&"focus"===e.type),this._scrollIntoView(t),this.active=t.first(),s=this.active.children("a").addClass("ui-state-focus"),this.options.role&&this.element.attr("aria-activedescendant",s.attr("id")),this.active.parent().closest(".ui-menu-item").children("a:first").addClass("ui-state-active"),e&&"keydown"===e.type?this._close():this.timer=this._delay(function(){this._close()},this.delay),i=t.children(".ui-menu"),i.length&&/^mouse/.test(e.type)&&this._startOpening(i),this.activeMenu=t.parent(),this._trigger("focus",e,{item:t})},_scrollIntoView:function(t){var i,s,n,a,o,r;this._hasScroll()&&(i=parseFloat(e.css(this.activeMenu[0],"borderTopWidth"))||0,s=parseFloat(e.css(this.activeMenu[0],"paddingTop"))||0,n=t.offset().top-this.activeMenu.offset().top-i-s,a=this.activeMenu.scrollTop(),o=this.activeMenu.height(),r=t.height(),0>n?this.activeMenu.scrollTop(a+n):n+r>o&&this.activeMenu.scrollTop(a+n-o+r))},blur:function(e,t){t||clearTimeout(this.timer),this.active&&(this.active.children("a").removeClass("ui-state-focus"),this.active=null,this._trigger("blur",e,{item:this.active}))},_startOpening:function(e){clearTimeout(this.timer),"true"===e.attr("aria-hidden")&&(this.timer=this._delay(function(){this._close(),this._open(e)},this.delay))},_open:function(t){var i=e.extend({of:this.active},this.options.position);clearTimeout(this.timer),this.element.find(".ui-menu").not(t.parents(".ui-menu")).hide().attr("aria-hidden","true"),t.show().removeAttr("aria-hidden").attr("aria-expanded","true").position(i)},collapseAll:function(t,i){clearTimeout(this.timer),this.timer=this._delay(function(){var s=i?this.element:e(t&&t.target).closest(this.element.find(".ui-menu"));s.length||(s=this.element),this._close(s),this.blur(t),this.activeMenu=s},this.delay)},_close:function(e){e||(e=this.active?this.active.parent():this.element),e.find(".ui-menu").hide().attr("aria-hidden","true").attr("aria-expanded","false").end().find("a.ui-state-active").removeClass("ui-state-active")},collapse:function(e){var t=this.active&&this.active.parent().closest(".ui-menu-item",this.element);t&&t.length&&(this._close(),this.focus(e,t))},expand:function(e){var t=this.active&&this.active.children(".ui-menu ").children(".ui-menu-item").first();t&&t.length&&(this._open(t.parent()),this._delay(function(){this.focus(e,t)}))},next:function(e){this._move("next","first",e)},previous:function(e){this._move("prev","last",e)},isFirstItem:function(){return this.active&&!this.active.prevAll(".ui-menu-item").length},isLastItem:function(){return this.active&&!this.active.nextAll(".ui-menu-item").length},_move:function(e,t,i){var s;this.active&&(s="first"===e||"last"===e?this.active["first"===e?"prevAll":"nextAll"](".ui-menu-item").eq(-1):this.active[e+"All"](".ui-menu-item").eq(0)),s&&s.length&&this.active||(s=this.activeMenu.children(".ui-menu-item")[t]()),this.focus(i,s)},nextPage:function(t){var i,s,n;return this.active?(this.isLastItem()||(this._hasScroll()?(s=this.active.offset().top,n=this.element.height(),this.active.nextAll(".ui-menu-item").each(function(){return i=e(this),0>i.offset().top-s-n}),this.focus(t,i)):this.focus(t,this.activeMenu.children(".ui-menu-item")[this.active?"last":"first"]())),undefined):(this.next(t),undefined)},previousPage:function(t){var i,s,n;return this.active?(this.isFirstItem()||(this._hasScroll()?(s=this.active.offset().top,n=this.element.height(),this.active.prevAll(".ui-menu-item").each(function(){return i=e(this),i.offset().top-s+n>0}),this.focus(t,i)):this.focus(t,this.activeMenu.children(".ui-menu-item").first())),undefined):(this.next(t),undefined)},_hasScroll:function(){return this.element.outerHeight()<this.element.prop("scrollHeight")},select:function(t){this.active=this.active||e(t.target).closest(".ui-menu-item");var i={item:this.active};this.active.has(".ui-menu").length||this.collapseAll(t,!0),this._trigger("select",t,i)}})})(jQuery);(function(e,t){e.widget("ui.progressbar",{version:"1.9.2",options:{value:0,max:100},min:0,_create:function(){this.element.addClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").attr({role:"progressbar","aria-valuemin":this.min,"aria-valuemax":this.options.max,"aria-valuenow":this._value()}),this.valueDiv=e("<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>").appendTo(this.element),this.oldValue=this._value(),this._refreshValue()},_destroy:function(){this.element.removeClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow"),this.valueDiv.remove()},value:function(e){return e===t?this._value():(this._setOption("value",e),this)},_setOption:function(e,t){"value"===e&&(this.options.value=t,this._refreshValue(),this._value()===this.options.max&&this._trigger("complete")),this._super(e,t)},_value:function(){var e=this.options.value;return"number"!=typeof e&&(e=0),Math.min(this.options.max,Math.max(this.min,e))},_percentage:function(){return 100*this._value()/this.options.max},_refreshValue:function(){var e=this.value(),t=this._percentage();this.oldValue!==e&&(this.oldValue=e,this._trigger("change")),this.valueDiv.toggle(e>this.min).toggleClass("ui-corner-right",e===this.options.max).width(t.toFixed(0)+"%"),this.element.attr("aria-valuenow",e)}})})(jQuery);(function(e){var t=5;e.widget("ui.slider",e.ui.mouse,{version:"1.9.2",widgetEventPrefix:"slide",options:{animate:!1,distance:0,max:100,min:0,orientation:"horizontal",range:!1,step:1,value:0,values:null},_create:function(){var i,s,n=this.options,a=this.element.find(".ui-slider-handle").addClass("ui-state-default ui-corner-all"),o="<a class='ui-slider-handle ui-state-default ui-corner-all' href='#'></a>",r=[];for(this._keySliding=!1,this._mouseSliding=!1,this._animateOff=!0,this._handleIndex=null,this._detectOrientation(),this._mouseInit(),this.element.addClass("ui-slider ui-slider-"+this.orientation+" ui-widget"+" ui-widget-content"+" ui-corner-all"+(n.disabled?" ui-slider-disabled ui-disabled":"")),this.range=e([]),n.range&&(n.range===!0&&(n.values||(n.values=[this._valueMin(),this._valueMin()]),n.values.length&&2!==n.values.length&&(n.values=[n.values[0],n.values[0]])),this.range=e("<div></div>").appendTo(this.element).addClass("ui-slider-range ui-widget-header"+("min"===n.range||"max"===n.range?" ui-slider-range-"+n.range:""))),s=n.values&&n.values.length||1,i=a.length;s>i;i++)r.push(o);this.handles=a.add(e(r.join("")).appendTo(this.element)),this.handle=this.handles.eq(0),this.handles.add(this.range).filter("a").click(function(e){e.preventDefault()}).mouseenter(function(){n.disabled||e(this).addClass("ui-state-hover")}).mouseleave(function(){e(this).removeClass("ui-state-hover")}).focus(function(){n.disabled?e(this).blur():(e(".ui-slider .ui-state-focus").removeClass("ui-state-focus"),e(this).addClass("ui-state-focus"))}).blur(function(){e(this).removeClass("ui-state-focus")}),this.handles.each(function(t){e(this).data("ui-slider-handle-index",t)}),this._on(this.handles,{keydown:function(i){var s,n,a,o,r=e(i.target).data("ui-slider-handle-index");switch(i.keyCode){case e.ui.keyCode.HOME:case e.ui.keyCode.END:case e.ui.keyCode.PAGE_UP:case e.ui.keyCode.PAGE_DOWN:case e.ui.keyCode.UP:case e.ui.keyCode.RIGHT:case e.ui.keyCode.DOWN:case e.ui.keyCode.LEFT:if(i.preventDefault(),!this._keySliding&&(this._keySliding=!0,e(i.target).addClass("ui-state-active"),s=this._start(i,r),s===!1))return}switch(o=this.options.step,n=a=this.options.values&&this.options.values.length?this.values(r):this.value(),i.keyCode){case e.ui.keyCode.HOME:a=this._valueMin();break;case e.ui.keyCode.END:a=this._valueMax();break;case e.ui.keyCode.PAGE_UP:a=this._trimAlignValue(n+(this._valueMax()-this._valueMin())/t);break;case e.ui.keyCode.PAGE_DOWN:a=this._trimAlignValue(n-(this._valueMax()-this._valueMin())/t);break;case e.ui.keyCode.UP:case e.ui.keyCode.RIGHT:if(n===this._valueMax())return;a=this._trimAlignValue(n+o);break;case e.ui.keyCode.DOWN:case e.ui.keyCode.LEFT:if(n===this._valueMin())return;a=this._trimAlignValue(n-o)}this._slide(i,r,a)},keyup:function(t){var i=e(t.target).data("ui-slider-handle-index");this._keySliding&&(this._keySliding=!1,this._stop(t,i),this._change(t,i),e(t.target).removeClass("ui-state-active"))}}),this._refreshValue(),this._animateOff=!1},_destroy:function(){this.handles.remove(),this.range.remove(),this.element.removeClass("ui-slider ui-slider-horizontal ui-slider-vertical ui-slider-disabled ui-widget ui-widget-content ui-corner-all"),this._mouseDestroy()},_mouseCapture:function(t){var i,s,n,a,o,r,h,l,u=this,d=this.options;return d.disabled?!1:(this.elementSize={width:this.element.outerWidth(),height:this.element.outerHeight()},this.elementOffset=this.element.offset(),i={x:t.pageX,y:t.pageY},s=this._normValueFromMouse(i),n=this._valueMax()-this._valueMin()+1,this.handles.each(function(t){var i=Math.abs(s-u.values(t));n>i&&(n=i,a=e(this),o=t)}),d.range===!0&&this.values(1)===d.min&&(o+=1,a=e(this.handles[o])),r=this._start(t,o),r===!1?!1:(this._mouseSliding=!0,this._handleIndex=o,a.addClass("ui-state-active").focus(),h=a.offset(),l=!e(t.target).parents().andSelf().is(".ui-slider-handle"),this._clickOffset=l?{left:0,top:0}:{left:t.pageX-h.left-a.width()/2,top:t.pageY-h.top-a.height()/2-(parseInt(a.css("borderTopWidth"),10)||0)-(parseInt(a.css("borderBottomWidth"),10)||0)+(parseInt(a.css("marginTop"),10)||0)},this.handles.hasClass("ui-state-hover")||this._slide(t,o,s),this._animateOff=!0,!0))},_mouseStart:function(){return!0},_mouseDrag:function(e){var t={x:e.pageX,y:e.pageY},i=this._normValueFromMouse(t);return this._slide(e,this._handleIndex,i),!1},_mouseStop:function(e){return this.handles.removeClass("ui-state-active"),this._mouseSliding=!1,this._stop(e,this._handleIndex),this._change(e,this._handleIndex),this._handleIndex=null,this._clickOffset=null,this._animateOff=!1,!1},_detectOrientation:function(){this.orientation="vertical"===this.options.orientation?"vertical":"horizontal"},_normValueFromMouse:function(e){var t,i,s,n,a;return"horizontal"===this.orientation?(t=this.elementSize.width,i=e.x-this.elementOffset.left-(this._clickOffset?this._clickOffset.left:0)):(t=this.elementSize.height,i=e.y-this.elementOffset.top-(this._clickOffset?this._clickOffset.top:0)),s=i/t,s>1&&(s=1),0>s&&(s=0),"vertical"===this.orientation&&(s=1-s),n=this._valueMax()-this._valueMin(),a=this._valueMin()+s*n,this._trimAlignValue(a)},_start:function(e,t){var i={handle:this.handles[t],value:this.value()};return this.options.values&&this.options.values.length&&(i.value=this.values(t),i.values=this.values()),this._trigger("start",e,i)},_slide:function(e,t,i){var s,n,a;this.options.values&&this.options.values.length?(s=this.values(t?0:1),2===this.options.values.length&&this.options.range===!0&&(0===t&&i>s||1===t&&s>i)&&(i=s),i!==this.values(t)&&(n=this.values(),n[t]=i,a=this._trigger("slide",e,{handle:this.handles[t],value:i,values:n}),s=this.values(t?0:1),a!==!1&&this.values(t,i,!0))):i!==this.value()&&(a=this._trigger("slide",e,{handle:this.handles[t],value:i}),a!==!1&&this.value(i))},_stop:function(e,t){var i={handle:this.handles[t],value:this.value()};this.options.values&&this.options.values.length&&(i.value=this.values(t),i.values=this.values()),this._trigger("stop",e,i)},_change:function(e,t){if(!this._keySliding&&!this._mouseSliding){var i={handle:this.handles[t],value:this.value()};this.options.values&&this.options.values.length&&(i.value=this.values(t),i.values=this.values()),this._trigger("change",e,i)}},value:function(e){return arguments.length?(this.options.value=this._trimAlignValue(e),this._refreshValue(),this._change(null,0),undefined):this._value()},values:function(t,i){var s,n,a;if(arguments.length>1)return this.options.values[t]=this._trimAlignValue(i),this._refreshValue(),this._change(null,t),undefined;if(!arguments.length)return this._values();if(!e.isArray(arguments[0]))return this.options.values&&this.options.values.length?this._values(t):this.value();for(s=this.options.values,n=arguments[0],a=0;s.length>a;a+=1)s[a]=this._trimAlignValue(n[a]),this._change(null,a);this._refreshValue()},_setOption:function(t,i){var s,n=0;switch(e.isArray(this.options.values)&&(n=this.options.values.length),e.Widget.prototype._setOption.apply(this,arguments),t){case"disabled":i?(this.handles.filter(".ui-state-focus").blur(),this.handles.removeClass("ui-state-hover"),this.handles.prop("disabled",!0),this.element.addClass("ui-disabled")):(this.handles.prop("disabled",!1),this.element.removeClass("ui-disabled"));break;case"orientation":this._detectOrientation(),this.element.removeClass("ui-slider-horizontal ui-slider-vertical").addClass("ui-slider-"+this.orientation),this._refreshValue();break;case"value":this._animateOff=!0,this._refreshValue(),this._change(null,0),this._animateOff=!1;break;case"values":for(this._animateOff=!0,this._refreshValue(),s=0;n>s;s+=1)this._change(null,s);this._animateOff=!1;break;case"min":case"max":this._animateOff=!0,this._refreshValue(),this._animateOff=!1}},_value:function(){var e=this.options.value;return e=this._trimAlignValue(e)},_values:function(e){var t,i,s;if(arguments.length)return t=this.options.values[e],t=this._trimAlignValue(t);for(i=this.options.values.slice(),s=0;i.length>s;s+=1)i[s]=this._trimAlignValue(i[s]);return i},_trimAlignValue:function(e){if(this._valueMin()>=e)return this._valueMin();if(e>=this._valueMax())return this._valueMax();var t=this.options.step>0?this.options.step:1,i=(e-this._valueMin())%t,s=e-i;return 2*Math.abs(i)>=t&&(s+=i>0?t:-t),parseFloat(s.toFixed(5))},_valueMin:function(){return this.options.min},_valueMax:function(){return this.options.max},_refreshValue:function(){var t,i,s,n,a,o=this.options.range,r=this.options,h=this,l=this._animateOff?!1:r.animate,u={};this.options.values&&this.options.values.length?this.handles.each(function(s){i=100*((h.values(s)-h._valueMin())/(h._valueMax()-h._valueMin())),u["horizontal"===h.orientation?"left":"bottom"]=i+"%",e(this).stop(1,1)[l?"animate":"css"](u,r.animate),h.options.range===!0&&("horizontal"===h.orientation?(0===s&&h.range.stop(1,1)[l?"animate":"css"]({left:i+"%"},r.animate),1===s&&h.range[l?"animate":"css"]({width:i-t+"%"},{queue:!1,duration:r.animate})):(0===s&&h.range.stop(1,1)[l?"animate":"css"]({bottom:i+"%"},r.animate),1===s&&h.range[l?"animate":"css"]({height:i-t+"%"},{queue:!1,duration:r.animate}))),t=i}):(s=this.value(),n=this._valueMin(),a=this._valueMax(),i=a!==n?100*((s-n)/(a-n)):0,u["horizontal"===this.orientation?"left":"bottom"]=i+"%",this.handle.stop(1,1)[l?"animate":"css"](u,r.animate),"min"===o&&"horizontal"===this.orientation&&this.range.stop(1,1)[l?"animate":"css"]({width:i+"%"},r.animate),"max"===o&&"horizontal"===this.orientation&&this.range[l?"animate":"css"]({width:100-i+"%"},{queue:!1,duration:r.animate}),"min"===o&&"vertical"===this.orientation&&this.range.stop(1,1)[l?"animate":"css"]({height:i+"%"},r.animate),"max"===o&&"vertical"===this.orientation&&this.range[l?"animate":"css"]({height:100-i+"%"},{queue:!1,duration:r.animate}))}})})(jQuery);(function(e){function t(e){return function(){var t=this.element.val();e.apply(this,arguments),this._refresh(),t!==this.element.val()&&this._trigger("change")}}e.widget("ui.spinner",{version:"1.9.2",defaultElement:"<input>",widgetEventPrefix:"spin",options:{culture:null,icons:{down:"ui-icon-triangle-1-s",up:"ui-icon-triangle-1-n"},incremental:!0,max:null,min:null,numberFormat:null,page:10,step:1,change:null,spin:null,start:null,stop:null},_create:function(){this._setOption("max",this.options.max),this._setOption("min",this.options.min),this._setOption("step",this.options.step),this._value(this.element.val(),!0),this._draw(),this._on(this._events),this._refresh(),this._on(this.window,{beforeunload:function(){this.element.removeAttr("autocomplete")}})},_getCreateOptions:function(){var t={},i=this.element;return e.each(["min","max","step"],function(e,s){var n=i.attr(s);void 0!==n&&n.length&&(t[s]=n)}),t},_events:{keydown:function(e){this._start(e)&&this._keydown(e)&&e.preventDefault()},keyup:"_stop",focus:function(){this.previous=this.element.val()},blur:function(e){return this.cancelBlur?(delete this.cancelBlur,void 0):(this._refresh(),this.previous!==this.element.val()&&this._trigger("change",e),void 0)},mousewheel:function(e,t){if(t){if(!this.spinning&&!this._start(e))return!1;this._spin((t>0?1:-1)*this.options.step,e),clearTimeout(this.mousewheelTimer),this.mousewheelTimer=this._delay(function(){this.spinning&&this._stop(e)},100),e.preventDefault()}},"mousedown .ui-spinner-button":function(t){function i(){var e=this.element[0]===this.document[0].activeElement;e||(this.element.focus(),this.previous=s,this._delay(function(){this.previous=s}))}var s;s=this.element[0]===this.document[0].activeElement?this.previous:this.element.val(),t.preventDefault(),i.call(this),this.cancelBlur=!0,this._delay(function(){delete this.cancelBlur,i.call(this)}),this._start(t)!==!1&&this._repeat(null,e(t.currentTarget).hasClass("ui-spinner-up")?1:-1,t)},"mouseup .ui-spinner-button":"_stop","mouseenter .ui-spinner-button":function(t){return e(t.currentTarget).hasClass("ui-state-active")?this._start(t)===!1?!1:(this._repeat(null,e(t.currentTarget).hasClass("ui-spinner-up")?1:-1,t),void 0):void 0},"mouseleave .ui-spinner-button":"_stop"},_draw:function(){var e=this.uiSpinner=this.element.addClass("ui-spinner-input").attr("autocomplete","off").wrap(this._uiSpinnerHtml()).parent().append(this._buttonHtml());this.element.attr("role","spinbutton"),this.buttons=e.find(".ui-spinner-button").attr("tabIndex",-1).button().removeClass("ui-corner-all"),this.buttons.height()>Math.ceil(.5*e.height())&&e.height()>0&&e.height(e.height()),this.options.disabled&&this.disable()},_keydown:function(t){var i=this.options,s=e.ui.keyCode;switch(t.keyCode){case s.UP:return this._repeat(null,1,t),!0;case s.DOWN:return this._repeat(null,-1,t),!0;case s.PAGE_UP:return this._repeat(null,i.page,t),!0;case s.PAGE_DOWN:return this._repeat(null,-i.page,t),!0}return!1},_uiSpinnerHtml:function(){return"<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>"},_buttonHtml:function(){return"<a class='ui-spinner-button ui-spinner-up ui-corner-tr'><span class='ui-icon "+this.options.icons.up+"'>&#9650;</span>"+"</a>"+"<a class='ui-spinner-button ui-spinner-down ui-corner-br'>"+"<span class='ui-icon "+this.options.icons.down+"'>&#9660;</span>"+"</a>"},_start:function(e){return this.spinning||this._trigger("start",e)!==!1?(this.counter||(this.counter=1),this.spinning=!0,!0):!1},_repeat:function(e,t,i){e=e||500,clearTimeout(this.timer),this.timer=this._delay(function(){this._repeat(40,t,i)},e),this._spin(t*this.options.step,i)},_spin:function(e,t){var i=this.value()||0;this.counter||(this.counter=1),i=this._adjustValue(i+e*this._increment(this.counter)),this.spinning&&this._trigger("spin",t,{value:i})===!1||(this._value(i),this.counter++)},_increment:function(t){var i=this.options.incremental;return i?e.isFunction(i)?i(t):Math.floor(t*t*t/5e4-t*t/500+17*t/200+1):1},_precision:function(){var e=this._precisionOf(this.options.step);return null!==this.options.min&&(e=Math.max(e,this._precisionOf(this.options.min))),e},_precisionOf:function(e){var t=""+e,i=t.indexOf(".");return-1===i?0:t.length-i-1},_adjustValue:function(e){var t,i,s=this.options;return t=null!==s.min?s.min:0,i=e-t,i=Math.round(i/s.step)*s.step,e=t+i,e=parseFloat(e.toFixed(this._precision())),null!==s.max&&e>s.max?s.max:null!==s.min&&s.min>e?s.min:e},_stop:function(e){this.spinning&&(clearTimeout(this.timer),clearTimeout(this.mousewheelTimer),this.counter=0,this.spinning=!1,this._trigger("stop",e))},_setOption:function(e,t){if("culture"===e||"numberFormat"===e){var i=this._parse(this.element.val());return this.options[e]=t,this.element.val(this._format(i)),void 0}("max"===e||"min"===e||"step"===e)&&"string"==typeof t&&(t=this._parse(t)),this._super(e,t),"disabled"===e&&(t?(this.element.prop("disabled",!0),this.buttons.button("disable")):(this.element.prop("disabled",!1),this.buttons.button("enable")))},_setOptions:t(function(e){this._super(e),this._value(this.element.val())}),_parse:function(e){return"string"==typeof e&&""!==e&&(e=window.Globalize&&this.options.numberFormat?Globalize.parseFloat(e,10,this.options.culture):+e),""===e||isNaN(e)?null:e},_format:function(e){return""===e?"":window.Globalize&&this.options.numberFormat?Globalize.format(e,this.options.numberFormat,this.options.culture):e},_refresh:function(){this.element.attr({"aria-valuemin":this.options.min,"aria-valuemax":this.options.max,"aria-valuenow":this._parse(this.element.val())})},_value:function(e,t){var i;""!==e&&(i=this._parse(e),null!==i&&(t||(i=this._adjustValue(i)),e=this._format(i))),this.element.val(e),this._refresh()},_destroy:function(){this.element.removeClass("ui-spinner-input").prop("disabled",!1).removeAttr("autocomplete").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow"),this.uiSpinner.replaceWith(this.element)},stepUp:t(function(e){this._stepUp(e)}),_stepUp:function(e){this._spin((e||1)*this.options.step)},stepDown:t(function(e){this._stepDown(e)}),_stepDown:function(e){this._spin((e||1)*-this.options.step)},pageUp:t(function(e){this._stepUp((e||1)*this.options.page)}),pageDown:t(function(e){this._stepDown((e||1)*this.options.page)}),value:function(e){return arguments.length?(t(this._value).call(this,e),void 0):this._parse(this.element.val())},widget:function(){return this.uiSpinner}})})(jQuery);(function(e,t){function i(){return++n}function s(e){return e.hash.length>1&&e.href.replace(a,"")===location.href.replace(a,"").replace(/\s/g,"%20")}var n=0,a=/#.*$/;e.widget("ui.tabs",{version:"1.9.2",delay:300,options:{active:null,collapsible:!1,event:"click",heightStyle:"content",hide:null,show:null,activate:null,beforeActivate:null,beforeLoad:null,load:null},_create:function(){var i=this,s=this.options,n=s.active,a=location.hash.substring(1);this.running=!1,this.element.addClass("ui-tabs ui-widget ui-widget-content ui-corner-all").toggleClass("ui-tabs-collapsible",s.collapsible).delegate(".ui-tabs-nav > li","mousedown"+this.eventNamespace,function(t){e(this).is(".ui-state-disabled")&&t.preventDefault()}).delegate(".ui-tabs-anchor","focus"+this.eventNamespace,function(){e(this).closest("li").is(".ui-state-disabled")&&this.blur()}),this._processTabs(),null===n&&(a&&this.tabs.each(function(i,s){return e(s).attr("aria-controls")===a?(n=i,!1):t}),null===n&&(n=this.tabs.index(this.tabs.filter(".ui-tabs-active"))),(null===n||-1===n)&&(n=this.tabs.length?0:!1)),n!==!1&&(n=this.tabs.index(this.tabs.eq(n)),-1===n&&(n=s.collapsible?!1:0)),s.active=n,!s.collapsible&&s.active===!1&&this.anchors.length&&(s.active=0),e.isArray(s.disabled)&&(s.disabled=e.unique(s.disabled.concat(e.map(this.tabs.filter(".ui-state-disabled"),function(e){return i.tabs.index(e)}))).sort()),this.active=this.options.active!==!1&&this.anchors.length?this._findActive(this.options.active):e(),this._refresh(),this.active.length&&this.load(s.active)},_getCreateEventData:function(){return{tab:this.active,panel:this.active.length?this._getPanelForTab(this.active):e()}},_tabKeydown:function(i){var s=e(this.document[0].activeElement).closest("li"),n=this.tabs.index(s),a=!0;if(!this._handlePageNav(i)){switch(i.keyCode){case e.ui.keyCode.RIGHT:case e.ui.keyCode.DOWN:n++;break;case e.ui.keyCode.UP:case e.ui.keyCode.LEFT:a=!1,n--;break;case e.ui.keyCode.END:n=this.anchors.length-1;break;case e.ui.keyCode.HOME:n=0;break;case e.ui.keyCode.SPACE:return i.preventDefault(),clearTimeout(this.activating),this._activate(n),t;case e.ui.keyCode.ENTER:return i.preventDefault(),clearTimeout(this.activating),this._activate(n===this.options.active?!1:n),t;default:return}i.preventDefault(),clearTimeout(this.activating),n=this._focusNextTab(n,a),i.ctrlKey||(s.attr("aria-selected","false"),this.tabs.eq(n).attr("aria-selected","true"),this.activating=this._delay(function(){this.option("active",n)},this.delay))}},_panelKeydown:function(t){this._handlePageNav(t)||t.ctrlKey&&t.keyCode===e.ui.keyCode.UP&&(t.preventDefault(),this.active.focus())},_handlePageNav:function(i){return i.altKey&&i.keyCode===e.ui.keyCode.PAGE_UP?(this._activate(this._focusNextTab(this.options.active-1,!1)),!0):i.altKey&&i.keyCode===e.ui.keyCode.PAGE_DOWN?(this._activate(this._focusNextTab(this.options.active+1,!0)),!0):t},_findNextTab:function(t,i){function s(){return t>n&&(t=0),0>t&&(t=n),t}for(var n=this.tabs.length-1;-1!==e.inArray(s(),this.options.disabled);)t=i?t+1:t-1;return t},_focusNextTab:function(e,t){return e=this._findNextTab(e,t),this.tabs.eq(e).focus(),e},_setOption:function(e,i){return"active"===e?(this._activate(i),t):"disabled"===e?(this._setupDisabled(i),t):(this._super(e,i),"collapsible"===e&&(this.element.toggleClass("ui-tabs-collapsible",i),i||this.options.active!==!1||this._activate(0)),"event"===e&&this._setupEvents(i),"heightStyle"===e&&this._setupHeightStyle(i),t)},_tabId:function(e){return e.attr("aria-controls")||"ui-tabs-"+i()},_sanitizeSelector:function(e){return e?e.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g,"\\$&"):""},refresh:function(){var t=this.options,i=this.tablist.children(":has(a[href])");t.disabled=e.map(i.filter(".ui-state-disabled"),function(e){return i.index(e)}),this._processTabs(),t.active!==!1&&this.anchors.length?this.active.length&&!e.contains(this.tablist[0],this.active[0])?this.tabs.length===t.disabled.length?(t.active=!1,this.active=e()):this._activate(this._findNextTab(Math.max(0,t.active-1),!1)):t.active=this.tabs.index(this.active):(t.active=!1,this.active=e()),this._refresh()},_refresh:function(){this._setupDisabled(this.options.disabled),this._setupEvents(this.options.event),this._setupHeightStyle(this.options.heightStyle),this.tabs.not(this.active).attr({"aria-selected":"false",tabIndex:-1}),this.panels.not(this._getPanelForTab(this.active)).hide().attr({"aria-expanded":"false","aria-hidden":"true"}),this.active.length?(this.active.addClass("ui-tabs-active ui-state-active").attr({"aria-selected":"true",tabIndex:0}),this._getPanelForTab(this.active).show().attr({"aria-expanded":"true","aria-hidden":"false"})):this.tabs.eq(0).attr("tabIndex",0)},_processTabs:function(){var t=this;this.tablist=this._getList().addClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").attr("role","tablist"),this.tabs=this.tablist.find("> li:has(a[href])").addClass("ui-state-default ui-corner-top").attr({role:"tab",tabIndex:-1}),this.anchors=this.tabs.map(function(){return e("a",this)[0]}).addClass("ui-tabs-anchor").attr({role:"presentation",tabIndex:-1}),this.panels=e(),this.anchors.each(function(i,n){var a,o,r,h=e(n).uniqueId().attr("id"),l=e(n).closest("li"),u=l.attr("aria-controls");s(n)?(a=n.hash,o=t.element.find(t._sanitizeSelector(a))):(r=t._tabId(l),a="#"+r,o=t.element.find(a),o.length||(o=t._createPanel(r),o.insertAfter(t.panels[i-1]||t.tablist)),o.attr("aria-live","polite")),o.length&&(t.panels=t.panels.add(o)),u&&l.data("ui-tabs-aria-controls",u),l.attr({"aria-controls":a.substring(1),"aria-labelledby":h}),o.attr("aria-labelledby",h)}),this.panels.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").attr("role","tabpanel")},_getList:function(){return this.element.find("ol,ul").eq(0)},_createPanel:function(t){return e("<div>").attr("id",t).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").data("ui-tabs-destroy",!0)},_setupDisabled:function(t){e.isArray(t)&&(t.length?t.length===this.anchors.length&&(t=!0):t=!1);for(var i,s=0;i=this.tabs[s];s++)t===!0||-1!==e.inArray(s,t)?e(i).addClass("ui-state-disabled").attr("aria-disabled","true"):e(i).removeClass("ui-state-disabled").removeAttr("aria-disabled");this.options.disabled=t},_setupEvents:function(t){var i={click:function(e){e.preventDefault()}};t&&e.each(t.split(" "),function(e,t){i[t]="_eventHandler"}),this._off(this.anchors.add(this.tabs).add(this.panels)),this._on(this.anchors,i),this._on(this.tabs,{keydown:"_tabKeydown"}),this._on(this.panels,{keydown:"_panelKeydown"}),this._focusable(this.tabs),this._hoverable(this.tabs)},_setupHeightStyle:function(t){var i,s,n=this.element.parent();"fill"===t?(e.support.minHeight||(s=n.css("overflow"),n.css("overflow","hidden")),i=n.height(),this.element.siblings(":visible").each(function(){var t=e(this),s=t.css("position");"absolute"!==s&&"fixed"!==s&&(i-=t.outerHeight(!0))}),s&&n.css("overflow",s),this.element.children().not(this.panels).each(function(){i-=e(this).outerHeight(!0)}),this.panels.each(function(){e(this).height(Math.max(0,i-e(this).innerHeight()+e(this).height()))}).css("overflow","auto")):"auto"===t&&(i=0,this.panels.each(function(){i=Math.max(i,e(this).height("").height())}).height(i))},_eventHandler:function(t){var i=this.options,s=this.active,n=e(t.currentTarget),a=n.closest("li"),o=a[0]===s[0],r=o&&i.collapsible,h=r?e():this._getPanelForTab(a),l=s.length?this._getPanelForTab(s):e(),u={oldTab:s,oldPanel:l,newTab:r?e():a,newPanel:h};t.preventDefault(),a.hasClass("ui-state-disabled")||a.hasClass("ui-tabs-loading")||this.running||o&&!i.collapsible||this._trigger("beforeActivate",t,u)===!1||(i.active=r?!1:this.tabs.index(a),this.active=o?e():a,this.xhr&&this.xhr.abort(),l.length||h.length||e.error("jQuery UI Tabs: Mismatching fragment identifier."),h.length&&this.load(this.tabs.index(a),t),this._toggle(t,u))},_toggle:function(t,i){function s(){a.running=!1,a._trigger("activate",t,i)}function n(){i.newTab.closest("li").addClass("ui-tabs-active ui-state-active"),o.length&&a.options.show?a._show(o,a.options.show,s):(o.show(),s())}var a=this,o=i.newPanel,r=i.oldPanel;this.running=!0,r.length&&this.options.hide?this._hide(r,this.options.hide,function(){i.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active"),n()}):(i.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active"),r.hide(),n()),r.attr({"aria-expanded":"false","aria-hidden":"true"}),i.oldTab.attr("aria-selected","false"),o.length&&r.length?i.oldTab.attr("tabIndex",-1):o.length&&this.tabs.filter(function(){return 0===e(this).attr("tabIndex")}).attr("tabIndex",-1),o.attr({"aria-expanded":"true","aria-hidden":"false"}),i.newTab.attr({"aria-selected":"true",tabIndex:0})},_activate:function(t){var i,s=this._findActive(t);s[0]!==this.active[0]&&(s.length||(s=this.active),i=s.find(".ui-tabs-anchor")[0],this._eventHandler({target:i,currentTarget:i,preventDefault:e.noop}))},_findActive:function(t){return t===!1?e():this.tabs.eq(t)},_getIndex:function(e){return"string"==typeof e&&(e=this.anchors.index(this.anchors.filter("[href$='"+e+"']"))),e},_destroy:function(){this.xhr&&this.xhr.abort(),this.element.removeClass("ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible"),this.tablist.removeClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").removeAttr("role"),this.anchors.removeClass("ui-tabs-anchor").removeAttr("role").removeAttr("tabIndex").removeData("href.tabs").removeData("load.tabs").removeUniqueId(),this.tabs.add(this.panels).each(function(){e.data(this,"ui-tabs-destroy")?e(this).remove():e(this).removeClass("ui-state-default ui-state-active ui-state-disabled ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel").removeAttr("tabIndex").removeAttr("aria-live").removeAttr("aria-busy").removeAttr("aria-selected").removeAttr("aria-labelledby").removeAttr("aria-hidden").removeAttr("aria-expanded").removeAttr("role")}),this.tabs.each(function(){var t=e(this),i=t.data("ui-tabs-aria-controls");i?t.attr("aria-controls",i):t.removeAttr("aria-controls")}),this.panels.show(),"content"!==this.options.heightStyle&&this.panels.css("height","")},enable:function(i){var s=this.options.disabled;s!==!1&&(i===t?s=!1:(i=this._getIndex(i),s=e.isArray(s)?e.map(s,function(e){return e!==i?e:null}):e.map(this.tabs,function(e,t){return t!==i?t:null})),this._setupDisabled(s))},disable:function(i){var s=this.options.disabled;if(s!==!0){if(i===t)s=!0;else{if(i=this._getIndex(i),-1!==e.inArray(i,s))return;s=e.isArray(s)?e.merge([i],s).sort():[i]}this._setupDisabled(s)}},load:function(t,i){t=this._getIndex(t);var n=this,a=this.tabs.eq(t),o=a.find(".ui-tabs-anchor"),r=this._getPanelForTab(a),h={tab:a,panel:r};s(o[0])||(this.xhr=e.ajax(this._ajaxSettings(o,i,h)),this.xhr&&"canceled"!==this.xhr.statusText&&(a.addClass("ui-tabs-loading"),r.attr("aria-busy","true"),this.xhr.success(function(e){setTimeout(function(){r.html(e),n._trigger("load",i,h)},1)}).complete(function(e,t){setTimeout(function(){"abort"===t&&n.panels.stop(!1,!0),a.removeClass("ui-tabs-loading"),r.removeAttr("aria-busy"),e===n.xhr&&delete n.xhr},1)})))},_ajaxSettings:function(t,i,s){var n=this;return{url:t.attr("href"),beforeSend:function(t,a){return n._trigger("beforeLoad",i,e.extend({jqXHR:t,ajaxSettings:a},s))}}},_getPanelForTab:function(t){var i=e(t).attr("aria-controls");return this.element.find(this._sanitizeSelector("#"+i))}}),e.uiBackCompat!==!1&&(e.ui.tabs.prototype._ui=function(e,t){return{tab:e,panel:t,index:this.anchors.index(e)}},e.widget("ui.tabs",e.ui.tabs,{url:function(e,t){this.anchors.eq(e).attr("href",t)}}),e.widget("ui.tabs",e.ui.tabs,{options:{ajaxOptions:null,cache:!1},_create:function(){this._super();var i=this;this._on({tabsbeforeload:function(s,n){return e.data(n.tab[0],"cache.tabs")?(s.preventDefault(),t):(n.jqXHR.success(function(){i.options.cache&&e.data(n.tab[0],"cache.tabs",!0)}),t)}})},_ajaxSettings:function(t,i,s){var n=this.options.ajaxOptions;return e.extend({},n,{error:function(e,t){try{n.error(e,t,s.tab.closest("li").index(),s.tab[0])}catch(i){}}},this._superApply(arguments))},_setOption:function(e,t){"cache"===e&&t===!1&&this.anchors.removeData("cache.tabs"),this._super(e,t)},_destroy:function(){this.anchors.removeData("cache.tabs"),this._super()},url:function(e){this.anchors.eq(e).removeData("cache.tabs"),this._superApply(arguments)}}),e.widget("ui.tabs",e.ui.tabs,{abort:function(){this.xhr&&this.xhr.abort()}}),e.widget("ui.tabs",e.ui.tabs,{options:{spinner:"<em>Loading&#8230;</em>"},_create:function(){this._super(),this._on({tabsbeforeload:function(e,t){if(e.target===this.element[0]&&this.options.spinner){var i=t.tab.find("span"),s=i.html();i.html(this.options.spinner),t.jqXHR.complete(function(){i.html(s)})}}})}}),e.widget("ui.tabs",e.ui.tabs,{options:{enable:null,disable:null},enable:function(t){var i,s=this.options;(t&&s.disabled===!0||e.isArray(s.disabled)&&-1!==e.inArray(t,s.disabled))&&(i=!0),this._superApply(arguments),i&&this._trigger("enable",null,this._ui(this.anchors[t],this.panels[t]))},disable:function(t){var i,s=this.options;(t&&s.disabled===!1||e.isArray(s.disabled)&&-1===e.inArray(t,s.disabled))&&(i=!0),this._superApply(arguments),i&&this._trigger("disable",null,this._ui(this.anchors[t],this.panels[t]))}}),e.widget("ui.tabs",e.ui.tabs,{options:{add:null,remove:null,tabTemplate:"<li><a href='#{href}'><span>#{label}</span></a></li>"},add:function(i,s,n){n===t&&(n=this.anchors.length);var a,o,r=this.options,h=e(r.tabTemplate.replace(/#\{href\}/g,i).replace(/#\{label\}/g,s)),l=i.indexOf("#")?this._tabId(h):i.replace("#","");return h.addClass("ui-state-default ui-corner-top").data("ui-tabs-destroy",!0),h.attr("aria-controls",l),a=n>=this.tabs.length,o=this.element.find("#"+l),o.length||(o=this._createPanel(l),a?n>0?o.insertAfter(this.panels.eq(-1)):o.appendTo(this.element):o.insertBefore(this.panels[n])),o.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").hide(),a?h.appendTo(this.tablist):h.insertBefore(this.tabs[n]),r.disabled=e.map(r.disabled,function(e){return e>=n?++e:e}),this.refresh(),1===this.tabs.length&&r.active===!1&&this.option("active",0),this._trigger("add",null,this._ui(this.anchors[n],this.panels[n])),this},remove:function(t){t=this._getIndex(t);var i=this.options,s=this.tabs.eq(t).remove(),n=this._getPanelForTab(s).remove();return s.hasClass("ui-tabs-active")&&this.anchors.length>2&&this._activate(t+(this.anchors.length>t+1?1:-1)),i.disabled=e.map(e.grep(i.disabled,function(e){return e!==t}),function(e){return e>=t?--e:e}),this.refresh(),this._trigger("remove",null,this._ui(s.find("a")[0],n[0])),this}}),e.widget("ui.tabs",e.ui.tabs,{length:function(){return this.anchors.length}}),e.widget("ui.tabs",e.ui.tabs,{options:{idPrefix:"ui-tabs-"},_tabId:function(t){var s=t.is("li")?t.find("a[href]"):t;return s=s[0],e(s).closest("li").attr("aria-controls")||s.title&&s.title.replace(/\s/g,"_").replace(/[^\w\u00c0-\uFFFF\-]/g,"")||this.options.idPrefix+i()}}),e.widget("ui.tabs",e.ui.tabs,{options:{panelTemplate:"<div></div>"},_createPanel:function(t){return e(this.options.panelTemplate).attr("id",t).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").data("ui-tabs-destroy",!0)}}),e.widget("ui.tabs",e.ui.tabs,{_create:function(){var e=this.options;null===e.active&&e.selected!==t&&(e.active=-1===e.selected?!1:e.selected),this._super(),e.selected=e.active,e.selected===!1&&(e.selected=-1)},_setOption:function(e,t){if("selected"!==e)return this._super(e,t);var i=this.options;this._super("active",-1===t?!1:t),i.selected=i.active,i.selected===!1&&(i.selected=-1)},_eventHandler:function(){this._superApply(arguments),this.options.selected=this.options.active,this.options.selected===!1&&(this.options.selected=-1)}}),e.widget("ui.tabs",e.ui.tabs,{options:{show:null,select:null},_create:function(){this._super(),this.options.active!==!1&&this._trigger("show",null,this._ui(this.active.find(".ui-tabs-anchor")[0],this._getPanelForTab(this.active)[0]))},_trigger:function(e,t,i){var s,n,a=this._superApply(arguments);return a?("beforeActivate"===e?(s=i.newTab.length?i.newTab:i.oldTab,n=i.newPanel.length?i.newPanel:i.oldPanel,a=this._super("select",t,{tab:s.find(".ui-tabs-anchor")[0],panel:n[0],index:s.closest("li").index()})):"activate"===e&&i.newTab.length&&(a=this._super("show",t,{tab:i.newTab.find(".ui-tabs-anchor")[0],panel:i.newPanel[0],index:i.newTab.closest("li").index()})),a):!1}}),e.widget("ui.tabs",e.ui.tabs,{select:function(e){if(e=this._getIndex(e),-1===e){if(!this.options.collapsible||-1===this.options.selected)return;e=this.options.selected}this.anchors.eq(e).trigger(this.options.event+this.eventNamespace)}}),function(){var t=0;e.widget("ui.tabs",e.ui.tabs,{options:{cookie:null},_create:function(){var e,t=this.options;null==t.active&&t.cookie&&(e=parseInt(this._cookie(),10),-1===e&&(e=!1),t.active=e),this._super()},_cookie:function(i){var s=[this.cookie||(this.cookie=this.options.cookie.name||"ui-tabs-"+ ++t)];return arguments.length&&(s.push(i===!1?-1:i),s.push(this.options.cookie)),e.cookie.apply(null,s)},_refresh:function(){this._super(),this.options.cookie&&this._cookie(this.options.active,this.options.cookie)},_eventHandler:function(){this._superApply(arguments),this.options.cookie&&this._cookie(this.options.active,this.options.cookie)},_destroy:function(){this._super(),this.options.cookie&&this._cookie(null,this.options.cookie)}})}(),e.widget("ui.tabs",e.ui.tabs,{_trigger:function(t,i,s){var n=e.extend({},s);return"load"===t&&(n.panel=n.panel[0],n.tab=n.tab.find(".ui-tabs-anchor")[0]),this._super(t,i,n)}}),e.widget("ui.tabs",e.ui.tabs,{options:{fx:null},_getFx:function(){var t,i,s=this.options.fx;return s&&(e.isArray(s)?(t=s[0],i=s[1]):t=i=s),s?{show:i,hide:t}:null},_toggle:function(e,i){function s(){a.running=!1,a._trigger("activate",e,i)}function n(){i.newTab.closest("li").addClass("ui-tabs-active ui-state-active"),o.length&&h.show?o.animate(h.show,h.show.duration,function(){s()}):(o.show(),s())}var a=this,o=i.newPanel,r=i.oldPanel,h=this._getFx();return h?(a.running=!0,r.length&&h.hide?r.animate(h.hide,h.hide.duration,function(){i.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active"),n()}):(i.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active"),r.hide(),n()),t):this._super(e,i)}}))})(jQuery);(function(e){function t(t,i){var s=(t.attr("aria-describedby")||"").split(/\s+/);s.push(i),t.data("ui-tooltip-id",i).attr("aria-describedby",e.trim(s.join(" ")))}function i(t){var i=t.data("ui-tooltip-id"),s=(t.attr("aria-describedby")||"").split(/\s+/),n=e.inArray(i,s);-1!==n&&s.splice(n,1),t.removeData("ui-tooltip-id"),s=e.trim(s.join(" ")),s?t.attr("aria-describedby",s):t.removeAttr("aria-describedby")}var s=0;e.widget("ui.tooltip",{version:"1.9.2",options:{content:function(){return e(this).attr("title")},hide:!0,items:"[title]:not([disabled])",position:{my:"left top+15",at:"left bottom",collision:"flipfit flip"},show:!0,tooltipClass:null,track:!1,close:null,open:null},_create:function(){this._on({mouseover:"open",focusin:"open"}),this.tooltips={},this.parents={},this.options.disabled&&this._disable()},_setOption:function(t,i){var s=this;return"disabled"===t?(this[i?"_disable":"_enable"](),this.options[t]=i,void 0):(this._super(t,i),"content"===t&&e.each(this.tooltips,function(e,t){s._updateContent(t)}),void 0)},_disable:function(){var t=this;e.each(this.tooltips,function(i,s){var n=e.Event("blur");n.target=n.currentTarget=s[0],t.close(n,!0)}),this.element.find(this.options.items).andSelf().each(function(){var t=e(this);t.is("[title]")&&t.data("ui-tooltip-title",t.attr("title")).attr("title","")})},_enable:function(){this.element.find(this.options.items).andSelf().each(function(){var t=e(this);t.data("ui-tooltip-title")&&t.attr("title",t.data("ui-tooltip-title"))})},open:function(t){var i=this,s=e(t?t.target:this.element).closest(this.options.items);s.length&&!s.data("ui-tooltip-id")&&(s.attr("title")&&s.data("ui-tooltip-title",s.attr("title")),s.data("ui-tooltip-open",!0),t&&"mouseover"===t.type&&s.parents().each(function(){var t,s=e(this);s.data("ui-tooltip-open")&&(t=e.Event("blur"),t.target=t.currentTarget=this,i.close(t,!0)),s.attr("title")&&(s.uniqueId(),i.parents[this.id]={element:this,title:s.attr("title")},s.attr("title",""))}),this._updateContent(s,t))},_updateContent:function(e,t){var i,s=this.options.content,n=this,a=t?t.type:null;return"string"==typeof s?this._open(t,e,s):(i=s.call(e[0],function(i){e.data("ui-tooltip-open")&&n._delay(function(){t&&(t.type=a),this._open(t,e,i)})}),i&&this._open(t,e,i),void 0)},_open:function(i,s,n){function a(e){l.of=e,o.is(":hidden")||o.position(l)}var o,r,h,l=e.extend({},this.options.position);if(n){if(o=this._find(s),o.length)return o.find(".ui-tooltip-content").html(n),void 0;s.is("[title]")&&(i&&"mouseover"===i.type?s.attr("title",""):s.removeAttr("title")),o=this._tooltip(s),t(s,o.attr("id")),o.find(".ui-tooltip-content").html(n),this.options.track&&i&&/^mouse/.test(i.type)?(this._on(this.document,{mousemove:a}),a(i)):o.position(e.extend({of:s},this.options.position)),o.hide(),this._show(o,this.options.show),this.options.show&&this.options.show.delay&&(h=setInterval(function(){o.is(":visible")&&(a(l.of),clearInterval(h))},e.fx.interval)),this._trigger("open",i,{tooltip:o}),r={keyup:function(t){if(t.keyCode===e.ui.keyCode.ESCAPE){var i=e.Event(t);i.currentTarget=s[0],this.close(i,!0)}},remove:function(){this._removeTooltip(o)}},i&&"mouseover"!==i.type||(r.mouseleave="close"),i&&"focusin"!==i.type||(r.focusout="close"),this._on(!0,s,r)}},close:function(t){var s=this,n=e(t?t.currentTarget:this.element),a=this._find(n);this.closing||(n.data("ui-tooltip-title")&&n.attr("title",n.data("ui-tooltip-title")),i(n),a.stop(!0),this._hide(a,this.options.hide,function(){s._removeTooltip(e(this))}),n.removeData("ui-tooltip-open"),this._off(n,"mouseleave focusout keyup"),n[0]!==this.element[0]&&this._off(n,"remove"),this._off(this.document,"mousemove"),t&&"mouseleave"===t.type&&e.each(this.parents,function(t,i){e(i.element).attr("title",i.title),delete s.parents[t]}),this.closing=!0,this._trigger("close",t,{tooltip:a}),this.closing=!1)},_tooltip:function(t){var i="ui-tooltip-"+s++,n=e("<div>").attr({id:i,role:"tooltip"}).addClass("ui-tooltip ui-widget ui-corner-all ui-widget-content "+(this.options.tooltipClass||""));return e("<div>").addClass("ui-tooltip-content").appendTo(n),n.appendTo(this.document[0].body),e.fn.bgiframe&&n.bgiframe(),this.tooltips[i]=t,n},_find:function(t){var i=t.data("ui-tooltip-id");return i?e("#"+i):e()},_removeTooltip:function(e){e.remove(),delete this.tooltips[e.attr("id")]},_destroy:function(){var t=this;e.each(this.tooltips,function(i,s){var n=e.Event("blur");n.target=n.currentTarget=s[0],t.close(n,!0),e("#"+i).remove(),s.data("ui-tooltip-title")&&(s.attr("title",s.data("ui-tooltip-title")),s.removeData("ui-tooltip-title"))})}})})(jQuery);jQuery.effects||function(e,t){var i=e.uiBackCompat!==!1,s="ui-effects-";e.effects={effect:{}},function(t,i){function s(e,t,i){var s=c[t.type]||{};return null==e?i||!t.def?null:t.def:(e=s.floor?~~e:parseFloat(e),isNaN(e)?t.def:s.mod?(e+s.mod)%s.mod:0>e?0:e>s.max?s.max:e)}function n(e){var s=u(),n=s._rgba=[];return e=e.toLowerCase(),m(l,function(t,a){var o,r=a.re.exec(e),h=r&&a.parse(r),l=a.space||"rgba";return h?(o=s[l](h),s[d[l].cache]=o[d[l].cache],n=s._rgba=o._rgba,!1):i}),n.length?("0,0,0,0"===n.join()&&t.extend(n,o.transparent),s):o[e]}function a(e,t,i){return i=(i+1)%1,1>6*i?e+6*(t-e)*i:1>2*i?t:2>3*i?e+6*(t-e)*(2/3-i):e}var o,r="backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor".split(" "),h=/^([\-+])=\s*(\d+\.?\d*)/,l=[{re:/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,parse:function(e){return[e[1],e[2],e[3],e[4]]}},{re:/rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,parse:function(e){return[2.55*e[1],2.55*e[2],2.55*e[3],e[4]]}},{re:/#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,parse:function(e){return[parseInt(e[1],16),parseInt(e[2],16),parseInt(e[3],16)]}},{re:/#([a-f0-9])([a-f0-9])([a-f0-9])/,parse:function(e){return[parseInt(e[1]+e[1],16),parseInt(e[2]+e[2],16),parseInt(e[3]+e[3],16)]}},{re:/hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,space:"hsla",parse:function(e){return[e[1],e[2]/100,e[3]/100,e[4]]}}],u=t.Color=function(e,i,s,n){return new t.Color.fn.parse(e,i,s,n)},d={rgba:{props:{red:{idx:0,type:"byte"},green:{idx:1,type:"byte"},blue:{idx:2,type:"byte"}}},hsla:{props:{hue:{idx:0,type:"degrees"},saturation:{idx:1,type:"percent"},lightness:{idx:2,type:"percent"}}}},c={"byte":{floor:!0,max:255},percent:{max:1},degrees:{mod:360,floor:!0}},p=u.support={},f=t("<p>")[0],m=t.each;f.style.cssText="background-color:rgba(1,1,1,.5)",p.rgba=f.style.backgroundColor.indexOf("rgba")>-1,m(d,function(e,t){t.cache="_"+e,t.props.alpha={idx:3,type:"percent",def:1}}),u.fn=t.extend(u.prototype,{parse:function(a,r,h,l){if(a===i)return this._rgba=[null,null,null,null],this;(a.jquery||a.nodeType)&&(a=t(a).css(r),r=i);var c=this,p=t.type(a),f=this._rgba=[];return r!==i&&(a=[a,r,h,l],p="array"),"string"===p?this.parse(n(a)||o._default):"array"===p?(m(d.rgba.props,function(e,t){f[t.idx]=s(a[t.idx],t)}),this):"object"===p?(a instanceof u?m(d,function(e,t){a[t.cache]&&(c[t.cache]=a[t.cache].slice())}):m(d,function(t,i){var n=i.cache;m(i.props,function(e,t){if(!c[n]&&i.to){if("alpha"===e||null==a[e])return;c[n]=i.to(c._rgba)}c[n][t.idx]=s(a[e],t,!0)}),c[n]&&0>e.inArray(null,c[n].slice(0,3))&&(c[n][3]=1,i.from&&(c._rgba=i.from(c[n])))}),this):i},is:function(e){var t=u(e),s=!0,n=this;return m(d,function(e,a){var o,r=t[a.cache];return r&&(o=n[a.cache]||a.to&&a.to(n._rgba)||[],m(a.props,function(e,t){return null!=r[t.idx]?s=r[t.idx]===o[t.idx]:i})),s}),s},_space:function(){var e=[],t=this;return m(d,function(i,s){t[s.cache]&&e.push(i)}),e.pop()},transition:function(e,t){var i=u(e),n=i._space(),a=d[n],o=0===this.alpha()?u("transparent"):this,r=o[a.cache]||a.to(o._rgba),h=r.slice();return i=i[a.cache],m(a.props,function(e,n){var a=n.idx,o=r[a],l=i[a],u=c[n.type]||{};null!==l&&(null===o?h[a]=l:(u.mod&&(l-o>u.mod/2?o+=u.mod:o-l>u.mod/2&&(o-=u.mod)),h[a]=s((l-o)*t+o,n)))}),this[n](h)},blend:function(e){if(1===this._rgba[3])return this;var i=this._rgba.slice(),s=i.pop(),n=u(e)._rgba;return u(t.map(i,function(e,t){return(1-s)*n[t]+s*e}))},toRgbaString:function(){var e="rgba(",i=t.map(this._rgba,function(e,t){return null==e?t>2?1:0:e});return 1===i[3]&&(i.pop(),e="rgb("),e+i.join()+")"},toHslaString:function(){var e="hsla(",i=t.map(this.hsla(),function(e,t){return null==e&&(e=t>2?1:0),t&&3>t&&(e=Math.round(100*e)+"%"),e});return 1===i[3]&&(i.pop(),e="hsl("),e+i.join()+")"},toHexString:function(e){var i=this._rgba.slice(),s=i.pop();return e&&i.push(~~(255*s)),"#"+t.map(i,function(e){return e=(e||0).toString(16),1===e.length?"0"+e:e}).join("")},toString:function(){return 0===this._rgba[3]?"transparent":this.toRgbaString()}}),u.fn.parse.prototype=u.fn,d.hsla.to=function(e){if(null==e[0]||null==e[1]||null==e[2])return[null,null,null,e[3]];var t,i,s=e[0]/255,n=e[1]/255,a=e[2]/255,o=e[3],r=Math.max(s,n,a),h=Math.min(s,n,a),l=r-h,u=r+h,d=.5*u;return t=h===r?0:s===r?60*(n-a)/l+360:n===r?60*(a-s)/l+120:60*(s-n)/l+240,i=0===d||1===d?d:.5>=d?l/u:l/(2-u),[Math.round(t)%360,i,d,null==o?1:o]},d.hsla.from=function(e){if(null==e[0]||null==e[1]||null==e[2])return[null,null,null,e[3]];var t=e[0]/360,i=e[1],s=e[2],n=e[3],o=.5>=s?s*(1+i):s+i-s*i,r=2*s-o;return[Math.round(255*a(r,o,t+1/3)),Math.round(255*a(r,o,t)),Math.round(255*a(r,o,t-1/3)),n]},m(d,function(e,n){var a=n.props,o=n.cache,r=n.to,l=n.from;u.fn[e]=function(e){if(r&&!this[o]&&(this[o]=r(this._rgba)),e===i)return this[o].slice();var n,h=t.type(e),d="array"===h||"object"===h?e:arguments,c=this[o].slice();return m(a,function(e,t){var i=d["object"===h?e:t.idx];null==i&&(i=c[t.idx]),c[t.idx]=s(i,t)}),l?(n=u(l(c)),n[o]=c,n):u(c)},m(a,function(i,s){u.fn[i]||(u.fn[i]=function(n){var a,o=t.type(n),r="alpha"===i?this._hsla?"hsla":"rgba":e,l=this[r](),u=l[s.idx];return"undefined"===o?u:("function"===o&&(n=n.call(this,u),o=t.type(n)),null==n&&s.empty?this:("string"===o&&(a=h.exec(n),a&&(n=u+parseFloat(a[2])*("+"===a[1]?1:-1))),l[s.idx]=n,this[r](l)))})})}),m(r,function(e,i){t.cssHooks[i]={set:function(e,s){var a,o,r="";if("string"!==t.type(s)||(a=n(s))){if(s=u(a||s),!p.rgba&&1!==s._rgba[3]){for(o="backgroundColor"===i?e.parentNode:e;(""===r||"transparent"===r)&&o&&o.style;)try{r=t.css(o,"backgroundColor"),o=o.parentNode}catch(h){}s=s.blend(r&&"transparent"!==r?r:"_default")}s=s.toRgbaString()}try{e.style[i]=s}catch(l){}}},t.fx.step[i]=function(e){e.colorInit||(e.start=u(e.elem,i),e.end=u(e.end),e.colorInit=!0),t.cssHooks[i].set(e.elem,e.start.transition(e.end,e.pos))}}),t.cssHooks.borderColor={expand:function(e){var t={};return m(["Top","Right","Bottom","Left"],function(i,s){t["border"+s+"Color"]=e}),t}},o=t.Color.names={aqua:"#00ffff",black:"#000000",blue:"#0000ff",fuchsia:"#ff00ff",gray:"#808080",green:"#008000",lime:"#00ff00",maroon:"#800000",navy:"#000080",olive:"#808000",purple:"#800080",red:"#ff0000",silver:"#c0c0c0",teal:"#008080",white:"#ffffff",yellow:"#ffff00",transparent:[null,null,null,0],_default:"#ffffff"}}(jQuery),function(){function i(){var t,i,s=this.ownerDocument.defaultView?this.ownerDocument.defaultView.getComputedStyle(this,null):this.currentStyle,n={};if(s&&s.length&&s[0]&&s[s[0]])for(i=s.length;i--;)t=s[i],"string"==typeof s[t]&&(n[e.camelCase(t)]=s[t]);else for(t in s)"string"==typeof s[t]&&(n[t]=s[t]);return n}function s(t,i){var s,n,o={};for(s in i)n=i[s],t[s]!==n&&(a[s]||(e.fx.step[s]||!isNaN(parseFloat(n)))&&(o[s]=n));return o}var n=["add","remove","toggle"],a={border:1,borderBottom:1,borderColor:1,borderLeft:1,borderRight:1,borderTop:1,borderWidth:1,margin:1,padding:1};e.each(["borderLeftStyle","borderRightStyle","borderBottomStyle","borderTopStyle"],function(t,i){e.fx.step[i]=function(e){("none"!==e.end&&!e.setAttr||1===e.pos&&!e.setAttr)&&(jQuery.style(e.elem,i,e.end),e.setAttr=!0)}}),e.effects.animateClass=function(t,a,o,r){var h=e.speed(a,o,r);return this.queue(function(){var a,o=e(this),r=o.attr("class")||"",l=h.children?o.find("*").andSelf():o;l=l.map(function(){var t=e(this);return{el:t,start:i.call(this)}}),a=function(){e.each(n,function(e,i){t[i]&&o[i+"Class"](t[i])})},a(),l=l.map(function(){return this.end=i.call(this.el[0]),this.diff=s(this.start,this.end),this}),o.attr("class",r),l=l.map(function(){var t=this,i=e.Deferred(),s=jQuery.extend({},h,{queue:!1,complete:function(){i.resolve(t)}});return this.el.animate(this.diff,s),i.promise()}),e.when.apply(e,l.get()).done(function(){a(),e.each(arguments,function(){var t=this.el;e.each(this.diff,function(e){t.css(e,"")})}),h.complete.call(o[0])})})},e.fn.extend({_addClass:e.fn.addClass,addClass:function(t,i,s,n){return i?e.effects.animateClass.call(this,{add:t},i,s,n):this._addClass(t)},_removeClass:e.fn.removeClass,removeClass:function(t,i,s,n){return i?e.effects.animateClass.call(this,{remove:t},i,s,n):this._removeClass(t)},_toggleClass:e.fn.toggleClass,toggleClass:function(i,s,n,a,o){return"boolean"==typeof s||s===t?n?e.effects.animateClass.call(this,s?{add:i}:{remove:i},n,a,o):this._toggleClass(i,s):e.effects.animateClass.call(this,{toggle:i},s,n,a)},switchClass:function(t,i,s,n,a){return e.effects.animateClass.call(this,{add:i,remove:t},s,n,a)}})}(),function(){function n(t,i,s,n){return e.isPlainObject(t)&&(i=t,t=t.effect),t={effect:t},null==i&&(i={}),e.isFunction(i)&&(n=i,s=null,i={}),("number"==typeof i||e.fx.speeds[i])&&(n=s,s=i,i={}),e.isFunction(s)&&(n=s,s=null),i&&e.extend(t,i),s=s||i.duration,t.duration=e.fx.off?0:"number"==typeof s?s:s in e.fx.speeds?e.fx.speeds[s]:e.fx.speeds._default,t.complete=n||i.complete,t}function a(t){return!t||"number"==typeof t||e.fx.speeds[t]?!0:"string"!=typeof t||e.effects.effect[t]?!1:i&&e.effects[t]?!1:!0}e.extend(e.effects,{version:"1.9.2",save:function(e,t){for(var i=0;t.length>i;i++)null!==t[i]&&e.data(s+t[i],e[0].style[t[i]])},restore:function(e,i){var n,a;for(a=0;i.length>a;a++)null!==i[a]&&(n=e.data(s+i[a]),n===t&&(n=""),e.css(i[a],n))},setMode:function(e,t){return"toggle"===t&&(t=e.is(":hidden")?"show":"hide"),t},getBaseline:function(e,t){var i,s;switch(e[0]){case"top":i=0;break;case"middle":i=.5;break;case"bottom":i=1;break;default:i=e[0]/t.height}switch(e[1]){case"left":s=0;break;case"center":s=.5;break;case"right":s=1;break;default:s=e[1]/t.width}return{x:s,y:i}},createWrapper:function(t){if(t.parent().is(".ui-effects-wrapper"))return t.parent();var i={width:t.outerWidth(!0),height:t.outerHeight(!0),"float":t.css("float")},s=e("<div></div>").addClass("ui-effects-wrapper").css({fontSize:"100%",background:"transparent",border:"none",margin:0,padding:0}),n={width:t.width(),height:t.height()},a=document.activeElement;try{a.id}catch(o){a=document.body}return t.wrap(s),(t[0]===a||e.contains(t[0],a))&&e(a).focus(),s=t.parent(),"static"===t.css("position")?(s.css({position:"relative"}),t.css({position:"relative"})):(e.extend(i,{position:t.css("position"),zIndex:t.css("z-index")}),e.each(["top","left","bottom","right"],function(e,s){i[s]=t.css(s),isNaN(parseInt(i[s],10))&&(i[s]="auto")}),t.css({position:"relative",top:0,left:0,right:"auto",bottom:"auto"})),t.css(n),s.css(i).show()},removeWrapper:function(t){var i=document.activeElement;return t.parent().is(".ui-effects-wrapper")&&(t.parent().replaceWith(t),(t[0]===i||e.contains(t[0],i))&&e(i).focus()),t},setTransition:function(t,i,s,n){return n=n||{},e.each(i,function(e,i){var a=t.cssUnit(i);a[0]>0&&(n[i]=a[0]*s+a[1])}),n}}),e.fn.extend({effect:function(){function t(t){function i(){e.isFunction(a)&&a.call(n[0]),e.isFunction(t)&&t()}var n=e(this),a=s.complete,o=s.mode;(n.is(":hidden")?"hide"===o:"show"===o)?i():r.call(n[0],s,i)}var s=n.apply(this,arguments),a=s.mode,o=s.queue,r=e.effects.effect[s.effect],h=!r&&i&&e.effects[s.effect];return e.fx.off||!r&&!h?a?this[a](s.duration,s.complete):this.each(function(){s.complete&&s.complete.call(this)}):r?o===!1?this.each(t):this.queue(o||"fx",t):h.call(this,{options:s,duration:s.duration,callback:s.complete,mode:s.mode})},_show:e.fn.show,show:function(e){if(a(e))return this._show.apply(this,arguments);var t=n.apply(this,arguments);return t.mode="show",this.effect.call(this,t)},_hide:e.fn.hide,hide:function(e){if(a(e))return this._hide.apply(this,arguments);var t=n.apply(this,arguments);return t.mode="hide",this.effect.call(this,t)},__toggle:e.fn.toggle,toggle:function(t){if(a(t)||"boolean"==typeof t||e.isFunction(t))return this.__toggle.apply(this,arguments);var i=n.apply(this,arguments);return i.mode="toggle",this.effect.call(this,i)},cssUnit:function(t){var i=this.css(t),s=[];return e.each(["em","px","%","pt"],function(e,t){i.indexOf(t)>0&&(s=[parseFloat(i),t])}),s}})}(),function(){var t={};e.each(["Quad","Cubic","Quart","Quint","Expo"],function(e,i){t[i]=function(t){return Math.pow(t,e+2)}}),e.extend(t,{Sine:function(e){return 1-Math.cos(e*Math.PI/2)},Circ:function(e){return 1-Math.sqrt(1-e*e)},Elastic:function(e){return 0===e||1===e?e:-Math.pow(2,8*(e-1))*Math.sin((80*(e-1)-7.5)*Math.PI/15)},Back:function(e){return e*e*(3*e-2)},Bounce:function(e){for(var t,i=4;((t=Math.pow(2,--i))-1)/11>e;);return 1/Math.pow(4,3-i)-7.5625*Math.pow((3*t-2)/22-e,2)}}),e.each(t,function(t,i){e.easing["easeIn"+t]=i,e.easing["easeOut"+t]=function(e){return 1-i(1-e)},e.easing["easeInOut"+t]=function(e){return.5>e?i(2*e)/2:1-i(-2*e+2)/2}})}()}(jQuery);(function(e){var t=/up|down|vertical/,i=/up|left|vertical|horizontal/;e.effects.effect.blind=function(s,n){var a,r,o,h=e(this),l=["position","top","bottom","left","right","height","width"],u=e.effects.setMode(h,s.mode||"hide"),d=s.direction||"up",c=t.test(d),p=c?"height":"width",f=c?"top":"left",m=i.test(d),g={},v="show"===u;h.parent().is(".ui-effects-wrapper")?e.effects.save(h.parent(),l):e.effects.save(h,l),h.show(),a=e.effects.createWrapper(h).css({overflow:"hidden"}),r=a[p](),o=parseFloat(a.css(f))||0,g[p]=v?r:0,m||(h.css(c?"bottom":"right",0).css(c?"top":"left","auto").css({position:"absolute"}),g[f]=v?o:r+o),v&&(a.css(p,0),m||a.css(f,o+r)),a.animate(g,{duration:s.duration,easing:s.easing,queue:!1,complete:function(){"hide"===u&&h.hide(),e.effects.restore(h,l),e.effects.removeWrapper(h),n()}})}})(jQuery);(function(e){e.effects.effect.bounce=function(t,i){var s,n,a,r=e(this),o=["position","top","bottom","left","right","height","width"],h=e.effects.setMode(r,t.mode||"effect"),l="hide"===h,u="show"===h,d=t.direction||"up",c=t.distance,p=t.times||5,f=2*p+(u||l?1:0),m=t.duration/f,g=t.easing,v="up"===d||"down"===d?"top":"left",y="up"===d||"left"===d,b=r.queue(),_=b.length;for((u||l)&&o.push("opacity"),e.effects.save(r,o),r.show(),e.effects.createWrapper(r),c||(c=r["top"===v?"outerHeight":"outerWidth"]()/3),u&&(a={opacity:1},a[v]=0,r.css("opacity",0).css(v,y?2*-c:2*c).animate(a,m,g)),l&&(c/=Math.pow(2,p-1)),a={},a[v]=0,s=0;p>s;s++)n={},n[v]=(y?"-=":"+=")+c,r.animate(n,m,g).animate(a,m,g),c=l?2*c:c/2;l&&(n={opacity:0},n[v]=(y?"-=":"+=")+c,r.animate(n,m,g)),r.queue(function(){l&&r.hide(),e.effects.restore(r,o),e.effects.removeWrapper(r),i()}),_>1&&b.splice.apply(b,[1,0].concat(b.splice(_,f+1))),r.dequeue()}})(jQuery);(function(e){e.effects.effect.clip=function(t,i){var s,n,a,r=e(this),o=["position","top","bottom","left","right","height","width"],h=e.effects.setMode(r,t.mode||"hide"),l="show"===h,u=t.direction||"vertical",d="vertical"===u,c=d?"height":"width",p=d?"top":"left",f={};e.effects.save(r,o),r.show(),s=e.effects.createWrapper(r).css({overflow:"hidden"}),n="IMG"===r[0].tagName?s:r,a=n[c](),l&&(n.css(c,0),n.css(p,a/2)),f[c]=l?a:0,f[p]=l?0:a/2,n.animate(f,{queue:!1,duration:t.duration,easing:t.easing,complete:function(){l||r.hide(),e.effects.restore(r,o),e.effects.removeWrapper(r),i()}})}})(jQuery);(function(e){e.effects.effect.drop=function(t,i){var s,n=e(this),a=["position","top","bottom","left","right","opacity","height","width"],r=e.effects.setMode(n,t.mode||"hide"),o="show"===r,h=t.direction||"left",l="up"===h||"down"===h?"top":"left",u="up"===h||"left"===h?"pos":"neg",d={opacity:o?1:0};e.effects.save(n,a),n.show(),e.effects.createWrapper(n),s=t.distance||n["top"===l?"outerHeight":"outerWidth"](!0)/2,o&&n.css("opacity",0).css(l,"pos"===u?-s:s),d[l]=(o?"pos"===u?"+=":"-=":"pos"===u?"-=":"+=")+s,n.animate(d,{queue:!1,duration:t.duration,easing:t.easing,complete:function(){"hide"===r&&n.hide(),e.effects.restore(n,a),e.effects.removeWrapper(n),i()}})}})(jQuery);(function(e){e.effects.effect.explode=function(t,i){function s(){b.push(this),b.length===d*c&&n()}function n(){p.css({visibility:"visible"}),e(b).remove(),m||p.hide(),i()}var a,r,o,h,l,u,d=t.pieces?Math.round(Math.sqrt(t.pieces)):3,c=d,p=e(this),f=e.effects.setMode(p,t.mode||"hide"),m="show"===f,g=p.show().css("visibility","hidden").offset(),v=Math.ceil(p.outerWidth()/c),y=Math.ceil(p.outerHeight()/d),b=[];for(a=0;d>a;a++)for(h=g.top+a*y,u=a-(d-1)/2,r=0;c>r;r++)o=g.left+r*v,l=r-(c-1)/2,p.clone().appendTo("body").wrap("<div></div>").css({position:"absolute",visibility:"visible",left:-r*v,top:-a*y}).parent().addClass("ui-effects-explode").css({position:"absolute",overflow:"hidden",width:v,height:y,left:o+(m?l*v:0),top:h+(m?u*y:0),opacity:m?0:1}).animate({left:o+(m?0:l*v),top:h+(m?0:u*y),opacity:m?1:0},t.duration||500,t.easing,s)}})(jQuery);(function(e){e.effects.effect.fade=function(t,i){var s=e(this),n=e.effects.setMode(s,t.mode||"toggle");s.animate({opacity:n},{queue:!1,duration:t.duration,easing:t.easing,complete:i})}})(jQuery);(function(e){e.effects.effect.fold=function(t,i){var s,n,a=e(this),r=["position","top","bottom","left","right","height","width"],o=e.effects.setMode(a,t.mode||"hide"),h="show"===o,l="hide"===o,u=t.size||15,d=/([0-9]+)%/.exec(u),c=!!t.horizFirst,p=h!==c,f=p?["width","height"]:["height","width"],m=t.duration/2,g={},v={};e.effects.save(a,r),a.show(),s=e.effects.createWrapper(a).css({overflow:"hidden"}),n=p?[s.width(),s.height()]:[s.height(),s.width()],d&&(u=parseInt(d[1],10)/100*n[l?0:1]),h&&s.css(c?{height:0,width:u}:{height:u,width:0}),g[f[0]]=h?n[0]:u,v[f[1]]=h?n[1]:0,s.animate(g,m,t.easing).animate(v,m,t.easing,function(){l&&a.hide(),e.effects.restore(a,r),e.effects.removeWrapper(a),i()})}})(jQuery);(function(e){e.effects.effect.highlight=function(t,i){var s=e(this),n=["backgroundImage","backgroundColor","opacity"],a=e.effects.setMode(s,t.mode||"show"),o={backgroundColor:s.css("backgroundColor")};"hide"===a&&(o.opacity=0),e.effects.save(s,n),s.show().css({backgroundImage:"none",backgroundColor:t.color||"#ffff99"}).animate(o,{queue:!1,duration:t.duration,easing:t.easing,complete:function(){"hide"===a&&s.hide(),e.effects.restore(s,n),i()}})}})(jQuery);(function(e){e.effects.effect.pulsate=function(t,i){var s,n=e(this),a=e.effects.setMode(n,t.mode||"show"),o="show"===a,r="hide"===a,h=o||"hide"===a,l=2*(t.times||5)+(h?1:0),u=t.duration/l,d=0,c=n.queue(),p=c.length;for((o||!n.is(":visible"))&&(n.css("opacity",0).show(),d=1),s=1;l>s;s++)n.animate({opacity:d},u,t.easing),d=1-d;n.animate({opacity:d},u,t.easing),n.queue(function(){r&&n.hide(),i()}),p>1&&c.splice.apply(c,[1,0].concat(c.splice(p,l+1))),n.dequeue()}})(jQuery);(function(e){e.effects.effect.puff=function(t,i){var s=e(this),n=e.effects.setMode(s,t.mode||"hide"),a="hide"===n,o=parseInt(t.percent,10)||150,r=o/100,h={height:s.height(),width:s.width(),outerHeight:s.outerHeight(),outerWidth:s.outerWidth()};e.extend(t,{effect:"scale",queue:!1,fade:!0,mode:n,complete:i,percent:a?o:100,from:a?h:{height:h.height*r,width:h.width*r,outerHeight:h.outerHeight*r,outerWidth:h.outerWidth*r}}),s.effect(t)},e.effects.effect.scale=function(t,i){var s=e(this),n=e.extend(!0,{},t),a=e.effects.setMode(s,t.mode||"effect"),o=parseInt(t.percent,10)||(0===parseInt(t.percent,10)?0:"hide"===a?0:100),r=t.direction||"both",h=t.origin,l={height:s.height(),width:s.width(),outerHeight:s.outerHeight(),outerWidth:s.outerWidth()},u={y:"horizontal"!==r?o/100:1,x:"vertical"!==r?o/100:1};n.effect="size",n.queue=!1,n.complete=i,"effect"!==a&&(n.origin=h||["middle","center"],n.restore=!0),n.from=t.from||("show"===a?{height:0,width:0,outerHeight:0,outerWidth:0}:l),n.to={height:l.height*u.y,width:l.width*u.x,outerHeight:l.outerHeight*u.y,outerWidth:l.outerWidth*u.x},n.fade&&("show"===a&&(n.from.opacity=0,n.to.opacity=1),"hide"===a&&(n.from.opacity=1,n.to.opacity=0)),s.effect(n)},e.effects.effect.size=function(t,i){var s,n,a,o=e(this),r=["position","top","bottom","left","right","width","height","overflow","opacity"],h=["position","top","bottom","left","right","overflow","opacity"],l=["width","height","overflow"],u=["fontSize"],d=["borderTopWidth","borderBottomWidth","paddingTop","paddingBottom"],c=["borderLeftWidth","borderRightWidth","paddingLeft","paddingRight"],p=e.effects.setMode(o,t.mode||"effect"),f=t.restore||"effect"!==p,m=t.scale||"both",g=t.origin||["middle","center"],v=o.css("position"),y=f?r:h,b={height:0,width:0,outerHeight:0,outerWidth:0};"show"===p&&o.show(),s={height:o.height(),width:o.width(),outerHeight:o.outerHeight(),outerWidth:o.outerWidth()},"toggle"===t.mode&&"show"===p?(o.from=t.to||b,o.to=t.from||s):(o.from=t.from||("show"===p?b:s),o.to=t.to||("hide"===p?b:s)),a={from:{y:o.from.height/s.height,x:o.from.width/s.width},to:{y:o.to.height/s.height,x:o.to.width/s.width}},("box"===m||"both"===m)&&(a.from.y!==a.to.y&&(y=y.concat(d),o.from=e.effects.setTransition(o,d,a.from.y,o.from),o.to=e.effects.setTransition(o,d,a.to.y,o.to)),a.from.x!==a.to.x&&(y=y.concat(c),o.from=e.effects.setTransition(o,c,a.from.x,o.from),o.to=e.effects.setTransition(o,c,a.to.x,o.to))),("content"===m||"both"===m)&&a.from.y!==a.to.y&&(y=y.concat(u).concat(l),o.from=e.effects.setTransition(o,u,a.from.y,o.from),o.to=e.effects.setTransition(o,u,a.to.y,o.to)),e.effects.save(o,y),o.show(),e.effects.createWrapper(o),o.css("overflow","hidden").css(o.from),g&&(n=e.effects.getBaseline(g,s),o.from.top=(s.outerHeight-o.outerHeight())*n.y,o.from.left=(s.outerWidth-o.outerWidth())*n.x,o.to.top=(s.outerHeight-o.to.outerHeight)*n.y,o.to.left=(s.outerWidth-o.to.outerWidth)*n.x),o.css(o.from),("content"===m||"both"===m)&&(d=d.concat(["marginTop","marginBottom"]).concat(u),c=c.concat(["marginLeft","marginRight"]),l=r.concat(d).concat(c),o.find("*[width]").each(function(){var i=e(this),s={height:i.height(),width:i.width(),outerHeight:i.outerHeight(),outerWidth:i.outerWidth()};f&&e.effects.save(i,l),i.from={height:s.height*a.from.y,width:s.width*a.from.x,outerHeight:s.outerHeight*a.from.y,outerWidth:s.outerWidth*a.from.x},i.to={height:s.height*a.to.y,width:s.width*a.to.x,outerHeight:s.height*a.to.y,outerWidth:s.width*a.to.x},a.from.y!==a.to.y&&(i.from=e.effects.setTransition(i,d,a.from.y,i.from),i.to=e.effects.setTransition(i,d,a.to.y,i.to)),a.from.x!==a.to.x&&(i.from=e.effects.setTransition(i,c,a.from.x,i.from),i.to=e.effects.setTransition(i,c,a.to.x,i.to)),i.css(i.from),i.animate(i.to,t.duration,t.easing,function(){f&&e.effects.restore(i,l)})})),o.animate(o.to,{queue:!1,duration:t.duration,easing:t.easing,complete:function(){0===o.to.opacity&&o.css("opacity",o.from.opacity),"hide"===p&&o.hide(),e.effects.restore(o,y),f||("static"===v?o.css({position:"relative",top:o.to.top,left:o.to.left}):e.each(["top","left"],function(e,t){o.css(t,function(t,i){var s=parseInt(i,10),n=e?o.to.left:o.to.top;return"auto"===i?n+"px":s+n+"px"})})),e.effects.removeWrapper(o),i()}})}})(jQuery);(function(e){e.effects.effect.shake=function(t,i){var s,n=e(this),a=["position","top","bottom","left","right","height","width"],o=e.effects.setMode(n,t.mode||"effect"),r=t.direction||"left",h=t.distance||20,l=t.times||3,u=2*l+1,d=Math.round(t.duration/u),c="up"===r||"down"===r?"top":"left",p="up"===r||"left"===r,f={},m={},g={},v=n.queue(),y=v.length;for(e.effects.save(n,a),n.show(),e.effects.createWrapper(n),f[c]=(p?"-=":"+=")+h,m[c]=(p?"+=":"-=")+2*h,g[c]=(p?"-=":"+=")+2*h,n.animate(f,d,t.easing),s=1;l>s;s++)n.animate(m,d,t.easing).animate(g,d,t.easing);n.animate(m,d,t.easing).animate(f,d/2,t.easing).queue(function(){"hide"===o&&n.hide(),e.effects.restore(n,a),e.effects.removeWrapper(n),i()}),y>1&&v.splice.apply(v,[1,0].concat(v.splice(y,u+1))),n.dequeue()}})(jQuery);(function(e){e.effects.effect.slide=function(t,i){var s,n=e(this),a=["position","top","bottom","left","right","width","height"],o=e.effects.setMode(n,t.mode||"show"),r="show"===o,h=t.direction||"left",l="up"===h||"down"===h?"top":"left",u="up"===h||"left"===h,d={};e.effects.save(n,a),n.show(),s=t.distance||n["top"===l?"outerHeight":"outerWidth"](!0),e.effects.createWrapper(n).css({overflow:"hidden"}),r&&n.css(l,u?isNaN(s)?"-"+s:-s:s),d[l]=(r?u?"+=":"-=":u?"-=":"+=")+s,n.animate(d,{queue:!1,duration:t.duration,easing:t.easing,complete:function(){"hide"===o&&n.hide(),e.effects.restore(n,a),e.effects.removeWrapper(n),i()}})}})(jQuery);(function(e){e.effects.effect.transfer=function(t,i){var s=e(this),n=e(t.to),a="fixed"===n.css("position"),o=e("body"),r=a?o.scrollTop():0,h=a?o.scrollLeft():0,l=n.offset(),u={top:l.top-r,left:l.left-h,height:n.innerHeight(),width:n.innerWidth()},d=s.offset(),c=e('<div class="ui-effects-transfer"></div>').appendTo(document.body).addClass(t.className).css({top:d.top-r,left:d.left-h,height:s.innerHeight(),width:s.innerWidth(),position:a?"fixed":"absolute"}).animate(u,t.duration,t.easing,function(){c.remove(),i()})}})(jQuery);;
(function(a,q,r){function c(a){a=a||location.href;return"#"+a.replace(/^[^#]*#?(.*)$/,"$1")}var k=document,d,f=a.event.special,t=k.documentMode,m="onhashchange"in q&&(t===r||7<t);a.fn.hashchange=function(a){return a?this.bind("hashchange",a):this.trigger("hashchange")};a.fn.hashchange.delay=50;f.hashchange=a.extend(f.hashchange,{setup:function(){if(m)return!1;a(d.start)},teardown:function(){if(m)return!1;a(d.stop)}});d=function(){function d(){var e=c(),b=f(l);e!==l?(n(l=e,b),a(q).trigger("hashchange")):
b!==l&&(location.href=location.href.replace(/#.*/,"")+b);g=setTimeout(d,a.fn.hashchange.delay)}var h={},g,l=c(),p=function(a){return a},n=p,f=p;h.start=function(){g||d()};h.stop=function(){g&&clearTimeout(g);g=r};a.browser.msie&&!m&&function(){var e,b;h.start=function(){e||(b=(b=a.fn.hashchange.src)&&b+c(),e=a('<iframe tabindex="-1" title="empty"/>').hide().one("load",function(){b||n(c());d()}).attr("src",b||"javascript:0").insertAfter("body")[0].contentWindow,k.onpropertychange=function(){try{"title"===
event.propertyName&&(e.document.title=k.title)}catch(a){}})};h.stop=p;f=function(){return c(e.location.href)};n=function(b,d){var c=e.document,f=a.fn.hashchange.domain;b!==d&&(c.title=k.title,c.open(),f&&c.write('<script>document.domain="'+f+'"\x3c/script>'),c.close(),e.location.hash=b)}}();return h}()})(jQuery,this);;
el_theme_settings=$.parseJSON(el_theme_settings);el_tpl_settings.framework_vars=$.parseJSON(el_tpl_settings.framework_vars);el_tpl_settings.admin_formats=$.parseJSON(el_tpl_settings.admin_formats);
Project.modules.ajaxNavigate={init:function(){this.hijackAnchor()},findHASHURL:function(){return"true"!=el_tpl_settings.page_iframe&&""==window.location.hash?this.checkForHASHURL(window.location.href):!0},hijackAnchor:function(){$href_array=$("a[hijacked!=yes]");$href_array.each(function(){return_url=Project.modules.ajaxNavigate.convertURLToHASH(this.href.toString());""!=return_url&&(this.href=return_url);$(this).attr("hijacked","yes")})},converStrToHex:function(a){for(var b="",c=0;c<a.length;c++)var d=
""+a.charCodeAt(c).toString(16),b=1==d.length?b+("0"+d):b+d;return b},convertHexToStr:function(a){for(var b="",c=0;c<a.length;c+=2)b+=""+String.fromCharCode(parseInt(a.charAt(c)+a.charAt(c+1),16));return b},checkForHASHURL:function(a){return a!=admin_url&&-1==a.toString().indexOf("#")&&(tmp_arr=a.toString().split(admin_url),2==tmp_arr.length&&"#"!=tmp_arr[1])?(window.location.href=admin_url+"#"+tmp_arr[1],!1):!0},convertURLToHASH:function(a){a=a.toString().split(admin_url);var b="";2==a.length&&(a[1]=
a[1].replace("?","|"),a[1]=a[1].replace(/&/g,"|"),a[1]=a[1].replace(/=/g,"|"),a[1]=a[1].replace("#",""),b=admin_url+"#"+a[1]);return b},loadPage:function(a){window.location.href=a}};;
!function(b){b(function(){var f=b.support,a;a:{a=document.createElement("bootstrap");var c={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"},d;for(d in c)if(void 0!==a.style[d]){a=c[d];break a}a=void 0}f.transition=a&&{end:a}})}(window.jQuery);
!function(b){var f=function(a){b(a).on("click",'[data-dismiss="alert"]',this.close)};f.prototype.close=function(a){function c(){g.trigger("closed").remove()}var d=b(this),e=d.attr("data-target"),g;e||(e=(e=d.attr("href"))&&e.replace(/.*(?=#[^\s]*$)/,""));g=b(e);a&&a.preventDefault();g.length||(g=d.hasClass("alert")?d:d.parent());g.trigger(a=b.Event("close"));a.isDefaultPrevented()||(g.removeClass("in"),b.support.transition&&g.hasClass("fade")?g.on(b.support.transition.end,c):c())};b.fn.alert=function(a){return this.each(function(){var c=
b(this),d=c.data("alert");d||c.data("alert",d=new f(this));"string"==typeof a&&d[a].call(c)})};b.fn.alert.Constructor=f;b(document).on("click.alert.data-api",'[data-dismiss="alert"]',f.prototype.close)}(window.jQuery);
!function(b){var f=function(a,c){this.$element=b(a);this.options=b.extend({},b.fn.button.defaults,c)};f.prototype.setState=function(a){var b=this.$element,d=b.data(),e=b.is("input")?"val":"html";a+="Text";d.resetText||b.data("resetText",b[e]());b[e](d[a]||this.options[a]);setTimeout(function(){"loadingText"==a?b.addClass("disabled").attr("disabled","disabled"):b.removeClass("disabled").removeAttr("disabled")},0)};f.prototype.toggle=function(){var a=this.$element.closest('[data-toggle="buttons-radio"]');
a&&a.find(".active").removeClass("active");this.$element.toggleClass("active")};b.fn.button=function(a){return this.each(function(){var c=b(this),d=c.data("button"),e="object"==typeof a&&a;d||c.data("button",d=new f(this,e));"toggle"==a?d.toggle():a&&d.setState(a)})};b.fn.button.defaults={loadingText:"loading..."};b.fn.button.Constructor=f;b(document).on("click.button.data-api","[data-toggle^=button]",function(a){a=b(a.target);a.hasClass("btn")||(a=a.closest(".btn"));a.button("toggle")})}(window.jQuery);
!function(b){var f=function(a,c){this.$element=b(a);this.options=c;this.options.slide&&this.slide(this.options.slide);"hover"==this.options.pause&&this.$element.on("mouseenter",b.proxy(this.pause,this)).on("mouseleave",b.proxy(this.cycle,this))};f.prototype={cycle:function(a){a||(this.paused=!1);this.options.interval&&!this.paused&&(this.interval=setInterval(b.proxy(this.next,this),this.options.interval));return this},to:function(a){var c=this.$element.find(".item.active"),d=c.parent().children(),
c=d.index(c),e=this;if(!(a>d.length-1||0>a))return this.sliding?this.$element.one("slid",function(){e.to(a)}):c==a?this.pause().cycle():this.slide(a>c?"next":"prev",b(d[a]))},pause:function(a){a||(this.paused=!0);this.$element.find(".next, .prev").length&&b.support.transition.end&&(this.$element.trigger(b.support.transition.end),this.cycle());clearInterval(this.interval);this.interval=null;return this},next:function(){if(!this.sliding)return this.slide("next")},prev:function(){if(!this.sliding)return this.slide("prev")},
slide:function(a,c){var d=this.$element.find(".item.active"),e=c||d[a](),g=this.interval,f="next"==a?"left":"right",k="next"==a?"first":"last",l=this;this.sliding=!0;g&&this.pause();e=e.length?e:this.$element.find(".item")[k]();k=b.Event("slide",{relatedTarget:e[0]});if(!e.hasClass("active")){if(b.support.transition&&this.$element.hasClass("slide")){this.$element.trigger(k);if(k.isDefaultPrevented())return;e.addClass(a);e[0].offsetWidth;d.addClass(f);e.addClass(f);this.$element.one(b.support.transition.end,
function(){e.removeClass([a,f].join(" ")).addClass("active");d.removeClass(["active",f].join(" "));l.sliding=!1;setTimeout(function(){l.$element.trigger("slid")},0)})}else{this.$element.trigger(k);if(k.isDefaultPrevented())return;d.removeClass("active");e.addClass("active");this.sliding=!1;this.$element.trigger("slid")}g&&this.cycle();return this}}};b.fn.carousel=function(a){return this.each(function(){var c=b(this),d=c.data("carousel"),e=b.extend({},b.fn.carousel.defaults,"object"==typeof a&&a),
g="string"==typeof a?a:e.slide;d||c.data("carousel",d=new f(this,e));if("number"==typeof a)d.to(a);else if(g)d[g]();else e.interval&&d.cycle()})};b.fn.carousel.defaults={interval:5E3,pause:"hover"};b.fn.carousel.Constructor=f;b(document).on("click.carousel.data-api","[data-slide]",function(a){var c=b(this),d,e=b(c.attr("data-target")||(d=c.attr("href"))&&d.replace(/.*(?=#[^\s]+$)/,"")),c=b.extend({},e.data(),c.data());e.carousel(c);a.preventDefault()})}(window.jQuery);
!function(b){var f=function(a,c){this.$element=b(a);this.options=b.extend({},b.fn.collapse.defaults,c);this.options.parent&&(this.$parent=b(this.options.parent));this.options.toggle&&this.toggle()};f.prototype={constructor:f,dimension:function(){return this.$element.hasClass("width")?"width":"height"},show:function(){var a,c,d,e;if(!this.transitioning){a=this.dimension();c=b.camelCase(["scroll",a].join("-"));if((d=this.$parent&&this.$parent.find("> .accordion-group > .in"))&&d.length){if((e=d.data("collapse"))&&
e.transitioning)return;d.collapse("hide");e||d.data("collapse",null)}this.$element[a](0);this.transition("addClass",b.Event("show"),"shown");b.support.transition&&this.$element[a](this.$element[0][c])}},hide:function(){var a;this.transitioning||(a=this.dimension(),this.reset(this.$element[a]()),this.transition("removeClass",b.Event("hide"),"hidden"),this.$element[a](0))},reset:function(a){var b=this.dimension();this.$element.removeClass("collapse")[b](a||"auto")[0].offsetWidth;this.$element[null!==
a?"addClass":"removeClass"]("collapse");return this},transition:function(a,c,d){var e=this,g=function(){"show"==c.type&&e.reset();e.transitioning=0;e.$element.trigger(d)};this.$element.trigger(c);c.isDefaultPrevented()||(this.transitioning=1,this.$element[a]("in"),b.support.transition&&this.$element.hasClass("collapse")?this.$element.one(b.support.transition.end,g):g())},toggle:function(){this[this.$element.hasClass("in")?"hide":"show"]()}};b.fn.collapse=function(a){return this.each(function(){var c=
b(this),d=c.data("collapse"),e="object"==typeof a&&a;d||c.data("collapse",d=new f(this,e));if("string"==typeof a)d[a]()})};b.fn.collapse.defaults={toggle:!0};b.fn.collapse.Constructor=f;b(document).on("click.collapse.data-api","[data-toggle=collapse]",function(a){var c=b(this),d;a=c.attr("data-target")||a.preventDefault()||(d=c.attr("href"))&&d.replace(/.*(?=#[^\s]+$)/,"");d=b(a).data("collapse")?"toggle":c.data();c[b(a).hasClass("in")?"addClass":"removeClass"]("collapsed");b(a).collapse(d)})}(window.jQuery);
!function(b){function f(){b("[data-toggle=dropdown]").each(function(){a(b(this)).removeClass("open")})}function a(a){var c=a.attr("data-target");c||(c=(c=a.attr("href"))&&/#/.test(c)&&c.replace(/.*(?=#[^\s]*$)/,""));c=b(c);c.length||(c=a.parent());return c}var c=function(a){var c=b(a).on("click.dropdown.data-api",this.toggle);b("html").on("click.dropdown.data-api",function(){c.parent().removeClass("open")})};c.prototype={constructor:c,toggle:function(c){c=b(this);var e,g;if(!c.is(".disabled, :disabled"))return e=
a(c),g=e.hasClass("open"),f(),g||(e.toggleClass("open"),c.focus()),!1},keydown:function(c){var e,g,f;if(/(38|40|27)/.test(c.keyCode)&&(e=b(this),c.preventDefault(),c.stopPropagation(),!e.is(".disabled, :disabled"))){g=a(e);f=g.hasClass("open");if(!f||f&&27==c.keyCode)return e.click();e=b("[role=menu] li:not(.divider) a",g);e.length&&(g=e.index(e.filter(":focus")),38==c.keyCode&&0<g&&g--,40==c.keyCode&&g<e.length-1&&g++,~g||(g=0),e.eq(g).focus())}}};b.fn.dropdown=function(a){return this.each(function(){var e=
b(this),g=e.data("dropdown");g||e.data("dropdown",g=new c(this));"string"==typeof a&&g[a].call(e)})};b.fn.dropdown.Constructor=c;b(document).on("click.dropdown.data-api touchstart.dropdown.data-api",f).on("click.dropdown touchstart.dropdown.data-api",".dropdown form",function(a){a.stopPropagation()}).on("click.dropdown.data-api touchstart.dropdown.data-api","[data-toggle=dropdown]",c.prototype.toggle).on("keydown.dropdown.data-api touchstart.dropdown.data-api","[data-toggle=dropdown], [role=menu]",
c.prototype.keydown)}(window.jQuery);
!function(b){var f=function(a,c){this.options=c;this.$element=b(a).delegate('[data-dismiss="modal"]',"click.dismiss.modal",b.proxy(this.hide,this));this.options.remote&&this.$element.find(".modal-body").load(this.options.remote)};f.prototype={constructor:f,toggle:function(){return this[this.isShown?"hide":"show"]()},show:function(){var a=this,c=b.Event("show");this.$element.trigger(c);this.isShown||c.isDefaultPrevented()||(this.isShown=!0,this.escape(),this.backdrop(function(){var c=b.support.transition&&
a.$element.hasClass("fade");a.$element.parent().length||a.$element.appendTo(document.body);a.$element.show();c&&a.$element[0].offsetWidth;a.$element.addClass("in").attr("aria-hidden",!1);a.enforceFocus();c?a.$element.one(b.support.transition.end,function(){a.$element.focus().trigger("shown")}):a.$element.focus().trigger("shown")}))},hide:function(a){a&&a.preventDefault();a=b.Event("hide");this.$element.trigger(a);this.isShown&&!a.isDefaultPrevented()&&(this.isShown=!1,this.escape(),b(document).off("focusin.modal"),
this.$element.removeClass("in").attr("aria-hidden",!0),b.support.transition&&this.$element.hasClass("fade")?this.hideWithTransition():this.hideModal())},enforceFocus:function(){var a=this;b(document).on("focusin.modal",function(c){a.$element[0]===c.target||a.$element.has(c.target).length||a.$element.focus()})},escape:function(){var a=this;if(this.isShown&&this.options.keyboard)this.$element.on("keyup.dismiss.modal",function(c){27==c.which&&a.hide()});else this.isShown||this.$element.off("keyup.dismiss.modal")},
hideWithTransition:function(){var a=this,c=setTimeout(function(){a.$element.off(b.support.transition.end);a.hideModal()},500);this.$element.one(b.support.transition.end,function(){clearTimeout(c);a.hideModal()})},hideModal:function(a){this.$element.hide().trigger("hidden");this.backdrop()},removeBackdrop:function(){this.$backdrop.remove();this.$backdrop=null},backdrop:function(a){var c=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var d=b.support.transition&&c;this.$backdrop=
b('<div class="modal-backdrop '+c+'" />').appendTo(document.body);this.$backdrop.click("static"==this.options.backdrop?b.proxy(this.$element[0].focus,this.$element[0]):b.proxy(this.hide,this));d&&this.$backdrop[0].offsetWidth;this.$backdrop.addClass("in");d?this.$backdrop.one(b.support.transition.end,a):a()}else!this.isShown&&this.$backdrop?(this.$backdrop.removeClass("in"),b.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one(b.support.transition.end,b.proxy(this.removeBackdrop,
this)):this.removeBackdrop()):a&&a()}};b.fn.modal=function(a){return this.each(function(){var c=b(this),d=c.data("modal"),e=b.extend({},b.fn.modal.defaults,c.data(),"object"==typeof a&&a);d||c.data("modal",d=new f(this,e));if("string"==typeof a)d[a]();else e.show&&d.show()})};b.fn.modal.defaults={backdrop:!0,keyboard:!0,show:!0};b.fn.modal.Constructor=f;b(document).on("click.modal.data-api",'[data-toggle="modal"]',function(a){var c=b(this),d=c.attr("href"),e=b(c.attr("data-target")||d&&d.replace(/.*(?=#[^\s]+$)/,
"")),d=e.data("modal")?"toggle":b.extend({remote:!/#/.test(d)&&d},e.data(),c.data());a.preventDefault();e.modal(d).one("hide",function(){c.focus()})})}(window.jQuery);
!function(b){var f=function(a,c){this.init("tooltip",a,c)};f.prototype={constructor:f,init:function(a,c,d){this.type=a;this.$element=b(c);this.options=this.getOptions(d);this.enabled=!0;if("click"==this.options.trigger)this.$element.on("click."+this.type,this.options.selector,b.proxy(this.toggle,this));else"manual"!=this.options.trigger&&(a="hover"==this.options.trigger?"mouseenter":"focus",c="hover"==this.options.trigger?"mouseleave":"blur",this.$element.on(a+"."+this.type,this.options.selector,
b.proxy(this.enter,this)),this.$element.on(c+"."+this.type,this.options.selector,b.proxy(this.leave,this)));this.options.selector?this._options=b.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},getOptions:function(a){a=b.extend({},b.fn[this.type].defaults,a,this.$element.data());a.delay&&"number"==typeof a.delay&&(a.delay={show:a.delay,hide:a.delay});return a},enter:function(a){var c=b(a.currentTarget)[this.type](this._options).data(this.type);if(!c.options.delay||!c.options.delay.show)return c.show();
clearTimeout(this.timeout);c.hoverState="in";this.timeout=setTimeout(function(){"in"==c.hoverState&&c.show()},c.options.delay.show)},leave:function(a){var c=b(a.currentTarget)[this.type](this._options).data(this.type);this.timeout&&clearTimeout(this.timeout);if(!c.options.delay||!c.options.delay.hide)return c.hide();c.hoverState="out";this.timeout=setTimeout(function(){"out"==c.hoverState&&c.hide()},c.options.delay.hide)},show:function(){var a,c,b,e,g,f,k;if(this.hasContent()&&this.enabled){a=this.tip();
this.setContent();this.options.animation&&a.addClass("fade");f="function"==typeof this.options.placement?this.options.placement.call(this,a[0],this.$element[0]):this.options.placement;c=/in/.test(f);a.detach().css({top:0,left:0,display:"block"}).insertAfter(this.$element);b=this.getPosition(c);e=a[0].offsetWidth;g=a[0].offsetHeight;switch(c?f.split(" ")[1]:f){case "bottom":k={top:b.top+b.height,left:b.left+b.width/2-e/2};break;case "top":k={top:b.top-g,left:b.left+b.width/2-e/2};break;case "left":k=
{top:b.top+b.height/2-g/2,left:b.left-e};break;case "right":k={top:b.top+b.height/2-g/2,left:b.left+b.width}}a.offset(k).addClass(f).addClass("in")}},setContent:function(){var a=this.tip(),b=this.getTitle();a.find(".tooltip-inner")[this.options.html?"html":"text"](b);a.removeClass("fade in top bottom left right")},hide:function(){function a(){var a=setTimeout(function(){c.off(b.support.transition.end).detach()},500);c.one(b.support.transition.end,function(){clearTimeout(a);c.detach()})}var c=this.tip();
c.removeClass("in");b.support.transition&&this.$tip.hasClass("fade")?a():c.detach();return this},fixTitle:function(){var a=this.$element;(a.attr("title")||"string"!=typeof a.attr("data-original-title"))&&a.attr("data-original-title",a.attr("title")||"").removeAttr("title")},hasContent:function(){return this.getTitle()},getPosition:function(a){return b.extend({},a?{top:0,left:0}:this.$element.offset(),{width:this.$element[0].offsetWidth,height:this.$element[0].offsetHeight})},getTitle:function(){var a=
this.$element,b=this.options;return a.attr("data-original-title")||("function"==typeof b.title?b.title.call(a[0]):b.title)},tip:function(){return this.$tip=this.$tip||b(this.options.template)},validate:function(){this.$element[0].parentNode||(this.hide(),this.options=this.$element=null)},enable:function(){this.enabled=!0},disable:function(){this.enabled=!1},toggleEnabled:function(){this.enabled=!this.enabled},toggle:function(a){a=b(a.currentTarget)[this.type](this._options).data(this.type);a[a.tip().hasClass("in")?
"hide":"show"]()},destroy:function(){this.hide().$element.off("."+this.type).removeData(this.type)}};b.fn.tooltip=function(a){return this.each(function(){var c=b(this),d=c.data("tooltip"),e="object"==typeof a&&a;d||c.data("tooltip",d=new f(this,e));if("string"==typeof a)d[a]()})};b.fn.tooltip.Constructor=f;b.fn.tooltip.defaults={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover",title:"",
delay:0,html:!1}}(window.jQuery);
!function(b){var f=function(a,b){this.init("popover",a,b)};f.prototype=b.extend({},b.fn.tooltip.Constructor.prototype,{constructor:f,setContent:function(){var a=this.tip(),b=this.getTitle(),d=this.getContent();a.find(".popover-title")[this.options.html?"html":"text"](b);a.find(".popover-content > *")[this.options.html?"html":"text"](d);a.removeClass("fade top bottom left right in")},hasContent:function(){return this.getTitle()||this.getContent()},getContent:function(){var a=this.$element,b=this.options;
return a.attr("data-content")||("function"==typeof b.content?b.content.call(a[0]):b.content)},tip:function(){this.$tip||(this.$tip=b(this.options.template));return this.$tip},destroy:function(){this.hide().$element.off("."+this.type).removeData(this.type)}});b.fn.popover=function(a){return this.each(function(){var c=b(this),d=c.data("popover"),e="object"==typeof a&&a;d||c.data("popover",d=new f(this,e));if("string"==typeof a)d[a]()})};b.fn.popover.Constructor=f;b.fn.popover.defaults=b.extend({},b.fn.tooltip.defaults,
{placement:"right",trigger:"click",content:"",template:'<div class="popover"><div class="arrow"></div><div class="popover-inner"><h3 class="popover-title"></h3><div class="popover-content"><p></p></div></div></div>'})}(window.jQuery);
!function(b){function f(a,c){var d=b.proxy(this.process,this),e=b(a).is("body")?b(window):b(a),f;this.options=b.extend({},b.fn.scrollspy.defaults,c);this.$scrollElement=e.on("scroll.scroll-spy.data-api",d);this.selector=(this.options.target||(f=b(a).attr("href"))&&f.replace(/.*(?=#[^\s]+$)/,"")||"")+" .nav li > a";this.$body=b("body");this.refresh();this.process()}f.prototype={constructor:f,refresh:function(){var a=this;this.offsets=b([]);this.targets=b([]);this.$body.find(this.selector).map(function(){var a=
b(this),a=a.data("target")||a.attr("href"),d=/^#\w/.test(a)&&b(a);return d&&d.length&&[[d.position().top,a]]||null}).sort(function(a,b){return a[0]-b[0]}).each(function(){a.offsets.push(this[0]);a.targets.push(this[1])})},process:function(){var a=this.$scrollElement.scrollTop()+this.options.offset,b=(this.$scrollElement[0].scrollHeight||this.$body[0].scrollHeight)-this.$scrollElement.height(),d=this.offsets,e=this.targets,f=this.activeTarget,h;if(a>=b)return f!=(h=e.last()[0])&&this.activate(h);for(h=
d.length;h--;)f!=e[h]&&a>=d[h]&&(!d[h+1]||a<=d[h+1])&&this.activate(e[h])},activate:function(a){this.activeTarget=a;b(this.selector).parent(".active").removeClass("active");a=b(this.selector+'[data-target="'+a+'"],'+this.selector+'[href="'+a+'"]').parent("li").addClass("active");a.parent(".dropdown-menu").length&&(a=a.closest("li.dropdown").addClass("active"));a.trigger("activate")}};b.fn.scrollspy=function(a){return this.each(function(){var c=b(this),d=c.data("scrollspy"),e="object"==typeof a&&a;
d||c.data("scrollspy",d=new f(this,e));if("string"==typeof a)d[a]()})};b.fn.scrollspy.Constructor=f;b.fn.scrollspy.defaults={offset:10};b(window).on("load",function(){b('[data-spy="scroll"]').each(function(){var a=b(this);a.scrollspy(a.data())})})}(window.jQuery);
!function(b){var f=function(a){this.element=b(a)};f.prototype={constructor:f,show:function(){var a=this.element,c=a.closest("ul:not(.dropdown-menu)"),d=a.attr("data-target"),e,f;d||(d=(d=a.attr("href"))&&d.replace(/.*(?=#[^\s]*$)/,""));a.parent("li").hasClass("active")||(e=c.find(".active:last a")[0],f=b.Event("show",{relatedTarget:e}),a.trigger(f),f.isDefaultPrevented()||(d=b(d),this.activate(a.parent("li"),c),this.activate(d,d.parent(),function(){a.trigger({type:"shown",relatedTarget:e})})))},activate:function(a,
c,d){function e(){f.removeClass("active").find("> .dropdown-menu > .active").removeClass("active");a.addClass("active");h?(a[0].offsetWidth,a.addClass("in")):a.removeClass("fade");a.parent(".dropdown-menu")&&a.closest("li.dropdown").addClass("active");d&&d()}var f=c.find("> .active"),h=d&&b.support.transition&&f.hasClass("fade");h?f.one(b.support.transition.end,e):e();f.removeClass("in")}};b.fn.tab=function(a){return this.each(function(){var c=b(this),d=c.data("tab");d||c.data("tab",d=new f(this));
if("string"==typeof a)d[a]()})};b.fn.tab.Constructor=f;b(document).on("click.tab.data-api",'[data-toggle="tab"], [data-toggle="pill"]',function(a){a.preventDefault();b(this).tab("show")})}(window.jQuery);
!function(b){var f=function(a,c){this.$element=b(a);this.options=b.extend({},b.fn.typeahead.defaults,c);this.matcher=this.options.matcher||this.matcher;this.sorter=this.options.sorter||this.sorter;this.highlighter=this.options.highlighter||this.highlighter;this.updater=this.options.updater||this.updater;this.$menu=b(this.options.menu).appendTo("body");this.source=this.options.source;this.shown=!1;this.listen()};f.prototype={constructor:f,select:function(){var a=this.$menu.find(".active").attr("data-value");
this.$element.val(this.updater(a)).change();return this.hide()},updater:function(a){return a},show:function(){var a=b.extend({},this.$element.offset(),{height:this.$element[0].offsetHeight});this.$menu.css({top:a.top+a.height,left:a.left});this.$menu.show();this.shown=!0;return this},hide:function(){this.$menu.hide();this.shown=!1;return this},lookup:function(a){this.query=this.$element.val();return!this.query||this.query.length<this.options.minLength?this.shown?this.hide():this:(a=b.isFunction(this.source)?
this.source(this.query,b.proxy(this.process,this)):this.source)?this.process(a):this},process:function(a){var c=this;a=b.grep(a,function(a){return c.matcher(a)});a=this.sorter(a);return a.length?this.render(a.slice(0,this.options.items)).show():this.shown?this.hide():this},matcher:function(a){return~a.toLowerCase().indexOf(this.query.toLowerCase())},sorter:function(a){for(var b=[],d=[],e=[],f;f=a.shift();)f.toLowerCase().indexOf(this.query.toLowerCase())?~f.indexOf(this.query)?d.push(f):e.push(f):
b.push(f);return b.concat(d,e)},highlighter:function(a){var b=this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&");return a.replace(new RegExp("("+b+")","ig"),function(a,b){return"<strong>"+b+"</strong>"})},render:function(a){var c=this;a=b(a).map(function(a,e){a=b(c.options.item).attr("data-value",e);a.find("a").html(c.highlighter(e));return a[0]});a.first().addClass("active");this.$menu.html(a);return this},next:function(a){a=this.$menu.find(".active").removeClass("active").next();a.length||
(a=b(this.$menu.find("li")[0]));a.addClass("active")},prev:function(a){a=this.$menu.find(".active").removeClass("active").prev();a.length||(a=this.$menu.find("li").last());a.addClass("active")},listen:function(){this.$element.on("blur",b.proxy(this.blur,this)).on("keypress",b.proxy(this.keypress,this)).on("keyup",b.proxy(this.keyup,this));if(this.eventSupported("keydown"))this.$element.on("keydown",b.proxy(this.keydown,this));this.$menu.on("click",b.proxy(this.click,this)).on("mouseenter","li",b.proxy(this.mouseenter,
this))},eventSupported:function(a){var b=a in this.$element;b||(this.$element.setAttribute(a,"return;"),b="function"===typeof this.$element[a]);return b},move:function(a){if(this.shown){switch(a.keyCode){case 9:case 13:case 27:a.preventDefault();break;case 38:a.preventDefault();this.prev();break;case 40:a.preventDefault(),this.next()}a.stopPropagation()}},keydown:function(a){this.suppressKeyPressRepeat=!~b.inArray(a.keyCode,[40,38,9,13,27]);this.move(a)},keypress:function(a){this.suppressKeyPressRepeat||
this.move(a)},keyup:function(a){switch(a.keyCode){case 40:case 38:case 16:case 17:case 18:break;case 9:case 13:if(!this.shown)return;this.select();break;case 27:if(!this.shown)return;this.hide();break;default:this.lookup()}a.stopPropagation();a.preventDefault()},blur:function(a){var b=this;setTimeout(function(){b.hide()},150)},click:function(a){a.stopPropagation();a.preventDefault();this.select()},mouseenter:function(a){this.$menu.find(".active").removeClass("active");b(a.currentTarget).addClass("active")}};
b.fn.typeahead=function(a){return this.each(function(){var c=b(this),d=c.data("typeahead"),e="object"==typeof a&&a;d||c.data("typeahead",d=new f(this,e));if("string"==typeof a)d[a]()})};b.fn.typeahead.defaults={source:[],items:8,menu:'<ul class="typeahead dropdown-menu"></ul>',item:'<li><a href="#"></a></li>',minLength:1};b.fn.typeahead.Constructor=f;b(document).on("focus.typeahead.data-api",'[data-provide="typeahead"]',function(a){var c=b(this);c.data("typeahead")||(a.preventDefault(),c.typeahead(c.data()))})}(window.jQuery);
!function(b){var f=function(a,c){this.options=b.extend({},b.fn.affix.defaults,c);this.$window=b(window).on("scroll.affix.data-api",b.proxy(this.checkPosition,this)).on("click.affix.data-api",b.proxy(function(){setTimeout(b.proxy(this.checkPosition,this),1)},this));this.$element=b(a);this.checkPosition()};f.prototype.checkPosition=function(){if(this.$element.is(":visible")){var a=b(document).height(),c=this.$window.scrollTop(),d=this.$element.offset(),e=this.options.offset,f=e.bottom,h=e.top;"object"!=
typeof e&&(f=h=e);"function"==typeof h&&(h=e.top());"function"==typeof f&&(f=e.bottom());a=null!=this.unpin&&c+this.unpin<=d.top?!1:null!=f&&d.top+this.$element.height()>=a-f?"bottom":null!=h&&c<=h?"top":!1;this.affixed!==a&&(this.affixed=a,this.unpin="bottom"==a?d.top-c:null,this.$element.removeClass("affix affix-top affix-bottom").addClass("affix"+(a?"-"+a:"")))}};b.fn.affix=function(a){return this.each(function(){var c=b(this),d=c.data("affix"),e="object"==typeof a&&a;d||c.data("affix",d=new f(this,
e));if("string"==typeof a)d[a]()})};b.fn.affix.Constructor=f;b.fn.affix.defaults={offset:0};b(window).on("load",function(){b('[data-spy="affix"]').each(function(){var a=b(this),c=a.data();c.offset=c.offset||{};c.offsetBottom&&(c.offset.bottom=c.offsetBottom);c.offsetTop&&(c.offset.top=c.offsetTop);a.affix(c)})})}(window.jQuery);;
var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
function valid(actPath) {
    if (Trim(document.frmlist.keyword.value) == "") {
        alert("Please Enter keyword for Search.");
        document.frmlist.keyword.value = "";
        document.frmlist.keyword.focus();
        return false;
    }
    document.frmlist.keyword.value = Trim(document.frmlist.keyword.value);
    document.frmlist.mode.value = "Search";
    if (actPath) {
        window.location = actPath + "&option=" + document.frmlist.option.value + "&keyword=" + document.frmlist.keyword.value;
        return false;
    }
}
function alpha(value, length) {
    chk1 = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ- ";
    for (i = 0; i < length; i++) {
        ch1 = value.charAt(i);
        rtn1 = chk1.indexOf(ch1);
        if (rtn1 == -1)
            return false;
    }
    return true;
}
function number(value, length) {
    chk1 = "1234567890-";
    for (i = 0; i < length; i++) {
        ch1 = value.charAt(i);
        rtn1 = chk1.indexOf(ch1);
        if (rtn1 == -1)
            return false;
    }
    return true;
}
function Trim(s) {
    return s.replace(/^\s+/g, '').replace(/\s+$/g, '');
}
function encode64(input) {
    var output = "";
    var chr1, chr2, chr3;
    var enc1, enc2, enc3, enc4;
    var i = 0;
    do {
        chr1 = input.charCodeAt(i++);
        chr2 = input.charCodeAt(i++);
        chr3 = input.charCodeAt(i++);

        enc1 = chr1 >> 2;
        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
        enc4 = chr3 & 63;

        if (isNaN(chr2)) {
            enc3 = enc4 = 64;
        } else if (isNaN(chr3)) {
            enc4 = 64;
        }

        output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) +
                keyStr.charAt(enc3) + keyStr.charAt(enc4);
    } while (i < input.length);

    return output;
}
function decode64(input) {
    var output = "";
    var chr1, chr2, chr3;
    var enc1, enc2, enc3, enc4;
    var i = 0;
    // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
    do {
        enc1 = keyStr.indexOf(input.charAt(i++));
        enc2 = keyStr.indexOf(input.charAt(i++));
        enc3 = keyStr.indexOf(input.charAt(i++));
        enc4 = keyStr.indexOf(input.charAt(i++));

        chr1 = (enc1 << 2) | (enc2 >> 4);
        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
        chr3 = ((enc3 & 3) << 6) | enc4;

        output = output + String.fromCharCode(chr1);

        if (enc3 != 64) {
            output = output + String.fromCharCode(chr2);
        }
        if (enc4 != 64) {
            output = output + String.fromCharCode(chr3);
        }
    } while (i < input.length);

    return output;
}
function htmlspecialchars(string, quote_style, charset, double_encode) {
    // Convert special characters to HTML entities  
    // 
    // version: 1004.2314
    // discuss at: http://phpjs.org/functions/htmlspecialchars    // +   original by: Mirek Slugen
    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +   bugfixed by: Nathan
    // +   bugfixed by: Arno
    // +    revised by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)    // +    bugfixed by: Brett Zamir (http://brett-zamir.me)
    // +      input by: Ratheous
    // +      input by: Mailfaker (http://www.weedem.fr/)
    // +      reimplemented by: Brett Zamir (http://brett-zamir.me)
    // +      input by: felix    // +    bugfixed by: Brett Zamir (http://brett-zamir.me)
    // %        note 1: charset argument not supported
    // *     example 1: htmlspecialchars("<a href='test'>Test</a>", 'ENT_QUOTES');
    // *     returns 1: '&lt;a href=&#039;test&#039;&gt;Test&lt;/a&gt;'
    // *     example 2: htmlspecialchars("ab\"c'd", ['ENT_NOQUOTES', 'ENT_QUOTES']);    // *     returns 2: 'ab"c&#039;d'
    // *     example 3: htmlspecialchars("my "&entity;" is still here", null, null, false);
    // *     returns 3: 'my &quot;&entity;&quot; is still here'
    var optTemp = 0, i = 0, noquotes = false;
    if (typeof quote_style === 'undefined' || quote_style === null) {
        quote_style = 2;
    }
    string = string.toString();
    if (double_encode !== false) { // Put this first to avoid double-encoding
        string = string.replace(/&/g, '&amp;');
    }
    string = string.replace(/</g, '&lt;').replace(/>/g, '&gt;');

    var OPTS = {
        'ENT_NOQUOTES': 0,
        'ENT_HTML_QUOTE_SINGLE': 1,
        'ENT_HTML_QUOTE_DOUBLE': 2,
        'ENT_COMPAT': 2,
        'ENT_QUOTES': 3,
        'ENT_IGNORE': 4
    };
    if (quote_style === 0) {
        noquotes = true;
    }
    if (typeof quote_style !== 'number') { // Allow for a single string or an array of string flags        quote_style = [].concat(quote_style);
        for (i = 0; i < quote_style.length; i++) {
            // Resolve string input to bitwise e.g. 'PATHINFO_EXTENSION' becomes 4
            if (OPTS[quote_style[i]] === 0) {
                noquotes = true;
            }
            else if (OPTS[quote_style[i]]) {
                optTemp = optTemp | OPTS[quote_style[i]];
            }
        }
        quote_style = optTemp;
    }
    if (quote_style & OPTS.ENT_HTML_QUOTE_SINGLE) {
        string = string.replace(/'/g, '&#039;');
    }
    if (!noquotes) {
        string = string.replace(/"/g, '&quot;');
    }

    return string;
}
function htmlspecialchars_decode(string, quote_style) {
    // Convert special HTML entities back to characters  
    // 
    // version: 1004.2314
    // discuss at: http://phpjs.org/functions/htmlspecialchars_decode    // +   original by: Mirek Slugen
    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +   bugfixed by: Mateusz "loonquawl" Zalega
    // +      input by: ReverseSyntax
    // +      input by: Slawomir Kaniecki    // +      input by: Scott Cariss
    // +      input by: Francois
    // +   bugfixed by: Onno Marsman
    // +    revised by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +   bugfixed by: Brett Zamir (http://brett-zamir.me)    // +      input by: Ratheous
    // +      input by: Mailfaker (http://www.weedem.fr/)
    // +      reimplemented by: Brett Zamir (http://brett-zamir.me)
    // +    bugfixed by: Brett Zamir (http://brett-zamir.me)
    // *     example 1: htmlspecialchars_decode("<p>this -&gt; &quot;</p>", 'ENT_NOQUOTES');    // *     returns 1: '<p>this -> &quot;</p>'
    // *     example 2: htmlspecialchars_decode("&amp;quot;");
    // *     returns 2: '&quot;'
    var optTemp = 0, i = 0, noquotes = false;
    if (typeof quote_style === 'undefined') {
        quote_style = 2;
    }
    string = string.toString().replace(/&lt;/g, '<').replace(/&gt;/g, '>');
    var OPTS = {
        'ENT_NOQUOTES': 0,
        'ENT_HTML_QUOTE_SINGLE': 1,
        'ENT_HTML_QUOTE_DOUBLE': 2,
        'ENT_COMPAT': 2,
        'ENT_QUOTES': 3,
        'ENT_IGNORE': 4
    };
    if (quote_style === 0) {
        noquotes = true;
    }
    if (typeof quote_style !== 'number') { // Allow for a single string or an array of string flags        quote_style = [].concat(quote_style);
        for (i = 0; i < quote_style.length; i++) {
            // Resolve string input to bitwise e.g. 'PATHINFO_EXTENSION' becomes 4
            if (OPTS[quote_style[i]] === 0) {
                noquotes = true;
            }
            else if (OPTS[quote_style[i]]) {
                optTemp = optTemp | OPTS[quote_style[i]];
            }
        }
        quote_style = optTemp;
    }
    if (quote_style & OPTS.ENT_HTML_QUOTE_SINGLE) {
        string = string.replace(/&#0*39;/g, "'"); // PHP doesn't currently escape if more than one 0, but it should
        // string = string.replace(/&apos;|&#x0*27;/g, "'"); // This would also be useful here, but not a part of PHP
    }
    if (!noquotes) {
        string = string.replace(/&quot;/g, '"');
    }
    // Put this in last place to avoid escape being double-decoded    string = string.replace(/&amp;/g, '&');

    return string;

}
function stripHtml(value) {
    // remove html tags and space chars
    return value.replace(/<.[^<>]*?>/g, " ").replace(/&nbsp;|&#160;/gi, " ")
    // remove punctuation
    .replace(/[.(),;:!?%#$'\"_+=\/\-“”’]*/g, "");
}
//function stripHTML(val) {
//    var re = /<\S[^><]*>/g
//    return str = val.replace(re, "");
//}
function stripspace(val) {
    var value = stripHTML(jQuery.trim(val));
    return str = value.replace(/^[\s(&nbsp;)]+/g, '').replace(/[\s(&nbsp;)]+$/g, '');
}
function base64_encode(data) {
    var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    var o1, o2, o3, h1, h2, h3, h4, bits, i = 0,
            ac = 0,
            enc = "",
            tmp_arr = [];

    if (!data) {
        return data;
    }

    do { // pack three octets into four hexets
        o1 = data.charCodeAt(i++);
        o2 = data.charCodeAt(i++);
        o3 = data.charCodeAt(i++);

        bits = o1 << 16 | o2 << 8 | o3;

        h1 = bits >> 18 & 0x3f;
        h2 = bits >> 12 & 0x3f;
        h3 = bits >> 6 & 0x3f;
        h4 = bits & 0x3f;
        // use hexets to index into b64, and append result to encoded string
        tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);
    } while (i < data.length);

    enc = tmp_arr.join('');

    var r = data.length % 3;

    return (r ? enc.slice(0, r - 3) : enc) + '==='.slice(r || 3);
}
function ci_js_validation_message(label_str, find_str, replace_str){
    var return_str = "";
    if (label_str) {
        if (find_str) {
            var regExp = new RegExp(find_str);
            replace_str = (replace_str) ? replace_str.toLowerCase() : '';
            label_str = label_str.replace(find_str, replace_str);
            return_str = label_str.replace(regExp, replace_str);
        }
    }
    return return_str;
};
navigator.getUserMedia = navigator.webkitGetUserMedia || navigator.getUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
window.URL = window.URL || window.webkitURL;
var localStream = null, formSaveAsDraft = null, gridAutoRefresh = null, gridRefreshTime = 0, globalMetaTitle;
var el_general_settings = {
    admin_page_clkele: '',
    page_temp_left: '',
    page_temp_right: '',
    active_tab_index: false,
    having_flash_obj: false,
    grid_subgrid_alias: '',
    grid_main_link_model: '',
    grid_sub_link_model: '',
    dashboard_grid: '',
    mobile_platform: check_user_platform()
}
var pager_row_list = [5, 10, 20, 30, 50, 100, 200, 500];
var searchOpts = ['eq', 'ne', 'lt', 'le', 'gt', 'ge', 'bw', 'bn', 'in', 'ni', 'ew', 'en', 'cn', 'nc', 'nu', 'nn', 'bt', 'nb'];
var numSearchOpts = ['bt', 'nb', 'eq', 'ne', 'lt', 'le', 'gt', 'ge', 'in', 'ni', 'nu', 'nn'];
var strSearchOpts = ['eq', 'ne', 'bw', 'bn', 'ew', 'en', 'cn', 'nc', 'mw', 'in', 'ni', 'nu', 'nn'];
var intSearchOpts = ['in', 'ni', 'nu', 'nn'];
var dateSearchOpts = ['bt', 'nb', 'eq', 'ne', 'lt', 'le', 'gt', 'ge', 'nu', 'nn'];
var chartColours = ['#88bbc8', '#ed7a53', '#9FC569', '#bbdce3', '#9a3b1b', '#5a8022', '#2c7282', '#49BFAE', '#34A8DB', '#428BCA'];
var wcfilters = ['grayscale', 'sepia', 'blur', 'brightness', 'contrast', 'hue-rotate', 'hue-rotate2', 'hue-rotate3', 'saturate', 'invert', ''];
var fancy_params = ['type', 'width', 'height', 'padding', 'margin', "autoSize"];
//basic editor type plugins
var tinymce_editor_plugins_basic = [
    'lists link image charmap print preview anchor',
    'searchreplace code fullscreen',
    'insertdatetime media table wordcount contextmenu paste code'
];
var tinymce_editor_tollbar_basic = "insertfile undo redo | styleselect |  bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image";
//filemanager editor type plugins
var tinymce_editor_plugins_premium = [
    'advlist autolink lists link image charmap print preview hr anchor pagebreak',
    'searchreplace wordcount visualblocks visualchars code fullscreen',
    'insertdatetime media nonbreaking save table contextmenu directionality',
    'emoticons template paste textcolor colorpicker textpattern imagetools responsivefilemanager'
];
var tinymce_editor_tollbar_premium = 'insertfile undo redo | styleselect | fontselect | fontsizeselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image media responsivefilemanager | print preview | forecolor backcolor emoticons';
//advanced editor type plugins
var tinymce_editor_plugins = [
    'advlist autolink lists link image charmap print preview hr anchor pagebreak',
    'searchreplace wordcount visualblocks visualchars code fullscreen',
    'insertdatetime media nonbreaking save table contextmenu directionality',
    'emoticons template paste textcolor colorpicker textpattern imagetools'
];
var tinymce_editor_tollbar = 'insertfile undo redo | styleselect | fontselect | fontsizeselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image media | print preview | forecolor backcolor emoticons';
//editor templates
var tinymce_editor_templates = [{
        title: 'Test template 1',
        content: 'Test 1'
    }, {
        title: 'Test template 2',
        content: 'Test 2'
    }];

if (typeof window.applicationCache == "object") {
    //appcache controls
    var cacheEvent = {
        cacheProgress: 0,
        handleEvent: function (e) {
            switch (e.type) {
                case 'checking':
                    break;
                case 'downloading':
                    showCacheProgress();
                    cacheEvent.cacheProgress = 0;
                    break;
                case 'cached':
                case 'updateready':
                case 'obsolete':
                case 'error':
                    hideCacheProgress();
                    break;
                case 'noupdate':
                    hideCacheProgress();
                    break;
                case 'progress':
                    if (e && e.lengthComputable) {
                        cacheEvent.cacheProgress = Math.round(e.loaded / e.total * 100);
                    } else {
                        cacheEvent.cacheProgress++;
                    }
                    //$('#script_download_input').val(cacheEvent.cacheProgress).trigger('change');
                    $("#script_progress").css("width", cacheEvent.cacheProgress + "%");
                    break;
            }
        }
    };
    // appcache object
    var appCache = window.applicationCache;
    // Fired after the first cache of the manifest.
    appCache.addEventListener('cached', cacheEvent.handleEvent, false);
    // Checking for an update. Always the first event fired in the sequence.
    appCache.addEventListener('checking', cacheEvent.handleEvent, false);
    // An update was found. The browser is fetching resources.
    appCache.addEventListener('downloading', cacheEvent.handleEvent, false);
    // Fired after the first download of the manifest.
    appCache.addEventListener('noupdate', cacheEvent.handleEvent, false);
    // Fired for each resource listed in the manifest as it is being fetched.
    appCache.addEventListener('progress', cacheEvent.handleEvent, false);
    // Fired when the manifest resources have been newly redownloaded.
    appCache.addEventListener('updateready', cacheEvent.handleEvent, false);
    // Fired if the manifest file returns a 404 or 410.
    // This results in the application cache being deleted.
    appCache.addEventListener('obsolete', cacheEvent.handleEvent, false);
    // The manifest returns 404 or 410, the download failed,
    // or the manifest changed while the download was in progress.
    appCache.addEventListener('error', cacheEvent.handleEvent, false);
    // appcache after loading dom
}

window.onload = function () {
    if (!isFancyBoxActive()) {
        if (typeof window.applicationCache == "object") {
            setTimeout(function () {
                var node = document.createElement('iframe');
                node.setAttribute('style', 'display:none;');
                node.setAttribute('id', 'manifest_frame');
                node.setAttribute('src', admin_url + '' + cus_enc_url_json["user_manifest"] + '?_=' + (new Date).getTime());
                document.body.appendChild(node);
                var manifest_frame = document.getElementById('manifest_frame');
                manifest_frame.onload = function () {
                    if ($('#manifest_frame').get(0).contentWindow.logout_ready) {
                        document.location.href = admin_url + "" + cus_enc_url_json["user_sess_expire"];
                        return false;
                    }
                    if ($('#manifest_frame').get(0).contentWindow.cache_status == "Yes") {
                        var node = document.createElement('iframe');
                        node.setAttribute('style', 'display:none;');
                        node.setAttribute('id', 'tbcontent_frame');
                        node.setAttribute('src', admin_url + '' + cus_enc_url_json["user_tbcontent"] + '?_=' + (new Date).getTime());
                        document.body.appendChild(node);
                        var tbcontent_frame = document.getElementById('tbcontent_frame');
                        tbcontent_frame.onload = function () {
                            if ($('#tbcontent_frame').contents().find("#top_panel_info").length) {
                                $("#trtop_template").html($('#tbcontent_frame').contents().find("#top_panel_info").html());
                                $('#tbcontent_frame').contents().find("#top_panel_info").remove();
                                el_tpl_settings.framework_vars = parseJSONString(el_tpl_settings.framework_vars);
                                el_tpl_settings.admin_formats = parseJSONString(el_tpl_settings.admin_formats);
                                el_theme_settings = parseJSONString(el_theme_settings);
                                cus_enc_url_json = parseJSONString(cus_enc_url_json);
                                cus_enc_mode_json = parseJSONString(cus_enc_mode_json);
                                chartColours = el_theme_settings.chart_colors
                            }
                            if ($('#tbcontent_frame').contents().find("#bot_panel_info").length) {
                                $("#trbot_template").html($('#tbcontent_frame').contents().find("#bot_panel_info").html());
                                $('#tbcontent_frame').contents().find("#bot_panel_info").remove();
                            }
                            navigLeftMenuEvents();
                            getResponsiveTopMenu();
                            initializejQueryChosenEvents($("#trtop_template"));
                            if (el_tpl_settings.is_admin_theme_create == '1') {
                                createThemeSettings();
                            } else {
                                removeThemeSettings();
                            }
                            if (el_tpl_settings.is_desk_notify_active == "1" || el_tpl_settings.is_admin_notifications_active == '1') {
                                loadSSEEventWebNotify();
                            }
                        }
                    } else {
                        if (el_tpl_settings.is_desk_notify_active == "1" || el_tpl_settings.is_admin_notifications_active == '1') {
                            loadSSEEventWebNotify();
                        }
                    }
                    chartColours = el_theme_settings.chart_colors;
                    loadHashRequestURLPage(false);
                }
            }, 10);
        } else {
            chartColours = el_theme_settings.chart_colors;
            loadHashRequestURLPage(false);
            if (el_tpl_settings.is_desk_notify_active == "1" || el_tpl_settings.is_admin_notifications_active == '1') {
                loadSSEEventWebNotify();
            }
        }
    }
};

try {
    var tempFlashIE = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
    if (tempFlashIE) {
        el_general_settings.having_flash_obj = true;
    }
} catch (e) {
    if (navigator.mimeTypes ["application/x-shockwave-flash"] != undefined) {
        el_general_settings.having_flash_obj = true;
    }
}
$(document).ready(function () {
    globalMetaTitle = $("title").html();
    initjQueryValidateMethods();
    if (!isFancyBoxActive()) {
        initLeftScrollBar();
        getResponsiveTopMenu();
    }
    $(window).resize(function () {
        if (!isFancyBoxActive()) {
            resizeGridWidth();
            initNiceScrollBar();
        }
    });
    (function ($) {
        $.fn.hasScrollBar = function () {
            if (this && this.get(0)) {
                return this.get(0).scrollHeight > this.height();
            }
        }
    })(jQuery);
    (function ($) {
        $.fn.textWidth = function () {
            var html_org = $(this).html();
            var html_calc = '<span>' + html_org + '</span>';
            $(this).html(html_calc);
            var width = $(this).find('span:first').width();
            $(this).html(html_org);
            return width;
        };
    })(jQuery);
    $.ajaxPrefilter('script', function (options) {
        options.cache = true;
    });
    $(document).bind('ajaxComplete', function (event, request, settings) {
        if (request.getResponseHeader('Cit-auth-requires') === '1') {
            document.location.href = admin_url + "" + cus_enc_url_json["user_sess_expire"];
        }
        if (request.getResponseHeader('Cit-db-error') === '1') {
            getDBErrorNotifyScreen(request.getResponseHeader('Cit-db-efile'));
        }
    });
    $(document).mousemove(function (e) {
        el_general_settings.page_temp_left = e.pageX;
        el_general_settings.page_temp_right = e.pageY;
        if ($('#body_ajaxloading_div')) {
            $('#body_ajaxloading_div').css({
                position: 'absolute',
                zIndex: 10000,
                left: (e.pageX - 42) + 'px',
                top: (e.pageY - 18) + 'px'
            });
        }
    });
    $(document).on("click", "*", function () {
        el_general_settings.admin_page_clkele = $(this);
    });
    $(document).bind('dragenter', function (e) {
        $(".upload-drop-zone").addClass('active').html('<div align="center" class="upload-drop-placeholder">Drop files here</div>');
        $(".upload-src-zone").addClass("drop-active");
    });
    $(document).bind('dragover', function (e) {
        e.preventDefault();
    });
    $(document).bind('drop', function (e) {
        $(".upload-drop-zone").removeClass("active").html('');
        $(".upload-src-zone").removeClass("drop-active");
        e.preventDefault();
    });
    $(window).bind('hashchange', function (e) {
        loadHashRequestURLPage(true);
        e.preventDefault();
    });
    $(document).on("click", ".db-error-click", function (event) {
        $("#db_error_log .box").fadeOut("fast");
        event.preventDefault();
        //maximize  content
        loadDBErrorLogPrint($(this).attr("aria-err-page"));
    });
    $(document).on("click", ".error-minimize-log span", function (event) {
        event.preventDefault();
        //minimize content
        $("#db_error_log .box").fadeOut("slow");
        return false;
    });
    $(document).on("click", ".db-show-hide-log", function (event) {
        $("#ad_navig_log .box").fadeOut("fast");
        event.preventDefault();
        //maximize  content
        loadDBQueryLogPrint();
    });
    $(document).on("click", ".db-minimize-log span", function (event) {
        event.preventDefault();
        //minimize content
        $("#db_query_log .box").fadeOut("slow");
        return false;
    });
    $(document).on("click", ".nv-show-hide-log", function (event) {
        $("#db_query_log .box").fadeOut("fast");
        event.preventDefault();
        //maximize  content
        loadNavigationLogPrint();
    });
    $(document).on("click", ".nv-minimize-log span", function (event) {
        event.preventDefault();
        //minimize content
        $("#ad_navig_log .box").fadeOut("slow");
        return false;
    });
    $(document).on("click", ".qc-show-hide-log", function (event) {
        var clear_cache_query = admin_url + "" + cus_enc_url_json["general_clear_query_cache"];
        if (confirm(js_lang_label.GENERIC_DO_YOU_WANT_TO_CLEAR_CACHE_DATA)) {
            clearLocalStoreCache();
            $.ajax({
                url: clear_cache_query,
                type: 'POST',
                data: {
                    'type': 'cache'
                },
                success: function (response) {
                    var res_arr = parseJSONString(response);
                    var jmgcls = 1;
                    if (res_arr.success == "0") {
                        jmgcls = 0;
                    }
                    Project.setMessage(res_arr.message, jmgcls);
                }
            });
        }
    });
    $(document).on("change", "#logFlushCombo", function () {
        var log_flush_val = $(this).val();
        if (log_flush_val == "All") {
            $("#logFlushPages").hide();
        } else {
            $("#logFlushPages").show();
        }
    });
    $(document).on("change", "#topLangCombo", function () {
        var lang_change_uri = admin_url + "" + cus_enc_url_json["general_language_change"];
        var langVal = $(this).val();
        Project.show_adaxloading_div();
        $.ajax({
            url: lang_change_uri,
            type: 'POST',
            data: {
                'langVal': langVal
            },
            success: function (response) {
                if (response == 1) {
                    document.location.reload();
                }
            }
        });
    });
    $(document).on("change", "#topGroupCombo", function () {
        var group_id = $(this).val();
        Project.show_adaxloading_div();
        $.ajax({
            url: admin_url + "" + cus_enc_url_json["user_switch_group"],
            type: 'POST',
            data: {
                'group_id': group_id
            },
            success: function (response) {
                if (response == 1) {
                    document.location.reload();
                }
            }
        });
    });
    $(document).on("click", "#grid_search_btn", function () {
        toggleLeftSearchPanel($(this))
    });
    $(document).on("click", "#show_full_screen_bottom", function () {
        $("html").requestFullScreen();
        $("#cancel_full_screen_bottom").show();
        $("#show_full_screen_bottom").hide();
    });
    $(document).on("click", "#cancel_full_screen_bottom", function () {
        $.cancelFullScreen();
        $("#cancel_full_screen_bottom").hide();
        $("#show_full_screen_bottom").show();
    });
    $(document).on("click", "#full_screen_mode", function () {
        $("html").requestFullScreen();
        $("#cancel_full_screen").show();
        $("#full_screen_mode").hide();
    });
    $(document).on("click", "#cancel_full_screen", function () {
        $.cancelFullScreen();
        $("#cancel_full_screen").hide();
        $("#full_screen_mode").show();
    });
    $(document).on("click", ".fancybox-image", function (e) {
        e.preventDefault();
    });
    $(document).on("click", ".fancybox-ajax", function (e) {
        if (isFancyBoxActive() && 0) {
            var href_url_arr = $(this).attr("href").split("#");
            loadTargetRequestURLPage(href_url_arr[1]);
        } else {
            var href_url_arr = $(this).attr("href").split("#");
            var params_obj = getHASHToFancyParams(href_url_arr[1]);
            var req_uri = convertHASHToURL(href_url_arr[1]);
            openAjaxURLFancyBox(req_uri, params_obj);
        }
        e.preventDefault();
        return false;
    });
    $(document).on("click", ".fancybox-popup", function (e) {
        if (isFancyBoxActive() && 0) {
            var href_url_arr = $(this).attr("href").split("#");
            loadTargetRequestURLPage(href_url_arr[1]);
        } else {
            var href_url_arr = $(this).attr("href").split("#");
            var params_obj = getHASHToFancyParams(href_url_arr[1]);
            var req_uri = convertHASHToURL(href_url_arr[1])
            openCustomURLFancyBox(req_uri, params_obj);
        }
        e.preventDefault();
        return false;
    });
    $(document).on("click", ".fancybox-hash-iframe", function (e) {
        if (isFancyBoxActive() && 0) {
            var href_url_arr = $(this).attr("href").split("#");
            loadTargetRequestURLPage(href_url_arr[1]);
        } else {
            var href_url_arr = $(this).attr("href").split("#");
            var params_obj = getHASHToFancyParams(href_url_arr[1]);
            var req_uri = convertHASHToURL(href_url_arr[1]);
            openURLFancyBox(req_uri, params_obj);
        }
        e.preventDefault();
        return false;
    });
    $(document).on("click", ".fancybox-restrict-hash", function (e) {
        if (isFancyBoxActive()) {
            var href_url_arr = $(this).attr("href").split("#");
            loadTargetRequestURLPage(href_url_arr[1]);
            e.preventDefault();
            return false;
        }
    });
    $(document).on("click", ".admin-link-logout", function () {
        var admin_logout_req_uri = admin_url + "" + cus_enc_url_json['user_login_logout'] + "?_=" + (new Date().getTime());
        Project.show_adaxloading_div();
        var curhash = window.location.hash;
        curhash = (curhash) ? curhash.toString().substr(1) : '';
        $.ajax({
            url: admin_logout_req_uri,
            type: 'POST',
            data: {hashVal: curhash},
            success: function (response) {
                var auto_res = parseJSONString(response);
                if (auto_res.success == '1') {
                    Project.hide_adaxloading_div();
                    document.location.href = admin_url + "" + cus_enc_url_json["user_login_entry"] + "?_=" + (new Date().getTime());
                }
            }
        });
    });
    $(document).on('click', '.date-append-class', function () {
        $(this).parent().find('.ctrl-append-prepend').datepicker('show');
    });
    $(document).on('click', '.date-time-append-class', function () {
        $(this).parent().find('.ctrl-append-prepend').datetimepicker('show');
    });
    $(document).on('click', '.time-append-class', function () {
        $(this).parent().find('.ctrl-append-prepend').timepicker('show');
    });
    $(document).on('click', '.print-rec-restrict', function () {
        Project.setMessage(js_lang_label.ACTION_YOU_ARE_NOT_AUTHORIZED_TO_VIEW_THIS_PAGE_C46_C46_C33, 2);
    });
});
function showCacheProgress() {
    $("body").addClass("appcache-state");
    //$("#script_download").show();
    //$("#script_download_input").knob();
    $("#script_progress").show();
}
function hideCacheProgress() {
    $("body").removeClass("appcache-state");
    //$("#script_download").hide();
    $("#script_progress").hide();
}
//related jquery validation methods
function initjQueryValidateMethods() {
    //  jquery validator additional methods
    jQuery.validator.addMethod("validate_editor", function (value, element) {
        return check_editor(value, element);
    }, js_lang_label.GENERIC_PLEASE_ENTER_PROPER_DATA);

    // date realted
    jQuery.validator.addMethod("dateEqualTo", function (value, element, params) {
        if (isEmptyValue(value) || isEmptyValue($(params).val())) {
            return true;
        }
        var src = getDatePickerDateString(element, value);
        var tar = getDatePickerDateString(params, $(params).val());
        if (!/Invalid|NaN/.test(new Date(src))) {
            return new Date(src).getTime() == new Date(tar).getTime();
        }
    }, js_lang_label.GENERIC_MUST_BE_EQUAL_TO + ' {0}.');
    jQuery.validator.addMethod("dateGreaterThan", function (value, element, params) {
        if (isEmptyValue(value) || isEmptyValue($(params).val())) {
            return true;
        }
        var src = getDatePickerDateString(element, value);
        var tar = getDatePickerDateString(params, $(params).val());
        if (!/Invalid|NaN/.test(new Date(src))) {
            return new Date(src) > new Date(tar);
        }
    }, js_lang_label.GENERIC_MUST_BE_GREATER_THAN + ' {0}.');
    jQuery.validator.addMethod("dateLessThan", function (value, element, params) {
        if (isEmptyValue(value) || isEmptyValue($(params).val())) {
            return true;
        }
        var src = getDatePickerDateString(element, value);
        var tar = getDatePickerDateString(params, $(params).val());
        if (!/Invalid|NaN/.test(new Date(src))) {
            return new Date(src) < new Date(tar);
        }
    }, js_lang_label.GENERIC_MUST_BE_LESS_THAN + ' {0}.');
    jQuery.validator.addMethod("dateGreaterEqual", function (value, element, params) {
        if (isEmptyValue(value) || isEmptyValue($(params).val())) {
            return true;
        }
        var src = getDatePickerDateString(element, value);
        var tar = getDatePickerDateString(params, $(params).val());
        if (!/Invalid|NaN/.test(new Date(src))) {
            return new Date(src) >= new Date(tar);
        }
    }, js_lang_label.GENERIC_MUST_BE_GREATER_THAN_OR_EQUAL_TO + ' {0}.');

    jQuery.validator.addMethod("dateLessEqual", function (value, element, params) {
        if (isEmptyValue(value) || isEmptyValue($(params).val())) {
            return true;
        }
        var src = getDatePickerDateString(element, value);
        var tar = getDatePickerDateString(params, $(params).val());
        if (!/Invalid|NaN/.test(new Date(src))) {
            return new Date(src) <= new Date(tar);
        }
    }, js_lang_label.GENERIC_MUST_BE_LESS_THAN_OR_EQUAL_TO + ' {0}.');

    // numbers realted
    jQuery.validator.addMethod("numEqualTo", function (value, element, params) {
        if (isEmptyValue(value) || isEmptyValue($(params).val())) {
            return true;
        }
        return isNaN(value) && isNaN($(params).val()) || (Number(value) == Number($(params).val()));
    }, js_lang_label.GENERIC_MUST_BE_EQUAL_TO + ' {0}.');

    jQuery.validator.addMethod("numGreaterThan", function (value, element, params) {
        if (isEmptyValue(value) || isEmptyValue($(params).val())) {
            return true;
        }
        return isNaN(value) && isNaN($(params).val()) || (Number(value) > Number($(params).val()));
    }, js_lang_label.GENERIC_MUST_BE_GREATER_THAN + ' {0}.');

    jQuery.validator.addMethod("numLessThan", function (value, element, params) {
        if (isEmptyValue(value) || isEmptyValue($(params).val())) {
            return true;
        }
        return isNaN(value) && isNaN($(params).val()) || (Number(value) < Number($(params).val()));
    }, js_lang_label.GENERIC_MUST_BE_LESS_THAN + ' {0}.');

    jQuery.validator.addMethod("numLessEqual", function (value, element, params) {
        if (isEmptyValue(value) || isEmptyValue($(params).val())) {
            return true;
        }
        return isNaN(value) && isNaN($(params).val()) || (Number(value) <= Number($(params).val()));
    }, js_lang_label.GENERIC_MUST_BE_LESS_THAN_OR_EQUAL_TO + ' {0}.');

    jQuery.validator.addMethod("numGreaterEqual", function (value, element, params) {
        if (isEmptyValue(value) || isEmptyValue($(params).val())) {
            return true;
        }
        return isNaN(value) && isNaN($(params).val()) || (Number(value) >= Number($(params).val()));
    }, js_lang_label.GENERIC_MUST_BE_GREATER_THAN_OR_EQUAL_TO + ' {0}.');
}
function getDatePickerDateString(element, value) {
    var fmt, tmt, act_date;
    if ($(element).data("datepicker")) {
        fmt = $(element).datepicker("option", "dateFormat");
    } else if ($(element).attr("aria-date-format")) {
        fmt = $(element).attr("aria-date-format");
    }
    if (fmt) {
        if ($(element).attr("aria-format-type") == "datetime") {
            if ($(element).data("datepicker")) {
                tmt = $(element).datepicker("option", "timeFormat");
            } else if ($(element).attr("aria-time-format")) {
                tmt = $(element).attr("aria-time-format");
            }
            if (tmt) {
                act_date = $.datepicker.parseDateTime(fmt, tmt, value, {}, {timeFormat: tmt});
            } else {
                act_date = $.datepicker.parseDate(fmt, value);
            }
        } else {
            act_date = $.datepicker.parseDate(fmt, value);
        }
    } else {
        act_date = value;
    }
    return act_date;
}
function initializeTopHeading() {
    if ($('#left_search_panel').length) {
        var $head_width = $(window).width() - 220;
        $('.heading').width($head_width);
        $('.heading').css('left', '220px');
    } else {
        var $head_width = $(window).width();
        $('.heading').width($head_width);
        $('.heading').css('left', '0px');
    }
}
function FancyBoxcloseButton(){
    if ( $('#popup-left-block').length > 0 ){
        parent.$('.fancybox-item').removeClass('fancybox-close-1').addClass('fancybox-close-2');
    }
}
//related to fancy-box calling
function openCustomURLFancyBox(req_uri, write_obj) {
    var base_obj = {
        href: req_uri + "&iframe=true",
        type: 'iframe',
        autoScale: false,
        //autoSize: false,
        openEffect: 'elastic',
        closeEffect: 'elastic',
        width: '75%',
        height: '75%',
        padding: 0,
        helpers: {
            overlay: {
                closeClick: false
            } // prevents closing when clicking OUTSIDE fancybox
        },
        afterShow: function () {
            if ($("iframe[id^='fancybox-frame']")[0] && $("iframe[id^='fancybox-frame']")[0].contentWindow) {
                setTimeout(function () {
                    $("iframe[id^='fancybox-frame']")[0].contentWindow.initializeFancyAjaxEvents();
                }, 250);
                $("iframe[id^='fancybox-frame']")[0].contentWindow.FancyBoxcloseButton();
            }
        }
    }
    var tmpl_obj = getFancyboxTPLParams();
    write_obj = ($.isPlainObject(write_obj)) ? write_obj : {};
    var final_obj = $.extend({}, base_obj, tmpl_obj, write_obj);
    $.fancybox.open(final_obj);
    return false;
}
function openURLFancyBox(req_uri, write_obj) {
    var base_obj = {
        href: req_uri + "&iframe=true",
        type: 'iframe',
        autoScale: false,
        //autoSize: false,
        openEffect: 'elastic',
        closeEffect: 'elastic',
        width: '75%',
        height: '75%',
        padding: 0,
        helpers: {
            overlay: {
                closeClick: false
            } // prevents closing when clicking OUTSIDE fancybox
        },
        afterShow: function () {
            if ($("iframe[id^='fancybox-frame']")[0] && $("iframe[id^='fancybox-frame']")[0].contentWindow) {
                setTimeout(function () {
                    $("iframe[id^='fancybox-frame']")[0].contentWindow.initializeFancyAjaxEvents();
                }, 250);
                $("iframe[id^='fancybox-frame']")[0].contentWindow.FancyBoxcloseButton();
            }
        }
    }
    var tmpl_obj = getFancyboxTPLParams();
    write_obj = ($.isPlainObject(write_obj)) ? write_obj : {};
    var final_obj = $.extend({}, base_obj, tmpl_obj, write_obj);
    $.fancybox.open(final_obj);
    return false;
}
function openAjaxURLFancyBox(req_uri, write_obj) {
    var base_obj = {
        href: req_uri + "&iframe=true",
        type: 'ajax',
        autoScale: false,
        //autoSize: false,
        openEffect: 'elastic',
        closeEffect: 'elastic',
        width: '75%',
        height: '75%',
        padding: 0,
        helpers: {
            overlay: {
                closeClick: false
            } // prevents closing when clicking OUTSIDE fancybox
        },
        afterShow: function () {
            if ($("iframe[id^='fancybox-frame']")[0] && $("iframe[id^='fancybox-frame']")[0].contentWindow) {
                $("iframe[id^='fancybox-frame']")[0].contentWindow.FancyBoxcloseButton();
            }
        }
    }
    var tmpl_obj = getFancyboxTPLParams();
    write_obj = ($.isPlainObject(write_obj)) ? write_obj : {};
    var final_obj = $.extend({}, base_obj, tmpl_obj, write_obj);
    $.fancybox.open(final_obj);
    return false;
}
function allowCloseFancyBox() {
    if (el_tpl_settings.page_iframe == "true" && el_tpl_settings.close_iframe == "true") {
        return true;
    } else {
        return false;
    }
}
function isFancyBoxActive() {
    if (el_tpl_settings.page_iframe == "true") {
        return true;
    } else {
        return false;
    }
}
function restrictFancyBoxClass() {
    if (el_tpl_settings.page_iframe == "true") {
        return "fancybox-restrict-hash";
    } else {
        return "";
    }
}
//related to messages
function closeMessage() {
    $('#var_msg_cnt').fadeOut('slow');
    return false;
}
function setMessage(msgText, msgClass, timeOut) {
    var timer = 5000, cnt_class, close_class;
    if (msgClass == 0) {
        cnt_class = "alert-error";
        close_class = 'error';
    } else {
        cnt_class = "alert-success";
        close_class = 'success';
    }
    $("#closebtn_errorbox").removeClass("success").removeClass("error").addClass(close_class);
    $('#err_msg_cnt').html(msgText).removeClass("alert-success").removeClass("alert-error").addClass(cnt_class);
    if (!isNaN(parseInt(timeOut))) {
        setTimeout(function () {
            $('#var_msg_cnt').fadeIn('slow');
            setTimeout("closeMessage()", 5000);
        }, timeOut);
    } else {
        $('#var_msg_cnt').fadeIn('slow');
        setTimeout("closeMessage()", timer);
    }
}
//related to left search panel
function toggleLeftSearchPanel(eleObj) {
    $this = $(eleObj);
    //left sidbar clicked
    if ($(eleObj).hasClass('left-hide')) {
        $("#left_search_panel").show('slide', {
            direction: 'left'
        }, 500);
        if ($('#collapse_btn').length == 0 || $('#collapse_btn').is(':hidden')) {
            var pjson = animateHeaderContent(true, false, false, false, true);
        } else if ($('#sidebar').hasClass('semi-collapse-menu')) {
            var pjson = animateHeaderContent(false, true, false, false, true);
        } else if ($('#collapse_btn').hasClass('hide')) {
            var pjson = animateHeaderContent(false, false, true, false, true);
        } else {
            var pjson = animateHeaderContent(false, false, false, true, true);
        }
        $($this).animate({
            top: pjson.satop,
            left: pjson.salef
        }, 500, '', function () {
            // Animation complete.
            $($this).removeClass('left-hide').addClass("left-show");
            resizeGridWidth();
            initNiceScrollBar();
            adjustMainGridColumnWidth();
        });
        $("#top_heading_fix > h3").animate({
            'paddingLeft': pjson.fhpad + 'px'
        }, 500);

        $this.children('a').attr('title', js_lang_label.GENERIC_HIDE_LEFT_SEARCH_PANEL);
        $this.children('a').find("span").attr('class', 'icomoon-icon-arrow-left-7');
    } else {
        $("#left_search_panel").hide('slide', {
            direction: 'left'
        }, 500);
        //hide sidebar
        if ($('#collapse_btn').length == 0 || $('#collapse_btn').is(':hidden')) {
            var pjson = animateHeaderContent(true, false, false, false, false);
        } else if ($('#sidebar').hasClass('semi-collapse-menu')) {
            var pjson = animateHeaderContent(false, true, false, false, false);
        } else if ($('#collapse_btn').hasClass('hide')) {
            var pjson = animateHeaderContent(false, false, true, false, false);
        } else {
            var pjson = animateHeaderContent(false, false, false, true, false);
        }
        $($this).animate({
            top: pjson.satop,
            left: pjson.salef
        }, 500, '', function () {
            // Animation complete.
            $($this).addClass('left-hide').removeClass("left-show");
            resizeGridWidth();
            adjustMainGridColumnWidth();
        });
        $("#top_heading_fix > h3").animate({
            'paddingLeft': pjson.fhpad + 'px'
        }, 500);
        $this.children('a').attr('title', js_lang_label.GENERIC_SHOW_LEFT_SEARCH_PANEL);
        $this.children('a').find("span").attr('class', 'icomoon-icon-arrow-right-7');
        hideNiceScrollBar();
    }

}
function getDBErrorNotifyScreen(page) {
    if (("Notification" in window)) {//!$.browser.mozilla
        getDBErrorWebNotify(page)
    } else {
        getDBErrorPinNotify(page);
    }
}
function getDBErrorPinNotify(page) {
    $.pnotify({
        type: "error",
        title: js_lang_label.GENERIC_DATABASE_ERRORS_OCCURRED,
        text: '<a href="javascript://" class="db-error-click" aria-err-page="' + page + '" >' + js_lang_label.GENERIC_CLICK_HERE_TO_VIEW + '</a>',
        icon: 'picon icon24 typ-icon-cancel white',
        opacity: 0.95,
        delay: 30000,
        history: false,
        sticker: false,
        animation: 'show'
    });
}
function getDBErrorWebNotify(page) {
    if (Notification.permission !== "granted") {
        Notification.requestPermission(function (permission) {
            // If the user is okay, let's create a notification
            if (permission === "granted") {
                getDBErrorWebNotify(page);
            } else {
                getDBErrorPinNotify(page);
                return;
            }
        });
    }
    var db_error_notify = new Notification(js_lang_label.GENERIC_DATABASE_ERRORS_OCCURRED, {
        body: js_lang_label.GENERIC_CLICK_HERE_TO_VIEW,
        icon: admin_image_url + "blocked-red.png"
    });
    db_error_notify.onclick = function () {
        $("#db_error_log .box").fadeOut("fast");
        //maximize  content
        loadDBErrorLogPrint(page);
    };
}
//related to notification script
function getDesktopNotifyScreen(msg_obj) {
    if (("Notification" in window)) {//!$.browser.mozilla
        getDesktopWebNotify(msg_obj);
    } else {
        getDesktopPinNotify(msg_obj);
    }
}
function getDesktopPinNotify(msg_obj) {
    var notify_list = $(window).data("pnotify"), cnt = 0;
    for (var i in notify_list) {
        if (!notify_list[i].is(":hidden")) {
            cnt++;
        }
    }
    var subject = msg_obj.subject;
    if (msg_obj.link != "") {
        subject = '<a class="notification-link" href="' + msg_obj.link + '" target="_blank">' + msg_obj.subject + '</a>';
    }
    $.pnotify({
        type: msg_obj.type,
        title: subject,
        text: msg_obj.message,
        icon: 'picon icon16 iconic-icon-check-alt white',
        opacity: 0.95,
        history: true,
        shown: (cnt > 3) ? false : true,
        sticker: false,
        animation: 'show'
    });
}
function getDesktopWebNotify(msg_obj) {
    if (Notification.permission !== "granted") {
        Notification.requestPermission(function (permission) {
            // If the user is okay, let's create a notification
            if (permission === "granted") {
                getDesktopWebNotify(msg_obj);
            } else {
                getDesktopPinNotify(msg_obj);
                return;
            }
        });
    }
    var desktop_notify = new Notification(msg_obj.subject, {
        body: msg_obj.message,
        icon: admin_image_url + "desktop-notify.png"
    });
    if (msg_obj.link != "") {
        desktop_notify.onclick = function () {
            window.open(msg_obj.link);
        };
    }
}
function loadSSEEventWebNotify() {
    setTimeout(function () {
        var notify_obj = new EventSource(admin_url + "" + cus_enc_url_json["user_notify_events"] + "?");
        notify_obj.onmessage = function (event) {
            if (event.data != "") {
                var event_res = parseJSONString(event.data);
                if (event_res.success == '0') {
                    notify_obj.close();
                } else {
                    if (event_res.content && event_res.content.length > 0) {
                        var cnt_arr = event_res.content;
                        for (var i in cnt_arr) {
                            getDesktopNotifyScreen(cnt_arr[i]);
                        }
                    }
                    if (event_res.notifications && event_res.notifications.notify) {
                        var cnt_arr = event_res.notifications.notify;
                        for (var i in cnt_arr) {
                            getDesktopNotifyScreen(cnt_arr[i]);
                        }
                        
                        if($('#notification-menu-item').length && $('.top-notification-heading').length){
                            var notification = '';
                            $.each(event_res.notifications.data, function (key, value) {
                                var message = '';
                                if(value.is_read == "Yes"){
                                    message = '<span class="message"><strong>'+value.message+'</strong></span>';
                                }else{
                                    message = '<span class="message">'+value.message+'</span>';
                                }
                                notification += '<li class="top-notification-content">\n\
<a hijacked="yes" href="'+value.url+'" class="fancybox-popup view-notifications">\n\
    <span class="'+value.icon+'"></span>' + message + '<span class="time">'+value.time+'</span></a></li>';
                            });
                            
                            $.each(event_res.notifications.desktop, function (key, value) {
                                notification += '<li class="top-notification-content top-notification-desktop">\n\
<a hijacked="yes" href="'+value.url+'" class="fancybox-popup view-notifications">\n\
    <span class="'+value.icon+'"></span><span class="message">' + value.message + '</span><span class="time">'+value.time+'</span></a></li>';
                            });
                            
                            $('.top-notification-badge').html(event_res.notifications.count);
                            $('.no-not-content').remove();
                            $('.top-notification-heading').after(notification);
                            $('.top-notification-content:gt(10)').remove();
                            $('.top-notification-desktop:gt(10)').remove();
                            
                        }
                    }
                }
            }
        };
    }, 500);
}
function loadLastVisitedURL() {
    window.history.back();
}
function loadAdminDashboardPage() {
    window.location.hash = cus_enc_url_json['dashboard_sitemap'];
}
function loadAdminSiteMapPage() {
    window.location.hash = cus_enc_url_json['dashboard_sitemap'];
}
function callAdminSessionExpired() {
    document.location.href = admin_url + cus_enc_url_json["user_login_entry"];
}
function loadDBErrorLogPrint(page) {
    var log_req_uri = admin_url + cus_enc_url_json["general_error_log"] + "?page=" + page;
    $.ajax({
        url: log_req_uri,
        type: 'POST',
        data: {},
        success: function (response) {
            $("#db_error_log").html(response);
            var tot_ht = $(window).innerHeight();
            var dbtop = tot_ht - 150;
            $("#db_error_log").css({
                "top": dbtop + "px"
            }).fadeIn(250);
            $("#db_error_log .box").fadeIn(250);
            setTimeout(function () {
                var cnt_ht = $("#db_error_log div.content").height();
                if (cnt_ht >= 250) {
                    dbtop = tot_ht - 325;
                    $("#db_error_log div.content").animate({
                        "height": "275px"
                    }, 100);
                    $("#db_error_log").animate({
                        "top": dbtop + "px"
                    }, 100);
                } else {
                    dbtop -= 150;
                    dbtop += (250 - cnt_ht);
                    $("#db_error_log").animate({
                        "top": dbtop + "px"
                    }, 100);
                }
            }, 251);
            return false;
        }
    });
}
function loadDBQueryLogPrint() {
    $("#db_query_log").hide();
    var log_req_uri = admin_url + cus_enc_url_json["general_query_log"];
    $.ajax({
        url: log_req_uri,
        type: 'POST',
        data: {},
        success: function (response) {
            $("#db_query_log").html(response);
            var tot_ht = $(window).innerHeight();
            var dbtop = tot_ht - 150;
            $("#db_query_log").css({
                "top": dbtop + "px"
            }).fadeIn(250);
            $("#db_query_log .box").fadeIn(250);
            setTimeout(function () {
                var cnt_ht = $("#db_query_log div.content").height();
                if (cnt_ht >= 250) {
                    dbtop = tot_ht - 325;
                    $("#db_query_log div.content").animate({
                        "height": "275px"
                    }, 100);
                    $("#db_query_log").animate({
                        "top": dbtop + "px"
                    }, 100);
                } else {
                    dbtop -= 150;
                    dbtop += (250 - cnt_ht);
                    $("#db_query_log").animate({
                        "top": dbtop + "px"
                    }, 100);
                }
                initQueryLogPaging();
            }, 251);
            return false;
        }
    });
}
function loadNavigationLogPrint() {
    var nvrange = $("#navigationCombo").val();
    var nvaction = $("#actionCombo").val();
    var fluser = $("#userCombo").val();
    if (fluser != "undefined" && fluser != "") {
        user_id = fluser;
    } else {
        user_id = "";
    }
    var log_req_uri = admin_url + cus_enc_url_json["general_navigation_index"] + "?range=" + nvrange + "&action=" + nvaction + "&user_id=" + user_id;
    $.ajax({
        url: log_req_uri,
        type: 'POST',
        data: {},
        success: function (response) {
            $("#ad_navig_log").html(response);
            var tot_ht = $(window).innerHeight();
            var dbtop = tot_ht - 325;
            $("#ad_navig_log").css("top", dbtop + "px");
            $("#ad_navig_log .box").fadeIn(250);
            setTimeout(function () {
                $("#navigationCombo").chosen();
                $("#actionCombo").chosen();
                $("#flushCombo").chosen();
                $("#userCombo").chosen();
            }, 251);
            return false;
        }
    });
}
function loadFlushLogPrint() {
    if (confirm(js_lang_label.GENERIC_ARE_YOU_SURE_TO_FLUSH_THE_LOGS)) {
        var nvrange = $("#navigationCombo").val();
        var flrange = $("#flushCombo").val();
        var fluser = $("#userCombo").val();
        if (fluser != "undefined" && fluser != "") {
            user_id = fluser;
        } else {
            user_id = "";
        }
        var log_req_uri = admin_url + cus_enc_url_json["general_navigation_flush"] + "?type=flush&flush=" + flrange + "&range=" + nvrange + "&user_id=" + user_id;
        $.ajax({
            url: log_req_uri,
            type: 'POST',
            data: {},
            success: function (response) {
                $("#ad_navig_log").html(response);
                var tot_ht = $(window).innerHeight();
                var dbtop = tot_ht - 325;
                $("#ad_navig_log").css("top", dbtop + "px");
                $("#ad_navig_log .box").fadeIn(250);
                setTimeout(function () {
                    $("#navigationCombo").chosen();
                    $("#flushCombo").chosen();
                    $("#userCombo").chosen();
                    $("#actionCombo").chosen();
                }, 251);
                return false;
            }
        });
    }
}
function initQueryLogPaging() {
    if (!$("#query_log_paging").length) {
        return false;
    }
    $("#query_log_paging").paginate({
        count: $("#query_log_paging_count").val(),
        start: 1,
        display: 6,
        border: false,
        text_color: '#888',
        background_color: '#EEE',
        text_hover_color: 'black',
        background_hover_color: '#CFCFCF',
        onChange: function (page) {
            $(".query-log-loader").show();
            var log_req_uri = admin_url + cus_enc_url_json["general_query_log_page"];
            $.ajax({
                url: log_req_uri,
                type: 'POST',
                data: {
                    "type": "paging",
                    "page": page
                },
                success: function (response) {
                    $("#query_log_block").html(response);
                    $(".query-log-loader").hide();
                    return false;
                }
            });
        }
    });
}
function logFlushLogPages() {
    var clear_query_log = admin_url + cus_enc_url_json["general_clear_query_log"];
    $.ajax({
        url: clear_query_log,
        type: 'POST',
        data: {
            'type': 'querylog',
            'flush_type': $("#logFlushCombo").val(),
            'flush_page': $("#logFlushPages").val()
        },
        success: function (response) {
            var res_arr = parseJSONString(response);
            var jmgcls = 1;
            if (res_arr.success == "0") {
                jmgcls = 0;
            }
            Project.setMessage(res_arr.message, jmgcls);
            loadDBQueryLogPrint();
        }
    });
}
function showAdminAjaxRequest(formData, jqForm, options) {
    Project.show_adaxloading_div();
}
function appendPopupAddedRecord(popup_arr) {
    if (!popup_arr || !popup_arr.type) {
        return false;
    }
    var frm_field_id = popup_arr.html_id;
    switch (popup_arr.type) {
        case 'dropdown':
            var opt_str = "<option value='" + popup_arr.id + "'>" + popup_arr.val + "</option>";
            parent.$("#" + frm_field_id).append(opt_str);
            if (parent.$("#" + frm_field_id).attr("multiple")) {
                var selarr = parent.$("#" + frm_field_id).val();
                if (!$.isArray(selarr)) {
                    selarr = [];
                }
                selarr.push(popup_arr.id);
                parent.$("#" + frm_field_id).val(selarr);
            } else {
                parent.$("#" + frm_field_id).val(popup_arr.id);

            }
            parent.$("#" + frm_field_id).trigger("chosen:updated").trigger("change");
            break;
        case 'multi_select_dropdown':
            var opt_str = "<option value='" + popup_arr.id + "'>" + popup_arr.val + "</option>";
            parent.$("#" + frm_field_id).append(opt_str);
            var selarr = parent.$("#" + frm_field_id).val();
            if (!$.isArray(selarr)) {
                selarr = [];
            }
            selarr.push(popup_arr.id);
            parent.$("#" + frm_field_id).val(selarr);
            parent.$("#" + frm_field_id).trigger("chosen:updated").trigger("change");
            break;
        case 'autocomplete':
            if (popup_arr.is_multiple != "Yes") {
                parent.$("#" + frm_field_id).tokenInput("clear");
            }
            if (!$.isPlainObject(popup_arr)) {
                popup_arr = {};
            }
            parent.$("#" + frm_field_id).tokenInput("add", popup_arr).trigger("change");
            break;
    }
}
function getAdminFormValidate() {
    var retVal = true;
    if (el_form_settings.jajax_submit_func != "" && $.isFunction(window[el_form_settings.jajax_submit_func])) {
        retVal = window[el_form_settings.jajax_submit_func]();
    }
    if (retVal) {
        $("._upload_req_file").remove();
        var options = {
            url: el_form_settings.jajax_action_url,
            beforeSubmit: showAdminAjaxRequest,
            success: function (respText, statText, xhr, $form) {
                var resArr = parseJSONString(respText);
                responseAjaxDataSubmission(resArr);
                if (resArr.success == "0") {
                    if (el_form_settings.jajax_submit_back != "" && $.isFunction(window[el_form_settings.jajax_submit_back])) {
                        window[el_form_settings.jajax_submit_back](resArr);
                    }
                    return false;
                } else {
                    if (allowCloseFancyBox()) {
                        if (el_form_settings.jajax_submit_back != "" && $.isFunction(window[el_form_settings.jajax_submit_back])) {
                            window[el_form_settings.jajax_submit_back](resArr);
                        }
                        if (resArr.popup_data) {
                            appendPopupAddedRecord(resArr.popup_data);
                        } else if (resArr.load_grid) {
                            if (parent.$("#" + resArr.load_grid).length) {
                                var sort_mode = (resArr.sort_mode) ? resArr.sort_mode : 1;
                                parent.reloadListGrid(resArr.load_grid, null, sort_mode);
                            }
                        } else if (resArr.rmPopup == "true") {
                            parent.appendChildModuleContent(resArr);
                        }
                        if (resArr.load_form == "true" && resArr.load_url != "") {
                            $("body").addClass("ajaxstate");
                            window.location.href = resArr.load_url;
                        } else {
                            parent.Project.setMessage(resArr.message, 1, 200);
                            if (resArr.red_hash) {
                                parent.loadAdminAddUpdateControl(resArr);
                            }
                            parent.$.fancybox.close();
                        }
                    } else {
                        if (el_form_settings.jajax_submit_back != "" && $.isFunction(window[el_form_settings.jajax_submit_back])) {
                            window[el_form_settings.jajax_submit_back](resArr);
                        }
                        loadAdminAddUpdateControl(resArr);
                    }
                }
            }
        };
        $('#frmaddupdate').ajaxSubmit(options);
    }
    return false;
}
function getAdminTabLevelFormValidate(col_row) {
    var retVal = true;
    var exp_arr = col_row.split("_");
    var col = exp_arr[0], row = exp_arr[1];
    if (el_form_settings.jajax_submit_func != "" && $.isFunction(window[el_form_settings.jajax_submit_func])) {
        retVal = window[el_form_settings.jajax_submit_func]();
    }
    if (retVal) {
        $("._upload_req_file").remove();
        var $currObj = $("[id^='tabheading_" + col + "_" + row + "'].active");
        var curr_height_tab = $($($currObj)).outerHeight();
        $("#tabcontent_" + col + "_" + row).animate({
            "height": curr_height_tab + "px"
        }, 500);
        var js_curr_tab = $($currObj).find("input[name='load_tab']").val();
        var blk = $("#tab_id_" + col + "_" + row).val();
        var options = {
            url: el_form_settings.jajax_action_url,
            beforeSubmit: showAdminAjaxRequest,
            success: function (respText, statText, xhr, $form) {
                var resArr = parseJSONString(respText);
                responseAjaxDataSubmission(resArr);
                if (resArr.success == "0") {
                    return false;
                } else {
                    if (resArr.success == "3" || resArr.success == "4") {
                        if (isRedirectEqualHash(resArr.red_hash)) {
                            window.location.hash = resArr.red_hash;
                            window.location.reload();
                        } else {
                            window.location.hash = resArr.red_hash;
                        }
                    } else if (resArr.success == "5") {
                        window.location.href = resArr.red_hash;
                    } else {
                        var sendArr = [];
                        sendArr.push({
                            "curr_tab": js_curr_tab,
                            "col": col,
                            "row": row,
                            "blk": blk
                        });
                        getActivateAdminTabContent(sendArr);
                    }
                }
            }
        };
        $("#frmaddupdate_" + col + "_" + row).ajaxSubmit(options);
    }
    return true;
}
function responseAjaxDataSubmission(resArr) {
    Project.hide_adaxloading_div();
    Project.setMessage(resArr.message, resArr.success, 200);
}
function loadAdminAddUpdateControl(ctrlArr) {
    if (ctrlArr.success == "3" || ctrlArr.success == "4") {
        if (isRedirectEqualHash(ctrlArr.red_hash)) {
            window.location.hash = ctrlArr.red_hash;
            window.location.reload();
        } else {
            window.location.hash = ctrlArr.red_hash;
        }
        return false;
    } else if (ctrlArr.success == "5") {
        window.location.href = ctrlArr.red_hash;
        return false;
    }
    switch (ctrlArr.red_type) {
        case 'List':
            loadAdminModuleListing(ctrlArr.mod_enc_url.index, ctrlArr.extra_hstr);
            break;
        case 'Prev':
            loadAdminModuleAddUpdate(ctrlArr.mod_enc_url.add, ctrlArr.red_mode, ctrlArr.red_id, ctrlArr.extra_hstr);
            break;
        case 'Next':
            loadAdminModuleAddUpdate(ctrlArr.mod_enc_url.add, ctrlArr.red_mode, ctrlArr.red_id, ctrlArr.extra_hstr);
            break;
        default:
            loadAdminModuleAddUpdate(ctrlArr.mod_enc_url.add, ctrlArr.red_mode, ctrlArr.red_id, ctrlArr.extra_hstr);
            break;
    }
}
function getAnimateNextDIV() {
    if (el_tpl_settings.container_div == "content") {
        return "content_slide";
    } else {
        return "content";
    }
}
function loadAdminModuleListing(module_url, extra_hstr) {
    if (allowCloseFancyBox()) {
        parent.$.fancybox.close();
    } else {
        var $load_url = module_url;
        if (extra_hstr) {
            $load_url += extra_hstr;
        }
        window.location.hash = $load_url;
    }
}
function loadAdminModuleAddUpdate(module_url, mode, id, extra_hstr) {
    var $load_url = module_url;
    if (mode == "Add") {
        //        var hash_url = window.location.hash
        //        if (hash_url) {
        //            var hash_arr = hash_url.split("|");
        //            if ($.isArray(hash_arr) && $.inArray("id", hash_arr) != "-1") {
        //                mode_url = "";
        //            } else {
        //                mode_url = "|id|";
        //            }
        //        }
        mode_url = "|mode|" + cus_enc_mode_json['Add'];
    } else {
        mode_url = "|mode|" + cus_enc_mode_json['Update'] + "|id|" + id;
    }
    $final_url = $load_url + "" + mode_url
    if (extra_hstr) {
        $final_url += extra_hstr;
    }
    window.location.hash = $final_url;
}
function loadAdminModuleAddSwitchPage(module_url, id, extra_hstr) {
    var $load_url = module_url;
    $final_url = $load_url + "|mode|" + cus_enc_mode_json['Update'] + "|id|" + id;
    if (extra_hstr) {
        $final_url += extra_hstr;
    }
    window.location.hash = $final_url;
}
function loadAdminModuleListingSwitch(module_url, par_id, extra_hstr) {
    extra_hstr = changeSpecificHASHValue(extra_hstr, "parID", par_id);
    window.location.hash = module_url + "" + extra_hstr;
}
function loadHashRequestURLPage(pl) {
    var js_curr_hash = window.location.hash;
    if (window.location.hash == "") {
        if (Project.modules.ajaxNavigate.findHASHURL()) {
            loadTargetRequestURLPage(js_curr_hash, pl);
        }
    } else {
        loadTargetRequestURLPage(js_curr_hash, pl);
    }
    return false;
}
function loadTargetRequestURLPage(req_hash, pl) {
    var ajax_url = convertHASHToURL(req_hash);
    callBeforeAjaxCalling();
    var hash_val = (req_hash) ? req_hash.split('|').slice(1).join('|') : '';
    $.ajax({
        url: ajax_url,
        cache: false,
        data: {
            'hashValue': ((hash_val) ? hash_val.toString() : ''),
            'newRequest': "true"
        },
        success: function (data) {
            callAfterAjaxCalling();
            hideNiceScrollBar();
            applyAnimationLogic(data, pl);
        },
        error: function (xhr, txt) {
            var result = appendErrorPage(xhr.status, ajax_url);
            applyAnimationLogic(result, pl);
        }
    });
}
function appendErrorPage(code) {
    var ctxt, mtxt, stxt;
    if (code == 500) {
        ctxt = '500 <small>Internal Server Error</small>';
        mtxt = 'Opps, Something went wrong.';
        stxt = 'The page you are looking for might have some internal issues';
    } else if (code == 503) {
        ctxt = '503 <small>Service Unavailable</small>';
        mtxt = 'Opps, Something went wrong.';
        stxt = 'The page you are looking for is unavailable';
    } else {
        ctxt = '404 <small>Page Not Found</small>';
        mtxt = 'We can not find the page you are looking for.';
        stxt = 'The page you are looking for might have been removed, had its name changed, or unavailable';
    }
    var str = '<div class="container-fluid"><div class="errorContainer"><div class="page-header">';
    str += '<h1 class="center">' + ctxt + '</h1>';
    str += '<h2 class="center">' + mtxt + '</h2>';
    str += '<p>' + stxt + '</p>';
    str += '</div>';
    str += '<div class="error-link-back">';
    str += '<a href="javascript://" onclick="loadLastVisitedURL()" class="btn" style="margin-right:10px;"><span class="icon16 icomoon-icon-arrow-left-10"></span>' + js_lang_label.GENERIC_GO_BACK + '</a>';
    str += '<a href="javascript://" onclick="loadAdminDashboardPage()" class="btn"><span class="icon16 icomoon-icon-screen"></span>' + js_lang_label.GENERIC_SITEMAP + '</a>';
    str += '</div></div></div>';
    return str;
}
function callBeforeAjaxCalling() {
    displayAjaxLoader();
    stopAutoRefreshGrid();
    stopFormSaveAsDraft();
    if (typeof executeBeforePageLoad == "function") {
        if ($('div[data-list-name]').length) {
            executeBeforePageLoad("list", $('div[data-list-name]').attr("data-list-name"));
        } else if ($('div[data-form-name]').length) {
            executeBeforePageLoad("form", $('div[data-form-name]').attr("data-form-name"));
        } else {
            executeBeforePageLoad("custom");
        }
    }
}
function callAfterAjaxCalling() {
    removeAllTinyMCEEditors();
    removeAllDataBindEvents();
    removeAllPreloadCCEvents();
}
function displayAjaxLoader() {
    showMainLoader();
    $("ul.sub.children-clicked").addClass("children-hide").removeClass("children-clicked");
    if (el_general_settings.mobile_platform && !$("#collapse_btn").hasClass('hide')) {
        $("#collapse_btn").click();
    }
}
function showMainLoader() {
    if ($("#sidebar").length) {
        if ($("#sidebar").hasClass("semi-collapse-menu")) {
            $("body").addClass("semi-left-menu").removeClass("full-left-menu");
        } else {
            $("body").addClass("full-left-menu").removeClass("semi-left-menu");
        }
    }
    $("body").addClass("loadstate");
}
function hideMainLoader() {
    $("body").removeClass("loadstate");
}
function applyAnimationLogic(response, pl) {
    $("#content,#content_slide").off('transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd');
    var winWidth = $(window).innerWidth();
    var mainWidth = $("#main_content_div").offset().left;
    $("#" + el_tpl_settings.container_div).css({
        "left": "-" + winWidth + "px"
    });
    $('#' + getAnimateNextDIV()).show();
    el_tpl_settings.container_div = getAnimateNextDIV();
    $('#' + getAnimateNextDIV()).html("").css({
        "left": (winWidth - mainWidth) + "px"
    });
    if (el_tpl_settings.page_animation) {
        $('#' + el_tpl_settings.container_div).on('transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd', function () {
            callAfterPageRendering();
            $('#' + el_tpl_settings.container_div).off('transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd');
        });
    }
    $('#' + el_tpl_settings.container_div).html(response);
    callBeforePageRendering();
    $('#' + el_tpl_settings.container_div).css({
        "left": "0px"
    });
    hideMainLoader();
    if (!el_tpl_settings.page_animation || pl === false) {
        callAfterPageRendering();
    }
}
function callBeforePageRendering() {
    getResizedSubTabs();
    initializeMenuCollpaseEvents("before");
    Project.modules.ajaxNavigate.hijackAnchor();
    getSetTopViewHeight();
    niceScrollHomePageBlocks();
    getAdminImageTooltip();
}
function callAfterPageRendering() {
    Project.hide_adaxloading_div();
    initializeBasicAjaxEvents();
    getSetTopViewHeight();
    $('#' + getAnimateNextDIV()).hide();
    resizeGridWidth();
    setPageMetaTitleData();
    setCustomDesignGridster();
    executePageCallbacks();
}
function initializeFancyAjaxEvents() {
    //initializeTopHeading();
    initializejQueryChosenEvents();
    initializeTooltipsEvents();
    initializePopoverEvents();
    initializePatternPwdEvents();
    initializeFancyBoxEvents();
    applyInputTextCase();
    adjustAppendPrependText();
    initPreloadCCEvents();
    getSetTopViewHeight();
    renderResizeBlocks();
    getResizedSubTabs();
    initializeTabFocusIndex($(".scrollable-content, .settings-class"));

    resizeFancyGridWidth();
    setCustomDesignGridster();
    executePageCallbacks()
    
    setTimeout(function () {
        renderResizeBlocks();
    }, 300);
}
function initializeBasicAjaxEvents() {
    //initializeTopHeading();
    initializeMenuCollpaseEvents("after");
    initNiceScrollBar();
    initializejQueryChosenEvents();
    initializeTooltipsEvents();
    initializePopoverEvents();
    initializePatternPwdEvents();
    initializeFancyBoxEvents();
    applyInputTextCase();
    initPreloadCCEvents();
    adjustAppendPrependText();
    renderResizeBlocks();
    initializeTabFocusIndex($(".scrollable-content, .settings-class"));
    
    setTimeout(function () {
        renderResizeBlocks();
    }, 300);
}
function initializeBasicAjaxEvents_1(eleObj) {
    initializejQueryChosenEvents(eleObj);
    initializeTooltipsEvents(eleObj);
    initializePopoverEvents(eleObj);
    initializePatternPwdEvents(eleObj);
    initializeFancyBoxEvents(eleObj);
    applyInputTextCase(eleObj);
    adjustAppendPrependText(eleObj);
    initializeTabFocusIndex(eleObj);
}
function initializeSubgridEvents(eleObj) {
    initializeFancyBoxEvents(eleObj);
}
function initializeNesgridEvents(eleObj) {
    initializeFancyBoxEvents(eleObj);
}
function setPageMetaTitleData() {
    if ($("#txt_module_meta").length) {
        var meta_title;
        if ($("#txt_module_meta").is("textarea")) {
            meta_title = $.trim($("#txt_module_meta").val());
        } else {
            meta_title = $.trim($("#txt_module_meta").html());
        }
        if (meta_title) {
            $("title").html(meta_title);
        } else {
            $("title").html(globalMetaTitle);
        }
    } else {
        $("title").html(globalMetaTitle);
    }
}
function executePageCallbacks() {
    if ($('div[data-form-name]').length) {
        if (typeof executeAfterChildRecAdd == "function") {
            if ($.isFunction(executeAfterChildRecAdd)) {
                $("table[id^='tbl_child_module_']").each(function () {
                    var child_id = $(this).attr("id");
                    child_id = child_id.replace("tbl_child_module_", "");
                    $("tr[id^='tr_child_row_" + child_id + "_']").each(function () {
                        executeAfterChildRecAdd(child_id, $(this).attr("id").split("_").pop());
                    });
                });
            }
        }
    }
    if (typeof executeAfterPageLoad == "function") {
        if ($('div[data-list-name]').length) {
            executeAfterPageLoad("list", $('div[data-list-name]').attr("data-list-name"));
        } else if ($('div[data-form-name]').length) {
            executeAfterPageLoad("form", $('div[data-form-name]').attr("data-form-name"));
        } else {
            executeAfterPageLoad("custom");
        }
    }
}
function convertHASHToURL(hash) {
    var ajax_url;
    if (!hash) {
        return '';
    }
    hash = hash.toString().replace(/%7c/gi, '|');
    var array = hash.toString().split("|");
    if (array[0].toString().substring(0, 1) == "#") {
        var ajax_url = admin_url + array[0].toString().substr(1) + "?";
    } else {
        var ajax_url = admin_url + array[0].toString() + "?";
    }

    for (var i = 1; i < array.length; i++) {
        if (i % 2 == 0) {
            ajax_url += "=" + array[i];
        } else {
            ajax_url += "&" + array[i];
        }
    }
    return ajax_url;

}
function getHASHToFancyParams(hash) {
    var params_obj = {};
    if (!hash) {
        return params_obj;
    }
    hash = hash.toString().replace(/%7c/gi, '|');
    var array = hash.toString().split("|");
    for (var i = 1; i < array.length; i++) {
        if ($.inArray(array[i], fancy_params) != "-1") {
            var ind_val = array[parseInt(i) + 1];
            if (ind_val == "true" || ind_val == "false") {
                params_obj[array[i]] = (ind_val == "false") ? false : true;
            } else {
                params_obj[array[i]] = ind_val;
            }
        }
    }
    return params_obj;
}
function getQueryToFancyParams(hash) {
    var params_obj = {};
    if (!hash) {
        return params_obj;
    }
    var array = hash.toString().split("&");
    for (var i = 1; i < array.length; i++) {
        if ($.inArray(array[i], fancy_params) != "-1") {
            var ind_val = array[parseInt(i) + 1];
            if (ind_val == "true" || ind_val == "false") {
                params_obj[array[i]] = (ind_val == "false") ? false : true;
            } else {
                params_obj[array[i]] = ind_val;
            }
        }
    }
    return params_obj;
}
function removeAllTinyMCEEditors() {
    if (typeof tinyMCE == "undefined") {
        return false;
    }
    if (tinyMCE.editors.length) {
        for (var i in tinyMCE.editors) {
            tinyMCE.editors[i].remove(); // or destroy() ?
        }
    }
}
function removeAllDataBindEvents() {
    $(".groupfilter-list").remove();
    $(".daterangepicker").remove();
    $(".listgrid-block").remove();
    $(".listsort-block").remove();
}
function removeAllPreloadCCEvents() {
    pre_cond_code_arr = [];
}
function removeIndividualTinyMCEEditor(editor_id) {
    if (editor_id != "" && typeof tinymce != "undefined") {
        if (typeof tinymce.EditorManager != "undefined" && typeof tinymce.EditorManager.editors[editor_id] != "undefined") {
            tinymce.EditorManager.editors[editor_id].remove();
        }
    }
}
function removeCodeMarkupProperties(ele_id) {
    if (ele_id == "" || typeof CodeMirror == "undefined") {
        return;
    }
    if ($("#" + ele_id).data("cm")) {
        $("#" + ele_id).data("cm").toTextArea();
    }
}
function initPreloadCCEvents() {
    if (typeof pre_cond_code_arr == "undefined" || !pre_cond_code_arr.length) {
        return false;
    }
    for (var i = 0; i < pre_cond_code_arr.length; i++) {
        checkCCEventValues(pre_cond_code_arr[i]);
    }
}
function adjustAppendPrependText(eleObj) {
    var addon_ele, pwidth, twidth, cwidth, fwidth, cheight;
    if (eleObj) {
        $(eleObj).find(".ctrl-append-prepend").each(function () {
            var is_hidden = 0, display_css, visibility_css;
            if($(this).closest(".form-child-table").is(":hidden"))
            {
                is_hidden = 1;
                visibility_css = $(this).closest(".form-child-table").css("visibility");
                display_css = $(this).closest(".form-child-table").css("display");
                $(this).closest(".form-child-table").css("visibility", "hidden");
                $(this).closest(".form-child-table").css("display", "block");
            }
            addon_ele = $(this).parent().find(".text-addon");
            pwidth = $(this).parent().width();
            twidth = 0;
            $.each(addon_ele, function () {
                twidth += $(this).outerWidth();
            });
            cwidth = $(this).width();
            cheight = $(this).height();
            fwidth = Math.round(((cwidth - twidth) * 100 / pwidth) * 100) / 100;
            $(this).attr('style', $(this).attr('style') + ';' + 'width: ' + fwidth + '% !important;');
            $(addon_ele).css({'height': cheight + 'px', 'line-height': cheight + 'px'});
            if(is_hidden)
            {
                $(this).closest(".form-child-table").css("display", display_css);
                $(this).closest(".form-child-table").css("visibility", visibility_css);
            }
        });
    } else {
        $(".ctrl-append-prepend").each(function () {
            var is_hidden = 0, display_css, visibility_css;
            if($(this).closest(".form-child-table").is(":hidden"))
            {
                is_hidden = 1;
                visibility_css = $(this).closest(".form-child-table").css("visibility");
                display_css = $(this).closest(".form-child-table").css("display");
                $(this).closest(".form-child-table").css("visibility", "hidden");
                $(this).closest(".form-child-table").css("display", "block");
            }
            addon_ele = $(this).parent().find(".text-addon");
            pwidth = $(this).parent().width();
            twidth = 0;
            $.each(addon_ele, function () {
                twidth += $(this).outerWidth();
            });
            cwidth = $(this).width();
            cheight = $(this).height();
            fwidth = Math.round(((cwidth - twidth) * 100 / pwidth) * 100) / 100;
            $(this).attr('style', $(this).attr('style') + ';' + 'width: ' + fwidth + '% !important;');
            $(addon_ele).css({'height': cheight + 'px', 'line-height': cheight + 'px'});
            if(is_hidden)
            {
                $(this).closest(".form-child-table").css("display", display_css);
                $(this).closest(".form-child-table").css("visibility", visibility_css);
            }
        });
    }
}
function initializeMenuCollpaseEvents(type) {
    // for side menu collpase
    var window_width = $(window).width();
    var m_left_width = parseFloat(window_width);

    var sbtn = -1, pjson = {};
    if ($("#grid_search_btn").length) {
        $('#grid_search_btn').hide();
        sbtn = ($("#grid_search_btn").hasClass("left-show") && !$("#grid_search_btn").hasClass("hide-left-search")) ? true : false;
    }
    if ($('#sidebar').length == 0 || $('#sidebar').is(':hidden')) {
        pjson = animateHeaderContent(true, false, false, false, sbtn);
    } else if ($('#sidebar').hasClass('semi-collapse-menu')) {
        pjson = animateHeaderContent(false, true, false, false, sbtn);
    } else if ($('#collapse_btn').hasClass('hide')) {
        pjson = animateHeaderContent(false, false, true, false, sbtn);
    } else {
        pjson = animateHeaderContent(false, false, false, true, sbtn);
    }
    $('#main_content_div').css({
        'margin-left': pjson.mdmgn + 'px'
    });
    $("#top_heading_fix").width(m_left_width);
    $("#top_heading_fix > h3").css({
        'paddingLeft': pjson.fhpad + 'px'
    });
    if ($('#grid_search_btn').length) {
        $('#grid_search_btn').css({
            top: pjson.satop,
            left: pjson.salef
        });
        if (type == "after") {
            $('#grid_search_btn').show();
            if ($("#grid_search_btn").hasClass("hide-left-search")) {
                $("#grid_search_btn").removeClass("hide-left-search");
                $("#grid_search_btn").addClass("left-hide").removeClass("left-show");
                $("#grid_search_btn").children('a').find("span").attr('class', 'icomoon-icon-arrow-right-7');
            }
        }
    }
    if ($('.top-frm-tab-layout').length) {
        var tlef = $('.top-frm-tab-layout').offset().left;
        $('.top-frm-tab-layout').width(m_left_width - pjson.tfmin - parseFloat(tlef));
    } else if ($(".top-list-tab-layout").length) {
        var tlef = $('.top-list-tab-layout').offset().left;
        $('.top-list-tab-layout').width(m_left_width - pjson.tlmin - parseFloat(tlef));
    }
    if (type == "before") {
        $("#top_heading_fix > h3").css({"width": "600px"});
    } else {
        $("#top_heading_fix > h3").css({"width": pjson.fhwid + "px"});
    }
}
function initializejQueryChosenEvents(eleObj) {
    // for chosen jquery
    if (eleObj) {
        $(eleObj).find(".chosen-select:not([data-template=true])").chosen({
            allow_single_deselect: true
        });
        $(eleObj).find(".chosen-select[data-template=true]").chosen({
            allow_single_deselect: true,
            template: function (text, value, data, elem) {
                var module;
                if ($('div[data-list-name]').length) {
                    module = $('div[data-list-name]').attr("data-list-name");
                } else if ($('div[data-form-name]').length) {
                    module = $('div[data-form-name]').attr("data-form-name");
                }
                if (module) {
                    var tmpl = Project.modules[module].dropdownLayouts($(elem).attr("name"));
                    if (tmpl) {
                        if (typeof Mustache != 'undefined') {
                            data['text'] = text;
                            data['value'] = value;
                            tmpl = Mustache.render(tmpl, data);
                        } else {
                            var list = tmpl.match(/{{\s*[\w\.]+\s*}}/g).map(function (x) {
                                return x.match(/[\w\.]+/)[0];
                            });
                            if ($.isArray(list) && list.length > 0) {
                                for (var i in list) {
                                    var key = list[i], search_txt, replace_txt;
                                    search_txt = "{{" + key + "}}";
                                    if (key == "text") {
                                        replace_txt = text;
                                    } else if (list[i] == "value") {
                                        replace_txt = value;
                                    } else {
                                        replace_txt = data[key];
                                    }
                                    if (replace_txt != undefined) {
                                        tmpl = tmpl.replace(search_txt, replace_txt);
                                    }
                                }
                            }
                        }
                        return tmpl;
                    } else {
                        return text;
                    }
                } else {
                    return text;
                }
            }
        });
    } else {
        if ($(".chosen-select").length) {
            $(".chosen-select:not([data-template=true])").chosen({
                allow_single_deselect: true
            });
            $(".chosen-select[data-template=true]").chosen({
                allow_single_deselect: true,
                template: function (text, value, data, elem) {
                    var module;
                    if ($('div[data-list-name]').length) {
                        module = $('div[data-list-name]').attr("data-list-name");
                    } else if ($('div[data-form-name]').length) {
                        module = $('div[data-form-name]').attr("data-form-name");
                    }
                    if (module) {
                        var tmpl = Project.modules[module].dropdownLayouts($(elem).attr("name"));
                        if (tmpl) {
                            var list = tmpl.match(/{{\s*[\w\.]+\s*}}/g).map(function (x) {
                                return x.match(/[\w\.]+/)[0];
                            });
                            if ($.isArray(list) && list.length > 0) {
                                for (var i in list) {
                                    var key = list[i], search_txt, replace_txt;
                                    search_txt = "{{" + key + "}}";
                                    if (key == "text") {
                                        replace_txt = text;
                                    } else if (list[i] == "value") {
                                        replace_txt = value;
                                    } else {
                                        replace_txt = data[key];
                                    }
                                    if (replace_txt != undefined) {
                                        tmpl = tmpl.replace(search_txt, replace_txt);
                                    }
                                }
                            }
                            return tmpl;
                        } else {
                            return text;
                        }
                    } else {
                        return text;
                    }
                }
            });
        }
    }
}
function initializeTooltipsEvents(eleObj) {
    //------------- Tooltips -------------//
    //top tooltip
    if (eleObj) {
        $(eleObj).find('.tip').qtip({
            content: false,
            position: {
                my: 'bottom center',
                at: 'top center',
                viewport: $(window)
            },
            style: {
                classes: 'ui-tooltip-tipsy'
            }
        });
        //tooltip in right
        $(eleObj).find('.tipR').qtip({
            content: false,
            position: {
                my: 'left center',
                at: 'right center',
                viewport: $(window)
            },
            style: {
                classes: 'ui-tooltip-tipsy'
            }
        });
        //tooltip in bottom
        $(eleObj).find('.tipB').qtip({
            content: false,
            position: {
                my: 'top center',
                at: 'bottom center',
                viewport: $(window)
            },
            style: {
                classes: 'ui-tooltip-tipsy'
            }
        });
        //tooltip in left
        $(eleObj).find('.tipL').qtip({
            content: false,
            position: {
                my: 'right center',
                at: 'left center',
                viewport: $(window)
            },
            style: {
                classes: 'ui-tooltip-tipsy'
            }
        });
    } else {
        $('.tip').qtip({
            content: false,
            position: {
                my: 'bottom center',
                at: 'top center',
                viewport: $(window)
            },
            style: {
                classes: 'ui-tooltip-tipsy'
            }
        });
        //tooltip in right
        $('.tipR').qtip({
            content: false,
            position: {
                my: 'left center',
                at: 'right center',
                viewport: $(window)
            },
            style: {
                classes: 'ui-tooltip-tipsy'
            }
        });
        //tooltip in bottom
        $('.tipB').qtip({
            content: false,
            position: {
                my: 'top center',
                at: 'bottom center',
                viewport: $(window)
            },
            style: {
                classes: 'ui-tooltip-tipsy'
            }
        });
        //tooltip in left
        $('.tipL').qtip({
            content: false,
            position: {
                my: 'right center',
                at: 'left center',
                viewport: $(window)
            },
            style: {
                classes: 'ui-tooltip-tipsy'
            }
        });
    }
}
function initializePopoverEvents(eleObj) {
    //------------- Popover tips -------------//
    //top Popover
    if (eleObj) {
        $(eleObj).find('a[rel=popover]').popover().click(function (e) {
            e.preventDefault();
        });
    } else {
        $("a[rel=popover]").popover().click(function (e) {
            e.preventDefault();
        })
    }
}
function initializePatternPwdEvents(eleObj) {
    if (eleObj) {
        $(eleObj).find("input[role='patternlock'][role-complete!='yes']").each(function () {
            var ele_id = $(this).attr("id");
            var pattern_container_div = document.createElement('div');
            var pattern_reset_span = document.createElement('span');
            var el;
            $(pattern_container_div).attr('id', 'pattern_container_' + ele_id);
            $(pattern_container_div).addClass('pattern_container');
            $(pattern_reset_span).attr('id', 'pattern_reset_' + ele_id);
            $(pattern_reset_span).addClass('gray-bg right pattern_reset');
            $(pattern_reset_span).html("<strong>Old Pattern</strong>");
            pattern_container_div.appendChild(pattern_reset_span);
            el = $(this)[0];
            el.style.display = 'none';
            $(el).before(pattern_container_div);
            $('#' + pattern_container_div.id).pattern({
                preDefinedPattern: $(el).val().split("") || [],
                stop: function (event, ui) {
                    if (ui.pattern.length) {
                        $(el).val(ui.pattern.join(""));
                    }
                }
            });
            if (parseInt($(el).val()) > 0) {
            } else {
                $(pattern_reset_span).hide();
            }
            $(pattern_reset_span).on('click', function () {
                $('#' + pattern_container_div.id).pattern('drawPredefinedPattern');
                var val = $('#' + pattern_container_div.id).pattern('getPreDefinedPattern')
                val = val.join("");
                $(el).val(val);
            });
            $(this).attr("role-complete", 'yes');
        });
    } else {
        $("input[role='patternlock'][role-complete!='yes']").each(function () {
            var ele_id = $(this).attr("id");
            var pattern_container_div = document.createElement('div');
            var pattern_reset_span = document.createElement('span');
            var el;
            $(pattern_container_div).attr('id', 'pattern_container_' + ele_id);
            $(pattern_container_div).addClass('pattern_container');
            $(pattern_reset_span).attr('id', 'pattern_reset_' + ele_id);
            $(pattern_reset_span).addClass('gray-bg right pattern_reset');
            $(pattern_reset_span).html("<strong>" + js_lang_label.GENERIC_OLD_PATTERN + "</strong>");
            pattern_container_div.appendChild(pattern_reset_span);
            el = $(this)[0];
            el.style.display = 'none';
            $(el).before(pattern_container_div);
            $('#' + pattern_container_div.id).pattern({
                preDefinedPattern: $(el).val().split("") || [],
                stop: function (event, ui) {
                    if (ui.pattern.length) {
                        $(el).val(ui.pattern.join(""));
                    }
                }
            });
            if (parseInt($(el).val()) > 0) {
            } else {
                $(pattern_reset_span).hide();
            }
            $(pattern_reset_span).on('click', function () {
                $('#' + pattern_container_div.id).pattern('drawPredefinedPattern');
                var val = $('#' + pattern_container_div.id).pattern('getPreDefinedPattern')
                val = val.join("");
                $(el).val(val);
            });
            $(this).attr("role-complete", 'yes');
        });
    }
}
function initializeFancyBoxEvents(eleObj) {
    if (eleObj) {
        $(eleObj).find(".fancybox-image").each(function () {
            $(this).fancybox({
                padding: 10,
                openEffect: 'elastic',
                openSpeed: 150,
                closeEffect: 'elastic',
                closeSpeed: 150,
                closeClick: true,
                helpers: {
                    title: {
                        type: 'float'
                    }
                }
            });
        });
    } else {
        $(".fancybox-image").each(function () {
            $(this).fancybox({
                padding: 10,
                openEffect: 'elastic',
                openSpeed: 150,
                closeEffect: 'elastic',
                closeSpeed: 150,
                closeClick: true,
                helpers: {
                    title: {
                        type: 'float'
                    }
                }
            });
        });
    }

}
function applyInputTextCase(eleObj) {
    if (eleObj) {
        $(eleObj).find(".apply-text-upper_case").Setcase({
            caseValue: 'upper',
            changeonFocusout: false,
            changebyDefault: true
        });
        $(eleObj).find(".apply-text-lower_case").Setcase({
            caseValue: 'lower',
            changeonFocusout: false,
            changebyDefault: true
        });
        $(eleObj).find(".apply-text-uc_first").Setcase({
            caseValue: 'uc_first',
            changeonFocusout: false,
            changebyDefault: true
        });
        $(eleObj).find(".apply-text-uc_word").Setcase({
            caseValue: 'uc_word',
            changeonFocusout: false,
            changebyDefault: true
        });
    } else {
        $(".apply-text-upper_case").Setcase({
            caseValue: 'upper',
            changeonFocusout: false,
            changebyDefault: true
        });
        $(".apply-text-lower_case").Setcase({
            caseValue: 'lower',
            changeonFocusout: false,
            changebyDefault: true
        });
        $(".apply-text-uc_first").Setcase({
            caseValue: 'uc_first',
            changeonFocusout: false,
            changebyDefault: true
        });
        $(".apply-text-uc_word").Setcase({
            caseValue: 'uc_word',
            changeonFocusout: false,
            changebyDefault: true
        });
    }
}
function jqueryUIalertBox(msg, title, btn, width, height) {
    var label_elem = '<div class="dialog-alert-box"></div>';
    var label_text = msg;
    var option_params = {
        title: (title) ? title : js_lang_label.GENERIC_GRID_WARNING,
        width: (width) ? width : 300,
        height: (height) ? height : "auto",
        buttons: [{
                text: (btn) ? btn : js_lang_label.GENERIC_OK,
                btn_alert: 'ok',
                click: function () {
                    $(this).remove();
                }
            }]
    }
    jqueryUIdialogBox(label_elem, label_text, option_params);
}
function validateViewInlineEdit(name, val, view_rules) {
    if (!view_rules || !view_rules['editrules']) {
        return false;
    }
    val = (val == undefined) ? '' : val;
    var valid_rules = view_rules['editrules'];
    if (valid_rules.required === true) {
        if (isEmptyValue(val)) {
            return valid_rules.infoArr.required.message;
        }
    }
    // force required
    var filter, rqfield = valid_rules.required === true ? true : false;
    if (valid_rules.email === true) {
        if (!(rqfield === false && isEmptyValue(val))) {
            // taken from $ Validate plugin
            filter = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i;
            if (!filter.test(val)) {
                return valid_rules.infoArr.email.message;
            }
        }
    }
    if (valid_rules.number === true) {
        if (!(rqfield === false && isEmptyValue(val))) {
            if (isNaN(val)) {
                return valid_rules.infoArr.number.message;
            }
        }
    }
    if (valid_rules.integer === true) {
        if (!(rqfield === false && isEmptyValue(val))) {
            if (isNaN(val)) {
                return valid_rules.infoArr.integer.message;
            }
            if ((val % 1 !== 0) || (val.indexOf('.') != -1)) {
                return valid_rules.infoArr.integer.message;
            }
        }
    }
    if (typeof valid_rules.minValue != 'undefined' && !isNaN(valid_rules.minValue)) {
        if (parseFloat(val) < parseFloat(valid_rules.minValue)) {
            return valid_rules.infoArr.minValue.message;
        }
    }
    if (typeof valid_rules.maxValue != 'undefined' && !isNaN(valid_rules.maxValue)) {
        if (parseFloat(val) > parseFloat(valid_rules.maxValue)) {
            return valid_rules.infoArr.maxValue.message;
        }
    }
    if (valid_rules.range === true) {
        if (!(rqfield === false && isEmptyValue(val))) {
            // taken from $ Validate plugin
            if (val < valid_rules.infoArr.range.lrange || val > valid_rules.infoArr.range.hrange) {
                return valid_rules.infoArr.range.message;
            }
        }
    }
    if (valid_rules.minlength === true) {
        if (!(rqfield === false && isEmptyValue(val))) {
            // taken from $ Validate plugin
            var len = val.length;
            if (len < valid_rules.infoArr.minlength.minvalue) {
                return valid_rules.infoArr.minlength.message;
            }
        }
    }
    if (valid_rules.maxlength === true) {
        if (!(rqfield === false && isEmptyValue(val))) {
            // taken from $ Validate plugin
            var len = val.length;
            if (len > valid_rules.infoArr.maxlength.maxvalue) {
                return valid_rules.infoArr.maxlength.message;
            }
        }
    }
    if (valid_rules.rangelength === true) {
        if (!(rqfield === false && isEmptyValue(val))) {
            // taken from $ Validate plugin
            var len = val.length;
            if (len < valid_rules.infoArr.rangelength.lrange || len > valid_rules.infoArr.rangelength.hrange) {
                return valid_rules.infoArr.rangelength.message;
            }
        }
    }
    if (valid_rules.nowhitespace === true) {
        if (!(rqfield === false && isEmptyValue(val))) {
            // taken from $ Validate plugin
            filter = /^\S+$/i;
            if (!filter.test(val)) {
                return valid_rules.infoArr.nowhitespace.message;
            }
        }
    }
    if (valid_rules.alpha_with_spaces === true) {
        if (!(rqfield === false && isEmptyValue(val))) {
            // taken from $ Validate plugin
            filter = /^[a-zA-Z ]+$/;
            if (!filter.test(val)) {
                return valid_rules.infoArr.alpha_with_spaces.message;
            }
        }
    }
    if (valid_rules.alpha_without_spaces === true) {
        if (!(rqfield === false && isEmptyValue(val))) {
            // taken from $ Validate plugin
            filter = /^[a-zA-Z]+$/;
            if (!filter.test(val)) {
                return valid_rules.infoArr.alpha_without_spaces.message;
            }
        }
    }
    if (valid_rules.alpha_numeric_with_spaces === true) {
        if (!(rqfield === false && isEmptyValue(val))) {
            // taken from $ Validate plugin
            filter = /^[0-9a-zA-Z ]+$/;
            if (!filter.test(val)) {
                return valid_rules.infoArr.alpha_numeric_with_spaces.message;
            }
        }
    }
    if (valid_rules.alpha_numeric_without_spaces === true) {
        if (!(rqfield === false && isEmptyValue(val))) {
            // taken from $ Validate plugin
            filter = /^[0-9a-zA-Z]+$/;
            if (!filter.test(val)) {
                return valid_rules.infoArr.alpha_numeric_without_spaces.message;
            }
        }
    }
    if (valid_rules.alpha_without_special_chars === true) {
        if (!(rqfield === false && isEmptyValue(val))) {
            // taken from $ Validate plugin
            filter = /^[a-zA-Z _-]+$/;
            if (!filter.test(val)) {
                return valid_rules.infoArr.alpha_without_special_chars.message;
            }
        }
    }
    if (valid_rules.alpha_numeric_without_special_chars === true) {
        if (!(rqfield === false && isEmptyValue(val))) {
            // taken from $ Validate plugin
            filter = /^[0-9a-zA-Z _-]+$/;
            if (!filter.test(val)) {
                return valid_rules.infoArr.alpha_numeric_without_special_chars.message;
            }
        }
    }
    if (valid_rules.phone_number === true) {
        if (!(rqfield === false && isEmptyValue(val))) {
            // taken from $ Validate plugin
            filter = /^([(]{1}[0-9]{3}[)]{1}[.| |-]{0,1}|^[0-9]{3}[.|-| ]?)?[0-9]{3}(.|-| )?[0-9]{4}$/;
            if (!filter.test(val)) {
                return valid_rules.infoArr.phone_number.message;
            }
        }
    }
    if (valid_rules.zip_code === true) {
        if (!(rqfield === false && isEmptyValue(val))) {
            // taken from $ Validate plugin
            filter = /^(?:[A-Z0-9]+([- ]?[A-Z0-9]+)*)?$/;
            if (!filter.test(val)) {
                return valid_rules.infoArr.zip_code.message;
            }
        }
    }
    if (valid_rules.ip_address === true) {
        if (!(rqfield === false && isEmptyValue(val))) {
            // taken from $ Validate plugin
            filter = /^(1?d{1,2}|2([0-4]d|5[0-5]))(.(1?d{1,2}|2([0-4]d|5[0-5]))){3}$/;
            if (!filter.test(val)) {
                return valid_rules.infoArr.ip_address.message;
            }
        }
    }
    if (valid_rules.ipv4 === true) {
        if (!(rqfield === false && isEmptyValue(val))) {
            // taken from $ Validate plugin
            filter = /^(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)$/i;
            if (!filter.test(val)) {
                return valid_rules.infoArr.ipv4.message;
            }
        }
    }
    if (valid_rules.ipv6 === true) {
        if (!(rqfield === false && isEmptyValue(val))) {
            // taken from $ Validate plugin
            filter = /^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$/i;
            if (!filter.test(val)) {
                return valid_rules.infoArr.ipv6.message;
            }
        }
    }
    if (valid_rules.credit_card === true) {
        if (!(rqfield === false && isEmptyValue(val))) {
            // taken from $ Validate plugin
            filter = /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35d{3})d{11})$/;
            if (!filter.test(val)) {
                return valid_rules.infoArr.credit_card.message;
            }
        }
    }
    if (valid_rules.url === true) {
        if (!(rqfield === false && isEmptyValue(val))) {
            filter = /^(((https?)|(ftp)):\/\/([\-\w]+\.)+\w{2,3}(\/[%\-\w]+(\.\w{2,})?)*(([\w\-\.\?\\\/+@&#;`~=%!]*)(\.\w{2,})?)*\/?)/i;
            if (!filter.test(val)) {
                return valid_rules.infoArr.url.message;
            }
        }
    }
    return false;
}
function initNiceScrollBar() {
    if ($("#left_search_items").length) {
        $("#left_search_items").height($(window).height() - 170);
        $("#tbl_left_search").width($("#left_search_items").width())
        $("#left_search_items").niceScroll({
            cursoropacitymax: 0.7,
            cursorborderradius: 6,
            cursorwidth: "4px",
            zindex: 97,
            railalign: "left"
        });
    }
}
function hideNiceScrollBar() {
    if ($("#left_search_items").length) {
        $("#left_search_items").getNiceScroll().remove();
    }
}
function initLeftScrollBar(width) {
    $("#left_mainnav").height($(window).height() - 130);
    if ($("#left_mainnav").length) {
        var lm_wdth = (width) ? width : 4;
        $("#left_mainnav").niceScroll({
            cursoropacitymax: 0.7,
            cursorborderradius: 6,
            cursorwidth: lm_wdth + "px",
            horizrailenabled: false
        });
    }
}
function hideLeftScrollBar() {
    $("#left_mainnav").getNiceScroll().remove();
}
function check_editor(value, element) {
    tinyMCE.triggerSave();
    var newtext = value;
    newtext = str_replace('&nbsp;', '', newtext);
    newtext = strip_tags(newtext);
    newtext = newtext.trim();
    if (newtext.length === 0) {
        return false;
    } else {
        return true;
    }
}
function strip_tags(input, allowed) {
    allowed = (((allowed || "") + "").toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join(''); // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)
    var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi, commentsAndPhpTags = /<!--[\s\S]*?-->|<\?(?:php)?[\s\S]*?\?>/gi;
    input = ($.isArray(input)) ? input.join(", ") : input;
    return input.replace(commentsAndPhpTags, '').replace(tags, function ($0, $1) {
        return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';
    });
}
function str_replace(search, replace, subject, count) {
    var i = 0, j = 0, temp = '', repl = '', sl = 0, fl = 0, f = [].concat(search), r = [].concat(replace), s = subject, s = [].concat(s);
    var ra = Object.prototype.toString.call(r) === '[object Array]', sa = Object.prototype.toString.call(s) === '[object Array]';
    if (count) {
        this.window[count] = 0;
    }
    for (i = 0, sl = s.length; i < sl; i++) {
        if (s[i] === '') {
            continue;
        }
        for (j = 0, fl = f.length; j < fl; j++) {
            temp = s[i] + '';
            repl = ra ? (r[j] !== undefined ? r[j] : '') : r[0];
            s[i] = (temp).split(f[j]).join(repl);
            if (count && s[i] !== temp) {
                this.window[count] += (temp.length - s[i].length) / f[j].length;
            }
        }
    }
    return sa ? s : s[0];
}
function loadPageAdminHashRedirect(passed_hash) {
    window.location.hash = passed_hash;
}
function getGeneralPrice(price_p) {
    return price_p + " &#8377;";
}
function detectCaptureCameraAllow(ele_id, unique_name, module_url) {
    if (!navigator.getUserMedia) {
        $("#capture_" + ele_id).hide();
        return false;
    } else {
        var video_html = renderCaptureHTML(ele_id, unique_name, module_url);
        $("#webcamframe_" + ele_id).html(video_html);
        return true;
    }
}
function renderCaptureHTML(ele_id, unique_name, module_url) {
    var video_html = '';
    //video_html += renderCaptureVideoHTML(ele_id, mod_id, mod_add_id)
    video_html += '<div id="rendervideo_' + ele_id + '"></div>\n\
                    <div class="clear"></div>\n\
                    <div class="capture-buttons">\n\
                        <input value="' + js_lang_label.GENERIC_CAPTURE + '" name="ctrladd" type="button" class="btn btn-info" onclick="return captureCameraPhoto(\'' + ele_id + '\', \'' + unique_name + '\', \'' + module_url + '\')">\n\
                        <br /><br />\n\
                        <input value="' + js_lang_label.GENERIC_SAVE + '" name="ctrldiscard" type="button" class="btn" onclick="return saveCameraPhoto(\'' + ele_id + '\', \'' + unique_name + '\', \'' + module_url + '\')">\n\
                        <textarea name="camencimg_' + ele_id + '" id="camencimg_' + ele_id + '" style="display:none;"></textarea>\n\
                    </div>\n\
                    <div class="display-gallery" id="displaygallery_' + ele_id + '"></div>';
    return video_html;
}
function renderCaptureVideoHTML(ele_id, unique_name, module_url) {
    var video_html = '<section id="webapp_' + ele_id + '" aria-photo-filter="0">\n\
                        <div class="cam-container" id="cam_container' + ele_id + '">\n\
                            <span class="map-live" id="maplive_' + ele_id + '">' + js_lang_label.GENERIC_LIVE + '</span>\n\
                            <video id="showmonitor_' + ele_id + '" autoplay onclick="changePhotoFilter(this,\'' + ele_id + '\')" title="' + js_lang_label.GENERIC_CLICK_ME_TO_SEE_DIFFERENT_FILTERS + '"></video>\n\
                        </div>\n\
                        <p>' + js_lang_label.GENERIC_CLICK_THE_VIDEO_TO_SEE_DIFFERENT_CSS_FILTERS + '</p>\n\
                    </section>\n\
                    <canvas class="draw-cam-img" id="drawcamimg_' + ele_id + '"></canvas>';
    return video_html;
}
function initCameraPhoto(ele_id, unique_name, module_url) {
    var video_html = renderCaptureVideoHTML(ele_id, unique_name, module_url)
    $("#rendervideo_" + ele_id).html(video_html);
    $("#camencimg_" + ele_id).val("");
    $("body").attr("aria-cam-photo", ele_id);
    $.fancybox({
        content: $("#webcamframe_" + ele_id).show(),
        showCloseButton: true
    });
    var navUserMedia = navigator.getUserMedia({
        video: true
    }, gotStream, noStream);
}
function changePhotoFilter(elem, ele_id) {
    elem.className = '';
    var idx = $("#webapp_" + ele_id).attr("aria-photo-filter");
    var effect = wcfilters[idx++ % wcfilters.length];
    if (effect) {
        elem.classList.add(effect);
        $("#webapp_" + ele_id).attr("aria-photo-filter", idx);
    } else {
        $("#webapp_" + ele_id).attr("aria-photo-filter", "0");
    }
}
function gotStream(stream) {
    var cam_ele_id = $("body").attr("aria-cam-photo");
    var video = document.getElementById('showmonitor_' + cam_ele_id);
    var canvas = document.getElementById('drawcamimg_' + cam_ele_id);
    if (window.URL) {
        video.src = window.URL.createObjectURL(stream);
    } else {
        video.src = stream; // Opera.
    }
    video.onerror = function (e) {

    };
    localStream = stream; // Opera.
    stream.onended = noStream;
    video.onloadedmetadata = function (e) { // Not firing in Chrome. See crbug.com/110938.
        $('#webapp_' + cam_ele_id).css("display", "block");
    };
    // Since video.onloadedmetadata isn't firing for getUserMedia video, we have
    // to fake it.
    setTimeout(function () {
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        $('#webapp_' + cam_ele_id).css("display", "block");
        $('#drawcamimg_' + cam_ele_id).css("display", "none");
    }, 50);
}
function noStream(e) {
    var msg = js_lang_label.GENERIC_NO_CAMERA_AVAILABLE_FOR_CAPTURING_PICTURES;
    if (e == "PERMISSION_DENIED" || (e.name && e.name == "PERMISSION_DENIED")) {
        msg = js_lang_label.GENERIC_USER_DENIED_ACCESS_TO_USE_CAMERA_FOR_CAPTURING_PICTURES_C46_C46_C33;
    } else if (e == "HARDWARE_UNAVAILABLE" || (e.name && e.name == "HARDWARE_UNAVAILABLE")) {
        msg = js_lang_label.GENERIC_SYSTEM_HARDWARE_DOES_NOT_SUPPORT_FOR_CAPTURING_PICTURES_C46_C46_C33;
    }
    $.fancybox.close();
    Project.setMessage(msg, 0);
}
function captureCameraPhoto(ele_id) {
    var video = document.getElementById('showmonitor_' + ele_id);
    var canvas = document.getElementById('drawcamimg_' + ele_id);
    var ctx = canvas.getContext('2d');
    ctx.drawImage(video, 0, 0);
    var img = document.createElement('img');
    img.src = canvas.toDataURL('image/png');
    $("#camencimg_" + ele_id).val(img.src);
    $("#displaygallery_" + ele_id).html(img);
}
function saveCameraPhoto(ele_id, unique_name, module_url) {
    if ($.trim($("#camencimg_" + ele_id).val()) == "") {
        Project.setMessage(js_lang_label.GENERIC_PLEASE_CAPTURE_PHOTO_FOR_SAVING_C46_C46_C33, 0);
        return false;
    }
    $.fancybox.close();
    var req_uri = admin_url + module_url + "?";
    $.ajax({
        url: req_uri,
        type: 'POST',
        data: {
            'unique_name': unique_name,
            'type': 'webcam',
            'oldFile': $('#temp_' + ele_id).val(),
            'newFile': $("#camencimg_" + ele_id).val()
        },
        success: function (response) {
            $("#camencimg_" + ele_id).val("");
            var jparse_data = parseJSONString(response);
            if (jparse_data.success == '0') {
                Project.setMessage(jparse_data.message, 0);
            } else {
                $('#' + ele_id).val(jparse_data.uploadfile);
                $('#temp_' + ele_id).val(jparse_data.oldfile);
                displayAdminOntheFlyImage(ele_id, jparse_data);
            }
        }
    });
}
function getSetTopViewHeight() {
    if ($(".module-navigation-tabs .nav-tabs").length) {
        $(".frm-elem-block").addClass("frm-elem-tabs");
    } else {
        $(".frm-elem-block").removeClass("frm-elem-tabs");
    }
    if ($('.top-frm-tab-layout').length) {
        var $top_view_height = $('.top-frm-tab-layout').height();
        var tht = parseInt($top_view_height);
        if (!isNaN(tht) && tht > 0) {
            if (!$(".module-navigation-tabs .nav-tabs").length && !$(".frm-custm-view").length) {
                tht -= 16;
            }
            $('.top-block-spacing').css('margin-top', tht + 'px');
        } else {
            $('.top-block-spacing').css('margin-top', '0px');
        }
        return true;
    } else if ($('.top-list-tab-layout').length) {
        var $top_view_height = $('.top-list-tab-layout').height();
        var tht = parseInt($top_view_height);
        if (!isNaN(tht) && tht > 0) {
            $('.top-list-pager-space').css('margin-top', (tht - 6) + 'px');
        } else {
            $('.top-list-pager-space').css('margin-top', '0px');
        }
        return true;
    }
    return false;
}
function getCaptureDetailScript(html_id, unique_name, module_url) {
    var capture_str = "<span class='capture-webcam-photo' id='capture_" + html_id + "'>";
    capture_str += "<a href='javascript://' onclick='initCameraPhoto(\"" + html_id + "\", \"" + unique_name + "\", \"" + module_url + "\")' title='" + js_lang_label.GENERIC_CAPTURE_PHOTO + "'><span class='icon32 entypo-icon-camera'></span></a>";
    capture_str += "<div class='web-cam-frame' id='webcamframe_" + html_id + "' style='display:none'></div>";
    capture_str += "</span>";
    return capture_str;
}
function getGeneralHASHParams() {
    var hash = window.location.hash, params_obj = {};
    if (!hash) {
        return params_obj;
    }
    hash = hash.toString().replace(/%7c/gi, '|');
    var array = hash.toString().split("|");
    for (var i = 1; i < array.length; i += 2) {
        params_obj[array[i]] = array[parseInt(i) + 1];
    }
    return params_obj;
}
function isEmptyValue(val) {
    if (typeof val == "object") {
        if (val) {
            return false;
        } else {
            return true;
        }
    } else {
        if (val.match(/^\s+$/) || val === "") {
            return true;
        } else {
            return false;
        }
    }
}
function hideShowTopView($ele) {
    var mod_hash_name = $($ele).attr("aria-module-name");
    if ($($ele).hasClass('hide-top-detail-view')) {
        $('#div_main_top_detail_view').slideDown(750);
        $($ele).attr('title', js_lang_label.GENERIC_HIDE_VIEW);
        $($ele).removeClass('hide-top-detail-view').removeClass('active');
        $.cookie(mod_hash_name, null, {path: '/', expires: -1});
    } else {
        $('#div_main_top_detail_view').slideUp(750);
        $($ele).attr('title', js_lang_label.GENERIC_SHOW_VIEW);
        $($ele).addClass('hide-top-detail-view').addClass('active');
        $.cookie(mod_hash_name, '1', {path: '/', expires: 100});
    }
    setTimeout(function () {
        getSetTopViewHeight();
    }, 1000);
}
function initializeTabFocusIndex(eleObj) {
    var frm_first_box = $(eleObj).find("form:first *:input[type=text]:not('.hasDatepicker'),textarea").filter(":visible:first");
    if ($(frm_first_box).length && !$(frm_first_box).hasClass("restrict-focus") && !$(frm_first_box).hasClass("multi-container-search") && !$(frm_first_box).closest(".token-input-input-token").length) {
        if ($(frm_first_box).offset().top <= $(window).height()) {
            $(frm_first_box).focus();
        }
    }
//    //Do not remove the below code
//    if (!$(".tab-focus-parent").length || !el_general_settings.active_tab_index) {
//        return false;
//    }
//    var tabinx = 1, elecnt = 1;
//    $(".tab-focus-parent").each(function () {
//        var elecnt = $(this).find(".tab-focus-child:eq(0)").find(".tab-focus-element").length;
//        for (var i = 0; i < elecnt; i++) {
//            $(this).find(".tab-focus-child").each(function () {
//                $(this).find(".tab-focus-element:eq(" + i + ")").find("input, select, textarea").each(function () {
//                    if (!$(this).is(":hidden") && !$(this).attr("tabindex")) {
//                        $(this).attr("tabindex", tabinx);
//                        tabinx++;
//                    }
//                });
//            });
//        }
//    });
}
function printThisElementContent(ele_id, write_obj) {
    if (!$("#" + ele_id).length) {
        return false;
    }
    var print_arr = [];
    $("link[rel='stylesheet']").each(function () {
        print_arr.push($(this).attr("href"));
    });
    var base_obj = {
        overrideElementCSS: print_arr
    }
    write_obj = ($.isPlainObject(write_obj)) ? write_obj : {};
    var final_obj = $.extend({}, base_obj, write_obj);
    $("#" + ele_id).printElement(final_obj);
}
function isRedirectEqualHash(red_hash) {
    var curhash = window.location.hash;
    if (!curhash) {
        return true;
    }
    curhash = curhash.toString().substr(1);
    if (curhash == "" && red_hash == "") {
        return true;
    } else if (curhash == red_hash) {
        return true;
    }
    return false;
}
function changeSpecificHASHValue(hash, param, value) {
    if (!hash) {
        return '';
    }
    if (hash.charAt(0) == "|") {
        hash = hash.substring(1);
    }
    if (hash.charAt(hash.length - 1) == "|") {
        hash = hash.slice(1, -1)
    }
    var ajax_hash = '', temp_param = false;
    hash = hash.toString().replace(/%7c/gi, '|');
    var array = hash.toString().split("|");
    for (i = 0; i < array.length; i++) {
        if (i % 2 == 0) {
            if (array[i] == param && param != "") {
                temp_param = param;
            }
            ajax_hash += "|" + array[i];
        } else {
            if (param == temp_param && temp_param !== false) {
                ajax_hash += "|" + value;
                temp_param = false;
            } else {
                ajax_hash += "|" + array[i];
            }
        }
    }
    return ajax_hash;
}
function uploadifyFlashError() {
    var nd, cd = new Date();
    if ($.cookie(el_tpl_settings.enc_usr_var + "_uploadifyRemainder")) {
        nd = new Date($.cookie(el_tpl_settings.enc_usr_var + "_uploadifyRemainder"));
    }
    if (!(/Invalid|NaN/.test(new Date(nd))) && nd) {
        if (new Date(nd.getFullYear(), nd.getMonth(), nd.getDate(), 0, 0, 0, 0) >= new Date(cd.getFullYear(), cd.getMonth(), cd.getDate(), 0, 0, 0, 0)) {
            return false;
        }
    }
    var msg = 'Please install flash in your browser to upload files/images.';
    $("#uploadifyErrDialog").remove();

    var label_elem = '<div id="uploadifyErrDialog"></div>';
    var label_text = msg;
    var option_params = {
        title: "Flash Settings",
        width: 420,
        buttons: {
            'Remind Me Later': function () {
                $.cookie(el_tpl_settings.enc_usr_var + "_uploadifyRemainder", (new Date()));
                $(this).remove();
            },
            'Skip': function () {
                $(this).remove();
            }
        }
    }
    jqueryUIdialogBox(label_elem, label_text, option_params);
}
function getAdminEncodedURL(req_url, whole_url) {
    var ret_url = req_url, url_t;
    if (el_tpl_settings.is_enc_active == "1") {
        if (req_url != "") {
            url_t = req_url.replace(admin_url, "");
            if (url_t != "") {
                url_t = Project.modules.ajaxNavigate.encrypt(url_t);
            }
            if (whole_url == "1") {
                ret_url = admin_url + url_t;
            } else {
                ret_url = url_t;
            }
        }
    }
    return ret_url;
}
function getAdminDecodedURL(req_url, whole_url) {
    var ret_url = req_url, url_t;
    if (el_tpl_settings.is_enc_active == "1") {
        if (req_url != "") {
            url_t = req_url.replace(admin_url, "");
            if (url_t != "") {
                url_t = Project.modules.ajaxNavigate.decrypt(url_t);
            }
            if (whole_url == "1") {
                ret_url = admin_url + url_t;
            } else {
                ret_url = url_t;
            }
        }
    }
    return ret_url;
}
function callSwitchToSelf() {
    if ($("select[id='vSwitchPage'][aria-switchto-self='true']").length) {
        setTimeout(function () {
            $('#vSwitchPage').ajaxChosen({
                dataType: "json",
                type: "POST",
                url: el_form_settings.jself_switchto_url
            }, {
                loadingImg: admin_image_url + "chosen-loading.gif"
            });
        }, 1000);
    }
}
function callSwitchToParent() {
    if ($("select[id='vParentSwitchPage'][aria-switchto-parent='true']").length) {
        setTimeout(function () {
            $('#vParentSwitchPage').ajaxChosen({
                dataType: "json",
                type: "POST",
                url: el_grid_settings.jparent_switchto_url
            }, {
                loadingImg: admin_image_url + "chosen-loading.gif"
            });
        }, 1000);
    }
}
function getResponsiveTopMenu() {
    if (!$('#navTopMenu').length) {
        return false;
    }
    var js_top_width = 0;
    var js_top_width_arr = [];
    $('#navTopMenu li.top').each(function () {
        js_top_width = js_top_width + parseFloat($(this).outerWidth());
        js_top_width_arr.push($(this).outerWidth());
    })
    var js_remain_width = $(window).width() - $('.top-model-view').outerWidth() - 100;
    var js_check_top_value = 0;
    var js_new_arr = [];
    if ($('div.lang-combo').length) {
        js_check_top_value += parseFloat($('div.lang-combo').outerWidth());
    }
    if ($('#notification-menu-item').length) {
        js_check_top_value += parseFloat($('#notification-menu-item').outerWidth());
    }
    if ($('#task_notification').length) {
        js_check_top_value += parseFloat($('#task_notification').outerWidth());
    }
    if ($('#profile-menu-item').length) {
        js_check_top_value += parseFloat($('#profile-menu-item').outerWidth());
    }
    
    for (i = 0; i < js_top_width_arr.length; i++) {
        js_check_top_value = parseFloat(js_check_top_value) + parseFloat(js_top_width_arr[i]);
        if (parseFloat(js_check_top_value) > parseFloat(js_remain_width)) {
            break;
        }
        js_new_arr.push(js_top_width_arr[i]);
    }

    if (js_new_arr.length > 0 && js_top_width_arr.length != js_new_arr.length) {
        var $index_val = parseFloat(js_new_arr.length) - 3;
        $index_val = ($index_val >= 0) ? $index_val : 0; 
        var js_html_top;
        
        if($('#profile-menu-item').length){
            js_html_top = $('.top-navigation-bar').find('li.top:gt(' + $index_val + '):not(.fixed-top-menu-item)');
            $('.top-navigation-bar').find('li.top:gt(' + $index_val + '):not(.fixed-top-menu-item)').remove();
            
            if($('#notification-menu-item').length){
                $('#notification-menu-item').before('<li class="top li-dropdown" id="li_more_menus"><a id="show_more_menus" class="show-more-menus top_link hasUl show" href="javascript://"><i class="minia-icon-list-3"></i><i class="icon16 icomoon-icon-arrow-down-2"></i></a></li>');
            } else if ($('#task_notification').length){
                $('#task_notification').before('<li class="top li-dropdown" id="li_more_menus"><a id="show_more_menus" class="show-more-menus top_link hasUl show" href="javascript://"><i class="minia-icon-list-3"></i><i class="icon16 icomoon-icon-arrow-down-2"></i></a></li>');
            } else {
                $('#profile-menu-item').before('<li class="top li-dropdown" id="li_more_menus"><a id="show_more_menus" class="show-more-menus top_link hasUl show" href="javascript://"><i class="minia-icon-list-3"></i><i class="icon16 icomoon-icon-arrow-down-2"></i></a></li>');
            }
        }else{
            js_html_top = $('.top-navigation-bar').find('li.top:gt(' + $index_val + ')');
            $('.top-navigation-bar').find('li.top:gt(' + $index_val + ')').remove()
            $('#navTopMenu').append('<li class="top li-dropdown" id="li_more_menus"><a id="show_more_menus" class="show-more-menus top_link hasUl show" href="javascript://"><i class="minia-icon-list-3"></i><i class="icon16 icomoon-icon-arrow-down-2"></i></a></li>')
        }
        
        $('.top-menu').append('<ul id="vertical_dropdown_menu" class="vertical-dropdown-menu" style="display:none"></ul>')
        $('#vertical_dropdown_menu').html(js_html_top)
        $('#show_more_menus').click(function () {
            if ($('#show_more_menus').hasClass('show')) {
                $('#show_more_menus').removeClass('show');
                $('#vertical_dropdown_menu').show();
            } else {
                $('#show_more_menus').addClass('show');
                $('#vertical_dropdown_menu').hide();
            }
        });
        $(document).on('touchstart', '.parent-menu-li', function (e) {
            $(this).children("ul.sub").removeClass("children-hide").addClass("children-clicked");
        });
        $(document).on('touchmove', function (e) {
            if (!$(e.target).parents().hasClass('li-dropdown') && !$('#show_more_menus').hasClass('show') && (!$(e.target).parents().hasClass('parent-menu-li') || $(e.target).parents().hasClass('sub'))) {
                $('#show_more_menus').addClass('show');
                $('#vertical_dropdown_menu').hide();
            }
        });
        $(document).click(function (e) {
            if (!$(e.target).parents().hasClass('li-dropdown') && !$('#show_more_menus').hasClass('show') && (!$(e.target).parents().hasClass('parent-menu-li') || $(e.target).parents().hasClass('sub'))) {
                $('#show_more_menus').addClass('show');
                $('#vertical_dropdown_menu').hide();
            }
        });
        $(document).on('click', 'li[id^="parent_menu"]', function (e) {
            $('.top-navigation-bar li a.active').removeClass('active');
            $('.top-navigation-bar li a.current').removeClass('current');
            $(this).find('a:first').addClass('active');
            $(e.target).addClass("current");
        });
        $(document).on('click', 'li[id^="parent_menu"] .sub li', function (e) {
            $('.top-navigation-bar li a.active').removeClass('active');
            $('.top-navigation-bar li a.current').removeClass('current');
            $(this).parents().find('li[id^="parent_menu"]').find('a:first').addClass('active');
            $(e.target).addClass("current");
        });
        $(document).on('hover', '#navTopMenu li[id^="parent_menu"]', function () {
            if (!$('#show_more_menus').hasClass('show')) {
                $('#show_more_menus').addClass('show');
                $('#vertical_dropdown_menu').hide();
            }
        });
    }
}
function renderResizeBlocks() {
    if (!el_theme_settings.frm_resizeblock) {
        return false;
    }
    var resize_boxes = $(".frm-resize-block").length, resize_height;
    if (resize_boxes <= 1) {
        return  false;
    }
    $(".frm-resize-block:eq(0)").find(".resize-box").each(function (j) {
        resize_height = [];
        for (var i = 0; i < resize_boxes; i++) {
            resize_height[i] = $(".frm-resize-block:eq(" + i + ")").find(".resize-box:eq(" + j + ")").find(".resize-content").height();
        }
        var max_height = Math.max.apply(null, resize_height);
        for (var i = 0; i < resize_boxes; i++) {
            $(".frm-resize-block:eq(" + i + ")").find(".resize-box:eq(" + j + ")").find(".resize-content").css({"min-height": max_height + "px"});
        }
    });
}
function animateHeaderContent(a, b, c, d, e) {
    var animate_json = {};
    //a => collapse button none
    //b => collapse button semi hide
    //c => collapse button full hide
    //d => collapse button show
    //e => grid search active or not
    var conta_left = 0;
    if ($(".pad-calc-container").length) {
        conta_left = parseInt($(".pad-calc-container").css("margin-left"));
    }
    var win_wid = $(window).width();
    switch (el_tpl_settings.admin_theme) {
        case "cit":
            if (e == true) {
                animate_json['satop'] = -1;
                animate_json['salef'] = 171;
            } else {
                animate_json['satop'] = -37;
            }
            if (a == true) {
                if (e == true || e == false) {
                    if (e == true) {
                        animate_json['fhpad'] = conta_left;
                    } else {
                        animate_json['salef'] = 17;
                        animate_json['fhpad'] = conta_left + 30;
                    }
                } else {
                    animate_json['fhpad'] = conta_left;
                }
                animate_json['mdmgn'] = 0;
            } else if (b == true) {
                if (e == true || e == false) {
                    if (e == true) {
                        animate_json['fhpad'] = conta_left + 50;
                    } else {
                        animate_json['salef'] = 17;
                        animate_json['fhpad'] = conta_left + 30 + 50;
                    }
                } else {
                    animate_json['fhpad'] = conta_left + 50;
                }
                animate_json['mdmgn'] = 50;
            } else if (c == true) {
                if (e == true || e == false) {
                    if (e == true) {
                        animate_json['fhpad'] = conta_left + 30;
                    } else {
                        animate_json['salef'] = 46;
                        animate_json['fhpad'] = conta_left + 30 + 30;
                    }
                } else {
                    animate_json['fhpad'] = conta_left + 32;
                }
                animate_json['mdmgn'] = 0;
            } else if (d == true) {
                if (e == true || e == false) {
                    if (e == true) {
                        animate_json['fhpad'] = conta_left + 210;
                    } else {
                        animate_json['salef'] = 17;
                        animate_json['fhpad'] = conta_left + 210 + 30;
                    }
                } else {
                    animate_json['fhpad'] = conta_left + 210;
                }
                animate_json['mdmgn'] = 210;
            }
            animate_json['tfmin'] = parseFloat(0.91 / 100 * win_wid).toFixed(2);
            animate_json['tlmin'] = 17;
            break;
        default:
            //metronic & default
            conta_left = 2;
            if (e == true) {
                animate_json['satop'] = 2;
                animate_json['salef'] = 152;
            } else {
                animate_json['satop'] = -33;
            }
            if (a == true) {
                if (e == true || e == false) {
                    if (e == true) {
                        animate_json['fhpad'] = conta_left;
                    } else {
                        animate_json['salef'] = 2;
                        animate_json['fhpad'] = conta_left + 30;
                    }
                } else {
                    animate_json['fhpad'] = conta_left;
                }
                animate_json['mdmgn'] = conta_left;
            } else if (b == true) {
                if (e == true || e == false) {
                    if (e == true) {
                        animate_json['fhpad'] = conta_left + 55;
                    } else {
                        animate_json['salef'] = 7;
                        animate_json['fhpad'] = conta_left + 30 + 55;
                    }
                } else {
                    animate_json['fhpad'] = conta_left + 55;
                }
                animate_json['mdmgn'] = 50;
            } else if (c == true) {
                if (e == true || e == false) {
                    if (e == true) {
                        animate_json['fhpad'] = conta_left + 40;
                    } else {
                        animate_json['salef'] = 42;
                        animate_json['fhpad'] = conta_left + 30 + 40;
                    }
                } else {
                    animate_json['fhpad'] = conta_left + 40;
                }
                animate_json['mdmgn'] = 0;
            } else if (d == true) {
                if (e == true || e == false) {
                    if (e == true) {
                        animate_json['fhpad'] = conta_left + 215;
                    } else {
                        animate_json['salef'] = 7;
                        animate_json['fhpad'] = conta_left + 215 + 30;
                    }
                } else {
                    animate_json['fhpad'] = conta_left + 215;
                }
                animate_json['mdmgn'] = 210;
            }
            if ($(".top-list-tab-layout").length) {
                animate_json['tfmin'] = 0;
                animate_json['tlmin'] = 0;
            } else {
                animate_json['tfmin'] = (parseFloat(0.91 / 100 * win_wid)).toFixed(2);
                animate_json['tlmin'] = 17;
            }
            break;
    }
    var hrt_wt = 0;
    if ($(".header-right-drops").length) {
        hrt_wt = $(".header-right-drops").width();
    } else if ($(".header-right-btns").length) {
        hrt_wt = $(".header-right-btns").width();
    }
    animate_json['fhwid'] = win_wid - hrt_wt - animate_json['fhpad'] - animate_json['tfmin'] - 40;

    return animate_json;
}
function getResizedSubTabs() {
    if (!$('.module-navigation-tabs .nav-tabs').length) {
        return false;
    }
    var js_top_width = 0;
    var js_top_width_arr = [];
    $('.module-navigation-tabs .nav-tabs li').each(function () {
        js_top_width = js_top_width + parseFloat($(this).outerWidth());
        js_top_width_arr.push($(this).outerWidth());
    })
    var js_remain_width = parseFloat($(window).width()) - 100;
    if ($('#left_mainnav').length) {
        js_remain_width = parseFloat(js_remain_width) - parseFloat($('#left_mainnav').outerWidth());
    }
    /*if($('#left_search_panel').length){
     js_remain_width = parseFloat(js_remain_width) - parseFloat($('#left_search_panel').outerWidth());
     }*/
    var js_check_top_value = 0;
    var js_new_arr = [];
    for (i = 0; i < js_top_width_arr.length; i++) {
        js_check_top_value = parseFloat(js_check_top_value) + parseFloat(js_top_width_arr[i]);
        if (parseFloat(js_check_top_value) > parseFloat(js_remain_width)) {
            break;
        }
        js_new_arr.push(js_top_width_arr[i]);
    }

    if (js_new_arr.length > 0 && js_top_width_arr.length != js_new_arr.length) {
        var $index_val = parseFloat(js_new_arr.length) - 1;
        var js_html_top = $('.module-navigation-tabs .nav-tabs').find('li:gt(' + $index_val + ')');
        $('.module-navigation-tabs .nav-tabs').find('li:gt(' + $index_val + ')').remove()
        $('.module-navigation-tabs .nav-tabs').append('<li class="vertical-li-more-tabs" id="li_more_tabs"><a id="show_more_tabs" class="show" href="javascript://"><i class="minia-icon-list-3"></i><i class="icon16 icomoon-icon-arrow-down-2"></i></a></li>')
        $('#li_more_tabs').append('<ul id="new_tabs_dropdown" class="vertical-navigation-tabs" style="display:none"></ul>')
        $('#new_tabs_dropdown').html(js_html_top)
        $('#show_more_tabs').click(function () {
            if ($('#show_more_tabs').hasClass('show')) {
                $('#show_more_tabs').removeClass('show');
                $('#new_tabs_dropdown').show();
            } else {
                $('#show_more_tabs').addClass('show');
                $('#new_tabs_dropdown').hide();
            }
        });
        $(document).click(function (e) {
            if (!$(e.target).parents().hasClass('vertical-li-more-tabs') && !$('#show_more_tabs').hasClass('show')) {
                $('#show_more_tabs').addClass('show');
                $('#new_tabs_dropdown').hide();
            }
        });
    }
}
function getAdminJSFormat(type, key) {
    var fmt = '';
    switch (type) {
        case 'date':
            fmt = el_tpl_settings.admin_formats['date']['format']['dateFormat'];
            break;
        case 'date_and_time':
            if (key && key != '') {
                fmt = el_tpl_settings.admin_formats['date_and_time']['format'][key];
            } else {
                fmt = el_tpl_settings.admin_formats['date_and_time']['format']['dateFormat'];
            }
            break;
        case 'time':
            if (key && key != '') {
                fmt = el_tpl_settings.admin_formats['time']['format'][key];
            } else {
                fmt = el_tpl_settings.admin_formats['time']['format']['timeFormat'];
            }
            break;
        case 'phone':
            fmt = el_tpl_settings.admin_formats['phone_format'];
            break;
    }
    return fmt;
}
function getAdminJSMoment(type) {
    var fmt = '';
    switch (type) {
        case 'date':
            fmt = el_tpl_settings.admin_formats['date']['moment'];
            break;
        case 'date_and_time':
            fmt = el_tpl_settings.admin_formats['date_and_time']['moment'];
            break;
        case 'time':
            fmt = el_tpl_settings.admin_formats['time']['moment'];
            break;
    }
    return fmt;
}
function prepareHASHParamsURL(params) {
    var str = '';
    if (!params || !$.isPlainObject(params) || $.isEmptyObject(params)) {
        return str;
    }
    str = '';
    for (var i in params) {
        str += "|" + i + '|' + params[i];
    }
    return str;
}
function prepareQueryParamsURL(params) {
    var str = '';
    if (!params || !$.isPlainObject(params) || $.isEmptyObject(params)) {
        return str;
    }
    str = '';
    for (var i in params) {
        str += "&" + i + '=' + params[i];
    }
    return str;
}
function handleAjaxSubmitErrors(xhr) {
    if (xhr.getResponseHeader('Cit-auth-requires') === '1') {
        if (!isFancyBoxActive()) {
            document.location.href = admin_url + "" + cus_enc_url_json["user_sess_expire"];
        } else {
            parent.document.location.href = admin_url + "" + cus_enc_url_json["user_sess_expire"];
        }
    }
    if (xhr.getResponseHeader('Cit-db-error') === '1') {
        getDBErrorNotifyScreen(xhr.getResponseHeader('Cit-db-efile'));
    }
}
function parseJSONString(plain_str) {
    var json_str;
    try {
        json_str = JSON.parse(plain_str);
    } catch (err) {

    }
    return json_str;
}

function getFancyboxTPLParams() {
    var error_1 = js_lang_label.GENERIC_THE_REQUESTED_CONTENT_CANNOT_BE_LOADED;
    if (!error_1) {
        error_1 = "The requested content cannot be loaded.";
    }
    var error_2 = js_lang_label.GENERIC_PLEASE_TRY_AGAIN_LATER;
    if (!error_2) {
        error_2 = "Please try again later.";
    }
    var close_btn = js_lang_label.GENERIC_JS_CLOSE;
    if (!close_btn) {
        close_btn = "Close";
    }
    var prev_btn = js_lang_label.GENERIC_JS_PREVIOUS;
    if (!prev_btn) {
        prev_btn = "Previous";
    }
    var next_btn = js_lang_label.GENERIC_JS_NEXT;
    if (!next_btn) {
        next_btn = "Next";
    }
    var tmpl_obj = {
        tpl: {
            error: '<p class="fancybox-error">' + error_1 + '<br/>' + error_2 + '</p>',
            closeBtn: '<a title="' + close_btn + '" class="fancybox-item fancybox-close fancybox-close-1" href="javascript:;"><i class="typ-icon-cross fancybox-close-icon"></i></a>',
            next: '<a title="' + next_btn + '" class="fancybox-nav fancybox-next" href="javascript:;"><span></span></a>',
            prev: '<a title="' + prev_btn + '" class="fancybox-nav fancybox-prev" href="javascript:;"><span></span></a>'
        }
    }
    return tmpl_obj;
}
function setCustomDesignGridster() {
    var hmrg, vmrg, twd, gwd, cd_formGridster;
    hmrg = 5, vmrg = 5;
    twd = $('#scrollable_content:visible').width();
    twd = Math.floor(twd / 6);
    gwd = twd - hmrg - vmrg;
    
    if($('.custom-design-grid').length){
        cd_formGridster = $(".custom-design-grid > div.custom-design-container").gridster({
            widget_base_dimensions: [gwd, 50],
            widget_selector: 'div.custom-design-block',
            max_rows: 5000,   
            widget_margins: [hmrg, vmrg],
            resize: {
                enabled: false,
                min_size: [2, 4],
            }
        }).data('gridster').disable();
    }
}
;
// Resizing Grid Function
function resizeGridWidth() {
    if (typeof el_tpl_settings.main_grid_id == "undefined" || !el_tpl_settings.main_grid_id) {
        return false;
    }
    if (typeof el_tpl_settings.main_pager_id == "undefined" || !el_tpl_settings.main_pager_id) {
        return false;
    }
    if (typeof el_tpl_settings.main_wrapper_id == "undefined" || !el_tpl_settings.main_wrapper_id) {
        return false;
    }

    if (!$("#" + el_tpl_settings.main_grid_id).length) {
        return false;
    }

    var grid_id = el_tpl_settings.main_grid_id, pager_id = el_tpl_settings.main_pager_id, wrapper_id = el_tpl_settings.main_wrapper_id, del_width = 0, del_pager = 0;
    var auto_width = $("#" + el_tpl_settings.main_grid_id).jqGrid('getGridParam', '_autowidth');
    var main_width = $('#' + wrapper_id).width();

    var grid_left = $("#" + grid_id).offset().left;
    if (grid_left > 410) {
        grid_left = $("#main_content_div").offset().left;
        if ($("#left_search_panel").length && !$("#left_search_panel").is(":hidden")) {
            grid_left += $("#left_search_panel").width();
        }
    }

    del_width += grid_left + el_theme_settings.grid_width_dec;
    del_pager += grid_left + el_theme_settings.grid_width_dec;
    var set_grid_div_width = main_width - del_width;

    //pager width
    var pager_width = $(window).width() - del_pager;
    var top_width = main_width - 25;
    $("#" + pager_id).width(pager_width);
    $("#" + grid_id + "_toppager").width(pager_width);
    if ($("#detail_view_block").length) {
        $("#detail_view_block").width(top_width);
    }

    // grid height
    var adjustArr = [];
    if ($("#" + grid_id).offset().top > 0) {
        adjustArr[0] = ($("#" + grid_id).length) ? $("#" + grid_id).offset().top : 0;
    } else {
        adjustArr[0] = ($('.ui-jqgrid-bdiv:first').length) ? $('.ui-jqgrid-bdiv:first').offset().top : 0;
    }
    adjustArr[1] = ($("#bot_copyright").length) ? $("#bot_copyright").height() : 0;
    adjustArr[2] = ($("#" + pager_id).length) ? $("#" + pager_id).height() : 0;
    adjustArr[3] = ($(".ui-jqgrid-sdiv").find("#hbox_" + grid_id + "_jqgrid").length) ? parseInt($(".ui-jqgrid-sdiv").find("#hbox_" + grid_id + "_jqgrid").height()) : 0;

    var jtot_ht = el_theme_settings.grid_height_dec;
    $.each(adjustArr, function () {
        jtot_ht += parseInt(this) || 0;
    });
    var javail_ht = ($(window).innerHeight() - jtot_ht);
    if (javail_ht > 75) {
        jQuery("#" + grid_id).setGridHeight(javail_ht, true);
    } else {
        jQuery("#" + grid_id).setGridHeight(75, true);
    }

    var cm = $("#" + grid_id).jqGrid("getGridParam", "colModel");
    var final_div_width, col_width = 0, col_total = 0;
    for (var i in cm) {
        if (!cm[i] || !cm[i]['name']) {
            continue;
        }
        if ($.inArray(cm[i]['name'], ['cb', 'rn', 'subgrid', 'prec']) == -1 && cm[i]['hidden'] != true) {
            col_total++;
            if (!auto_width) {
                if ('widthOrg' in cm[i])
                {
                    col_width += parseInt(cm[i]['widthOrg']);
                } else
                {
                    col_width += parseInt(cm[i]['width']);
                }
            }
        }
    }
    if (auto_width) {
        col_width = el_tpl_settings.grid_column_width * col_total;
    }

    // grid width
    var $scroll_body = $(".ui-jqgrid-bdiv:first div:first");
    if (col_width > set_grid_div_width) {
        if (auto_width) {
            $("#" + el_tpl_settings.main_grid_id).setGridParam({'autowidth': false, 'shrinkToFit': false});
        }
        final_div_width = set_grid_div_width - 18;
        if ($($scroll_body).hasScrollBar()) {
            final_div_width = final_div_width - 18;
        }
        jQuery("#" + grid_id).setGridWidth(col_width, true);
        $("#hbox_" + grid_id + "_jqgrid").width(final_div_width).addClass("horizon-header-scroll");
        $("#hbox_" + grid_id + "_jqgrid").find("select").attr("aria-parent-overflow", "true");
        $($scroll_body).width(set_grid_div_width).addClass("horizon-data-scroll");
        $($scroll_body).scroll(function () {
            $("#hbox_" + grid_id + "_jqgrid").scrollLeft($($scroll_body).scrollLeft());
        });
        $("#" + pager_id).width(pager_width);
        $("#" + grid_id + "_toppager").width(pager_width);
    } else {
        if (!auto_width) {
            $("#" + el_tpl_settings.main_grid_id).setGridParam({'autowidth': true, 'shrinkToFit': true});
        }
        jQuery("#" + grid_id).setGridWidth(set_grid_div_width, true);
    }
    if (el_theme_settings.grid_searchopt) {
        var search_toolbar = $("#hbox_" + grid_id + "_jqgrid").find(".ui-search-toolbar");
        var swt;
        $(search_toolbar).find(".ui-search-input").each(function () {
            $(this).siblings(".ui-search-combo").css({"width": "auto"});
            if ($(this).find("select[id^='gs_']").length) {
                if ($(this).find(".chosen-container[id^='gs_']").length) {
                    swt = $(this).find(".chosen-container[id^='gs_']").outerWidth();
                } else {
                    swt = $(this).find("select[id^='gs_']").outerWidth();
                }
            } else {
                swt = $(this).find("input[id^='gs_']").outerWidth();
            }
            $(this).siblings(".ui-search-combo").outerWidth(swt);
        });
    }
}
// Resizing Fancy Grid Function
function resizeFancyGridWidth() {
    if (typeof el_tpl_settings.main_grid_id == "undefined" || !el_tpl_settings.main_grid_id) {
        return false;
    }
    if (typeof el_tpl_settings.main_pager_id == "undefined" || !el_tpl_settings.main_pager_id) {
        return false;
    }
    if (typeof el_tpl_settings.main_wrapper_id == "undefined" || !el_tpl_settings.main_wrapper_id) {
        return false;
    }

    if (!$("#" + el_tpl_settings.main_grid_id).length) {
        return false;
    }

    var grid_id = el_tpl_settings.main_grid_id, pager_id = el_tpl_settings.main_pager_id, wrapper_id = el_tpl_settings.main_wrapper_id, del_width = 0, del_pager = 0;
    var auto_width = $("#" + el_tpl_settings.main_grid_id).jqGrid('getGridParam', '_autowidth');
    var main_width = $('#' + wrapper_id).width();

    var grid_left = $("#" + grid_id).offset().left;
    if (grid_left > 410) {
        grid_left = $("#main_content_div").offset().left;
        if ($("#left_search_panel").length && !$("#left_search_panel").is(":hidden")) {
            grid_left += $("#left_search_panel").width();
        }
    }

    del_width += grid_left + el_theme_settings.grid_width_dec;
    del_pager += grid_left + el_theme_settings.grid_width_dec;
    var set_grid_div_width = main_width - del_width;

    //pager width
    var pager_width = $(window).width() - del_pager;
    var top_width = main_width - 25;
    $("#" + pager_id).width(pager_width);
    $("#" + grid_id + "_toppager").width(pager_width);
    if ($("#detail_view_block").length) {
        $("#detail_view_block").width(top_width);
    }
    jQuery("#" + grid_id).setGridHeight(350, true);

    var cm = $("#" + grid_id).jqGrid("getGridParam", "colModel");
    var final_div_width, col_width, col_total = 0;
    for (var i in cm) {
        if (!cm[i] || !cm[i]['name']) {
            continue;
        }
        if ($.inArray(cm[i]['name'], ['cb', 'rn', 'subgrid', 'prec']) == -1 && cm[i]['hidden'] != true) {
            col_total++;
            if (!auto_width) {
                if ('widthOrg' in cm[i])
                {
                    col_width += parseInt(cm[i]['widthOrg']);
                } else
                {
                    col_width += parseInt(cm[i]['width']);
                }
            }
        }
    }
    if (auto_width) {
        col_width = el_tpl_settings.grid_column_width * col_total;
    }

    // grid width
    var $scroll_body = $(".ui-jqgrid-bdiv:first div:first");
    if (col_width > set_grid_div_width) {
        if (auto_width) {
            $("#" + el_tpl_settings.main_grid_id).setGridParam({'autowidth': false, 'shrinkToFit': false});
        }
        final_div_width = set_grid_div_width - 18;
        if ($($scroll_body).hasScrollBar()) {
            final_div_width = final_div_width - 18;
        }
        jQuery("#" + grid_id).setGridWidth(col_width, true);
        $("#hbox_" + grid_id + "_jqgrid").width(final_div_width).addClass("horizon-header-scroll");
        $("#hbox_" + grid_id + "_jqgrid").find("select").attr("aria-parent-overflow", "true");
        $($scroll_body).width(set_grid_div_width).addClass("horizon-data-scroll");
        $($scroll_body).scroll(function () {
            $("#hbox_" + grid_id + "_jqgrid").scrollLeft($($scroll_body).scrollLeft());
        });
    } else {
        if (!auto_width) {
            $("#" + el_tpl_settings.main_grid_id).setGridParam({'autowidth': true, 'shrinkToFit': true});
        }
        jQuery("#" + grid_id).setGridWidth(set_grid_div_width, true);
    }
    if (el_theme_settings.grid_searchopt) {
        var search_toolbar = $("#hbox_" + grid_id + "_jqgrid").find(".ui-search-toolbar");
        var swt;
        $(search_toolbar).find(".ui-search-input").each(function () {
            $(this).siblings(".ui-search-combo").css({"width": "auto"});
            if ($(this).find("select[id^='gs_']").length) {
                if ($(this).find(".chosen-container[id^='gs_']").length) {
                    swt = $(this).find(".chosen-container[id^='gs_']").outerWidth();
                } else {
                    swt = $(this).find("select[id^='gs_']").outerWidth();
                }
            } else {
                swt = $(this).find("input[id^='gs_']").outerWidth();
            }
            $(this).siblings(".ui-search-combo").outerWidth(swt);
        });
    }
}
// Resizing Grid Function
function resizeSubGridWidth(sub_grid_id) {
    if (typeof el_tpl_settings.main_grid_id == "undefined" || !el_tpl_settings.main_grid_id) {
        return false;
    }
    if (typeof sub_grid_id == "undefined" || !sub_grid_id) {
        return false;
    }
    var grid_id = el_tpl_settings.main_grid_id, del_width = 85;
    var sub_auto_width = $("#" + sub_grid_id).jqGrid('getGridParam', 'autowidth');
    var main_auto_width = $("#" + el_tpl_settings.main_grid_id).jqGrid('getGridParam', 'autowidth');

    if (!sub_auto_width && !main_auto_width) {
        var set_sub_grid_width = $("#hbox_" + sub_grid_id + "_jqgrid .ui-jqgrid-htable:first").width();
        $("#gbox_" + sub_grid_id).width(set_sub_grid_width);
        $("#gview_" + sub_grid_id).width(set_sub_grid_width);
        $("#" + sub_grid_id + "_toppager").width(set_sub_grid_width);
        $("#gview_" + sub_grid_id).find(".ui-jqgrid-hdiv").width(set_sub_grid_width);
        $("#gview_" + sub_grid_id).find(".ui-jqgrid-bdiv").width(set_sub_grid_width);
    } else {
        var main_width = $("#gbox_" + el_tpl_settings.main_grid_id).width();
        var set_sub_grid_width = main_width - del_width;
        jQuery("#" + sub_grid_id).setGridWidth(set_sub_grid_width, true);
    }
}
// Select Multiple rows using shift keys //
function multiSelectHandler(sid, e) {
    var grid = $(e.target).closest("table.ui-jqgrid-btable");
    var ts = grid[0], em = e.target, sb = false;
    if (em.tagName == "LABEL" && $(em).siblings(".cbox").length) {
        if (e.shiftKey) {
            sb = true;
        }
    } else if (em.tagName == "TD" && $(em).attr("role") == "gridcell") {
        sb = true;
    } else if ($(em).hasClass("cbox")) {
        sb = true;
    }
    if (!sb) {
        return false;
    }
    var sel = grid.getGridParam('selarrrow');
    var selected = $.inArray(sid, sel) >= 0;
    if (!e.shiftKey) {
        grid.setSelection(sid, true);
    } else {
        if (e.shiftKey) {
            var six = grid.getInd(sid);
            var min = six, max = six;
            $.each(sel, function () {
                var ix = grid.getInd(this);
                if (ix < min)
                    min = ix;
                if (ix > max)
                    max = ix;
            });
            while (min <= max) {
                var row = ts.rows[min++];
                var rid = row.id;
                if (rid != sid && $.inArray(rid, sel) < 0) {
                    grid.setSelection(row.id, false);
                }
            }
        } else if (!navigator.userAgent.match(/Mobile/g) && !selected) {
            grid.resetSelection();
        }
        if (!selected) {
            grid.setSelection(sid, true);
        } else {
            grid.setSelection(sid, false);
            var osr = grid.getGridParam('onSelectRow');
            if ($.isFunction(osr)) {
                osr(sid, true);
            }
        }
    }
    return true;
}
function formatExpandableLink(cval, opt, rowObj) {
    var sub_mod = $("#" + opt.gid).jqGrid('getGridParam', 'isSubMod');
    var $retLink = cval;
    if (sub_mod == "1") {
        $retLink = '<a href="javascript://" class="expand-nesview" aria-rowid="' + opt.rowId + '" aria-alias="' + opt.colModel.name + '" >' + cval + '</a>';
    } else {
        $retLink = '<a href="javascript://" class="expand-subview" aria-rowid="' + opt.rowId + '" aria-alias="' + opt.colModel.name + '" >' + cval + '</a>';
    }
    return $retLink;
}
// unformat for edit link inline editing
function unformatExpandableLink(cval, opt, cl) {
    return cval;
}
// format for edit link
function formatAdminModuleEditLink(cval, opt, rowObj) {
    var module_url = $("#" + opt.gid).jqGrid('getGridParam', 'curModule');
    var extra = $("#" + opt.gid).jqGrid('getGridParam', 'extraHash');
    var sub_mod = $("#" + opt.gid).jqGrid('getGridParam', 'isSubMod');
    var form_edit_link = false, form_view_link = false, is_edit_popup = false, width = "75%", height = "75%";
    if (sub_mod == "1") {
        if (typeof el_subgrid_settings.permit_edit_btn != "undefined" && el_subgrid_settings.permit_edit_btn == "1") {
            form_edit_link = true;
        } else if (typeof el_subgrid_settings.permit_view_btn != "undefined" && el_subgrid_settings.permit_view_btn == "1") {
            form_view_link = true;
        }
        if (typeof el_subgrid_settings.popup_edit_form != "undefined" && el_subgrid_settings.popup_edit_form == "Yes") {
            if (el_subgrid_settings.popup_edit_size && el_subgrid_settings.popup_edit_size[0]) {
                width = el_subgrid_settings.popup_edit_size[0];
            }
            if (el_subgrid_settings.popup_edit_size && el_subgrid_settings.popup_edit_size[1]) {
                height = el_subgrid_settings.popup_edit_size[1];
            }
            is_edit_popup = true;
        }
    } else if (sub_mod == "2") {
        if (typeof el_nesgrid_settings.permit_edit_btn != "undefined" && el_nesgrid_settings.permit_edit_btn == "1") {
            form_edit_link = true;
        } else if (typeof el_nesgrid_settings.permit_view_btn != "undefined" && el_nesgrid_settings.permit_view_btn == "1") {
            form_view_link = true;
        }
        if (typeof el_nesgrid_settings.popup_edit_form != "undefined" && el_nesgrid_settings.popup_edit_form == "Yes") {
            if (el_nesgrid_settings.popup_edit_size && el_nesgrid_settings.popup_edit_size[0]) {
                width = el_nesgrid_settings.popup_edit_size[0];
            }
            if (el_nesgrid_settings.popup_edit_size && el_nesgrid_settings.popup_edit_size[1]) {
                height = el_nesgrid_settings.popup_edit_size[1];
            }
            is_edit_popup = true;
        }
    } else {
        if (opt.gid == el_tpl_settings.main_grid_id && el_grid_settings.permit_edit_btn == "1") {
            form_edit_link = true;
        } else if (opt.gid == el_tpl_settings.main_grid_id && el_grid_settings.permit_view_btn == "1") {
            form_view_link = true;
        }
        if (el_grid_settings.popup_edit_form == "Yes") {
            if (el_grid_settings.popup_edit_size && el_grid_settings.popup_edit_size[0]) {
                width = el_grid_settings.popup_edit_size[0];
            }
            if (el_grid_settings.popup_edit_size && el_grid_settings.popup_edit_size[1]) {
                height = el_grid_settings.popup_edit_size[1];
            }
            is_edit_popup = true;
        }
    }
    var $retLink = cval;
    if (form_edit_link) {
        var $editId = opt.rowId;
        var $load_url = admin_url + "#" + module_url + "|mode|" + cus_enc_mode_json['Update'] + "|id|" + $editId;
        if (extra) {
            $load_url += extra;
        }
        var popup_class = "";
        if (isFancyBoxActive() && 0) {
            popup_class = restrictFancyBoxClass();
        } else if (is_edit_popup) {
            popup_class = " fancybox-hash-iframe";
            $load_url += "|width|" + width + "|height|" + height + "|hideCtrl|true|loadGrid|" + opt.gid;
        }
        var title_attr = '';
        if (!isHTML(cval)) {
            title_attr = 'title="' + cval + '"';
        }
        $retLink = '<a class="inline-edit-link ' + popup_class + '" href="' + $load_url + '" ' + title_attr + '>' + cval + '</a>';
    } else if (form_view_link) {
        var $editId = opt.rowId;
        var $load_url = admin_url + "#" + module_url + "|mode|" + cus_enc_mode_json['View'] + "|id|" + $editId;
        if (extra) {
            $load_url += extra;
        }
        var popup_class = "";
        if (isFancyBoxActive() && 0) {
            popup_class = restrictFancyBoxClass();
        } else if (is_edit_popup) {
            popup_class = " fancybox-hash-iframe";
            $load_url += "|width|" + width + "|height|" + height + "|hideCtrl|true|loadGrid|" + opt.gid;
        }
        var title_attr = '';
        if (!isHTML(cval)) {
            title_attr = 'title="' + cval + '"';
        }
        $retLink = '<a class="inline-edit-link ' + popup_class + '" href="' + $load_url + '" ' + title_attr + '>' + cval + '</a>';
    }
    return $retLink;
}
// unformat for edit link inline editing
function unformatAdminModuleEditLink(cval, opt, cl) {
    return cval;
}
// format for edit link
function formatAdminModuleCustomEditLink(cval, opt, rowObj) {
    var sub_mod = $("#" + opt.gid).jqGrid('getGridParam', 'isSubMod');
    var $editId = opt.rowId;
    var $editname = opt.colModel.name;
    var $retLink = cval;
    if (sub_mod == "0" && el_general_settings.grid_main_link_model) {
        if (el_general_settings.grid_main_link_model[$editId] && el_general_settings.grid_main_link_model[$editId][$editname]) {
            var temp = $("<b />").html(cval);
            var $final_val = cval;
            if ($(temp).find("a").hasClass("inline-edit-link")) {
                var $final_val = $(cval).html();
            }
            var title_attr = '';
            if (!isHTML($final_val)) {
                title_attr = 'title="' + $final_val + '"';
            }
            var $load_url = el_general_settings.grid_main_link_model[$editId][$editname].link
            var $extra_attr_str = el_general_settings.grid_main_link_model[$editId][$editname].extra_attr_str;
            $retLink = '<a href="' + $load_url + '" ' + $extra_attr_str + ' ' + title_attr + '>' + $final_val + '</a>';
        }
    } else if (sub_mod == "1" && el_general_settings.grid_sub_link_model) {
        if (el_general_settings.grid_sub_link_model[$editId] && el_general_settings.grid_sub_link_model[$editId][$editname]) {
            var temp = $("<b />").html(cval);
            var $final_val = cval;
            if ($(temp).find("a").hasClass("inline-edit-link")) {
                var $final_val = $(cval).html();
            }
            var title_attr = '';
            if (!isHTML($final_val)) {
                title_attr = 'title="' + $final_val + '"';
            }
            var $load_url = el_general_settings.grid_sub_link_model[$editId][$editname].link
            var $extra_attr_str = el_general_settings.grid_sub_link_model[$editId][$editname].extra_attr_str;
            $retLink = '<a href="' + $load_url + '" ' + $extra_attr_str + ' ' + title_attr + '>' + $final_val + '</a>';
        }
    } else if (sub_mod == "2" && el_general_settings.grid_nes_link_model) {
        if (el_general_settings.grid_nes_link_model[$editId] && el_general_settings.grid_nes_link_model[$editId][$editname]) {
            var temp = $("<b />").html(cval);
            var $final_val = cval;
            if ($(temp).find("a").hasClass("inline-edit-link")) {
                var $final_val = $(cval).html();
            }
            var title_attr = '';
            if (!isHTML($final_val)) {
                title_attr = 'title="' + $final_val + '"';
            }
            var $load_url = el_general_settings.grid_nes_link_model[$editId][$editname].link
            var $extra_attr_str = el_general_settings.grid_nes_link_model[$editId][$editname].extra_attr_str;
            $retLink = '<a href="' + $load_url + '" ' + $extra_attr_str + ' ' + title_attr + '>' + $final_val + '</a>';
        }
    }

    if ($retLink == null) {
        $retLink = '';
    }
    return $retLink;
}
// unformat for edit link inline editing
function unformatAdminModuleCustomEditLink(cval, opt, cl) {
    return cval;
}
// format for lisitng data
function formatAdminListingData(cval, opt, rowObj) {
    return cval;
}
// unformat for lisitng data
function unformatAdminListingData(cval, opt, cl) {
    switch (opt.colModel.ctrl_type) {
        case 'phone_number' :
            if (!cval) {
                return cval;
            }
            var split_val = cval.split("");
            var ret_val = '';
            var test_reg = /^[a-zA-Z0-9]+$/;
            for (var i = 0; i < split_val.length; i++) {
                if (test_reg.test(split_val[i])) {
                    ret_val += split_val[i];
                }
            }
            cval = ret_val;
            break;
    }
    return cval;
}
// format for edit link
function formatAdminModuleRatingLink(cval, opt, rowObj) {
    if (!opt.colModel.ratyallow || !opt.colModel.ratyevents) {
        return cval;
    }
    var raty_events = opt.colModel.ratyevents;
    var raty_elem = $('<span />').addClass("rating-icons-block");
    activateRatingMasterEvent(raty_elem, opt.colModel.ratyevents.raty.params, opt.colModel.ratyevents.raty.hints, cval)
    var $retLink = $(raty_elem)[0].outerHTML;
    return $retLink;
}
// unformat for edit link inline editing
function unformatAdminModuleRatingLink(cval, opt, cl) {
    return cval;
}
// inline date picker integration
function inlineDateTimePicker(rowid, cellName, type) {
    var jfmtStr = $("#" + rowid + "_" + cellName).attr("format");
    var date_obj = {};
    switch (type) {
        case "date":
            date_obj['dateFormat'] = $("#" + rowid + "_" + cellName).attr("aria-date-format");
            date_obj['minDate'] = $("#" + rowid + "_" + cellName).attr("aria-min-date");
            date_obj['maxDate'] = $("#" + rowid + "_" + cellName).attr("aria-max-date");
            break;
        case "dateTime":
            date_obj['dateFormat'] = $("#" + rowid + "_" + cellName).attr("aria-date-format");
            date_obj['timeFormat'] = $("#" + rowid + "_" + cellName).attr("aria-time-format");
            date_obj['showSecond'] = $("#" + rowid + "_" + cellName).attr("aria-enable-sec");
            date_obj['ampm'] = $("#" + rowid + "_" + cellName).attr("aria-enable-ampm");
            date_obj['minDate'] = $("#" + rowid + "_" + cellName).attr("aria-min-date");
            date_obj['maxDate'] = $("#" + rowid + "_" + cellName).attr("aria-max-date");
            break;
        case "time":
            date_obj['timeFormat'] = $("#" + rowid + "_" + cellName).attr("aria-time-format");
            date_obj['showSecond'] = $("#" + rowid + "_" + cellName).attr("aria-enable-sec");
            date_obj['ampm'] = $("#" + rowid + "_" + cellName).attr("aria-enable-ampm");
            break;
    }

    activeDateTimePicker($("#" + rowid + "_" + cellName), type, date_obj);
}
function activeDateTimePicker(eleObj, type, jfmtArr) {
    switch (type) {
        case 'date' :
            var min_max_obj = {};
            if (jfmtArr['minDate'] && jfmtArr['minDate'] !== "") {
                min_max_obj["minDate"] = (jfmtArr['minDate'] == "0") ? 0 : jfmtArr['minDate'];
            }
            if (jfmtArr['maxDate'] && jfmtArr['maxDate'] !== "") {
                min_max_obj["maxDate"] = (jfmtArr['maxDate'] == "0") ? 0 : jfmtArr['maxDate'];
            }
            var base_obj = {
                dateFormat: jfmtArr['dateFormat'],
                showOn: 'focus',
                changeMonth: true,
                changeYear: true,
                yearRange: 'c-100:c+100',
                onClose: function (dateText, inst) {
                    $(this).focus();
                }
            }
            var final_obj = $.extend({}, min_max_obj, base_obj);
            $(eleObj).datepicker(final_obj);
            break;
        case 'time' :
            $(eleObj).timepicker({
                timeFormat: jfmtArr['timeFormat'],
                showSecond: (jfmtArr['showSecond'] == "true" || jfmtArr['showSecond'] == '1' || jfmtArr['showSecond'] === true) ? true : false,
                ampm: (jfmtArr['ampm'] == "true" || jfmtArr['ampm'] == '1' || jfmtArr['ampm'] === true) ? true : '',
                showOn: 'focus',
                onClose: function (dateText, inst) {
                    $(this).focus();
                }
            });
            break;
        case 'dateTime' :
            var min_max_obj = {};
            if (jfmtArr['minDate'] && jfmtArr['minDate'] !== "") {
                min_max_obj["minDate"] = (jfmtArr['minDate'] == "0") ? 0 : jfmtArr['minDate'];
            }
            if (jfmtArr['maxDate'] && jfmtArr['maxDate'] !== "") {
                min_max_obj["maxDate"] = (jfmtArr['maxDate'] == "0") ? 0 : jfmtArr['maxDate'];
            }
            var base_obj = {
                //controlType: 'select',
                dateFormat: jfmtArr['dateFormat'],
                timeFormat: jfmtArr['timeFormat'],
                showSecond: (jfmtArr['showSecond'] == "true" || jfmtArr['showSecond'] == '1' || jfmtArr['showSecond'] === true) ? true : false,
                ampm: (jfmtArr['ampm'] == "true" || jfmtArr['ampm'] == '1' || jfmtArr['ampm'] === true) ? true : '',
                showOn: 'focus',
                changeMonth: true,
                changeYear: true,
                yearRange: 'c-100:c+100',
                onClose: function (dateText, inst) {
                    $(this).focus();
                }
            }
            var final_obj = $.extend({}, min_max_obj, base_obj);
            $(eleObj).datetimepicker(final_obj);
            break;
    }
    if (el_general_settings.mobile_platform) {
        $(eleObj).attr('readonly', true);
    }
}
// date picker format json
function getInlineDatePickerFormat(type, jfmtStr) {
    jfmtStr = $.trim(jfmtStr);
    var jaccArr = ["dateFormat", "timeFormat", "showSecond", "ampm"];
    var jsfmt = {}
    switch (type) {
        case 'date' :
            jfmtStr = (jfmtStr) ? jfmtStr : "yy-mm-dd";
            jsfmt['dateFormat'] = jfmtStr;
            break;
        case 'dateTime' :
            jsfmt['dateFormat'] = "yy-mm-dd";
            jsfmt['timeFormat'] = 'HH:mm:ss';
            jsfmt['showSecond'] = false;
            jsfmt['ampm'] = false;
            if (jfmtStr) {
                var jsplArr = jfmtStr.split("|||");
                jsfmt['dateFormat'] = jsplArr[0];
                jsfmt['timeFormat'] = jsplArr[1];
                var timeStr = $.trim(jsplArr[2]);
                if (timeStr) {
                    var jtimeArr = timeStr.split("@");
                    if (jtimeArr[0] == 'ampm' || jtimeArr[0] == 'showSecond') {
                        jsfmt[jtimeArr[0]] = (jtimeArr[1] == true) ? true : false;
                    }
                }
            }
            break;
        case 'time' :
            jsfmt['timeFormat'] = 'HH:mm:ss';
            jsfmt['showSecond'] = false;
            jsfmt['ampm'] = false;
            if (jfmtStr) {
                var jsplArr = jfmtStr.split("|||");
                jsfmt['timeFormat'] = jsplArr[0];
                var timeStr_1 = $.trim(jsplArr[1]);
                var timeStr_2 = $.trim(jsplArr[2]);
                if (timeStr_1) {
                    var jtimeArr_1 = timeStr_1.split("@");
                    if (jtimeArr_1[0] == 'ampm' || jtimeArr_1[0] == 'showSecond') {
                        jsfmt[jtimeArr_1[0]] = jtimeArr_1[1];
                    }
                }
                if (timeStr_2) {
                    var jtimeArr_2 = timeStr_2.split("@");
                    if (jtimeArr_2[0] == 'ampm' || jtimeArr_2[0] == 'showSecond') {
                        jsfmt[jtimeArr_2[0]] = jtimeArr_2[1];
                    }
                }
            }
            break;
    }
    return jsfmt;
}
// filtration for date wise
function filterDateWiseResult(grid_id) {
    var sfilter_grid = $("#" + grid_id);
    sfilter_grid[0].triggerToolbar();
}
function inlineColorPicker(rowid, cellName, type) {
    var color_preview = $("#" + rowid + "_" + cellName).attr("color_preview");
    activateColorPicker($("#" + rowid + "_" + cellName), color_preview);
}
function activateColorPicker(colorobj, color_preview_param) {
    $(colorobj).colpick({
        eventName: 'click',
        onShow: function (colpkr) {
            $(colpkr).fadeIn(500);
            if (color_preview_param == "Yes")
                $(this).css('backgroundColor', $(this).val());
            return false;
        },
        onHide: function (colpkr) {
            $(colpkr).fadeOut(500);
            return false;
        },
        onChange: function (hsb, hex, rgb, el, bySetColor) {
            //$('#".$htmlID."').css('backgroundColor', '#' + hex);
        },
        onSubmit: function (hsb, hex, rgb, el) {
            $(el).val('#' + hex);
            //$(el).val("rgb("+rgb.r+","+rgb.g+","+rgb.b+")");
            if (color_preview_param == "Yes")
                $(el).css('backgroundColor', '#' + hex);

            $(el).unbind("focus");
            $(el).colpickHide();
            $(el).focus();
        }
    }).bind('keyup', function () {
        $(this).colpickSetColor(this.value);
    });

    $(colorobj).bind('focus', function () {
        $(this).colpickShow();
        $(this).colpickSetColor(this.value);
        //$(this).colpickSetColor(getColorValObject(this.value,"rgb"));
    });
    if (el_general_settings.mobile_platform) {
        $(colorobj).attr('readonly', true);
    }
}
// for export functionality
function getColumnsDropDown(grid_id, id, name, cls, extra) {
    var column_arr = $.grep($("#" + grid_id).getGridParam("colModel"), function (n, i) {
        if (n.name == 'subgrid' || n.name == 'cb' || n.name == 'prec') {
            return false;
        }
        return true;
    });
    var str = "<select id='" + id + "' name='" + name + "' class='" + cls + "' " + extra + " >";
    for (var j in column_arr) {
        if ('export' in column_arr[j] && column_arr[j]['export'] == false) {
            continue;
        }
        if (column_arr[j]['hidden']) {
            str += "<option value=" + column_arr[j]['name'] + ">" + column_arr[j]['label'] + "</option>";
        } else {
            str += "<option value=" + column_arr[j]['name'] + " selected=true>" + column_arr[j]['label'] + "</option>";
        }
    }
    str += "</select>";
    return str;
}
function exportData(grid_id, option, export_url) {
    var export_len = $("input[name='export_type']:checked").length;
    var export_mode = $("input[name='export_mode']:checked").val();
    if (export_mode == "selected" && $("#export_columns_list").multiselect("getChecked").length <= 0) {
        jQuery.jgrid.info_dialog(js_lang_label.GENERIC_GRID_EXPORT, js_lang_label.GENERIC_GRID_PLEASE_SELECT_ATLEAST_ONE_COLUMN, js_lang_label.GENERIC_GRID_OK);
        return false;
    } else if (export_mode == "selected" && !export_len) {
        jQuery.jgrid.info_dialog(js_lang_label.GENERIC_GRID_EXPORT, js_lang_label.GENERIC_PLEASE_SELECT_EXPORT_TYPE, js_lang_label.GENERIC_GRID_OK);
        return false;
    } else {
        var columns = base64_encode((JSON.stringify($("#export_columns_list").val())));
        var options = '';
        if (option == 'thispage') {
            options = 'page=' + $('#' + grid_id).getGridParam('page') + '&rowlimit=' + $("select[role='listbox']").val();
        } else if (option == 'selected') {
            var selids = $('#' + grid_id).getGridParam('selarrrow');
            if ($.isArray(selids) && selids.length > 0) {
                options = 'id=' + selids.join(",") + "&selected=true";
            } else {
                var unselected_msg = (js_lang_label.GENERIC_GRID_PLEASE_SELECT_ATLEAST_ONE_RECORD) ? js_lang_label.GENERIC_GRID_PLEASE_SELECT_ATLEAST_ONE_RECORD : "Please select atleast one record";
                jQuery.jgrid.info_dialog(js_lang_label.GENERIC_GRID_EXPORT, unselected_msg, js_lang_label.GENERIC_GRID_OK);
                return false;
            }
        }
        if ($("#" + grid_id + " tr").length <= 0) {
            jQuery.jgrid.info_dialog(js_lang_label.GENERIC_GRID_EXPORT, js_lang_label.GENERIC_THERE_IS_NO_DATA_TO_EXPORT, js_lang_label.GENERIC_GRID_OK);
        } else {
            var filters = base64_encode($("#" + grid_id).getGridParam("postData").filters);
            var sidx = $("#" + grid_id).getGridParam("postData").sidx;
            var sord = $("#" + grid_id).getGridParam("postData").sord;
            var sdef = $("#" + grid_id).getGridParam("postData").sdef;
            if (filters == undefined) {
                filters = '';
            }
            var export_type = $("input[name='export_type']:checked").val();
            var orientation = $("input[name='orientation_type']:checked").val();

            export_url += '&filters=' + filters + '&fields=' + columns + '&' + options + '&sidx=' + sidx + '&sord=' + sord + '&sdef=' + sdef;
            export_url += '&export_type=' + export_type + '&export_mode=' + export_mode + '&orientation=' + orientation;
            window.location = export_url;
        }
        $("#exportmod_" + grid_id).dialog("destroy").remove();
    }
}
function printData(grid_id, option, print_url, params) {
    var options = '';
    if (option == 'thispage') {
        options = 'page=' + $('#' + grid_id).getGridParam('page') + '&rowlimit=' + $("select[role='listbox']").val();
    } else if (option == 'selected') {
        var selids = $('#' + grid_id).getGridParam('selarrrow');
        if ($.isArray(selids) && selids.length > 0) {
            options = 'id=' + selids.join(",") + "&selected=true";
        } else {
            var unselected_msg = (js_lang_label.GENERIC_GRID_PLEASE_SELECT_ATLEAST_ONE_RECORD) ? js_lang_label.GENERIC_GRID_PLEASE_SELECT_ATLEAST_ONE_RECORD : "Please select atleast one record";
            jQuery.jgrid.info_dialog(js_lang_label.GENERIC_GRID_PRINT, unselected_msg, js_lang_label.GENERIC_GRID_OK);
            return false;
        }
    }
    if ($("#" + grid_id + " tr").length <= 0) {
        jQuery.jgrid.info_dialog(js_lang_label.GENERIC_GRID_PRINT, js_lang_label.GENERIC_THERE_IS_NO_DATA_TO_PRINT, js_lang_label.GENERIC_GRID_OK);
    } else {
        var filters = base64_encode($("#" + grid_id).getGridParam("postData").filters);
        var sidx = $("#" + grid_id).getGridParam("postData").sidx;
        var sord = $("#" + grid_id).getGridParam("postData").sord;
        var sdef = $("#" + grid_id).getGridParam("postData").sdef;
        if (filters == undefined) {
            filters = '';
        }
        var final_url = print_url + '&filters=' + filters + '&' + options + '&sidx=' + sidx + '&sord=' + sord + '&sdef=' + sdef;
        openCustomURLFancyBox(final_url, params);
    }
    $("#printmod_" + grid_id).dialog("destroy").remove();
}
// restoring all editable cells before editing any cell
function restoreBeforeEditedCell(eleObj, jrow, jcol, jsave) {
    if (jrow == 0 || jcol == 0) {
        return;
    }
    if (eleObj.p.savedRow.length == 0) {
        return;
    }
    var cc = $("td:eq(" + jcol + ")", eleObj.rows[jrow]);
    $(cc).empty().attr("tabindex", "-1");
    $(eleObj).jqGrid("setCell", eleObj.rows[jrow].id, jcol, jsave, false, false, true);
}
// Add new record from url
function adminAddNewRecord(module_url, jextra, is_popup, grid_id, size) {
    var $load_url = module_url + "|mode|" + cus_enc_mode_json["Add"];
    if (jextra) {
        $load_url += jextra;
    }
    var $add_form_url = $load_url;
    if (is_popup == "Yes") {
        var width = "75%", height = "75%";
        if (size && size[0]) {
            width = size[0]
        }
        if (size && size[1]) {
            height = size[1]
        }
        $add_form_url += "|width|" + width + "|height|" + height + "|hideCtrl|true|loadGrid|" + grid_id;
        var params_obj = getHASHToFancyParams($add_form_url);
        var req_uri = convertHASHToURL($add_form_url, true);
        openURLFancyBox(req_uri, params_obj);
    } else {
        window.location.hash = $add_form_url;
    }
}
// Status change
function adminStatusChange(grid_id, status, ids, mod_edit_url, status_lang, callbacks, messages) {
    if (!$.isArray(ids) || !ids.length) {
        var alert_msg = js_lang_label.GENERIC_PLEASE_SELECT_REC_TO_CHANGE_STATUS;
        if ('status_alert' in messages && messages['status_alert'] != "") {
            alert_msg = messages.status_alert;
        }
        jqueryUIalertBox(ci_js_validation_message(alert_msg, '#STATUS#', status_lang), status_lang);
        return false;
    }
    var popup_msg = js_lang_label.GENERIC_ARE_YOU_WANT_CHANGE_STATUS;
    if ('status_popup' in messages && messages['status_popup'] != "") {
        popup_msg = messages.status_popup;
    }
    var label_elem = '<div />';
    var label_text = ci_js_validation_message(popup_msg, '#STATUS#', status_lang);
    var postdata = {
        "oper": "status",
        "status": status,
        "id": ids.join(","),
        "AllRowSelected": $('#selAllRows').val(),
        "filters": $("#" + grid_id).getGridParam("postData").filters
    };
    if (callbacks['before_status_change'] && $.isFunction(window[callbacks['before_status_change']])) {
        var addpost = window[callbacks['before_status_change']](postdata);
        if ($.isPlainObject(addpost)) {
            postdata = $.extend(addpost, postdata);
        }
    }
    var option_params = {
        title: status_lang,
        dialogClass: "dialog-confirm-box grid-status-btn-cnf",
        buttons: [
            {
                text: js_lang_label.GENERIC_OK,
                bt_type: 'ok',
                click: function () {
                    $.ajax({
                        url: mod_edit_url,
                        type: 'POST',
                        data: postdata,
                        success: function (response) {
                            var resdata = parseJSONString(response);
                            if (resdata.success == 'true') {
                                reloadListGrid(grid_id);
                                var $jq_errmsg = ci_js_validation_message(js_lang_label.GENERIC_RECORDS_STATUS_CHANGED_SUCCESS, '#STATUS#', status_lang);
                                if (resdata.message != "") {
                                    $jq_errmsg = resdata.message;
                                }
                                refreshLeftSearchPanel(grid_id);
                            } else {
                                var $jq_errmsg = ci_js_validation_message(js_lang_label.GENERIC_ERROR_IN_UPDATE_STATUS, '#STATUS#', status_lang);
                                if (resdata.message != "") {
                                    $jq_errmsg = resdata.message;
                                }
                            }
                            gridReportMessage(resdata.success, $jq_errmsg);
                            if (callbacks['after_status_change'] && $.isFunction(window[callbacks['after_status_change']])) {
                                window[callbacks['after_status_change']](response);
                            }
                        }
                    });
                    $(this).remove();
                }
            },
            {
                text: js_lang_label.GENERIC_CANCEL,
                bt_type: 'cancel',
                click: function () {
                    $(this).remove();
                }
            }
        ]
    }
    jqueryUIdialogBox(label_elem, label_text, option_params);
}
function gridReportMessage(success, message) {
    var jmgcls = 2;
    if (success === "true") {
        jmgcls = 1;
    } else if (success === "false") {
        jmgcls = 0;
    } else {
        jmgcls = (!success) ? 0 : 1;
    }    
    Project.setMessage(message, jmgcls, 10);
}
function hideAdminDataCheckBox(grid_id, js_list_arr) {
    for (var i in js_list_arr) {
        if (!js_list_arr[i]) {
            continue;
        }
        var ad_chkid = "jqg_" + grid_id + "_" + js_list_arr[i];
        $("#" + grid_id).find("input[type='checkbox'][id='" + ad_chkid + "']").remove();
    }
}
function getAdminImageTooltip(grid_id) {
    if (grid_id) {
        if ($("#" + grid_id).find('.inline-image-jip').length) {
            $("#" + grid_id).find('.inline-image-jip').each(function () {
                var js_image_src = $(this).attr('src');
                $(this).qtip({
                    content: "<img src='" + js_image_src + "' alt='Image' />"
                });
            });
        } else {
            $("#" + grid_id).find('.anc-image-jip').each(function () {
                var js_image_src = $(this).attr('href');
                $(this).qtip({
                    content: "<img src='" + js_image_src + "' alt='Image' />"
                });
            });
        }
    } else {
        if ($('.inline-image-jip').length) {
            $('.inline-image-jip').each(function () {
                var js_image_src = $(this).attr('src');
                $(this).qtip({
                    content: "<img src='" + js_image_src + "' alt='Image' />"
                });
            });
        } else {
            $('.anc-image-jip').each(function () {
                var js_image_src = $(this).attr('href');
                $(this).qtip({
                    content: "<img src='" + js_image_src + "' alt='Image' />"
                });
            });
        }
    }
}
function getColorValObject(val, type) {
    var obj = "";
    if (val != "" && type != "") {
        if (type == "rgb") {
            val = val.replace('rgb(', '');
            val = val.replace(')', '');
            if (val != "") {
                obj = {};
                var val_arr = val.split(",");
                obj.r = (val_arr[0] !== undefined) ? val_arr[0] : 0;
                obj.g = (val_arr[1] !== undefined) ? val_arr[1] : 0;
                obj.b = (val_arr[2] !== undefined) ? val_arr[2] : 0;
            }
        }
    }
    return obj;
}
//tooltip for listing
function createTooltipHeading(id, url, params) {
    if (!$("#anc_module_help").length) {
        return;
    }
    var txt = $("#txt_module_help").val();
    $("#anc_module_help").popover({
        placement: "bottom",
        html: 'true',
        content: txt
    }).click(function (e) {
        e.preventDefault();
    });
}
//grid cell editing events
function initGridChosenEvent(elem, opt) {
    $(elem).chosen({
        allow_single_deselect: true
    });
}
function initEditGridAjaxChosenEvent(elem) {
    $(elem).chosen({
        allow_single_deselect: true
    });
    var add_id = $(elem).attr("aria-unique-name");
    var update_id = $(elem).attr("aria-update-id");
    var g_id = $(elem).attr("aria-grid-id");
    var sub_mod = $("#" + g_id).jqGrid('getGridParam', 'isSubMod');
    var ajax_chosen_url = el_grid_settings.ajax_data_url;
    if (sub_mod == "1") {
        ajax_chosen_url = el_subgrid_settings.ajax_data_url;
    } else if (sub_mod == "2") {
        ajax_chosen_url = el_nesgrid_settings.ajax_data_url;
    }
    $(elem).ajaxChosen({
        dataType: 'json',
        type: 'POST',
        url: ajax_chosen_url + "&mode=" + cus_enc_mode_json['Update'] + "&unique_name=" + add_id + "&id=" + update_id
    }, {
        loadingImg: admin_image_url + "chosen-loading.gif"
    });
}
function initEditGridMaskingEvent(elem) {
    var ph_fmt = $(elem).attr("aria-phone-format");
    $(elem).mask(ph_fmt);
}
function initEditGridElasticEvent(elem) {
    setTimeout(function () {
        $(elem).elastic().css('height', '20px');
    }, 50);
}
//grid search events
function initSearchGridAjaxChosenEvent(elem, opt) {
    var g_id, add_id;
    $(elem).chosen({
        allow_single_deselect: true
    });
    if (opt && opt['attr'] && opt['attr']['aria-grid-id']) {
        add_id = opt['attr']["aria-unique-name"];
        g_id = opt['attr']["aria-grid-id"];
    } else {
        add_id = $(elem).attr("aria-unique-name");
        g_id = $(elem).attr("aria-grid-id");
    }
    var sub_mod = $("#" + g_id).jqGrid('getGridParam', 'isSubMod');
    var ajax_chosen_url = el_grid_settings.ajax_data_url;
    if (sub_mod == "1") {
        ajax_chosen_url = el_subgrid_settings.ajax_data_url;
    } else if (sub_mod == "2") {
        ajax_chosen_url = el_nesgrid_settings.ajax_data_url;
    }
    $(elem).ajaxChosen({
        dataType: 'json',
        type: 'POST',
        url: ajax_chosen_url + "&mode=" + cus_enc_mode_json['Search'] + "&unique_name=" + add_id
    }, {
        loadingImg: admin_image_url + "chosen-loading.gif"
    });
}
function initSearchGridDateRangePicker(elem, opt) {
    var g_id, d_format, d_ranges, d_months, d_weeks;
    if (opt && opt['attr'] && opt['attr']['aria-grid-id']) {
        g_id = opt['attr']["aria-grid-id"]
        d_format = opt['attr']["aria-date-format"];
    } else {
        g_id = $(elem).attr("aria-grid-id");
        d_format = $(elem).attr("aria-date-format");
    }
    d_ranges = getRangePickerQuickList();
    d_months = getRangePickerMonthNames();
    d_weeks = getRangePickerWeekNames();
    $(elem).daterangepicker({
        ranges: d_ranges,
        opens: 'left',
        timePicker: false,
        timePickerIncrement: 1,
        timePicker12Hour: true,
        showDropdowns: true,
        locale: {
            format: d_format,
            separator: ' to ',
            applyLabel: js_lang_label.GENERIC_GRID_SUBMIT,
            fromLabel: js_lang_label.GENERIC_FROM,
            toLabel: js_lang_label.GENERIC_TO,
            customRangeLabel: js_lang_label.GENERIC_CUSTOM_RANGE,
            daysOfWeek: d_weeks,
            monthNames: d_months,
            firstDay: 1
        },
        dateLimit: false,
        autoUpdateInput: false,
        linkedCalendars: false
    });
    $(elem).on('apply.daterangepicker', function (ev, picker) {
        $(this).val(picker.startDate.format(picker.locale.format) + picker.locale.separator + picker.endDate.format(picker.locale.format));
        if ($(this).attr('id').substr(0, 3) === 'gs_') {
            filterDateWiseResult(g_id);
        } else {
            $(this).trigger('change');
        }
    });
    $(elem).on('cancel.daterangepicker', function (ev, picker) {
        $(this).val('');
        if ($(this).attr('id').substr(0, 3) === 'gs_') {
            filterDateWiseResult(g_id);
        } else {
            $(this).trigger('change');
        }
    });
    $(elem).on('hidden', function (e) {
        $(e.target).trigger('change');
    });
    if (el_general_settings.mobile_platform) {
        $(elem).attr('readonly', true);
    }
}
function initSearchGridDateTimePicker(elem, opt) {
    var g_id, d_format, d_ranges, d_months, d_weeks, e_time;
    if (opt && opt['attr'] && opt['attr']['aria-grid-id']) {
        g_id = opt['attr']["aria-grid-id"]
        d_format = opt['attr']["aria-date-format"];
        e_time = opt['attr']['aria-enable-time'];
    } else {
        g_id = $(elem).attr("aria-grid-id");
        d_format = $(elem).attr("aria-date-format");
        e_time = $(elem).attr('aria-enable-time');
    }
    d_ranges = getRangePickerQuickList();
    d_months = getRangePickerMonthNames();
    d_weeks = getRangePickerWeekNames();
    $(elem).daterangepicker({
        ranges: d_ranges,
        opens: 'left',
        timePicker: true,
        timePickerIncrement: 1,
        timePicker12Hour: (e_time == 'false') ? false : true,
        showDropdowns: true,
        locale: {
            format: d_format,
            separator: ' to ',
            applyLabel: js_lang_label.GENERIC_APPLY,
            cancelLabel: js_lang_label.GENERIC_CLEAR,
            fromLabel: js_lang_label.GENERIC_FROM,
            toLabel: js_lang_label.GENERIC_TO,
            customRangeLabel: js_lang_label.GENERIC_CUSTOM_RANGE,
            daysOfWeek: d_weeks,
            monthNames: d_months,
            firstDay: 1
        },
        dateLimit: false,
        autoUpdateInput: false,
        linkedCalendars: false
    });
    $(elem).on('apply.daterangepicker', function (ev, picker) {
        $(this).val(picker.startDate.format(picker.locale.format) + picker.locale.separator + picker.endDate.format(picker.locale.format));
        if ($(this).attr('id').substr(0, 3) === 'gs_') {
            filterDateWiseResult(g_id);
        } else {
            $(this).trigger('change');
        }
    });
    $(elem).on('cancel.daterangepicker', function (ev, picker) {
        $(this).val('');
        if ($(this).attr('id').substr(0, 3) === 'gs_') {
            filterDateWiseResult(g_id);
        } else {
            $(this).trigger('change');
        }
    });
    $(elem).on('hidden', function (e) {
        $(e.target).trigger('change');
    });
    if (el_general_settings.mobile_platform) {
        $(elem).attr('readonly', true);
    }
}
function initSearchGridTimePicker(elem, opt) {
    var g_id, t_format, e_sec, e_ampm;
    if (opt && opt['attr'] && opt['attr']['aria-grid-id']) {
        g_id = opt['attr']["aria-grid-id"]
        t_format = opt['attr']["aria-time-format"];
        e_sec = opt['attr']['aria-enable-sec'];
        e_ampm = opt['attr']['aria-enable-ampm'];
    } else {
        g_id = $(elem).attr("aria-grid-id");
        t_format = $(elem).attr('aria-time-format');
        e_sec = $(elem).attr('aria-enable-sec');
        e_ampm = $(elem).attr('aria-enable-ampm');
    }
    $(elem).timepicker({
        timeFormat: t_format,
        showSecond: (e_sec == "false") ? false : true,
        ampm: (e_ampm == "false") ? false : true,
        showOn: 'focus',
        onClose: function (dateText, inst) {
            if ($(elem).attr('id').substr(0, 3) === 'gs_') {
                filterDateWiseResult(g_id);
            } else {
                $(elem).trigger('change');
            }
        }
    });
    if (el_general_settings.mobile_platform) {
        $(elem).attr('readonly', true);
    }
}
function initSearchGridColorPickerEvent(elem, opt) {
    var g_id;
    if (opt && opt['attr'] && opt['attr']['aria-grid-id']) {
        g_id = opt['attr']["aria-grid-id"]
    } else {
        g_id = $(elem).attr("aria-grid-id");
    }
    $(elem).colpick({
        onShow: function (colpkr) {
            $(colpkr).fadeIn(500);
            return false;
        },
        onHide: function (colpkr) {
            $(colpkr).fadeOut(500);
            //return false;
        },
        onSubmit: function (hsb, hex, rgb, el) {
            $(el).val('#' + hex);
            $(el).colpickHide();
            $(el).focus();
            if ($(elem).attr('id').substr(0, 3) === 'gs_') {
                $("#" + g_id).get(0).triggerToolbar();
            } else {
                $(elem).trigger('change');
            }
        }
    }).bind('keyup', function () {
        $(this).colpickSetColor(this.value);
    }).bind('focus', function () {
        $(this).colpickSetColor(this.value);
    });
    if (el_general_settings.mobile_platform) {
        $(elem).attr('readonly', true);
    }
}
function initSearchGridAutoCompleteEvent(elem, opt) {
    var g_id, add_id;
    if (opt && opt['attr'] && opt['attr']['aria-grid-id']) {
        g_id = opt['attr']["aria-grid-id"];
        add_id = opt['attr']["aria-unique-name"];
        if (!$(elem).attr("name")) {
            $(elem).attr("name", $(elem).attr("id"));
        }
    } else {
        g_id = $(elem).attr("aria-grid-id");
        add_id = $(elem).attr("aria-unique-name");
    }
    var sub_mod = $("#" + g_id).jqGrid('getGridParam', 'isSubMod');
    var auto_comp_url = el_grid_settings.auto_complete_url;
    if (sub_mod == "1") {
        auto_comp_url = el_subgrid_settings.auto_complete_url;
    } else if (sub_mod == "2") {
        auto_comp_url = el_nesgrid_settings.auto_complete_url;
    }
    setTimeout(function () {
        $(elem).tokenInput(auto_comp_url + "&mode=" + cus_enc_mode_json['Search'] + "&unique_name=" + add_id, {
            minChars: '1',
            propertyToSearch: 'val',
            theme: 'facebook',
            //tokenLimit:'1',
            hintText: js_lang_label.GENERIC_TYPE_IN_A_SEARCH_TERM,
            noResultsText: js_lang_label.GENERIC_NO_RESULTS,
            searchingText: js_lang_label.GENERIC_SEARCHING,
            preventDuplicates: true,
            //prePopulate:par_obj.prePopulate,
            onAdd: function (item) {
                if ($(elem).attr('id').substr(0, 3) === 'gs_') {
                    $("#" + g_id).get(0).triggerToolbar();
                } else {
                    $(elem).trigger('change');
                }
            },
            onDelete: function (item) {
                if ($(elem).attr('id').substr(0, 3) === 'gs_') {
                    $("#" + g_id).get(0).triggerToolbar();
                } else {
                    $(elem).trigger('change');
                }
            }
        });
    }, 500);
}
function initSearchRatingMasterEvent(elem, opt) {
    var g_id, rnumber, rhalf, rprecision, ricons, rhints, rhints_arr;
    if (opt && opt['attr'] && opt['attr']['aria-grid-id']) {
        g_id = opt['attr']["aria-grid-id"];
        rnumber = opt['attr']["aria-raty-number"];
        rhalf = opt['attr']["aria-raty-half"];
        rprecision = opt['attr']["aria-raty-precision"];
        ricons = opt['attr']["aria-raty-icons"];
        rhints = opt['attr']["aria-raty-hints"];
        rhints_arr = rhints.split(",");
    } else {
        g_id = $(elem).attr("aria-grid-id");
        rnumber = $(elem).attr("aria-raty-number");
        rhalf = $(elem).attr("aria-raty-half");
        rprecision = $(elem).attr("aria-raty-precision");
        ricons = $(elem).attr("aria-raty-icons");
        rhints = $(elem).attr("aria-raty-hints");
        rhints_arr = rhints.split(",");
    }
    var raty_elem = $('<span />').addClass("rating-icons-block");
    $(raty_elem).raty({
        number: rnumber,
        half: (rhalf == '1') ? true : false,
        precision: (rprecision == '1') ? true : false,
        cancel: true,
        cancelPlace: 'right',
        cancelHint: '',
        cancelOff: 'cancel-custom-off.png',
        cancelOn: 'cancel-custom-on.png',
        starOff: (ricons == "bulbs") ? 'bulb-off.png' : 'star-off.png',
        starOn: (ricons == "bulbs") ? 'bulb-on.png' : 'star-on.png',
        starHalf: 'star-half.png',
        hints: rhints_arr,
        target: elem,
        targetKeep: true,
        click: function (score, evt) {
            if ($(elem).attr('id').substr(0, 3) === 'gs_') {
                $("#" + g_id).get(0).triggerToolbar();
            } else {
                $(elem).trigger('change');
            }
        }
    });
    setTimeout(function () {
        $(elem).after(raty_elem);
        $(elem).hide();
    }, 500);
}
function formatChosenAjaxResults(dataset) {
    var results = [];
    var data = dataset.results;
    if (dataset.type == "optgroup") {
        $.each(data, function (i, grp) {
            var group = {// here's a group object:
                group: true,
                text: grp.text, // label for the group
                items: [] // individual options within the group
            };
            $.each(grp.items, function (j, val) {
                group.items.push({
                    value: val.id,
                    text: val.text
                });
            });
            results.push(group);
        });
    } else {
        $.each(data, function (i, val) {
            results.push({
                value: val.id,
                text: val.text
            });
        });
    }
    return results;
}
function activateRatingMasterEvent(eleobj, base, hints, score) {
    var basic_params = assignEventParams(base);
    var function_params = {
        score: score,
        hints: ($.isArray(hints)) ? hints : hints.split(",")
    }
    var final_params = $.extend({}, basic_params, function_params);
    $(eleobj).raty(final_params);
}
function niceScrollHomePageBlocks() {
    if (!$(".home-page-boxes").length) {
        return;
    }
    $(".box-height").each(function () {
        //$(this).getNiceScroll().remove();
        $(this).niceScroll({
            cursoropacitymax: 0.7,
            cursorborderradius: 6,
            cursorwidth: "4px",
            zindex: 97
        });
    })
}
function check_user_platform() {
    var js_user_agent = navigator.userAgent.match(/(iPad|iPhone|iPod|android|blackberry|webos)/i) ? true : false;
    if (js_user_agent) {
        return true;
    } else {
        return false;
    }
}
function initTopGridAjaxOptions(elem, opt, add_id, u_id, e_id, g_id) {
    if (opt.dataUrl !== false && opt.dataUrl != "") {
        $.ajax({
            url: opt.dataUrl,
            type: 'POST',
            success: function (data) {
                $(elem).html(data);
                if (typeof opt.selected == "string" && opt.selected != "") {
                    var selected = parseJSONString(opt.selected);
                    $(elem).val(selected);
                }
                $(elem).trigger("chosen:updated");
            }
        });
    }
}
function initTopGridChosenEvent(elem, opt, add_id, u_id, e_id, g_id) {
    $(elem).chosen({
        allow_single_deselect: true,
        placeholder_text_multiple: " "
    });
    if (opt.dataUrl !== false && opt.dataUrl != "") {
        initTopGridAjaxOptions(elem, opt, add_id, u_id, e_id, g_id);
    } else {
        if (typeof opt.selected == "string" && opt.selected != "") {
            var selected = parseJSONString(opt.selected);
            $(elem).val(selected);
            $(elem).trigger("chosen:updated");
        }
    }
}
function initTopGridAjaxChosenEvent(elem, opt, add_id, u_id, e_id, g_id) {
    var g_id, add_id;
    $(elem).chosen({
        allow_single_deselect: true
    });
    var sub_mod = $("#" + g_id).jqGrid('getGridParam', 'isSubMod');
    var ajax_chosen_url = el_grid_settings.ajax_data_url;
    if (sub_mod == "1") {
        ajax_chosen_url = el_subgrid_settings.ajax_data_url;
    } else if (sub_mod == "2") {
        ajax_chosen_url = el_nesgrid_settings.ajax_data_url;
    }
    $(elem).ajaxChosen({
        dataType: 'json',
        type: 'POST',
        url: ajax_chosen_url + "&mode=" + cus_enc_mode_json['Search'] + "&unique_name=" + add_id
    }, {
        loadingImg: admin_image_url + "chosen-loading.gif"
    });
    if (opt.dataUrl !== false && opt.dataUrl != "") {
        initTopGridAjaxOptions(elem, opt, add_id, u_id, e_id, g_id);
    } else {
        if (typeof opt.selected == "string" && opt.selected != "") {
            var selected = parseJSONString(opt.selected);
            $(elem).val(selected);
            $(elem).trigger("chosen:updated");
        }
    }
}
function initTopGridDateRangePicker(elem, opt, add_id, u_id, e_id, g_id) {
    var d_format = opt.format, d_ranges, d_months, d_weeks;
    d_format = (d_format) ? d_format : "MMMM DD, YYYY";
    d_ranges = getRangePickerQuickList();
    d_months = getRangePickerMonthNames();
    d_weeks = getRangePickerWeekNames();
    $(elem).daterangepicker({
        ranges: d_ranges,
        opens: 'left',
        timePicker: false,
        timePickerIncrement: 1,
        timePicker12Hour: true,
        showDropdowns: true,
        locale: {
            format: d_format,
            separator: ' to ',
            applyLabel: js_lang_label.GENERIC_GRID_SUBMIT,
            fromLabel: js_lang_label.GENERIC_FROM,
            toLabel: js_lang_label.GENERIC_TO,
            customRangeLabel: js_lang_label.GENERIC_CUSTOM_RANGE,
            daysOfWeek: d_weeks,
            monthNames: d_months,
            firstDay: 1
        },
        dateLimit: false,
        autoUpdateInput: false,
        linkedCalendars: false
    });
    $(elem).on('apply.daterangepicker', function (ev, picker) {
        $(this).val(picker.startDate.format(picker.locale.format) + picker.locale.separator + picker.endDate.format(picker.locale.format));
        triggerTopFilterEvent(g_id, add_id, picker.startDate.format('YYYY-MM-DD') + picker.locale.separator + picker.endDate.format('YYYY-MM-DD'));
    });
    $(elem).on('cancel.daterangepicker', function (ev, picker) {
        $(this).val('');
        triggerTopFilterEvent(g_id, add_id, '');
    });
}
function initTopGridDateTimePicker(elem, opt, add_id, u_id, e_id, g_id) {
    var d_format = opt.format, e_time = opt.time, d_ranges, d_months, d_weeks;
    d_format = (d_format) ? d_format : "MMMM DD, YYYY HH:mm:ss";
    d_ranges = getRangePickerQuickList();
    d_months = getRangePickerMonthNames();
    d_weeks = getRangePickerWeekNames();
    $(elem).daterangepicker({
        ranges: d_ranges,
        opens: 'left',
        timePicker: true,
        timePickerIncrement: 1,
        timePicker12Hour: (e_time == 'false') ? false : true,
        showDropdowns: true,
        locale: {
            format: d_format,
            separator: ' to ',
            applyLabel: js_lang_label.GENERIC_GRID_SUBMIT,
            fromLabel: js_lang_label.GENERIC_FROM,
            toLabel: js_lang_label.GENERIC_TO,
            customRangeLabel: js_lang_label.GENERIC_CUSTOM_RANGE,
            daysOfWeek: d_weeks,
            monthNames: d_months,
            firstDay: 1
        },
        dateLimit: false,
        autoUpdateInput: false,
        linkedCalendars: false
    });
    $(elem).on('apply.daterangepicker', function (ev, picker) {
        $(this).val(picker.startDate.format(picker.locale.format) + picker.locale.separator + picker.endDate.format(picker.locale.format));
        triggerTopFilterEvent(g_id, add_id, picker.startDate.format('YYYY-MM-DD HH:mm:ss') + picker.locale.separator + picker.endDate.format('YYYY-MM-DD HH:mm:ss'));
    });
    $(elem).on('cancel.daterangepicker', function (ev, picker) {
        $(this).val('');
        triggerTopFilterEvent(g_id, add_id, '');
    });
}
function initTopGridColorPickerEvent(elem, opt, add_id, u_id, e_id, g_id) {
    $(elem).colpick({
        onShow: function (colpkr) {
            $(colpkr).fadeIn(500);
            return false;
        },
        onHide: function (colpkr) {
            $(colpkr).fadeOut(500);
            //return false;
        },
        onSubmit: function (hsb, hex, rgb, el) {
            $(el).val('#' + hex);
            $(el).colpickHide();
            $(el).focus();
            triggerTopFilterEvent(g_id, add_id, $(elem).val());
        }
    }).bind('keyup', function () {
        $(this).colpickSetColor(this.value);
    }).bind('focus', function () {
        $(this).colpickSetColor(this.value);
    });
    if (el_general_settings.mobile_platform) {
        $(elem).attr('readonly', true);
    }
}
function initTopGridAutoCompleteEvent(elem, opt, add_id, u_id, e_id, g_id) {
    var sub_mod = $("#" + g_id).jqGrid('getGridParam', 'isSubMod');
    var auto_comp_url = el_grid_settings.auto_complete_url;
    if (sub_mod == "1") {
        auto_comp_url = el_subgrid_settings.auto_complete_url;
    } else if (sub_mod == "2") {
        auto_comp_url = el_nesgrid_settings.auto_complete_url;
    }
    var prePopulate;
    if (typeof opt.selected == "string" && opt.selected != "") {
        var prePopulate = JSON.parse(opt.selected);
    }
    setTimeout(function () {
        $(elem).tokenInput(auto_comp_url + "&mode=" + cus_enc_mode_json['Search'] + "&unique_name=" + u_id, {
            minChars: '1',
            propertyToSearch: 'val',
            theme: 'facebook',
            //tokenLimit:'1',
            hintText: js_lang_label.GENERIC_TYPE_IN_A_SEARCH_TERM,
            noResultsText: js_lang_label.GENERIC_NO_RESULTS,
            searchingText: js_lang_label.GENERIC_SEARCHING,
            preventDuplicates: true,
            prePopulate: prePopulate,
            onAdd: function (item) {
                triggerTopFilterEvent(g_id, add_id, $(elem).val(), $(elem).data("tokenInputObject").getTokens());
            },
            onDelete: function (item) {
                triggerTopFilterEvent(g_id, add_id, $(elem).val(), $(elem).data("tokenInputObject").getTokens());
            }
        });
    }, 500);
}
function triggerTopFilterEvent(grid_id, key, val, txt) {
    var post_data = $("#" + grid_id).jqGrid("getGridParam", "postData");
    var filters = (post_data && post_data.filters) ? parseJSONString(post_data.filters) : {};
    var grid = $("#" + grid_id), filt, ranges = {};

    ranges['key'] = key;
    ranges['val'] = val;
    ranges['txt'] = txt;
//    if($("select.topfilter-container").length){
//        $("select.topfilter-container").find("option:selected").each(function(){
//            ranges['txt'].push($(this).text());
//        });
//    }
    filt = {
        groupOp: "AND",
        rules: (filters && filters.rules) ? filters.rules : [],
        entrys: (filters && filters.entrys) ? filters.entrys : "",
        range: ranges
    };
    grid[0].p.search = true;
    $.extend(grid[0].p.postData, {
        filters: JSON.stringify(filt)
    });
    reloadListGrid(grid_id, [{
            page: 1,
            current: true
        }]);
}
function adminCustomButtonAction(ids, alert_json, confirm_json, grid_id, ext_uri, evtObj, gridObj) {
    if (alert_json && $.isPlainObject(alert_json)) {
        if (!$.isArray(ids) || !ids.length) {
            jqueryUIalertBox(alert_json.body, alert_json.title, alert_json.button[0], alert_json.width, alert_json.height);
            return false;
        }
    }
    if (confirm_json.type == "redirect" || confirm_json.type == "module") {
        var id_param, btn_url, href_url_arr, params_obj, req_uri
        id_param = (confirm_json.id) ? confirm_json.id : 'id';
        btn_url = confirm_json.url;
        if (confirm_json.ext) {
            if (btn_url.indexOf("?") != -1) {
                btn_url += "&" + confirm_json.id + "=" + ids.join(',');
            } else {
                btn_url += "?" + confirm_json.id + "=" + ids.join(',');
            }
            btn_url += prepareQueryParamsURL(confirm_json.params);
        } else {
            btn_url += "|" + confirm_json.id + "|" + ids.join(',');
            btn_url += prepareHASHParamsURL(confirm_json.params);
        }
        if (confirm_json.open == "same") {
            window.location.href = btn_url;
        } else if (confirm_json.open == "new") {
            window.open(btn_url, '_blank');
        } else if (confirm_json.open == "popup") {
            if (confirm_json.ext) {
                href_url_arr = btn_url.split("?");
                params_obj = getQueryToFancyParams(href_url_arr[1]);
                req_uri = href_url_arr[1];
            } else {
                href_url_arr = btn_url.split("#");
                params_obj = getHASHToFancyParams(href_url_arr[1]);
                req_uri = convertHASHToURL(href_url_arr[1]);
            }
            if (confirm_json.width) {
                params_obj['width'] = confirm_json.width;
            }
            if (confirm_json.height) {
                params_obj['height'] = confirm_json.height;
            }
            if (confirm_json.type == "redirect") {
                openAjaxURLFancyBox(req_uri, params_obj);
            } else {
                openCustomURLFancyBox(req_uri, params_obj);
            }
        }
    } else if (confirm_json.type == "callback") {
        if (confirm_json.callback && $.isFunction(window[confirm_json.callback])) {
            window[confirm_json.callback](ids, evtObj, gridObj);
        }
    } else if (confirm_json.type == "confirm") {
        if (confirm_json.body.type == "general" || confirm_json.body.type == "extended") {
            $.ajax({
                url: admin_url + cus_enc_url_json["general_grid_render_action"] + '?' + ext_uri,
                type: 'POST',
                data: {
                    id: ids.join(','),
                    render_module: confirm_json.module,
                    render_type: confirm_json.body.type,
                    render_value: confirm_json.body.value
                },
                success: function (data) {
                    adminCustomButtonRender(ids, confirm_json, data, grid_id, ext_uri);
                }
            });
        } else {
            adminCustomButtonRender(ids, confirm_json, confirm_json.body.value, grid_id, ext_uri);
        }
    }
}
function adminCustomButtonRender(ids, confirm_json, rhtml, grid_id, ext_uri) {
    var content = '<form name="frmcustomdialog" id="frmcustomdialog" method="post" enctype="multipart/form-data" onsubmit="return false">';
    content += '<input type="hidden" name="id" value="' + (ids.join(',')) + '"/>';
    content += '<input type="hidden" name="action_module" value="' + (confirm_json.module) + '"/>';
    content += '<input type="hidden" name="action_type" value="' + (confirm_json.action.type) + '"/>';
    content += '<input type="hidden" name="action_value" value="' + (confirm_json.action.value) + '"/>';
    content += rhtml;
    content += '</form>';

    var label_elem = '<div />';
    var label_text = content;
    var option_params = {
        title: confirm_json.title,
        width: (confirm_json.width) ? confirm_json.width : 300,
        height: (confirm_json.height) ? confirm_json.height : "auto",
        closeOnEscape: false,
        dialogClass: "dialog-confirm-box grid-confirm-popup grid-custom-btn-popup",
        buttons: [{
                text: (confirm_json.button[0]) ? confirm_json.button[0] : js_lang_label.GENERIC_GRID_SUBMIT,
                bt_type: 'ok',
                click: function () {
                    Project.show_adaxloading_div();
                    $.ajax({
                        url: admin_url + cus_enc_url_json["general_grid_submit_action"] + '?' + ext_uri,
                        type: 'POST',
                        data: $("#frmcustomdialog").serialize(),
                        success: function (data) {
                            var respData = parseJSONString(data), $dialog_msg;
                            if (respData.load_grid) {
                                if ($("#" + respData.load_grid).length) {
                                    var sort_mode = (respData.sort_mode) ? respData.sort_mode : 1;
                                    reloadListGrid(respData.load_grid, null, sort_mode);
                                }
                            }
                            if (respData.red_hash) {
                                loadAdminAddUpdateControl(respData);
                            }
                            if (respData.callback) {
                                if ($.isFunction(window[respData.callback])) {
                                    window[respData.callback](respData);
                                }
                            }
                            gridReportMessage(respData.success, respData.message);
                        },
                        complete: function () {
                            Project.hide_adaxloading_div();
                        }
                    });
                    $(this).remove();
                }
            }, {
                text: (confirm_json.button[1]) ? confirm_json.button[1] : js_lang_label.GENERIC_GRID_CANCEL,
                bt_type: 'cancel',
                click: function () {
                    $(this).remove();
                }
            }]
    }
    $(".grid-confirm-popup").remove();
    $("#frmcustomdialog").parent().remove();
    jqueryUIdialogBox(label_elem, label_text, option_params);
}
function setHideColumnSettings(grid_id, col_model, top_model) {
    var i, j, t_name;
    for (i = 0; i < col_model.length; i++) {
        t_name = col_model[i]['name'];
        if ($.inArray(t_name, ['cb', 'rn', 'subgrid', 'prec']) != -1) {
            continue;
        }
        if ("hideme" in col_model[i]) {
            if (col_model[i]['hideme'] == true) {
                col_model[i]['search'] = false;
                col_model[i]['export'] = false;
                if ($.isArray(top_model) && top_model.length > 0) {
                    for (j = 0; j < top_model.length; j++) {
                        if (top_model[j]['name'] == t_name) {
                            top_model.splice(j, 1);
                            break;
                        }
                    }
                }
            }
        }
    }
}
function setSavedSearchSettings(id, code, list, slug) {
    var is_found = false;
    if (!list || !$.isArray(list)) {
        return is_found;
    }
    if (!slug) {
        for (var i in list) {
            if (list[i]['default'] == "Yes") {
                slug = list[i]['slug'];
                break;
            }
        }
        if (!slug) {
            return is_found;
        }
    }
    for (var i in list) {
        if (list[i]['slug'] == slug) {
            var data = list[i]['value'];
            if (data && $.isPlainObject(data)) {
                is_found = true;
                if (data.grid_view) {
                    setLocalStore(code + "_gv", data.grid_view);
                }
                if (data.quick_search) {
                    setLocalStore(code + "_st", data.quick_search);
                }
                if (data.col_positions) {
                    setLocalStore(code + "_cp", JSON.stringify(data.col_positions), true);
                }
                if (data.col_selection) {
                    setLocalStore(code + "_cs", JSON.stringify(data.col_selection), true);
                }
                if (data.col_widths) {
                    setLocalStore(code + "_cw", JSON.stringify(data.col_widths), true);
                }
                if (data.search_filters) {
                    data['search_filters']['postData']['filters'] = JSON.stringify(data['search_filters']['postData']['filters']);
                    setLocalStore(code + "_sh", JSON.stringify(data.search_filters), true);
                }
                if (data.left_search) {
                    setLocalStore(code + "_sv", JSON.stringify(data.left_search), true);
                }
            }
        }
    }
    return is_found;
}
function triggerSavedSearchForm(id, code) {
    var search_code = code + '_manual';
    var content = '<form name="frmsavesearchdialog" id="frmsavesearchdialog" method="post" enctype="multipart/form-data" onsubmit="return false">';
    content += '<input type="hidden" name="search_code" value="' + search_code + '"/>';
    content += '<div class="save-search-form">';
    content += '<div><div>Title <em class="errormsg">*</em></div><div><input type="text" name="save_search_title" id="save_search_title" class="save-search-title"/></div></div>';
    content += '<div><div>Comments</div><div><textarea name="save_search_comments" id="save_search_comments" class="save-search-comments"></textarea></div></div>';
    content += '<div><textarea style="display:none;" name="save_search_preferences" id="save_search_preferences" class="save-search-preferences"></textarea></div>';
    content += '<div><div class="save-mark-container"><input type="checkbox" name="save_search_default" id="save_search_default" value="Yes" class="regular-checkbox save-search-default"/>';
    content += '<label for="save_search_default"></label><label for="save_search_default" class="save-mark-label">Make As Default</label></div></div>';
    content += '</div>';
    content += '</form>';

    var label_elem = '<div id="dialog-savesearch" class="dialog-savesearch" />';
    var label_text = content;
    var option_params = {
        title: js_lang_label.GENERIC_GRID_SAVE_SEARCH,
        width: 450,
        height: "auto",
        closeOnEscape: true,
        dialogClass: "dialog-confirm-box grid-confirm-popup grid-savesearch-popup",
        buttons: [{
                text: js_lang_label.GENERIC_GRID_SAVE,
                bt_type: 'ok',
                click: function () {
                    if ($("#save_search_title").val() != "") {
                        Project.show_adaxloading_div();
                        $("#save_search_title").removeClass("error");
                        var that = this, preferences = {};
                        preferences['grid_view'] = getLocalStore(code + "_gv");
                        preferences['quick_search'] = getLocalStore(code + "_st");
                        preferences['col_positions'] = parseJSONString(getLocalStore(code + "_cp"));
                        preferences['col_selection'] = parseJSONString(getLocalStore(code + "_cs"));
                        preferences['col_widths'] = parseJSONString(getLocalStore(code + "_cw"));
                        preferences['search_filters'] = parseJSONString(getLocalStore(code + "_sh"));
                        preferences['left_search'] = parseJSONString(getLocalStore(code + "_sv"));
                        if (!$.isPlainObject(preferences['search_filters'])) {
                            preferences['search_filters'] = {
                                "postData": {}
                            };
                        }
                        preferences['search_filters']['postData']['filters'] = parseJSONString(preferences['search_filters']['postData']['filters']);
                        preferences['search_filters']['postData']['columns'] = parseJSONString(preferences['search_filters']['postData']['columns']);
                        $("#save_search_preferences").val(JSON.stringify(preferences));
                        $.ajax({
                            url: admin_url + cus_enc_url_json["general_grid_save_search_action"],
                            type: 'POST',
                            data: $("#frmsavesearchdialog").serialize(),
                            success: function (data) {
                                var respData = parseJSONString(data);
                                gridReportMessage(respData.success, respData.message);
                                if (respData.success) {
                                    $(that).remove();
                                    reloadCurrentListPage("add", respData.data);
                                }
                            },
                            complete: function () {
                                Project.hide_adaxloading_div();
                            }
                        });
                    } else {
                        $("#save_search_title").addClass("error").focus();
                    }
                }
            }, {
                text: js_lang_label.GENERIC_GRID_CANCEL,
                bt_type: 'cancel',
                click: function () {
                    $(this).remove();
                }
            }],
        close: function (event, ui)
        {
            $(this).dialog('destroy').remove()
        }
    }
    destroySaveSearchDialogs();
    jqueryUIdialogBox(label_elem, label_text, option_params);
}
function triggerSavedSearchList(id, code, settings) {
    var list, slug, chk_attr, btn_class, index_url, extra_hstr, slug_url, search_code;
    search_code = code + '_manual';
    list = settings['search_list'];
    slug = settings['search_slug'];
    index_url = settings['index_page_url'];
    if (settings['extra_hstr'] != "") {
        index_url += settings['extra_hstr'];
        if (index_url.charAt(index_url.length - 1) == "|") {
            index_url = index_url.slice(0, -1);
        }
    }

    $(document).off('click', '.search-list-row');
    $(document).on('click', '.search-list-row', function (e) {
        var search_slug = $(this).attr("data-search-url");
        window.location.hash = search_slug;
        $(".grid-searchlist-popup").remove();
    });

    $(document).off('click', '.btn-search-view');
    $(document).on('click', '.btn-search-view', function (e) {
        $(".grid-searchlist-popup").remove();
    });

    $(document).off('click', '.btn-search-del');
    $(document).on('click', '.btn-search-del', function (e) {
        deleteSavedSearchItem($(this).attr("data-id"), $(this).attr("data-code"), this);
    });

    $(document).off('click', '.search-make-default');
    $(document).on('click', '.search-make-default', function (e) {
        updateSavedSearchItem($(this).attr("data-id"), $(this).attr("data-code"), this);
    });

    var content = '<div class="save-search-container">';
    content += '<div class="save-search-list">';
    if ($.isArray(list) && list.length) {
        content += '<table class="responsive table table-bordered save-search-tbl">';
        for (var i in list) {
            btn_class = '', chk_attr = '';
            if (list[i]['slug'] == slug) {
                btn_class = 'active';
            }
            if (list[i]['default'] == "Yes") {
                chk_attr = 'checked=true';
            }
            slug_url = index_url + '|search|' + list[i]['slug'];
            content += '<tr>';
            content += '<td width="70%" class="search-list-row" data-search-url="' + slug_url + '"><div class="search-list-title">' + list[i]['name'] + '</div><div class="search-list-comment">' + list[i]['comment'] + '<div></td>';
            content += '<td width="10%"><div align="center"><input type="checkbox" data-id="' + list[i]['id'] + '" data-code="' + search_code + '" name="search_make_default" id="' + list[i]['slug'] + '" class="regular-checkbox search-make-default" title="' + js_lang_label.GENERIC_MAKE_AS_DEFAULT + '" ' + chk_attr + '><label for="' + list[i]['slug'] + '"></label></div></td>';
            content += '<td width="10%"><div align="center"><a href="' + admin_url + '#' + slug_url + '" class="btn ' + btn_class + ' btn-search-view" title="' + js_lang_label.GENERIC_GRID_VIEW + '"><span class="icon18 iconic-icon-eye"></span></div></td>';
            content += '<td width="10%"><div align="center"><a href="javascript://" data-id="' + list[i]['id'] + '" data-code="' + search_code + '" class="btn btn-search-del" title="' + js_lang_label.GENERIC_GRID_DELETE + '"><span class="icon15 brocco-icon-trashcan"></span</div></td>';
            content += '</tr>';
        }
        content += '</table>';
    } else {
        content += '<div align="center" class="errormsg">' + js_lang_label.GENERIC_NO_SEARCH_PREFERENCES_SAVED_YET + '</div>';
    }
    content += '</div>';
    content += '</div>';

    var label_elem = '<div id="dialog-searchlist" class="dialog-searchlist" />';
    var label_text = content;
    var option_params = {
        title: js_lang_label.GENERIC_GRID_SEARCH_LIST,
        width: 500,
        height: "auto",
        closeOnEscape: true,
        dialogClass: "dialog-confirm-box grid-confirm-popup grid-searchlist-popup",
        buttons: false,
        open: function (event, ui) {
            $('.save-search-tbl a:first').blur();
        },
        close: function (event, ui)
        {
            $(this).dialog('destroy').remove();
        }
    }
    destroySaveSearchDialogs();
    jqueryUIdialogBox(label_elem, label_text, option_params);
}
function updateSavedSearchItem(id, code, obj) {
    var label_elem = '<div />';
    var label_text = js_lang_label.GENERIC_ARE_YOU_WANT_MAKE_THIS_AS_DEFAULT;
    var value = $(obj).is(":checked") ? "Yes" : "No";
    if (value == "No") {
        label_text = "Are you sure want to remove from default?";
    }
    var option_params = {
        title: js_lang_label.GENERIC_MAKE_AS_DEFAULT,
        dialogClass: "dialog-confirm-box grid-confirm-popup grid-setsearch-popup",
        buttons: [{
                text: js_lang_label.GENERIC_GRID_OK,
                bt_type: 'ok',
                click: function () {
                    if (value == "Yes") {
                        if ($("input[name=search_make_default]:checked").length > 1) {
                            $("input[name=search_make_default]:checked").removeAttr("checked");
                            $(obj).prop("checked", "checked");
                        }
                    }
                    Project.show_adaxloading_div();
                    $.ajax({
                        url: admin_url + cus_enc_url_json["general_grid_update_search_action"],
                        type: 'POST',
                        data: {
                            'search_code': code,
                            'search_id': id,
                            'value': value,
                            'type': 'default'
                        },
                        success: function (data) {
                            var respData = parseJSONString(data);
                            gridReportMessage(respData.success, respData.message);
                            if (respData.success) {
                                reloadCurrentListPage("edit", {"id": id});
                            }
                        },
                        complete: function () {
                            Project.hide_adaxloading_div();
                            destroySaveSearchDialogs();
                        }
                    });
                    $(this).remove();
                }
            }, {
                text: js_lang_label.GENERIC_CANCEL,
                bt_type: 'cancel',
                click: function () {
                    $(this).remove();
                    if (value == "No") {
                        $(obj).attr("checked", "checked");
                    } else {
                        if ($("input[name=search_make_default]:checked").length > 1) {
                            $(obj).removeAttr("checked");
                        }
                    }
                }
            }]
    }
    jqueryUIdialogBox(label_elem, label_text, option_params);
}
function deleteSavedSearchItem(id, code, obj) {
    var label_elem = '<div />';
    var label_text = js_lang_label.GENERIC_ARE_YOU_SURE_WANT_TO_DELETE_THIS;
    var option_params = {
        title: js_lang_label.GENERIC_GRID_DELETE,
        dialogClass: "dialog-confirm-box grid-confirm-popup grid-delsearch-popup",
        buttons: [{
                text: js_lang_label.GENERIC_GRID_DELETE,
                bt_type: 'delete',
                click: function () {
                    Project.show_adaxloading_div();
                    $.ajax({
                        url: admin_url + cus_enc_url_json["general_grid_delete_search_action"],
                        type: 'POST',
                        data: {
                            'search_code': code,
                            'search_id': id
                        },
                        success: function (data) {
                            var respData = parseJSONString(data);
                            gridReportMessage(respData.success, respData.message);
                            if (respData.success) {
                                reloadCurrentListPage("delete", {"id": id});
                            }
                        },
                        complete: function () {
                            Project.hide_adaxloading_div();
                            destroySaveSearchDialogs();
                        }
                    });
                    $(this).remove();
                }
            }, {
                text: js_lang_label.GENERIC_CANCEL,
                bt_type: 'cancel',
                click: function () {
                    $(this).remove();
                }
            }]
    }
    jqueryUIdialogBox(label_elem, label_text, option_params);
}
function destroySaveSearchDialogs() {
    if ($("#dialog-savesearch").data("dialog")) {
        $("#dialog-savesearch").data("dialog").destroy();
    }
    if ($("#dialog-searchlist").data("dialog")) {
        $("#dialog-searchlist").data("dialog").destroy();
    }
    $("#dialog-savesearch").remove();
    $("#dialog-searchlist").remove();
}
function reloadCurrentListPage(mode, data) {
    var index_hash;
    index_hash = el_grid_settings['index_page_url'];
    if (el_grid_settings['extra_hstr'] != "") {
        index_hash += el_grid_settings['extra_hstr'];
        if (index_hash.charAt(index_hash.length - 1) == "|") {
            index_hash = index_hash.slice(0, -1);
        }
    }
    index_hash += '|_|' + (new Date().getTime());
    if (mode == "add") {
        if (data && $.isPlainObject(data) && "slug" in data) {
            index_hash += '|search|' + data.slug;
        }
    } else if (mode == "delete") {
        setLocalStore(el_grid_settings.enc_location + '_sh', '{}', true);
    }
    window.location.hash = index_hash;
}
function initAutoRefreshGrid(module, refresh) {
    if (refresh != "Yes" || !$(".grid-table-view").length || !$("[data-list-name='" + module + "']").length) {
        $("[data-list-name='" + module + "']").off('mousemove');
        $("[data-list-name='" + module + "']").off('keypress');
        $("[data-list-name='" + module + "']").off('click');
        return;
    }
    $("[data-list-name='" + module + "']").on('mousemove', function (e) {
        gridRefreshTime = 0;
    });
    $("[data-list-name='" + module + "']").on('keypress', function (e) {
        gridRefreshTime = 0;
    });
    $("[data-list-name='" + module + "']").on('click', function (e) {
        gridRefreshTime = 0;
    });

    var interval = el_tpl_settings.list_refresh_interval / 2;
    gridAutoRefresh = setInterval(function () {
        gridRefreshTime += interval;
        if (gridRefreshTime > el_tpl_settings.list_refresh_interval) {
            gridRefreshTime = 0;
            reloadListGrid(el_tpl_settings.main_grid_id);
        }
    }, interval);
}
function stopAutoRefreshGrid() {
    try {
        clearInterval(gridAutoRefresh);
    } catch (err) {

    }
}
function switchModulePrintPage(module_url, code, extra_qstr) {
    Project.show_adaxloading_div();
    $.ajax({
        url: module_url + "?" + extra_qstr,
        type: 'POST',
        data: {
            'layout': code
        },
        success: function (data) {
            $("#print_container").html(data);
        },
        complete: function () {
            Project.hide_adaxloading_div();
        }
    });
}
function applyGridScrollPosition(module, grid_id) {
    var old_pos = parseJSONString(getLocalStore(el_grid_settings.enc_location + '_sp'));
    if (old_pos && "top" in old_pos && "left" in old_pos) {
        if ($("#gview_" + grid_id + " .ui-jqgrid-bdiv").length) {
            $("#gview_" + grid_id + " .ui-jqgrid-bdiv")[0].scrollTo(old_pos.left, old_pos.top);
        }
    }
    $("#gview_" + grid_id + " .ui-jqgrid-bdiv").scroll(function () {
        var posInfo = {};
        posInfo.top = $(this).scrollTop();
        posInfo.left = $(this).scrollLeft();
        setLocalStore(el_grid_settings.enc_location + '_sp', JSON.stringify(posInfo), true);
    });
}
function imageLoadingError(e) {
    $(e).attr("src", el_tpl_settings.noimage_url);
}
function isHTML(str) {
    var a = document.createElement('div');
    a.innerHTML = str;

    for (var c = a.childNodes, i = c.length; i--; ) {
        if (c[i].nodeType == 1)
            return true;
    }

    return false;
}
function getRangePickerQuickList() {
    var defaultList = [
        {
            'key': 'Today',
            'label': js_lang_label.GENERIC_GRID_TODAY,
            'value': [moment().startOf('days'), moment().endOf('days')]
        },
        {
            'key': 'Yesterday',
            'label': js_lang_label.GENERIC_GRID_YESTERDAY,
            'value': [moment().subtract('days', 1).startOf('days'), moment().subtract('days', 1).endOf('days')]
        },
        {
            'key': 'Last 7 Days',
            'label': js_lang_label.GENERIC_GRID_LAST_7_DAYS,
            'value': [moment().subtract('days', 6), moment()]
        },
        {
            'key': 'Next 7 Days',
            'label': js_lang_label.GENERIC_GRID_NEXT_7_DAYS,
            'value': [moment(), moment().add('days', 6)]
        },
        {
            'key': 'Last 30 Days',
            'label': js_lang_label.GENERIC_GRID_LAST_30_DAYS,
            'value': [moment().subtract('days', 29), moment()]
        },
        {
            'key': 'Next 30 Days',
            'label': js_lang_label.GENERIC_GRID_NEXT_30_DAYS,
            'value': [moment(), moment().add('days', 29)]
        },
        {
            'key': 'This Month',
            'label': js_lang_label.GENERIC_GRID_THIS_MONTH,
            'value': [moment().startOf('month'), moment().endOf('month')]
        },
        {
            'key': 'Last Month',
            'label': js_lang_label.GENERIC_GRID_LAST_MONTH,
            'value': [moment().subtract('month', 1).startOf('month'), moment().subtract('month', 1).endOf('month')]
        },
        {
            'key': 'Next Month',
            'label': js_lang_label.GENERIC_GRID_NEXT_MONTH,
            'value': [moment().add('month', 1).startOf('month'), moment().add('month', 1).endOf('month')]
        }
    ];

    var quickList = {};
    $.each(defaultList, function (idx, data) {
        if (data['label']) {
            quickList[data['label']] = data['value'];
        } else {
            quickList[data['key']] = data['value'];
        }
    });
    return quickList;
}
function getRangePickerMonthNames() {
    var defaultList = [
        {
            'key': 'January',
            'label': js_lang_label.GENERIC_GRID_JANUARY
        },
        {
            'key': 'February',
            'label': js_lang_label.GENERIC_GRID_FEBRUARY
        },
        {
            'key': 'March',
            'label': js_lang_label.GENERIC_GRID_MARCH
        },
        {
            'key': 'April',
            'label': js_lang_label.GENERIC_GRID_APRIL
        },
        {
            'key': 'May',
            'label': js_lang_label.GENERIC_GRID_MAY
        },
        {
            'key': 'June',
            'label': js_lang_label.GENERIC_GRID_JUNE
        },
        {
            'key': 'July',
            'label': js_lang_label.GENERIC_GRID_JULY
        },
        {
            'key': 'August',
            'label': js_lang_label.GENERIC_GRID_AUGUST
        },
        {
            'key': 'September',
            'label': js_lang_label.GENERIC_GRID_SEPTEMBER
        },
        {
            'key': 'October',
            'label': js_lang_label.GENERIC_GRID_OCTOBER
        },
        {
            'key': 'November',
            'label': js_lang_label.GENERIC_GRID_NOVEMBER
        },
        {
            'key': 'December',
            'label': js_lang_label.GENERIC_GRID_DECEMBER
        }
    ];
    var monthNames = [];
    $.each(defaultList, function (idx, data) {
        if (data['label']) {
            monthNames.push(data['label']);
        } else {
            monthNames.push(data['key']);
        }
    });
    return monthNames;
}
function getRangePickerWeekNames() {
    var defaultList = [
        {
            'key': 'Sun',
            'label': js_lang_label.GENERIC_GRID_SUN
        },
        {
            'key': 'Mon',
            'label': js_lang_label.GENERIC_GRID_MON
        },
        {
            'key': 'Tue',
            'label': js_lang_label.GENERIC_GRID_TUE
        },
        {
            'key': 'Wed',
            'label': js_lang_label.GENERIC_GRID_WED
        },
        {
            'key': 'Thu',
            'label': js_lang_label.GENERIC_GRID_THU
        },
        {
            'key': 'Fri',
            'label': js_lang_label.GENERIC_GRID_FRI
        },
        {
            'key': 'Sat',
            'label': js_lang_label.GENERIC_GRID_SAT
        }
    ];
    var weekNames = [];
    $.each(defaultList, function (idx, data) {
        if (data['label']) {
            weekNames.push(data['label']);
        } else {
            weekNames.push(data['key']);
        }
    });
    return weekNames;
};
// related to tab type forms
$(function () {
    $(document).on("click", "a[id^='tabanchor']", function () {
        if (!$(this).parent("li").hasClass("active")) {
            if ($(this).attr("isdone") == "1") {
                var sendArr = [];
                var jbArr = $(this).attr("id").split("_");
                var jcurr_tab = $(this).attr("aria-curr");
                sendArr.push({"curr_tab": jcurr_tab, "col": jbArr[1], "row": jbArr[2], "blk": jbArr[3]});
                $("#tabcontent_" + jbArr[1] + "_" + jbArr[2]).addClass("hide-overflow").removeClass("show-overflow");
                getActivateAdminTabContent(sendArr);
            } else {
                return false;
            }
        } else {
            return false;
        }
    });
//    $(document).on("keyup", ".content-animate textarea.elastic", function() {
//        adjustTabHeightOnFly(this, 10);
//    })
    $(document).on("click", "[aria-chosen-select]", function () {
        var eleID = $(this).attr("aria-chosen-select");
        var eleType = $(this).attr("aria-chosen-type");
        if (eleType == "select") {
            $("#" + eleID).find("option").prop("selected", true);
            $("#" + eleID).trigger("chosen:updated");
            $(this).attr("aria-chosen-type", "deselect");
            $(this).find("span.arrow-image").removeClass("silk-icon-arrow-left").addClass("silk-icon-arrow-right");
            $(this).attr("title", js_lang_label.GENERIC_DESELECT_ALL);
        } else {
            $("#" + eleID).find("option").prop("selected", false);
            $("#" + eleID).trigger("chosen:updated");
            $(this).attr("aria-chosen-type", "select");
            $(this).find("span.arrow-image").removeClass("silk-icon-arrow-right").addClass("silk-icon-arrow-left");
            $(this).attr("title", js_lang_label.GENERIC_SELECT_ALL)
        }
        setTimeout(function () {
            $("#" + eleID).change();
        }, 10);
    });
    $(document).on("change", "[aria-chosen-valid]", function (e, d) {
        if ($.isPlainObject(d) && typeof d.init == "boolean" && d.init == true) {
            return false;
        }
        if ($(this).parents("form").length) {
            $(this).valid();
        }
    });
    $(document).on("click", ".popup-rel-mod-add", function (e) {
        var ar_relmod = $(this).attr("aria-relmod");
        var incNo = $("#childModuleInc_" + ar_relmod).val();
        var pid = $("#childModuleParData_" + ar_relmod).val();
        var href_url_arr = $(this).attr("href").split("#");
        var params_uri = convertHASHToURL(href_url_arr[1]);
        var params_obj = getHASHToFancyParams(href_url_arr[1]);
        incNo++;
        pid = (pid) ? pid : -1;
        params_uri += "&rmNum=" + incNo + "&parID=" + pid;
        $("#childModuleInc_" + ar_relmod).val(incNo);
        var req_uri = params_uri;
        openURLFancyBox(req_uri, params_obj);
        e.preventDefault();
        return false;
    });
    $(document).on("click", ".popup-rel-mod-edit", function (e) {
        var ar_relmod = $(this).attr("aria-relmod");
        var incNo = $(this).attr("aria-incno");
        var pid = $("#childModuleParData_" + ar_relmod).val();
        var md = $("#childModuleLayout_" + ar_relmod).val();
        var href_url_arr = $(this).attr("href").split("#");
        var params_uri = convertHASHToURL(href_url_arr[1]);
        var params_obj = getHASHToFancyParams(href_url_arr[1]);
        var extra_uri = makeChildPopupQueryString(md, ar_relmod, incNo);
        pid = (pid) ? pid : -1;
        params_uri += "&rmNum=" + incNo + "&parID=" + pid + extra_uri;
        var req_uri = params_uri;
        openURLFancyBox(req_uri, params_obj);
        e.preventDefault();
        return false;
    });
    $(document).on("click", ".ctrl-custom-btn", function () {
        var btn_name = $(this).attr("aria-btn-name");
        if (!el_form_settings || !$.isPlainObject(el_form_settings['buttons_arr'])) {
            return;
        }
        if (!$.isPlainObject(el_form_settings['buttons_arr'][btn_name])) {
            return;
        }
        var btn_obj = el_form_settings['buttons_arr'][btn_name];
        adminCustomButtonAction([$("#id").val()], btn_obj.alert, btn_obj.confirm, '', el_form_settings['extra_qstr']);
        return false;
    });

    $(document).on("click", "[data-viewer-target]", function () {
        var gallery_source = $(this).attr("data-viewer-target");
        var gallery_loop = $(this).attr("data-viewer-loop");
        var gallery_ext = $(this).attr("data-viewer-ext");
        var gallery_items = [], found_ext = [];
        $("#" + gallery_source).find("." + gallery_loop).each(function () {
            var url = $(this).find(".viewer-item-src").attr("data-item-url");
            var title = $(this).find(".viewer-item-lbl").val();
            var ext = url.split('.').pop();
            if ($.inArray(ext, found_ext) == -1) {
                found_ext.push(ext);
            }
            gallery_items.push({
                'href': url,
                'title': title,
                'extension': ext
            });
        });
        initFormFileViewer(gallery_items, found_ext, gallery_ext);
        return false;
    });
});
function getLoadAdminTab(col, row, blk, code) {
    var jbArr = [];
    jbArr.push({"curr_tab": code, "col": col, "row": row, "blk": blk});
    getActivateAdminTabContent(jbArr);
    return false;
}
function getSaveAndLoadAdminTab(col, row, blk, code) {
    $("#load_tab_" + col + "_" + row).val(code);
    $("#tab_id_" + col + "_" + row).val(blk);
    $("#frmaddupdate_" + col + "_" + row).submit();
    return false;
}
function getNextAdminTab(col, row, blk, nxtblk, code) {
    var jbArr = [];
    blk = parseInt(blk) + 1;
    jbArr.push({"type": "load", "col": col, "row": row, "blk": blk, "curr_tab": code});
    $("#tabcontent_" + col + "_" + row).addClass("hide-overflow").removeClass("show-overflow");
    getActivateAdminTabContent(jbArr);
    return false;
}
function getActivateAdminTabContent(tabArr) {
    Project.show_adaxloading_div();
    var col = tabArr[0]['col'];
    var row = tabArr[0]['row'];
    var blk = tabArr[0]['blk'];
    var curr_tab = tabArr[0]['curr_tab'];

    var js_id = $("#id").val();
    var js_proj_md = $("#projmod").val();
    var $activeObj = $("[id^='tabheading_" + col + "_" + row + "'].active");
    var $currObj = $("[id^='tabheading_" + col + "_" + row + "'].inactive");
    var tab_load = true;
    if (el_form_settings['tab_before_load_func']) {
        if ($.isFunction(window[el_form_settings['tab_before_load_func']])) {
            var tab_callback = window[el_form_settings['tab_before_load_func']](curr_tab, col, row);
            if (tab_callback == false) {
                tab_load = false;
            }
        }
    }
    if (!tab_load) {
        Project.hide_adaxloading_div();
        return false;
    }
    $.ajax({
        url: el_form_settings.tab_wise_block_url,
        type: 'POST',
        data: {
            "tab_code": curr_tab,
            "id": js_id,
            "col": col,
            "row": row,
            "blk": blk
        },
        success: function (response) {
            Project.hide_adaxloading_div();
            $($currObj).html(response).attr("class", "tab-fade active");
            $($activeObj).attr("class", "tab-fade inactive");

            $("li[id^='headinglist_" + col + "_" + row + "']").removeClass("active");
            $("li[id='headinglist_" + col + "_" + row + "_" + blk + "']").addClass("active");
            var tab_ht = $("#tabcontent_" + col + "_" + row).outerHeight();
            var tab_off = $("#tabcontent_" + col + "_" + row).offset();

            var act_tab_top = parseInt(tab_ht) + 40;
            var curr_height_tab = $($($currObj)).outerHeight();
            var tab_top_ht = parseInt(tab_off.top) + parseInt(tab_ht);

            $($currObj).animate({
                "top": "0px"
            }, 500);
            $($activeObj).animate({
                "top": "-" + act_tab_top + "px"
            }, 500);
            var animObj = $("#tabcontent_" + col + "_" + row);
            setTimeout(function () {
                $(animObj).animate({
                    "minHeight": curr_height_tab + "px"
                }, 500);
            }, 500);
            setTimeout(function () {
                $("html,body").animate({scrollTop: 0}, 300);
                $($activeObj).html("").css("top", tab_top_ht + "px");
                $(animObj).addClass("show-overflow").removeClass("hide-overflow");
                initializeBasicAjaxEvents_1($($currObj));
                /*
                 if (js_proj_md != "") {
                 var tab_code = $($currObj).find("input[name='tab_code']").val();
                 var func_dec_main = "Project.modules." + js_proj_md + ".initEvents";
                 if ($.isFunction(eval(func_dec_main))) {
                 eval(func_dec_main + "('" + tab_code + "')");
                 }
                 }
                 */
                getTabJSCallEvents($($currObj), curr_tab, col, row);
                initPreloadCCEvents();
            }, 1000);
        }
    });
}
function adjustTabAnimateHeight() {
//    $(".content-animate").each(function() {
//        var curArr = $(this).attr("id").split("_");
//        var first_height = $("[id^='tabheading_" + curArr[1] + "_" + curArr[2] + "_1']").outerHeight();
//        $(this).height(first_height);
//
//        var cnt_off = $(this).offset();
//        var tot_top = parseInt(cnt_off.top) + parseInt(first_height);
//        $("[id^='tabheading_" + curArr[1] + "_" + curArr[2] + "_2']").css("top", tot_top + "px");
//    });
}
function getTabJSCallEvents(eleObj, currTab, col, row) {
    if (typeof initAdminTabRenderJSScript == "function") {
        if ($.isFunction(initAdminTabRenderJSScript)) {
            initAdminTabRenderJSScript(eleObj);
        }
    }
    if (typeof initAdminTabCustomJSScript == "function") {
        if ($.isFunction(initAdminTabCustomJSScript)) {
            initAdminTabCustomJSScript(eleObj, currTab, col, row);
        }
    }
    if (el_form_settings['tab_after_load_func']) {
        if ($.isFunction(window[el_form_settings['tab_after_load_func']])) {
            window[el_form_settings['tab_after_load_func']](currTab, col, row);
        }
    }
}
// related to conditional coding
function isContainsCCAnyTrue(boolArr) {
    for (var i = 0; i < boolArr.length; i++) {
        if (boolArr[i] == true) {
            return true;
        }
    }
    return false;
}
function isContainsCCAllTrue(boolArr) {
    for (var i = 0; i < boolArr.length; i++) {
        if (boolArr[i] == false) {
            return false;
        }
    }
    return true;
}
function checkCCEventValues(cond_arr) {
    if (!$.isArray(cond_arr) || !cond_arr) {
        return false;
    }
    var json_event_arr = {}, json_final_arr = {}, json_skip_arr = [];
    var js_cond_type, js_cond_list, js_show_list, js_hide_list, cond_check_arr, cond_flag, js_cur_flag, js_cur_val, js_spc_val, js_oper, loop_check_arr;
    var temp_1, temp_2, js_ele_id, js_uni_id, js_ele_type, js_ele_mode, ele_id, ele_mode, ele_type, ele_name;
    json_event_arr = cond_arr;
    for (var i = 0; i < json_event_arr.length; i++) {
        if (!json_event_arr[i].cond_list) {
            continue;
        }
        js_cond_type = json_event_arr[i].cond_type;
        js_cond_list = json_event_arr[i].cond_list;
        js_show_list = json_event_arr[i].show_list;
        js_hide_list = json_event_arr[i].hide_list;
        cond_check_arr = [];
        for (var m in js_cond_list) {
            js_cur_flag = isShowHideElement(js_cond_list[m].id, js_cond_list[m].type);
            if (js_cur_flag && $.inArray(js_cond_list[m].id, json_skip_arr) == "-1") {
                cond_check_arr.push("false");
            } else {
                js_cur_val = getCCElementValue(js_cond_list[m].id, js_cond_list[m].type);
                js_spc_val = js_cond_list[m].value;
                js_oper = js_cond_list[m].oper;
                if ($.isArray(js_spc_val)) {
                    loop_check_arr = [];
                    for (var n in js_spc_val) {
                        temp_1 = getCCMatchStatus(js_oper, js_spc_val[n], js_cur_val);
                        temp_2 = (temp_1) ? "true" : "false";
                        loop_check_arr.push(temp_2);
                    }
                    if ($.inArray("true", loop_check_arr) != "-1") {
                        cond_check_arr.push("true");
                    } else {
                        cond_check_arr.push("false");
                    }
                } else {
                    temp_1 = getCCMatchStatus(js_oper, js_spc_val, js_cur_val);
                    temp_2 = (temp_1) ? "true" : "false";
                    cond_check_arr.push(temp_2);
                }
            }
        }
        if (!$.isArray(cond_check_arr) || !cond_check_arr.length) {
            continue;
        }
        if (js_cond_type == "OR") {
            cond_flag = ($.inArray("true", cond_check_arr) != "-1") ? true : false;
        } else {
            cond_flag = ($.inArray("false", cond_check_arr) == "-1") ? true : false;
        }
        for (var j in js_show_list) {
            js_ele_id = js_show_list[j].id;
            js_ele_type = (js_show_list[j].type && js_show_list[j].type == "module") ? "module" : "field";
            if (js_ele_type == "module") {
                js_uni_id = "child_module_" + js_ele_id;
            } else {
                js_uni_id = "cc_sh_" + js_ele_id;
            }
            if (cond_flag) {
                json_skip_arr.push(js_ele_id);
                js_ele_mode = "show";
            } else {
                js_ele_mode = "hide";
            }
            if (!$.isPlainObject(json_final_arr[js_uni_id])) {
                json_final_arr[js_uni_id] = {};
                json_final_arr[js_uni_id] = {"id": js_uni_id, "mode": js_ele_mode, "type": js_ele_type, "name": js_ele_id};
            } else if (js_ele_mode == "show") {
                json_final_arr[js_uni_id] = {"id": js_uni_id, "mode": js_ele_mode, "type": js_ele_type, "name": js_ele_id};
            }
        }
        for (var j in js_hide_list) {
            js_ele_id = js_hide_list[j].id;
            js_ele_type = (js_hide_list[j].type && js_hide_list[j].type == "module") ? "module" : "field";
            if (js_ele_type == "module") {
                js_uni_id = "child_module_" + js_ele_id;
            } else {
                js_uni_id = "cc_sh_" + js_ele_id;
            }
            if (cond_flag) {
                js_ele_mode = "hide";
            } else {
                json_skip_arr.push(js_ele_id);
                js_ele_mode = "show";
            }
            if (!$.isPlainObject(json_final_arr[js_uni_id])) {
                json_final_arr[js_uni_id] = {};
                json_final_arr[js_uni_id] = {"id": js_uni_id, "mode": js_ele_mode, "type": js_ele_type, "name": js_ele_id};
            } else if (js_ele_mode == "hide") {
                json_final_arr[js_uni_id] = {"id": js_uni_id, "mode": js_ele_mode, "type": js_ele_type, "name": js_ele_id};
            }
        }
    }
    for (var i in json_final_arr) {
        ele_id = json_final_arr[i]['id'];
        ele_mode = json_final_arr[i]['mode'];
        ele_type = json_final_arr[i]['type'];
        ele_name = json_final_arr[i]['name'];
        if (ele_mode == "hide") {
            //$('#' + ele_id).slideUp('slow');
            $('#' + ele_id).hide();
            $('#' + ele_id).find("input,select,textarea").addClass("ignore-show-hide");
            if (ele_type == "module") {
                $("#childModuleShowHide_" + ele_name).val("No");
            }
        } else {
            //$('#' + ele_id).slideDown('slow');
            $('#' + ele_id).show();
            $('#' + ele_id).find("input,select,textarea").removeClass("ignore-show-hide");
            if (ele_type == "module") {
                $("#childModuleShowHide_" + ele_name).val("Yes");
            }
        }
    }
}
function isShowHideElement(eleName, type) {
    var eleObj = "[name='" + eleName + "']";
    if (type == "multi_select_dropdown") {
        eleObj = "[name='" + eleName + "[]']";
    }
    if ($(eleObj).hasClass("ignore-show-hide") && !$(eleObj).hasClass("ignore-valid")) {
        return true;
    } else {
        return false;
    }
}
function getCCElementValue(eleName, type) {
    if (type == "radio_buttons") {
        var curVal = [];
        if ($("input[name='" + eleName + "'][type='hidden']").length) {
            curVal.push($("input[name='" + eleName + "'][type='hidden']").val());
        } else {
            $("input[name='" + eleName + "']:checked").each(function () {
                curVal.push($(this).val());
            });
        }
    } else if (type == "checkboxes") {
        var curVal = [];
        if ($("input[name='" + eleName + "'][type='hidden']").length) {
            curVal.push($("input[name='" + eleName + "'][type='hidden']").val());
        } else {
            $("input[name='" + eleName + "[]']:checked").each(function () {
                curVal.push($(this).val());
            });
        }
    } else if (type == "multi_select_dropdown") {
        var eleObj = "[name='" + eleName + "[]']";
        if (!$("[name='" + eleName + "[]']").length) {
            eleObj = "[name='" + eleName + "']";
        }
        var curVal = $(eleObj).val();
    } else {
        var eleObj = "[name='" + eleName + "']";
        var curVal = $(eleObj).val();
    }
    return curVal;
}
function getCCMatchStatus(oper, spcVal, curVal) {
    var temp = true;
    switch (oper) {
        case 'nu' :
            temp = (curVal == '' || curVal == null || curVal == undefined) ? true : false;
            break;
        case 'nn' :
            temp = (curVal != '' && curVal != null && curVal != undefined) ? true : false;
            break;
        case 'in' :
            if ($.isArray(curVal)) {
                temp = ($.inArray(spcVal, curVal) != "-1") ? true : false;
            } else {
                if (!$.isArray(spcVal) && typeof spcVal != undefined) {
                    spcVal = spcVal.split(",");
                } else {
                    spcVal = [];
                }
                temp = ($.inArray(curVal, spcVal) != "-1") ? true : false;
            }
            break;
        case 'ni' :
            if ($.isArray(curVal)) {
                temp = ($.inArray(spcVal, curVal) == "-1") ? true : false;
            } else {
                if (!$.isArray(spcVal) && typeof spcVal != undefined) {
                    spcVal = spcVal.split(",");
                } else {
                    spcVal = [];
                }
                temp = ($.inArray(curVal, spcVal) == "-1") ? true : false;
            }
            break;
        case 'gt' :
            if ($.isArray(curVal)) {
                temp = (curVal[0] > spcVal) ? true : false;
            } else {
                temp = (curVal > spcVal) ? true : false;
            }
            break;
        case 'ge' :
            if ($.isArray(curVal)) {
                temp = (curVal[0] >= spcVal) ? true : false;
            } else {
                temp = (curVal >= spcVal) ? true : false;
            }
            break;
        case 'lt' :
            if ($.isArray(curVal)) {
                temp = (curVal[0] < spcVal) ? true : false;
            } else {
                temp = (curVal < spcVal) ? true : false;
            }
            break;
        case 'le' :
            if ($.isArray(curVal)) {
                temp = (curVal[0] <= spcVal) ? true : false;
            } else {
                temp = (curVal <= spcVal) ? true : false;
            }
            break;
        case 'ne' :
            if ($.isArray(curVal)) {
                temp = ($.inArray(spcVal, curVal) == "-1") ? true : false;
            } else {
                temp = (curVal != spcVal) ? true : false;
            }
            break;
        default :
            if ($.isArray(curVal)) {
                temp = ($.inArray(spcVal, curVal) != "-1") ? true : false;
            } else {
                temp = (curVal == spcVal) ? true : false;
            }
            break;
    }
    return temp;
}
// related to file type deletion
function deleteInlineFileDocs(ele_id) {
    var label_elem = '<div />';
    var label_text = js_lang_label.GENERIC_ARE_YOU_SURE_WANT_TO_DELETE_THIS;
    var option_params = {
        title: js_lang_label.GENERIC_GRID_DELETE,
        dialogClass: "dialog-confirm-box form-delete-file-cnf",
        buttons: [{
                text: js_lang_label.GENERIC_DELETE,
                bt_type: 'delete',
                click: function () {
                    var multi_upload = false, multi_parent;
                    if ($("#" + ele_id).closest(".upload-multi-file").length) {
                        multi_parent = $("#" + ele_id).closest(".upload-multi-file");
                        multi_upload = true;
                    }
                    $("#" + ele_id).remove();
                    if (multi_upload) {
                        if (!multi_parent.find(".row-upload-file").length && multi_parent.attr("aria-required") == "true") {
                            var module_name = multi_parent.attr("aria-module");
                            var field_name = multi_parent.attr("aria-field");
                            multi_parent.append('<input type="hidden" value="" name="child[' + module_name + '][' + field_name + '][0]" id="child_' + module_name + '_' + field_name + '_0" class="_upload_req_file"/>')
                        }
                    }
                    $(this).remove();
                }
            }, {
                text: js_lang_label.GENERIC_CANCEL,
                bt_type: 'cancel',
                click: function () {
                    $(this).remove();
                }
            }]
    }
    jqueryUIdialogBox(label_elem, label_text, option_params);
}
function deleteFileTypeDocs(id, unique_name, module_url, file_folder, htmlID, langID, file_name) {
    var label_elem = '<div />';
    var label_text = js_lang_label.GENERIC_ARE_YOU_SURE_WANT_TO_DELETE_THIS;
    var option_params = {
        title: js_lang_label.GENERIC_GRID_DELETE,
        dialogClass: "dialog-confirm-box form-delete-file-cnf",
        buttons: [{
                text: js_lang_label.GENERIC_DELETE,
                bt_type: 'delete',
                click: function () {
                    $.ajax({
                        url: admin_url + module_url + '?' + el_form_settings['extra_qstr'],
                        type: 'POST',
                        data: {
                            'id': id,
                            'lang_id': langID,
                            'folder': file_folder,
                            'file': file_name,
                            'unique_name': unique_name
                        },
                        success: function (response) {
                            var respData = parseJSONString(response);
                            var jmgcls = '', jmgtxt = '';
                            if (respData.success == 1) {
                                var old_ele;
                                if (unique_name == htmlID) {
                                    old_ele = "old_" + htmlID;
                                } else {
                                    var split_arr = htmlID.split(unique_name);
                                    var last_id = split_arr.pop();
                                    split_arr.push("old_" + unique_name);
                                    split_arr.push(last_id);
                                    old_ele = split_arr.join('');
                                }
                                $('#anc_imgview_' + htmlID).remove();
                                $('#anc_imgdel_' + htmlID).remove();
                                $('#' + old_ele).val('');
                                $('#' + htmlID).val('');
                                $("#preview_" + htmlID).html(js_lang_label.GENERIC_DROP_FILES_HERE_OR_CLICK_TO_UPLOAD);
                                if ($("#img_buttons_" + htmlID).closest(".row-upload-file").length) {
                                    var multi_upload = false, multi_parent;
                                    if ($("#img_buttons_" + htmlID).closest(".row-upload-file").closest(".upload-multi-file").length) {
                                        multi_parent = $("#img_buttons_" + htmlID).closest(".row-upload-file").closest(".upload-multi-file");
                                        multi_upload = true;
                                    }
                                    $("#img_buttons_" + htmlID).closest(".row-upload-file").remove();
                                    if (multi_upload) {
                                        if (!multi_parent.find(".row-upload-file").length && multi_parent.attr("aria-required") == "true") {
                                            var module_name = multi_parent.attr("aria-module");
                                            var field_name = multi_parent.attr("aria-field");
                                            multi_parent.append('<input type="hidden" value="" name="child[' + module_name + '][' + field_name + '][0]" id="child_' + module_name + '_' + field_name + '_0" class="_upload_req_file"/>')
                                        }
                                    }
                                }
                                jmgcls = 1;
                                if (respData.message != "") {
                                    jmgtxt = respData.message;
                                } else {
                                    jmgtxt = js_lang_label.ACTION_FILE_DELETED_SUCCESSFULLY_C46_C46_C33;
                                }
                            } else {
                                jmgcls = 0;
                                if (respData.message != "") {
                                    jmgtxt = respData.message;
                                } else {
                                    jmgtxt = js_lang_label.GENERIC_ERROR_IN_FILE_DELETION;
                                }
                            }
                            Project.setMessage(jmgtxt, jmgcls, 300);
                        }
                    });
                    $(this).remove();
                }
            }, {
                text: js_lang_label.GENERIC_CANCEL,
                bt_type: 'cancel',
                click: function () {
                    $(this).remove();
                }
            }]
    }
    jqueryUIdialogBox(label_elem, label_text, option_params);
}
// related to record deletion
function deleteAdminRecordData(id, mod_index_url, mod_edit_url, extra_qstr, extra_hstr) {
    var label_elem = '<div />';
    var label_text = js_lang_label.GENERIC_ARE_YOU_SURE_WANT_TO_DELETE_THIS_RECORD;
    if ('message_arr' in el_form_settings) {
        if ('delete_message' in el_form_settings.message_arr) {
            if (el_form_settings.message_arr.delete_message) {
                label_text = el_form_settings.message_arr.delete_message;
            }
        }
    }
    var option_params = {
        title: js_lang_label.GENERIC_GRID_DELETE,
        dialogClass: "dialog-confirm-box form-delete-rec-cnf",
        buttons: [{
                text: js_lang_label.GENERIC_DELETE,
                bt_type: 'delete',
                click: function () {
                    $.ajax({
                        url: admin_url + mod_edit_url + "?" + extra_qstr,
                        type: 'POST',
                        data: {
                            'id': id,
                            'oper': 'del'
                        },
                        success: function (response) {
                            var respData = parseJSONString(response);
                            var jmgcls = '', jmgtxt = '';
                            if (respData.success == 'true') {
                                jmgcls = 1;
                                if (respData.message != "") {
                                    jmgtxt = respData.message;
                                } else {
                                    jmgtxt = js_lang_label.GENERIC_RECORD_DELETED_SUCCESSFULLY;
                                }
                            } else {
                                jmgcls = 0;
                                if (respData.message != "") {
                                    jmgtxt = respData.message;
                                } else {
                                    jmgtxt = js_lang_label.GENERIC_ERROR_IN_DELETION_OF_RECORD;
                                }
                            }
                            Project.setMessage(jmgtxt, jmgcls, 300);
                            if (respData.success == 'true') {
                                if (allowCloseFancyBox()) {
                                    parent.$.fancybox.close();
                                } else {
                                    loadAdminModuleListing(mod_index_url, extra_hstr);
                                }
                            }
                        }
                    });
                    $(this).remove();
                }
            }, {
                text: js_lang_label.GENERIC_CANCEL,
                bt_type: 'cancel',
                click: function () {
                    $(this).remove();
                }
            }]
    }
    jqueryUIdialogBox(label_elem, label_text, option_params);
    return false;
}
//realted to google maps intialization
function callGoogleMapEvents() {
    if (!$.isArray(google_map_json) || !google_map_json.length) {
        return false;
    }
    var google_api_key = el_tpl_settings.google_maps_key, extra_param;
    if (google_api_key) {
        extra_param = "&key=" + google_api_key;
    }

    if (typeof google == "object") {
        loadGoogleMapEvents();
    } else {
        $.getScript('https://www.google.com/jsapi', function () {
            google.load('maps', '3', {
                other_params: 'sensor=false&libraries=places' + extra_param,
                callback: function () {
                    loadGoogleMapEvents();
                }
            });
        });
    }
}
function loadGoogleMapEvents() {
    if ($.isArray(google_map_json) && google_map_json.length) {
        for (var i in google_map_json) {
            if (google_map_json[i] && google_map_json[i].name) {
                var map_id = google_map_json[i].name;
                initializeGoogleMap(map_id, $("#" + map_id), google_map_json[i]);
            }
        }
    }
}
//related to google maps calling
function initializeGoogleMap(fldName, fldObj, configObj) {
    if (typeof google == "object") {
        activateGoogleMap(fldName, fldObj, configObj);
    } else {
        addGoogleMapsObject(fldName, fldObj, configObj);
    }
}
function addGoogleMapsObject(fldName, fldObj, configObj) {
//    var gscript = document.createElement('script');
//    gscript.src = 'https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false&libraries=places&callback=callGoogleMap';
//    gscript.async = true;
//    document.body.appendChild(gscript);
    var google_api_key = el_tpl_settings.google_maps_key, extra_param;
    if (google_api_key) {
        extra_param = "&key=" + google_api_key;
    }

    $.getScript('https://www.google.com/jsapi', function () {
        google.load('maps', '3', {
            other_params: 'sensor=false&libraries=places' + extra_param,
            callback: function () {
                activateGoogleMap(fldName, fldObj, configObj);
            }
        });
    });
}
function activateGoogleMap(fldName, fldObj, configObj) {
    if ($.isEmptyObject(google)) {
        return false;
    }
    var latfield = '', lonfield = '', zoomfield = '', loadtype = 'No', addrtype = '';
    var country_field = '', state_field = '', city_field = '', zipcode_field = '', callback;

    if ("lat" in configObj) {
        latfield = configObj.lat;
    }
    if ("lng" in configObj) {
        lonfield = configObj.lng;
    }
    if ("zoom" in configObj) {
        zoomfield = configObj.zoom;
    }
    if ("load" in configObj) {
        loadtype = configObj.load;
    }

    if ("country" in configObj) {
        country_field = configObj.country;
    }
    if ("state" in configObj) {
        state_field = configObj.state;
    }
    if ("city" in configObj) {
        city_field = configObj.city;
    }
    if ("zipcode" in configObj) {
        zipcode_field = configObj.zipcode;
    }
    if ("addrtype" in configObj) {
        addrtype = configObj.addrtype;
    }
    if ("callback" in configObj) {
        callback = configObj.callback;
    }

    geocoderMap = new google.maps.Geocoder();
    if ($("#map_canvas_" + fldName).length && $("#" + fldName).length) {
        var onload_map = true, onload_latlng = false, latlng_obj = {};
        var mapOptions = {
            center: new google.maps.LatLng(-33.8688, 151.2195),
            zoom: 13,
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            /*
             panControl: true,
             panControlOptions: {
             position: google.maps.ControlPosition.TOP_LEFT
             },
             */
            mapTypeControl: true,
            mapTypeControlOptions: {
                style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
            },
            zoomControl: true,
            zoomControlOptions: {
                style: google.maps.ZoomControlStyle.LARGE
            }
        };
        var map = new google.maps.Map(document.getElementById('map_canvas_' + fldName), mapOptions);
        var input = document.getElementById('gmf_autocomplete_' + fldName);
        var autocomplete = new google.maps.places.Autocomplete(input);

        autocomplete.bindTo('bounds', map);

        var infowindow = new google.maps.InfoWindow();
        var image = new google.maps.MarkerImage(
                admin_image_url + 'marker.png',
                new google.maps.Size(50, 50),
                new google.maps.Point(0, 0),
                new google.maps.Point(50 / 6, 50 / 1.6)
                );
        var marker = new google.maps.Marker({
            map: map,
            draggable: true,
            icon: image,
            animation: google.maps.Animation.DROP
        });

        function geocodePosition(pos) {
            geocoderMap.geocode({latLng: pos}, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    $(fldObj).val(results[0].formatted_address);
                    $('#gmf_autocomplete_' + fldName).val(results[0].formatted_address);
                    $('#gmf_addr_label_' + fldName).html(results[0].formatted_address);
                    if ($('div#show_lat_lng_' + fldName).length) {
                        if (results[0].geometry.location) {
                            $('div#show_lat_lng_' + fldName).html(' Lat / Lng : ' + results[0].geometry.location.lat() + ' , ' + results[0].geometry.location.lng());
                        }
                    }
                    if (latfield != '' && $('#' + latfield).length) {
                        $('#' + latfield).val(results[0].geometry.location.lat());
                    }
                    if (lonfield != '' && $('#' + lonfield).length) {
                        $('#' + lonfield).val(results[0].geometry.location.lng());
                    }
                    var components = getGoogleAddressComponents(results[0].address_components);
                    if ('country' in components) {
                        if (country_field != '' && $('#' + country_field).length) {
                            if (addrtype == 'short') {
                                $('#' + country_field).val(components['country']['short_name']);
                            } else {
                                $('#' + country_field).val(components['country']['long_name']);
                            }
                        }
                    }
                    if ('state' in components) {
                        if (state_field != '' && $('#' + state_field).length) {
                            if (addrtype == 'short') {
                                $('#' + state_field).val(components['state']['short_name']);
                            } else {
                                $('#' + state_field).val(components['state']['long_name']);
                            }
                        }
                    }
                    if ('city' in components) {
                        if (city_field != '' && $('#' + city_field).length) {
                            $('#' + city_field).val(components['city']['long_name']);
                        }
                    }
                    if ('zipcode' in components) {
                        if (zipcode_field != '' && $('#' + zipcode_field).length) {
                            $('#' + zipcode_field).val(components['zipcode']['long_name']);
                        }
                    }
                    if (callback) {
                        if($.isFunction(callback))
                        {
                            callback(results[0]);
                        } else if($.isFunction(window[callback]))
                        {
                            window[callback](results[0]);
                        }
                    }
                }
            });
        }

        function setupClickListener(id, types) {
            var radioButton = document.getElementById(id);
            google.maps.event.addDomListener(radioButton, 'click', function () {
                autocomplete.setTypes(types);
            });
        }

        function moveMarker(placeName, latlng) {
            marker.setIcon(image);
            marker.setPosition(latlng);
            infowindow.setContent(placeName);
            infowindow.open(map, marker);
        }

        function setupAutoComplete(map_json) {
            if (typeof geocoderMap == "object" && map_json != "") {
                geocoderMap.geocode(map_json, function (res, stat) {
                    if (stat == 'OK') {
                        if (loadtype == "Yes" || $('#gmf_autocomplete_' + fldName).val() == "") {
                            $('#gmf_autocomplete_' + fldName).val(res[0].formatted_address);
                        }
                        autocomplete.set('place', {
                            geometry: {
                                location: res[0].geometry.location
                            }
                        });
                        map.panTo(marker.getPosition());
                    }
                });
            }
        }

        function setupLatLngPoniter(map_json) {
            if (typeof geocoderMap == "object" && map_json != "") {
                onload_latlng = true;
                latlng_obj = map_json;
                geocoderMap.geocode(map_json, function (res, stat) {
                    if (stat == 'OK') {
                        autocomplete.set('place', {
                            geometry: {
                                location: res[0].geometry.location
                            }
                        });
                        map.panTo(marker.getPosition());
                    }
                });
            }
        }

        function populateZoomLevel(zoomfield) {
            var zoom_level = 0
            if (zoomfield == "localStorage") {
                var zoom_str = localStorage.getItem(el_tpl_settings.enc_usr_var + "_" + el_form_settings.module_name + "_" + fldName);
                var zoom_json = parseJSONString(zoom_str);
                if (zoom_json && zoom_json.zoom) {
                    zoom_level = zoom_json.zoom;
                }
            } else if ($("#" + zoomfield).length) {
                zoom_level = $("#" + zoomfield).val();
            }
            if (zoom_level >= 1 && zoom_level <= 21) {
                map.setZoom(zoom_level);
            } else {
                map.setZoom(17);  // Why 17? Because it looks good.
            }
        }

        google.maps.event.addListener(marker, 'dragend', function () {
            geocodePosition(marker.getPosition());
            map.panTo(marker.getPosition());
        });

        google.maps.event.addListener(autocomplete, 'place_changed', function () {
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                return;
                marker.setMap(null);
            }
            if (onload_latlng) {
                marker.setPosition(latlng_obj.latLng);
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    populateZoomLevel(zoomfield);
                }
                var address = $('#gmf_autocomplete_' + fldName).val();
                $(fldObj).val(address);
                $('#gmf_addr_label_' + fldName).html(address);
                if ($('div#show_lat_lng_' + fldName).length) {
                    if (place.geometry.location) {
                        $('div#show_lat_lng_' + fldName).html(' Lat / Lng : ' + latlng_obj.latLng.lat() + ' , ' + latlng_obj.latLng.lng());
                    }
                }
                onload_latlng = onload_map = false;
            } else {
                marker.setPosition(place.geometry.location);
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    if (onload_map) {
                        populateZoomLevel(zoomfield);
                        onload_map = false;
                    } else {
                        map.setZoom(17);  // Why 17? Because it looks good.
                    }
                }
                var address = $('#gmf_autocomplete_' + fldName).val();
                $(fldObj).val(address);
                $('#gmf_addr_label_' + fldName).html(address);
                if ($('div#show_lat_lng_' + fldName).length) {
                    if (place.geometry.location) {
                        $('div#show_lat_lng_' + fldName).html(' Lat / Lng : ' + place.geometry.location.lat() + ' , ' + place.geometry.location.lng());
                    }
                }
                if (latfield != '' && $('#' + latfield).length) {
                    $('#' + latfield).val(place.geometry.location.lat());
                }
                if (lonfield != '' && $('#' + lonfield).length) {
                    $('#' + lonfield).val(place.geometry.location.lng());
                }
                var components = getGoogleAddressComponents(place.address_components);
                if ('country' in components) {
                    if (country_field != '' && $('#' + country_field).length) {
                        if (addrtype == 'short') {
                            $('#' + country_field).val(components['country']['short_name']);
                        } else {
                            $('#' + country_field).val(components['country']['long_name']);
                        }
                    }
                }
                if ('state' in components) {
                    if (state_field != '' && $('#' + state_field).length) {
                        if (addrtype == 'short') {
                            $('#' + state_field).val(components['state']['short_name']);
                        } else {
                            $('#' + state_field).val(components['state']['long_name']);
                        }
                    }
                }
                if ('city' in components) {
                    if (city_field != '' && $('#' + city_field).length) {
                        $('#' + city_field).val(components['city']['long_name']);
                    }
                }
                if ('zipcode' in components) {
                    if (zipcode_field != '' && $('#' + zipcode_field).length) {
                        $('#' + zipcode_field).val(components['zipcode']['long_name']);
                    }
                }
                if (callback) {
                    if($.isFunction(callback))
                    {
                        callback(place);
                    } else if($.isFunction(window[callback]))
                    {
                        window[callback](place);
                    }
                }
            }
            //moveMarker(place.name, place.geometry.location);
        });

        google.maps.event.addListener(map, 'zoom_changed', function (event) {
            if (zoomfield == "localStorage") {
                localStorage.setItem(el_tpl_settings.enc_usr_var + "_" + el_form_settings.module_name + "_" + fldName, JSON.stringify({zoom: map.zoom}));
            } else if ($("#" + zoomfield).length) {
                $("#" + zoomfield).val(map.zoom);
            }
        });

        var txt_value = "", map_json = {};
        if (typeof inline_settings_arr != "object" || !inline_settings_arr) {
            txt_value = $.trim($("#" + fldName).val());
        } else {
            txt_value = $.trim($("#" + fldName).text());
            txt_value = (txt_value !== "Empty") ? txt_value : "";

        }

        if (loadtype == "Yes" && $('#' + latfield).length && $('#' + lonfield).length) {
            var lat_val = $('#' + latfield).val();
            var lon_val = $('#' + lonfield).val();
            if ($.isNumeric(lat_val) && $.isNumeric(lon_val)) {
                map_json = {
                    latLng: new google.maps.LatLng(lat_val, lon_val)
                };
                setupLatLngPoniter(map_json);
            }
            $('#' + latfield + ', #' + lonfield).off("input");
            $('#' + latfield + ', #' + lonfield).on("input", function () {
                setupAutoComplete({latLng: new google.maps.LatLng($('#' + latfield).val(), $('#' + lonfield).val())})
            });
        } else {
            if (txt_value != "") {
                map_json = {address: txt_value};
                setupAutoComplete(map_json);
            }
        }

        $('#gmf_autocomplete_' + fldName).on("input", function () {
            $(fldObj).val($(this).val());
            $('#gmf_addr_label_' + fldName).html($(this).val());
        });

        setupClickListener(fldName + '-changetype-all', []);
        setupClickListener(fldName + '-changetype-establishment', ['establishment']);
        setupClickListener(fldName + '-changetype-geocode', ['geocode']);
    }
}
//realted to google places autocomplete
function callPlacesAutocomplete() {
    if (!$.isArray(google_places_json) || !google_places_json.length) {
        return false;
    }
    var google_api_key = el_tpl_settings.google_maps_key, extra_param;
    if (google_api_key) {
        extra_param = "&key=" + google_api_key;
    }

    if (typeof google == "object") {
        loadPlacesAutocomplete();
    } else {
        $.getScript('https://www.google.com/jsapi', function () {
            google.load('maps', '3', {
                other_params: 'sensor=false&libraries=places' + extra_param,
                callback: function () {
                    loadPlacesAutocomplete();
                }
            });
        });
    }
}
function loadPlacesAutocomplete() {
    if ($.isArray(google_places_json) && google_places_json.length) {
        for (var i in google_places_json) {
            if (google_places_json[i] && google_places_json[i].id) {
                var map_id = google_places_json[i].id;
                initPlacesAutocomplete(map_id, google_places_json[i]);
            }
        }
    }
}
function initPlacesAutocomplete(id, params) {
    if ($.isEmptyObject(google)) {
        return false;
    }

    var latfield = params.lat;
    var lonfield = params.lng;
    var callback = params.callback;

    var input = document.getElementById(id);
    var autocomplete = new google.maps.places.Autocomplete(input);

    google.maps.event.addListener(autocomplete, 'place_changed', function () {
        var place = autocomplete.getPlace();
        if (!place.geometry) {
            return;
        }

        if (latfield != '' && $('#' + latfield).length) {
            $('#' + latfield).val(place.geometry.location.lat());
        }
        if (lonfield != '' && $('#' + lonfield).length) {
            $('#' + lonfield).val(place.geometry.location.lng());
        }

        if (callback) {
            if($.isFunction(callback))
            {
                callback(place);
            } else if($.isFunction(window[callback]))
            {
                window[callback](place);
            }
        }
    });
}
function getGoogleAddressComponents(address) {
    var result = {};
    if (!$.isArray(address) || address.length == 0) {
        return result;
    }
    for (var i in address) {
        if ("types" in address[i] && $.isArray(address[i]['types'])) {
            if (address[i]['types'][0] == "country") {
                result['country'] = address[i];
            } else if (address[i]['types'][0] == "administrative_area_level_1") {
                result['state'] = address[i];
            } else if (address[i]['types'][0] == "administrative_area_level_2") {
                result['district'] = address[i];
            } else if (address[i]['types'][0] == "locality") {
                result['city'] = address[i];
            } else if (address[i]['types'][0] == "postal_code") {
                result['zipcode'] = address[i];
            }
        }
    }
    return result;
}
//related to child module through ajax
function getChildModuleAjaxTable(module_url, chid, mode) {
    var pid = $("#childModuleParData_" + chid).val();
    var md = $("#childModuleLayout_" + chid).val();
    var incNo = $("#childModuleInc_" + chid).val();
    var child_add_rec = true;
    if (el_form_settings['callbacks'] && el_form_settings['callbacks']['child_rec_before_add']) {
        if ($.isFunction(window[el_form_settings['callbacks']['child_rec_before_add']])) {
            var child_callback = window[el_form_settings['callbacks']['child_rec_before_add']](chid, incNo);
            if (child_callback == false) {
                child_add_rec = false;
            }
        }
    }
    if (!child_add_rec) {
        return false;
    }
    incNo++;
    $("#childModuleInc_" + chid).val(incNo);
    $("#ajax_loader_childModule_" + chid).show();
    $.ajax({
        url: admin_url + module_url + '?' + el_form_settings['extra_qstr'],
        type: 'POST',
        data: {
            "mode": cus_enc_mode_json[mode],
            "child_module": chid,
            "incNo": incNo,
            'parID': pid
        },
        success: function (data) {
            $("#ajax_loader_childModule_" + chid).hide();
            if (md == "Row") {
                if (el_theme_settings.frm_rel_rec_pos == "append") {
                    $("#tbl_child_module_" + chid).find("[id='add_child_module_" + chid + "']").append(data);
                } else {
                    $("#tbl_child_module_" + chid).find("[id='add_child_module_" + chid + "']").prepend(data);
                }
                initializeBasicAjaxEvents_1($("#div_child_row_" + chid + "_" + incNo));
            } else {
                if (el_theme_settings.frm_rel_rec_pos == "append") {
                    $("#tbl_child_module_" + chid).find("[id='add_child_module_" + chid + "']").append(data);
                } else {
                    $("#tbl_child_module_" + chid).find("[id='add_child_module_" + chid + "']").find(".ch-mod-firstrow").after(data);
                }
                initializeBasicAjaxEvents_1($("#tr_child_row_" + chid + "_" + incNo));
            }
            getChildJSCallEvents("add", chid, incNo);
            //setChildModuleHeight(chid);
            calcChildTotalEntries(chid, md);
        }
    });
    return false;
}
function getChildJSCallEvents(mode, chid, incNo, id) {
    if (typeof initChildRenderJSScript == "function") {
        if ($.isFunction(initChildRenderJSScript)) {
            initChildRenderJSScript();
        }
    }
    if (typeof executeAfterChildRecAdd == "function") {
        if ($.isFunction(executeAfterChildRecAdd)) {
            executeAfterChildRecAdd(chid, incNo);
        }
    }
    if (mode == 'add') {
        if (el_form_settings['callbacks'] && el_form_settings['callbacks']['child_rec_after_add']) {
            if ($.isFunction(window[el_form_settings['callbacks']['child_rec_after_add']])) {
                window[el_form_settings['callbacks']['child_rec_after_add']](chid, incNo);
            }
        }
    } else if (mode == 'save') {
        if (el_form_settings['callbacks'] && el_form_settings['callbacks']['child_rec_after_save']) {
            if ($.isFunction(window[el_form_settings['callbacks']['child_rec_after_save']])) {
                window[el_form_settings['callbacks']['child_rec_after_save']](chid, incNo, id);
            }
        }
    }
}
// popup data updation
function appendChildModuleContent(res) {
    var chid = res.child_module, incNo = res.rmNum, chContent = res.rmContent, rec_mode = res.recMode;
    var md = $("#childModuleLayout_" + chid).val();
    if (md == "Row") {
        if ($("[id='div_child_row_" + chid + "_" + incNo + "']").length) {
            $("[id='div_child_row_" + chid + "_" + incNo + "']").replaceWith(chContent);
        } else {
            $("#tbl_child_module_" + chid).find("[id='add_child_module_" + chid + "']").prepend(chContent);
        }
        initializeBasicAjaxEvents_1($("#div_child_row_" + chid + "_" + incNo));
    } else {
        if ($("[id='tr_child_row_" + chid + "_" + incNo + "']").length) {
            $("[id='tr_child_row_" + chid + "_" + incNo + "']").replaceWith(chContent);
        } else {
            $("#tbl_child_module_" + chid).find("[id='add_child_module_" + chid + "']").find(".ch-mod-firstrow").after(chContent);
        }
        initializeBasicAjaxEvents_1($("#tr_child_row_" + chid + "_" + incNo));
    }
    //setChildModuleHeight(chid);
    calcChildTotalEntries(chid, md);
}
function populateRelationModuleData(module_name, field_arr, inc_no) {
    if (!module_name || !field_arr || !inc_no) {
        return false;
    }
    var uni_name, uni_type, hidden_val, hidden_arr, chk_val, omit_arr = ["dropdown", "multi_select_dropdown", "autocomplete", "file"];
    for (var i in field_arr) {
        uni_name = field_arr[i].name;
        uni_type = field_arr[i].type;
        hidden_val = parent.$("#child_" + module_name + "_" + uni_name + "_" + inc_no).val();
        if ($.trim(hidden_val) != "" && $.inArray(uni_type, omit_arr) == "-1") {
            if ($("#" + uni_name).is('select')) {
                hidden_arr = $.isArray(hidden_val) ? hidden_val : hidden_val.split(",");
                $("#" + uni_name).val(hidden_arr);
            } else if ($("[id^='" + uni_name + "']").is('input') && $("[id^='" + uni_name + "']").attr('type') == "radio") {
                chk_val = $.trim(hidden_val);
                $("#" + uni_name + "_" + chk_val).prop("checked", true);
            } else if ($("[id^='" + uni_name + "']").is('input') && $("[id^='" + uni_name + "']").attr('type') == "checkbox") {
                hidden_arr = $.isArray(hidden_val) ? hidden_val : hidden_val.split(",");
                for (var j = 0; j < hidden_arr.length; j++) {
                    chk_val = $.trim(hidden_arr);
                    $("#" + uni_name + "_" + chk_val).prop("checked", true);
                }
            } else {
                $("#" + uni_name).val(hidden_val);
            }
        }

    }
}
function makeChildPopupQueryString(md, rel_mod, inc_no) {
    var params_uri = '';
    if (md == "Row") {
        var popObj = $("#div_child_row_" + rel_mod + "_" + inc_no);

    } else {
        var popObj = $("#tr_child_row_" + rel_mod + "_" + inc_no);
    }
    $(popObj).find("[aria-popup-data='Yes']").each(function () {
        var key_name = $(this).attr("aria-unique-name");
        params_uri += "&" + key_name + "=" + $(this).val();
    });
    return params_uri;
}
// to set the child module height after cloning and deletion
function setChildModuleHeight(chid) {
    //adjustTabHeightOnFly($("#tbl_child_module_" + chid), 200);
}
//related to child module deletion
function deleteChildModuleRow(module_url, chid, rid) {
    var md = $("#childModuleLayout_" + chid).val();
    var child_del_rec = true;
    if (el_form_settings['callbacks'] && el_form_settings['callbacks']['child_rec_before_delete']) {
        if ($.isFunction(window[el_form_settings['callbacks']['child_rec_before_delete']])) {
            var child_callback = window[el_form_settings['callbacks']['child_rec_before_delete']](chid, rid, 0, "Add");
            if (child_callback == false) {
                child_del_rec = false;
            }
        }
    }

    if (!child_del_rec) {
        return false;
    }

    var label_elem = '<div />';
    var label_text = js_lang_label.GENERIC_ARE_YOU_SURE_WANT_TO_DELETE_THIS_ROW;
    if ('message_arr' in el_form_settings) {
        if ('child_messages' in el_form_settings.message_arr) {
            if ('delete_message' in el_form_settings.message_arr.child_messages) {
                if (chid in el_form_settings.message_arr.child_messages.delete_message) {
                    if (el_form_settings.message_arr.child_messages.delete_message[chid]) {
                        label_text = el_form_settings.message_arr.child_messages.delete_message[chid];
                    }
                }
            }
        }
    }
    var option_params = {
        title: js_lang_label.GENERIC_GRID_DELETE,
        dialogClass: "dialog-confirm-box form-delete-child-cnf",
        buttons: [{
                text: js_lang_label.GENERIC_DELETE,
                bt_type: 'delete',
                click: function () {
                    if (md == "Row") {
                        $("#div_child_row_" + chid + "_" + rid).remove();
                    } else {
                        $("#tr_child_row_" + chid + "_" + rid).remove();
                    }
                    calcChildTotalEntries(chid, md);
                    //setChildModuleHeight(chid)
                    if (el_form_settings['callbacks'] && el_form_settings['callbacks']['child_rec_after_delete']) {
                        if ($.isFunction(window[el_form_settings['callbacks']['child_rec_after_delete']])) {
                            window[el_form_settings['callbacks']['child_rec_after_delete']](chid, rid, 0, {}, "Add");
                        }
                    }
                    $(this).remove();
                }
            }, {
                text: js_lang_label.GENERIC_CANCEL,
                bt_type: 'cancel',
                click: function () {
                    $(this).remove();
                }
            }]
    }
    jqueryUIdialogBox(label_elem, label_text, option_params);
    return false;
}
//related to child module saving
function saveChildModuleSingleData(module_save_url, module_render_url, chid, recMode, rid, cid, popup, mode) {
    var chParData = $("#childModuleParData_" + chid).val();
    var md = $("#childModuleLayout_" + chid).val();
    var vfalg = true, vid, ael, oel, vval, ilv, igv, ihv, vres, curr_valiation;
    if (child_rules_arr && child_rules_arr[chid]) {
        curr_valiation = child_rules_arr[chid]
        for (var i in curr_valiation) {
            vid = "child_" + chid + "_" + i + "_" + rid;
            ael = $("[id^='" + vid + "']:first");
            if ($.inArray($(ael).attr("type"), ["checkbox", "radio"]) != "-1") {
                oel = $(ael).attr("name");
                vval = $("[name='" + oel + "']:checked").val();
                ilv = $("[name='" + oel + "']").length;
            } else {
                vval = $("#" + vid).val();
                ilv = $("#" + vid).length;
            }
            igv = $("#" + vid).hasClass("ignore-valid");
            ihv = $("#" + vid).is("hidden");
            if (!ilv || igv || ihv) {
                continue;
            }
            vres = validateViewInlineEdit(vid, vval, curr_valiation[i]);
            if (vres === false) {
                $("#" + vid + "Err").html("");
            } else {
                if (vfalg) {
                    $("#" + vid).focus();
                }
                vfalg = false;
                $("#" + vid + "Err").html(vres);
            }
        }
    }
    if (!vfalg) {
        return false;
    }

    var child_save_rec = true;
    if (el_form_settings['callbacks'] && el_form_settings['callbacks']['child_rec_before_save']) {
        if ($.isFunction(window[el_form_settings['callbacks']['child_rec_before_save']])) {
            var child_callback = window[el_form_settings['callbacks']['child_rec_before_save']](chid, rid, cid);
            if (child_callback == false) {
                child_save_rec = false;
            }
        }
    }

    if (!child_save_rec) {
        return false;
    }

    //$("#add_child_module_" + chid).hide();
    var child_save_url = module_save_url + "?mode=" + cus_enc_mode_json[recMode] + "&parID=" + chParData + "&child_module=" + chid + "&index=" + rid + "&id=" + cid;
    var resArr, jmgcls = '', jmgtxt = '';
    var options = {
        url: child_save_url,
        beforeSubmit: showAdminAjaxRequest,
        success: function (respText, statText, xhr, $form) {
            Project.hide_adaxloading_div();
            resArr = parseJSONString(respText);
            if (!resArr.success) {
                jmgcls = 0;
                if (resArr.message != "") {
                    jmgtxt = resArr.message;
                } else {
                    jmgtxt = js_lang_label.GENERIC_ERROR_IN_DELETION_OF_RECORD;
                }
                if (md == "Row") {
                    $('#' + chform_name).replaceWith($("#div_child_row_" + chid + "_" + rid));
                } else {
                    $('#' + chform_name).replaceWith($("#tr_child_row_" + chid + "_" + rid));
                    $("#tr_child_row_" + chid + "_" + rid).show();
                }
            } else {
                jmgcls = 1;
                if (resArr.message != "") {
                    jmgtxt = resArr.message;
                } else {
                    jmgtxt = js_lang_label.GENERIC_RECORD_SAVED_SUCCESSFULLY;
                }
                $.ajax({
                    url: module_render_url,
                    type: 'POST',
                    data: {
                        "mode": cus_enc_mode_json[mode],
                        "child_module": chid,
                        "incNo": rid,
                        'parID': chParData,
                        "recMode": "Update",
                        "rmPopup": popup,
                        "id": resArr.id
                    },
                    success: function (data) {
                        //$("#add_child_module_" + chid).show();
                        $('#' + chform_name).replaceWith(data);
                        if (md == "Row") {
                            initializeBasicAjaxEvents_1($("#div_child_row_" + chid + "_" + rid));
                        } else {
                            $("#tr_child_row_" + chid + "_" + rid).show();
                            initializeBasicAjaxEvents_1($("#tr_child_row_" + chid + "_" + rid));
                        }
                        getChildJSCallEvents("save", chid, rid, cid);
                        calcChildTotalEntries(chid, md);
                        //setChildModuleHeight(chid);
                    }
                });
            }
            Project.setMessage(jmgtxt, jmgcls);
        }
    };
    var chform_name = "frmchild_module_save_" + chid;
    if (md == "Row") {
        $("#div_child_row_" + chid + "_" + rid).wrap("<form name='" + chform_name + "' id='" + chform_name + "' action='" + child_save_url + "' method='post'  enctype='multipart/form-data'>");
    } else {
        $("#tr_child_row_" + chid + "_" + rid).hide();
        $("#tr_child_row_" + chid + "_" + rid).wrap("<form name='" + chform_name + "' id='" + chform_name + "' action='" + child_save_url + "' method='post'  enctype='multipart/form-data'>");
    }
    $('#' + chform_name).ajaxSubmit(options);
    return false;
}
//related to child module deletion from database
function deleteChildModuleSingleData(module_url, chid, rid, cid) {
    var md = $("#childModuleLayout_" + chid).val();
    var child_del_rec = true;
    if (el_form_settings['callbacks'] && el_form_settings['callbacks']['child_rec_before_delete']) {
        if ($.isFunction(window[el_form_settings['callbacks']['child_rec_before_delete']])) {
            var child_callback = window[el_form_settings['callbacks']['child_rec_before_delete']](chid, rid, cid, "Update");
            if (child_callback == false) {
                child_del_rec = false;
            }
        }
    }

    if (!child_del_rec) {
        return false;
    }
    var label_elem = '<div />';
    var label_text = js_lang_label.GENERIC_ARE_YOU_SURE_WANT_TO_DELETE_THIS_RECORD_FROM_DATABASE;
    if ('message_arr' in el_form_settings) {
        if ('child_messages' in el_form_settings.message_arr) {
            if ('delete_message' in el_form_settings.message_arr.child_messages) {
                if (chid in el_form_settings.message_arr.child_messages.delete_message) {
                    if (el_form_settings.message_arr.child_messages.delete_message[chid]) {
                        label_text = el_form_settings.message_arr.child_messages.delete_message[chid];
                    }
                }
            }
        }
    }
    var option_params = {
        title: js_lang_label.GENERIC_GRID_DELETE,
        dialogClass: "dialog-confirm-box form-delete-child-cnf",
        buttons: [{
                text: js_lang_label.GENERIC_DELETE,
                bt_type: 'delete',
                click: function () {
                    $.ajax({
                        type: 'POST',
                        url: admin_url + module_url + '?' + el_form_settings['extra_qstr'],
                        data: {
                            'child_module': chid,
                            'id': cid,
                            'oper': 'del'
                        },
                        success: function (response) {
                            var respData = parseJSONString(response);
                            var jmgcls = '', jmgtxt = '';
                            if (respData.success == '1') {
                                jmgcls = 1;
                                if (respData.message != "") {
                                    jmgtxt = respData.message;
                                } else {
                                    jmgtxt = js_lang_label.GENERIC_RECORD_DELETED_SUCCESSFULLY;
                                }
                                if (md == "Row") {
                                    $("#div_child_row_" + chid + "_" + rid).remove();
                                } else {
                                    $("#tr_child_row_" + chid + "_" + rid).remove();
                                }
                                calcChildTotalEntries(chid, md);
                                //setChildModuleHeight(chid);
                            } else {
                                jmgcls = 0;
                                if (respData.message != "") {
                                    jmgtxt = respData.message;
                                } else {
                                    jmgtxt = js_lang_label.GENERIC_ERROR_IN_DELETION_OF_RECORD;
                                }
                            }
                            Project.setMessage(jmgtxt, jmgcls);
                            if (el_form_settings['callbacks'] && el_form_settings['callbacks']['child_rec_after_delete']) {
                                if ($.isFunction(window[el_form_settings['callbacks']['child_rec_after_delete']])) {
                                    window[el_form_settings['callbacks']['child_rec_after_delete']](chid, rid, cid, respData, "Update");
                                }
                            }
                        }
                    });
                    $(this).remove();
                }
            }, {
                text: js_lang_label.GENERIC_CANCEL,
                bt_type: 'cancel',
                click: function () {
                    $(this).remove();
                }
            }]
    }
    jqueryUIdialogBox(label_elem, label_text, option_params);
    return false;
}
//related to child module calculation
function calcChildTotalEntries(chid, md) {
    if (md == "Row") {
        var tot_count = $("div[id='tbl_child_module_" + chid + "'] div[id^='div_child_row_" + chid + "_']").length;
        $("#childModuleCount_" + chid).val(tot_count);
        $("div[id='tbl_child_module_" + chid + "'] div[id^='div_child_row_" + chid + "_']:first").each(function (i) {
            //$(this).find("hr.hr-line").remove();
        });
    } else {
        var tot_count = $("table[id='tbl_child_module_" + chid + "'] tr[id^='tr_child_row_" + chid + "_']").length;
        $("#childModuleCount_" + chid).val(tot_count);
        $("table[id='tbl_child_module_" + chid + "'] tr[id^='tr_child_row_" + chid + "_']").each(function (i) {
            var row_num = parseInt(i) + 1;
            $(this).find("[class='row-num-span']").html(row_num);
        });
    }
}
//related to place holder changes
function placeErrorMessage(element, eleid, error) {
    $('#' + eleid + 'Err').html(error);
}
//related to event calling on chnage
function adminAjaxChangeEventData(eleObj, replace_id, module_url, unique_name, mode, value, id, params) {
    var sel_val = $(eleObj).val();
    if ($("#" + replace_id + "_chosen").length) {
        $("#" + replace_id + "_chosen").hide();
    } else {
        $("#" + replace_id).hide();
    }
    $("#ajax_loader_" + replace_id).show();
    var data = {
        'parent_src[]': sel_val,
        "unique_name": unique_name,
        'mode': cus_enc_mode_json[mode],
        'id': id
    };
    var after_callback;
    if ($.isPlainObject(params)) {
        data = $.extend(params, data);
        if ("_callback" in params) {
            after_callback = params._callback;
            delete params._callback;
        }
    }
    $.ajax({
        url: admin_url + module_url,
        type: 'POST',
        data: data,
        success: function (data) {
            $("#ajax_loader_" + replace_id).hide();
            if ($("#" + replace_id + "_chosen").length) {
                $("#" + replace_id + "_chosen").show();
            } else {
                $("#" + replace_id).show();
            }
            var jdata_arr = parseJSONString(data);
            var old_val = $("#" + replace_id).val();
            if (jdata_arr.status == true) {
                $("#" + replace_id).html(jdata_arr.content);
                $("#" + replace_id).val(old_val);
                $("#" + replace_id).trigger("chosen:updated").trigger("change");
            }
            if (after_callback && $.isFunction(window[after_callback])) {
                window[after_callback]();
            }
        }
    });
}
//related to image/file on the fly diaply
function displayAdminOntheFlyImage(hid, rarr) {
    if (("resized" in rarr && "imgURL" in rarr) || (!("resized" in rarr) && "fileURL" in rarr)) {
        var $img_attr = '', $img_src = '';
        if (!rarr['resized']) {
            $img_src = rarr['fileURL'];
            $img_attr = "width='" + rarr['width'] + "' height='" + rarr['height'] + "'";
        } else {
            $img_src = rarr['imgURL'];
        }

        var $img_str = $("<a />");
        $($img_str).attr("id", "anc_imgview_" + hid)
                .attr("href", rarr['fileURL'])
                .addClass("fancybox-image")
                .html("<img src='" + $img_src + "' alt='Image' " + $img_attr + "/>");
        $("#img_view_" + hid).html($img_str);
        $("#img_hover_" + hid).html("");
        initializeFancyBoxEvents($("#img_view_" + hid));
        /*
         $('#anc_imgview_' + hid).qtip({
         content: "<img src='" + rarr['fileURL'] + "' alt='Image' />"
         });
         */
    } else if (rarr['success']) {
        var icon_class = "fa-file-text-o";
        if (rarr['iconclass']) {
            icon_class = rarr['iconclass'];
        }
        var $img_str = $("<a />");
        $($img_str).attr("id", "anc_imgview_" + hid)
                .attr("href", "javascript://")
                .html("<i class='fa " + icon_class + " fa-3x'></i>");
        $("#img_view_" + hid).html($img_str);
        var $eye_str = $("<div />");
        $($eye_str).attr("title", rarr['iconfile'])
                .addClass("tip")
                .html("<i class='icon18 minia-icon-eye icon-red no-margin'></i>");
        $("#img_hover_" + hid).html($eye_str).addClass("view-mode");
        initializeTooltipsEvents($("#img_hover_" + hid));
    }
    if (!$('#anc_imgdel_' + hid).length && $("#img_del_" + hid).length) {
        var $del_str = $("<a />");
        $($del_str).attr("id", "anc_imgdel_" + hid)
                .attr("href", 'javascript://')
                .attr("title", 'Delete')
                .attr("onclick", 'deleteAdminOntheFlyImage("' + hid + '")')
                .html("<i class='icon16 entypo-icon-close icon-red no-margin'></i>");
        $("#img_del_" + hid).html($del_str);
    }
    try {
        if ($("#" + hid).parents("form").length) {
            $("#" + hid).valid();
        }
    } catch (e) {

    }
}
function deleteAdminOntheFlyImage($js_html_id) {
    var label_elem = '<div />';
    var label_text = js_lang_label.GENERIC_ARE_YOU_SURE_WANT_TO_DELETE_THIS;
    var option_params = {
        title: js_lang_label.GENERIC_GRID_DELETE,
        dialogClass: "dialog-confirm-box form-delete-img-cnf",
        buttons: [{
                text: js_lang_label.GENERIC_DELETE,
                bt_type: 'delete',
                click: function () {
                    $("#img_view_" + $js_html_id).html("<span><img src='" + el_tpl_settings.noimage_url + "' width='50' height='50'></span>");
                    $("#img_del_" + $js_html_id).html("");
                    $("#preview_" + $js_html_id).html(js_lang_label.GENERIC_DROP_FILES_HERE_OR_CLICK_TO_UPLOAD);
                    $("#" + $js_html_id).val("");
                    $(this).remove();
                }
            }, {
                text: js_lang_label.GENERIC_CANCEL,
                bt_type: 'cancel',
                click: function () {
                    $(this).remove();
                }
            }]
    }
    jqueryUIdialogBox(label_elem, label_text, option_params);
}
function addAdminOntheFlyImage(mid, name, rarr) {
    var last_obj = $("#upload_multi_file_" + mid).find("[id^='upload_row_" + mid + "']:last");
    var new_id = '0', $img_str = '', $desc_str = '', $view_str = '', $eye_str = '', img_view_cls = '';
    if (last_obj && last_obj.length > 0 && last_obj.attr("id")) {
        var last_id_arr = last_obj.attr("id").split("upload_row_" + mid + "_");
        new_id = last_id_arr[1];
        new_id++;
    }
    var crea_id = 'upload_row_' + mid + "_" + new_id;
    var input_str = '<input type="hidden" value="' + rarr.oldfile + '" name="child[' + mid + '][old_' + name + '][]" id="child_' + mid + '_old_' + name + '_' + new_id + '" /> <input type="hidden" value="' + rarr.uploadfile + '" name="child[' + mid + '][' + name + '][]" id="child_' + mid + '_' + name + '_' + new_id + '" class="ignore-valid"/>';
    if (("resized" in rarr && "imgURL" in rarr) || (!("resized" in rarr) && "fileURL" in rarr)) {
        var $img_attr = '', $img_src = '';
        if (!rarr['resized']) {
            $img_src = rarr['fileURL'];
            $img_attr = "width='" + rarr['width'] + "' height='" + rarr['height'] + "'";
        } else {
            $img_src = rarr['imgURL'];
        }
        $view_str = $("<a />")
                .attr("id", "anc_imgview_child_" + mid + "_" + name + "_" + new_id)
                .attr("href", rarr['fileURL'])
                .attr("data-item-url", rarr['fileURL'])
                .addClass("fancybox-image form-image-anchor viewer-item-src")
                .html("<img src='" + $img_src + "' alt='Image' " + $img_attr + "/>");
        img_view_cls = "";
    } else {
        var icon_class = "fa-file-text-o";
        if (rarr['iconclass']) {
            icon_class = rarr['iconclass'];
        }
        $view_str = $("<a />")
                .attr("id", "anc_imgview_child_" + mid + "_" + name + "_" + new_id)
                .attr("href", "javascript://")
                .attr("data-item-url", rarr['fileURL'])
                .addClass("fancybox-image form-image-view viewer-item-src")
                .html("<i class='fa " + icon_class + " fa-3x'></i>");
        img_view_cls = "";//doc-view-section
        $eye_str = $("<div />");
        $($eye_str).attr("title", rarr['iconfile'])
                .addClass("tip")
                .html("<i class='icon18 minia-icon-eye icon-red no-margin'></i>");
    }

    var $del_str = $("<a />")
            .attr("id", "anc_imgdel_child_" + mid + "_" + name + "_" + new_id)
            .attr("href", "javascript://")
            .attr("title", js_lang_label.GENERIC_DELETE)
            .attr("hijacked", "yes")
            .attr("onclick", "deleteInlineFileDocs('upload_row_" + mid + "_" + new_id + "')")
            .html("<i class='icon16 entypo-icon-close icon-red no-margin'></i>");

    var $img_view_str = $("<div />")
            .attr("id", "img_view_child_" + mid + "_" + name + "_" + new_id)
            .addClass("img-view-section")
            .append($view_str);//.addClass("doc-view-section")

    var $img_del_str = $("<div />")
            .attr("id", "img_del_child_" + mid + "_" + name + "_" + new_id)
            .addClass("img-del-section")
            .append($del_str);

    if ($eye_str != "") {
        var $img_eye_str = $("<div />")
                .attr("id", "img_hover_child_" + mid + "_" + name + "_" + new_id)
                .addClass("img-hover-section view-mode")
                .append($eye_str);
    }

    var $whole_img_str = $("<div />")
            .attr("id", "img_buttons_child_" + mid + "_" + name + "_" + new_id)
            .addClass("img-inline-display")
            .append($($img_view_str))
            .append($($img_del_str));
    if ($eye_str != "") {
        $whole_img_str.append($img_eye_str).addClass("file-inline-display");
    }
    $img_str = '<div class="row-file-block">' + $($whole_img_str)[0].outerHTML + '</div>';
    if ($("#upload_multi_file_" + mid).hasClass("multi-file-desc-block")) {
        var desc_elem_name = $("#childModuleFileDesc_" + mid).val();
        var old_desc_elem = $("#upload_multi_file_" + mid).find(".row-upload-file:eq(0)").find(".row-desc-block .multi-file-desc-elem");
        var new_desc_elem = $("<input />")
                .prop("type", "text")
                .attr("value", rarr['filename'])
                .attr("name", "child[" + mid + "][" + desc_elem_name + "][]")
                .attr("id", "child_" + mid + "_" + desc_elem_name + "_" + new_id)
                .attr("title", $(old_desc_elem).attr("title"))
                .attr("placeholder", $(old_desc_elem).attr("placeholder"))
                .addClass("multi-file-desc-elem viewer-item-lbl");
        var $desc_str = '<div class="row-desc-block">' + $(new_desc_elem)[0].outerHTML + '</div>';
    }
    var new_str = '<div class="row-upload-file" id="' + crea_id + '">' + input_str + '' + $img_str + $desc_str + '</div>';
    $("#upload_multi_file_" + mid).append(new_str);
    initializeFancyBoxEvents($("#img_view_child_" + mid + "_" + name + "_" + new_id));
    initializeTooltipsEvents($("#img_hover_child_" + mid + "_" + name + "_" + new_id));
    if ($("#upload_multi_file_" + mid).find("._upload_req_file").length) {
        $("#upload_multi_file_" + mid).find("._upload_req_file").remove();
    }
    /*
     $("#anc_imgview_child_" + mid + "_" + name + "_" + new_id).qtip({
     content: "<img src='" + rarr['fileURL'] + "' alt='Image' />"
     });
     */
}
// showing password type data for a while 
function adminShowHidePasswordField(js_id) {
    $('#' + js_id).prop('type', 'text');
    $('#span_password_' + js_id).removeClass('iconic-icon-lock-fill').addClass('iconic-icon-unlock-fill');
    $('#a_password_' + js_id).attr('title', 'Password displayed');
    setTimeout(function () {
        $('#' + js_id).prop('type', 'password');
        $('#span_password_' + js_id).removeClass('iconic-icon-unlock-fill').addClass('iconic-icon-lock-fill');
        $('#a_password_' + js_id).attr('title', 'Click this to show password');
    }, 5000);
}
// related language translations
function showAdminLanguageArea(eleObj, type, field_name, lang_code) {
    if (type == 'single') {
        $("[id^=lnsh_" + field_name + "]").slideUp(100);
        $("#lnsh_" + field_name + "_" + lang_code).slideDown(200);
    } else if (type == 'all') {
        var disp_flag = $(eleObj).attr("aria-display");
        if (disp_flag == "hide") {
            $("[id^=lnsh_" + field_name + "]").slideDown(200);
            $(eleObj).attr("aria-display", "show");
            $(eleObj).attr("title", js_lang_label.GENERIC_HIDE_ALL);
            $(eleObj).find("span").removeClass("cut-icon-expand").addClass("cut-icon-shrink");
        } else {
            $("[id^=lnsh_" + field_name + "]").slideUp(100);
            $(eleObj).attr("aria-display", "hide");
            $(eleObj).attr("title", js_lang_label.GENERIC_SHOW_ALL);
            $(eleObj).find("span").removeClass("cut-icon-shrink").addClass("cut-icon-expand");
        }
    }
//    setTimeout(function() {
//        adjustTabHeightOnFly(eleObj, 200);
//    }, 301)
    return false;
}
function adjustTabHeightOnFly(eleObj, timeLimit) {
//    var headingObj = $(eleObj).closest('div[id^="tabheading"]');
//    var contentObj = $(eleObj).closest('div[id^="tabcontent"]');
//    if ($(headingObj).length > 0 && $(contentObj).hasClass("content-animate")) {
//        var tab_ht = $(headingObj).outerHeight();
//        $(contentObj).animate({
//            "height": tab_ht + "px"
//        }, timeLimit);
//    }
}
//related to multilingual
function multilingualEditorContent(editorText, eleInstance) {
    var srcLang = el_form_settings.prime_lang_code;
    var defaultLang = el_form_settings.default_lang_code;
    var destLangJSON = el_form_settings.other_lang_JSON;
    var destLang = parseJSONString(destLangJSON);
    if (!srcLang || !destLang) {
        return false;
    }
    if ("multi_lingual_trans" in el_tpl_settings && !el_tpl_settings.multi_lingual_trans) {
        Project.setMessage(js_lang_label.GENERIC_LANGUAGE_TRANSLATION_IS_TURNED_OFF, 2, 200);
        return false;
    }
    if ("multi_lingual_trans" in el_form_settings && !el_form_settings.multi_lingual_trans) {
        Project.setMessage(js_lang_label.GENERIC_LANGUAGE_TRANSLATION_IS_TURNED_OFF, 2, 200);
        return false;
    }

    var eleObj = $("#" + eleInstance.id);
    if ($(eleObj).attr("aria-multi-call") == "0") {
        return false;
    }

    var objLang = eleObj.attr("aria-lang-code");
    if ("other_lingual_trans" in el_tpl_settings && el_tpl_settings.other_lingual_trans) {
        if (objLang != srcLang && objLang != defaultLang) {
            return false;
        }
    } else {
        if (srcLang != objLang) {
            return false;
        }
    }

    var objVal = editorText;
    if ($.trim(objVal) != "") {
        var objID = eleObj.attr("aria-lang-parent");
        objLang = (objLang) ? objLang : srcLang;
        var othLang = destLang.slice();
        if (objLang != srcLang) {
            var objInd = othLang.indexOf(objLang);
            if (objInd !== -1) {
                othLang.splice(objInd, 1);
            }
            if ($.inArray(srcLang, othLang) == -1) {
                othLang.push(srcLang);
            }
        }
        showhide_inline_loading(eleObj, 'show');
        $.ajax({
            url: admin_url + cus_enc_url_json['general_language_conversion'],
            type: 'POST',
            data: {
                'text': objVal,
                'type': 'html',
                "src": objLang,
                'dest[]': othLang
            },
            success: function (data) {
                showhide_inline_loading(eleObj, 'hide');
                var res_data_arr = parseJSONString(data);
                if (res_data_arr) {
                    for (var langCode in res_data_arr) {
                        if ($.trim(res_data_arr[langCode]) != "") {
                            var langElem;
                            if (langCode == srcLang) {
                                langElem = objID;
                            } else {
                                langElem = "lang_" + objID + "_" + langCode;
                            }
                            $("#" + langElem).val(res_data_arr[langCode]);
                        }
                    }
                    if ("success" in res_data_arr && res_data_arr.success == 0) {
                        Project.setMessage(res_data_arr.message, 0);
                    }
                }
            }
        });
    }
}
function intializeLanguageAutoEntry(srcLang, destLangJSON, defaultLang) {
    var destLang = parseJSONString(destLangJSON);
    if (!srcLang || !destLang) {
        return false;
    }
    if ("multi_lingual_trans" in el_tpl_settings && !el_tpl_settings.multi_lingual_trans) {
        Project.setMessage(js_lang_label.GENERIC_LANGUAGE_TRANSLATION_IS_TURNED_OFF, 2, 200);
        return false;
    }
    if ("multi_lingual_trans" in el_form_settings && !el_form_settings.multi_lingual_trans) {
        Project.setMessage(js_lang_label.GENERIC_LANGUAGE_TRANSLATION_IS_TURNED_OFF, 2, 200);
        return false;
    }

    var changeSelectors = "[aria-multi-lingual='parent']";
    if ("other_lingual_trans" in el_tpl_settings && el_tpl_settings.other_lingual_trans) {
        if (srcLang != defaultLang) {
            changeSelectors += ",[aria-multi-lingual='child'][aria-lang-code='" + defaultLang + "']";
        }
    }
    $(document).off("change", changeSelectors);
    $(document).off("focus", changeSelectors);
    $(document).off("blur", changeSelectors);
    $(document).on("change", changeSelectors, function () {
        var eleObj = $(this);
        var objVal = eleObj.val();
        var objID = eleObj.attr("aria-lang-parent");
        var objLang = eleObj.attr("aria-lang-code");
        objLang = (objLang) ? objLang : srcLang;
        var othLang = destLang.slice();
        if (objLang != srcLang) {
            var objInd = othLang.indexOf(objLang);
            if (objInd !== -1) {
                othLang.splice(objInd, 1);
            }
            if ($.inArray(srcLang, othLang) == -1) {
                othLang.push(srcLang);
            }
        }
        if ($.trim(objVal) != "") {
            showhide_inline_loading(eleObj, 'show');
            $.ajax({
                url: admin_url + cus_enc_url_json['general_language_conversion'],
                type: 'POST',
                data: {
                    'text': objVal,
                    'type': 'plain',
                    "src": objLang,
                    'dest[]': othLang
                },
                success: function (data) {
                    showhide_inline_loading(eleObj, 'hide');
                    var res_data_arr = parseJSONString(data);
                    if (res_data_arr) {
                        for (var langCode in res_data_arr) {
                            if ($.trim(res_data_arr[langCode]) != "") {
                                var langElem;
                                if (langCode == srcLang) {
                                    langElem = objID;
                                } else {
                                    langElem = "lang_" + objID + "_" + langCode;
                                }
                                $("#" + langElem).val(res_data_arr[langCode]);
                            }
                        }
                        if ("success" in res_data_arr && res_data_arr.success == 0) {
                            Project.setMessage(res_data_arr.message, 0);
                        }
                    }
                }
            });
        }
        $(this).attr("aria-multi-call", "1");
    }).on('focus', changeSelectors, function () {
        $(this).attr("aria-multi-call", "0");
    }).on('blur', changeSelectors, function () {
        if ($(this).attr("aria-multi-call") == '0') {
            var c_trig = false;
            var currId = $(this).attr("id");
            var objID = $(this).attr("aria-lang-parent");
            var objType = $(this).attr("aria-multi-lingual");
            $("[id^='lang_" + objID + "']").each(function () {
                if ($(this).val() == "" && currId != $(this).attr("id")) {
                    c_trig = true;
                    return false;
                }
            });
            if (objType == "child") {
                if ($("#" + objID).val() == "") {
                    c_trig = true;
                }
            }
            if (c_trig) {
                $(this).trigger('change');
            }
        }
    })
}
//related multilingual loader
function showhide_inline_loading(eleObj, type) {
    if (type == "show") {
        var objOffset = $(eleObj).offset();
        var objLeft = objOffset.left;
        var objTop = objOffset.top;
        var objWidth = $(eleObj).width();
        var finalLeft = 25 + parseInt(objWidth) + parseInt(objLeft);
        var finalTop = 4 + parseInt(objTop);
        $("#ajax_lang_loader").css({
            "top": finalTop + "px",
            "left": finalLeft + "px"
        }).show();
    } else {
        $("#ajax_lang_loader").hide();
    }
}
//related x-editable form
function saveFormInlineEditble(name, value, id, extra) {
    var data = {
        "name": name,
        "value": value,
        "id": id
    };
    var obj_prop = inline_settings_arr[name];
    if (typeof extra == 'object') {
        data = $.extend({}, data, extra);
    }
    var options = {
        "url": el_form_settings.jajax_action_url,
        "data": data,
        success: function (obj, config) {
            var res_arr = parseJSONString(obj);
            if (res_arr && res_arr.success == 'false') {
                var $jq_errmsg = js_lang_label.GENERIC_ERROR_IN_UPDATION;
                if (res_arr.message != "") {
                    $jq_errmsg = res_arr.message;
                }
                $('#' + name).editable('option', 'value', $('#' + name).attr("aria-prev-value"));
                $('#' + name).editable('show');
                gridReportMessage(false, $jq_errmsg);
            } else if (res_arr.success == '3' || res_arr.success == '4') {
                if (isRedirectEqualHash(res_arr.red_hash)) {
                    window.location.hash = res_arr.red_hash;
                    window.location.reload();
                } else {
                    window.location.hash = res_arr.red_hash;
                }
            } else if (res_arr.success == '5') {
                window.location.href = res_arr.red_hash;
            } else {
                switch (obj_prop.type) {
                    case 'wysiwyg':
                    case 'code_markup_field':
                        $('#' + name).html(value);
                        break;
                    case 'multi_select_dropdown':
                    case 'checkboxes':
                        $('#' + name).html($('#' + name).attr("data-value"));
                        break;
                    case 'autocomplete':
                        var par_obj = obj_prop.editevents.token.params;
                        if (token_pre_populates[name].length > 0) {
                            $('#' + name).html($('#' + name).attr("data-value"));
                        }
                        par_obj.prePopulate = token_pre_populates[name];
                        break;
                    case 'password':
                        $('#' + name).html("*****");
                        break;
                    case 'file':
                        inline_settings_arr[name]['dbval'] = value;
                        break;
                    case 'rating_master':
                        $("#rshow_" + obj_prop.name).raty('set', {score: value});
                        $("#rscore_" + obj_prop.name).text(value);
                        $("#" + obj_prop.name).html('<span class="icon16 icomoon-icon-pencil-5"><b>' + js_lang_label.GENERIC_EDIT + '</b></span>');
                        break;
                    case 'google_maps':
                        inline_settings_arr[name]['value'] = value;
                        $('#' + name).attr("aria-prev-value", value);
                        break;
                    default :
                        $('#' + name).attr("aria-prev-value", value);
                        break;
                }
            }
        }
    };
    $('#' + name).editable("submit", options);
}
function addElementProperties(eleObj, params) {
    if (!params) {
        return;
    }
    for (var i in params) {
        $(eleObj).attr(i, params[i]);
    }
}
function assignEventParams(params) {
    var assign_params = {};
    if (params) {
        for (var i in params) {
            assign_params[i] = (params[i] == "true") ? true : ((params[i] == "false") ? false : params[i]);
        }
    }
    return assign_params;
}
function makeEditableDropdown(i_name) {
    if (!inline_settings_arr[i_name].editoptions || !inline_settings_arr[i_name].editoptions.dataUrl) {
        return;
    }
    var i_value = inline_settings_arr[i_name]['value'];
    $('#' + i_name).attr("data-value", i_value);
    var i_dataUrl = inline_settings_arr[i_name].editoptions.dataUrl;
    $('#' + i_name).editable({
        showbuttons: true,
        type: 'select',
        source: i_dataUrl,
        pk: el_form_settings.form_edit_id,
        sourceCache: false,
        validate: function (value) {
            var vid = $(this).attr("id");
            return validateViewInlineEdit(vid, value, inline_settings_arr[vid])
        },
        url: function (params) {
            saveFormInlineEditble(params.name, params.value, params.id);
        }
    });
    $('#' + i_name).on('shown', function (e, editable) {
        var ele_obj = $(editable.$form).find(".editable-input").find("select");
        $(editable.$form).find(".editable-input").append(inline_settings_arr[i_name].add_content);
        var ref_url = $(editable.$form).find('.fancybox-hash-iframe').attr('href');
        $(ele_obj).find("option").removeAttr("selected");
        var ele_name = $(this).attr("id");
        var data_val = $(this).attr("data-value");
        var obj_pro = inline_settings_arr[ele_name];
        var parent_attr = obj_pro.parentattr;
        var edit_attr = obj_pro.editattr;
        switch (obj_pro.type) {
            case 'checkboxes':
                $(ele_obj).attr("multiple", true);
                break;
            case 'multi_select_dropdown':
                $(ele_obj).attr("multiple", true);
                break;
        }
        addElementProperties($(ele_obj), edit_attr);
        ele_obj = $(editable.$form).find(".editable-input").find("select");
        if (obj_pro.type == "checkboxes" || obj_pro.type == "multi_select_dropdown") {
            var data_val_arr = [];
            $.each(data_val.split(","), function () {
                data_val_arr.push($.trim(this));
            });
            $(ele_obj).find("option").each(function () {
                if ($.inArray($.trim($(this).text()), data_val_arr) != -1) {
                    $(this).prop("selected", true);
                }
            });
        } else {
            $(ele_obj).find("option").each(function () {
                if ($.trim($(this).text()) == $.trim(data_val)) {
                    $(this).prop("selected", true);
                    return false;
                }
            });
        }
        setTimeout(function () {
            $(ele_obj).chosen({
                allow_single_deselect: true
            });
            $(editable.$form).find('.fancybox-hash-iframe').attr('href', ref_url + '|rfhtmlID|' + $(ele_obj).attr("id"));
            $('#' + $(ele_obj).attr("id") + '_chosen').trigger('mousedown');
            $('#' + $(ele_obj).attr("id") + '_chosen').find("input[type='text']").focus();
            if (obj_pro.editoptions.ajaxCall == "ajax-call") {
                var inlineID = obj_pro.editoptions.rel;
                var $queryStr = "&mode=" + cus_enc_mode_json['Update'] + "&&unique_name=" + inlineID + "&id=" + el_form_settings.form_edit_id;
                var $ajaxSendURL = el_grid_settings.ajax_data_url + $queryStr;
                $(ele_obj).ajaxChosen({
                    dataType: 'json',
                    type: 'POST',
                    url: $ajaxSendURL
                }, {
                    loadingImg: admin_image_url + "chosen-loading.gif"
                });
            }
        }, 5);

        $(ele_obj).change(function () {
            if (obj_pro.type == "checkboxes" || obj_pro.type == "multi_select_dropdown") {
                var mlist_val = [];
                $(this).find("option:selected").each(function () {
                    mlist_val.push($(this).text());
                });
                if (mlist_val && mlist_val.length > 0) {
                    $("#" + ele_name).attr("data-value", mlist_val.join(","));
                } else {
                    $("#" + ele_name).attr("data-value", "");
                }
            } else {
                $("#" + ele_name).attr("data-value", $(this).find("option:selected").val());
            }
        });
    });

}
function makeEditableTextArea(i_name) {
    if (!inline_settings_arr[i_name]) {
        return;
    }
    var i_value = inline_settings_arr[i_name]['value'];
    $('#' + i_name).editable({
        showbuttons: true,
        type: 'textarea',
        name: i_name,
        placeholder: inline_settings_arr[i_name].place_holder,
        value: i_value,
        pk: el_form_settings.form_edit_id,
        onblur: 'submit',
        rows: 3,
        validate: function (value) {
            var vid = $(this).attr("id");
            return validateViewInlineEdit(vid, value, inline_settings_arr[vid]);
        },
        url: function (params) {
            saveFormInlineEditble(params.name, params.value, params.id);
        }
    });
    $('#' + i_name).on('shown', function (e, editable) {
        var ele_name = $(this).attr("id");
        var ele_obj = $(editable.$form).find(".editable-input").find("textarea");
        var obj_pro = inline_settings_arr[ele_name];
        var parent_attr = obj_pro.parentattr;
        var edit_attr = obj_pro.editattr;
        switch (obj_pro.type) {
            case 'textarea':
                addElementProperties($(ele_obj), edit_attr);
                appendTextAreaProperties(ele_obj, obj_pro);
                applyInputTextCase($(editable.$form).find(".editable-input"));
                break;
            case 'code_markup_field':
                appendCodeMarkupProperties(ele_obj, obj_pro);
                break;
            case 'google_maps':
                appendGoogleMapsProperties(ele_obj, obj_pro);
                break;
            case 'wysiwyg':
                appendEditorProperties(ele_obj, obj_pro);
                break;
        }
    });
}
function appendEditorProperties(ele_obj, obj_pro) {
    if (!obj_pro) {
        return;
    }
    var ele_name = obj_pro.name;
    var ele_events = obj_pro.editevents;
    if (ele_events.tinymce) {
        var basic_params = assignEventParams(ele_events.tinymce.params);
        var toolbar_params = {};
        if (ele_events.tinymce.toolbar == "advanced") {
            toolbar_params = {
                plugins: tinymce_editor_plugins,
                toolbar: tinymce_editor_tollbar
            };
        } else if (ele_events.tinymce.toolbar == "premium") {
            toolbar_params = {
                plugins: tinymce_editor_plugins_premium,
                toolbar: tinymce_editor_tollbar_premium,
                external_plugins: {"filemanager": el_tpl_settings.js_libraries_url + "filemanager/plugin.min.js"},
            };

        } else {
            toolbar_params = {
                plugins: tinymce_editor_plugins_basic,
                toolbar: tinymce_editor_tollbar_basic
            };
        }
        var function_params = {
            templates: tinymce_editor_templates,
            setup: function (ed) {
                ed.on('change', function (e) {
                    tinyMCE.triggerSave();
                });
            }
        }
        var final_params = $.extend({}, basic_params, toolbar_params, function_params);
        tinyMCE.baseURL = el_tpl_settings.editor_js_url;
        $(ele_obj).tinymce(final_params);
    }
}
function appendGoogleMapsProperties(ele_obj, obj_pro) {
    if (!obj_pro) {
        return;
    }
    var ele_name = obj_pro.name;
    var ele_label = obj_pro.label;
    var ele_events = obj_pro.editevents
    var ele_val = obj_pro.value;
    var parent_attr = obj_pro.parentattr;
    var edit_attr = obj_pro.editattr;
    if (ele_events.maps) {
        $(ele_obj).hide();
        var map_str = "<div>";
        map_str += "<div class='frm-gmf-address-label'>";
        map_str += "<span id='gmf_addr_label_" + ele_name + "'>" + ele_val + "</span>";
        map_str += "</div>";
        map_str += "<span " + edit_attr + ">";
        map_str += "<textarea class='frm-gmf-address elastic' name='gmf_autocomplete_" + ele_name + "' id='gmf_autocomplete_" + ele_name + "' title='" + ele_label + "'>" + ele_val + "</textarea>";
        map_str += "</span>";
        map_str += "</div>";

        map_str += "<div class='frm-gmf-options'>";
        map_str += "<input type='radio' name='type' id='" + ele_name + "-changetype-all' checked='checked'>";
        map_str += "<label for='" + ele_name + "-changetype-all'>" + js_lang_label.GENERIC_ALL + "</label>&nbsp;&nbsp;";
        map_str += "<input type='radio' name='type' id='" + ele_name + "-changetype-establishment'>";
        map_str += "<label for='" + ele_name + "-changetype-establishment'>" + js_lang_label.GENERIC_ESTABLISHMENTS + "</label>&nbsp;&nbsp;";
        map_str += "<input type='radio' name='type' id='" + ele_name + "-changetype-geocode'>";
        map_str += "<label for='" + ele_name + "-changetype-geocode'>" + js_lang_label.GENERIC_GEOCODES + "</lable>";
        map_str += "</div>";

        if (ele_events.maps.showlatlng == "Yes") {
            map_str += "<div id='show_lat_lng_" + ele_name + "' class='frm-gmf-latlng'></div>";
        }
        map_str += "<span class='canvas_map'><div id='map_canvas_" + ele_name + "' " + edit_attr + "></div></span>";
        var par_obj = $(ele_obj).closest('.editable-container');
        $(par_obj).wrap('<span />');
        $(ele_obj).after(map_str);
        setTimeout(function () {
            $('#gmf_autocomplete_' + ele_name).elastic();
            initializeGoogleMap(ele_name, $(ele_obj), {});
        }, 100)

    }

}
function appendCodeMarkupProperties(ele_obj, obj_pro) {
    if (!obj_pro) {
        return;
    }
    var ele_name = obj_pro.name;
    var ele_events = obj_pro.editevents;
    if (ele_events.CodeMirror) {
        var ele_id = ele_name + "_cm";
        $(ele_obj).attr("id", ele_id);
        var basic_params = assignEventParams(ele_events.CodeMirror.params);
        var function_params = {
            onCursorActivity: function (instance) {
                $(ele_obj).val(instance.getValue());
            }
        }
        var final_params = $.extend({}, basic_params, function_params);
        removeCodeMarkupProperties(ele_id);
        var editor = CodeMirror.fromTextArea(document.getElementById(ele_id), final_params);
        $('#' + ele_id).data('cm', editor);
    }
}
function appendTextAreaProperties(ele_obj, obj_pro) {
    if (!obj_pro) {
        return;
    }
    var ele_name = obj_pro.name;
    var ele_events = obj_pro.editevents;
    if (ele_events.elastic) {
        $(ele_obj).elastic();
    }
    if (ele_events.inputlimiter) {
        var basic_params = assignEventParams(ele_events.inputlimiter.params);
        $(ele_obj).inputlimiter(basic_params);
    }
}
function appendUploadifyProperties(ele_obj, obj_pro) {
    if (!obj_pro) {
        return;
    }
    var ele_name = obj_pro.name;
    var ele_val = obj_pro.dbval;
    var ele_label = obj_pro.label;
    var ele_parent = obj_pro.parentattr;
    var ele_events = obj_pro.editevents;

//    var $fileStr = "<input type='hidden' value='" + ele_val + "' name='temp_" + ele_name + "' id='temp_" + ele_name + "' />";
//    $fileStr += "<input type='file' name='uploadify_" + ele_name + "' id='uploadify_" + ele_name + "' title='" + ele_label + "'/>";
//    var par_obj = $(ele_obj).closest('.editable-container')
//    $(par_obj).wrap('<span ' + ele_parent + ' id="btn_file_' + ele_name + '"/>');
//    $(ele_obj).after($fileStr);
//    if (ele_events.uploadify) {
//        var upload_data = ele_events.uploadify;
//        /*
//         if (upload_data.capture && upload_data.capture == "Yes") {
//         var cptscr = getCaptureDetailScript(ele_name, upload_data['unique_name'], upload_data['iModuleAddId']);
//         $(ele_obj).before(cptscr);
//         detectCaptureCameraAllow(ele_name, upload_data['unique_name'], upload_data['uploader']);
//         }
//         */
//        var upload_params = upload_data.params;
//        var basic_params = assignEventParams(upload_params);
//        var function_params = {
//            'formData': {
//                'unique_name': upload_data['unique_name'],
//                'id': upload_data['id'],
//                'type': 'uploadify'
//            },
//            'onSelect': function(file) {
//                var joldval = $('#temp_' + ele_name).val();
//                $('#uploadify_' + ele_name).uploadify('settings', 'formData', {
//                    'oldFile': joldval
//                });
//                $('#uploadify_' + ele_name).uploadify('upload');
//            },
//            'onUploadSuccess': function(file, data, response) {
//                if (data) {
//                    var jparse_data = parseJSONString(data);
//                    if (jparse_data.success == "0") {
//                        Project.setMessage(jparse_data.message, 0);
//                    } else {
//                        $('#' + ele_name).val(jparse_data.uploadfile);
//                        $('#temp_' + ele_name).val(jparse_data.oldfile);
//                        displayAdminOntheFlyImage(ele_name, jparse_data);
//                        var old_data = {
//                            "old_file": ele_val
//                        };
//                        saveFormInlineEditble(ele_name, jparse_data.uploadfile, el_form_settings.form_edit_id, old_data);
//                        setTimeout(function() {
//                            $('.frm-block-layout').click();
//                        }, 200);
//                    }
//                }
//            }
//        };
//        var final_params = $.extend({}, basic_params, function_params);
//        $('#uploadify_' + ele_name).uploadify(final_params);
//    }

    if (!ele_events.fileupload) {
        return false;
    }

    var $fileStr = "<div class='uploader'>";
    $fileStr += "<input type='hidden' value='" + ele_val + "' name='temp_" + ele_name + "' id='temp_" + ele_name + "' />";
    $fileStr += "<input type='file' name='uploadify_" + ele_name + "' id='uploadify_" + ele_name + "' title='" + ele_label + "'/>";
    $fileStr += "<span class='filename' id='preview_caf_file'>" + ele_events.fileupload.placeholder + "</span><span class='action'>Choose File</span>";
    $fileStr += "</div>";

    var par_obj = $(ele_obj).closest('.editable-container')
    $(par_obj).wrap('<div ' + ele_parent + ' id="btn_file_' + ele_name + '"/>');
    $(ele_obj).after($fileStr);


    var upload_data = ele_events.fileupload;
    /*
     if (upload_data.capture && upload_data.capture == "Yes") {
     var cptscr = getCaptureDetailScript(ele_name, upload_data['unique_name'], upload_data['iModuleAddId']);
     $(ele_obj).before(cptscr);
     detectCaptureCameraAllow(ele_name, upload_data['unique_name'], upload_data['uploader']);
     }
     */
    var upload_params = upload_data.params;
    var basic_params = assignEventParams(upload_params);
    var function_params = {
        formData: {
            'unique_name': upload_data['unique_name'],
            'id': upload_data['id'],
            'type': 'uploadify'
        },
        add: function (e, data) {
            var upload_errors = [];
            var _input_name = $(this).fileupload('option', 'name');
            var _temp_name = $(this).fileupload('option', 'temp');
            var _form_data = $(this).fileupload('option', 'formData');
            var _file_size = $(this).fileupload('option', 'maxFileSize');
            var _file_type = $(this).fileupload('option', 'acceptFileTypes');

            var _input_val = data.originalFiles[0]['name'];
            var _input_size = data.originalFiles[0]['size'];
            if (_file_type != '*') {
                var _input_ext = (_input_val) ? _input_val.substr(_input_val.lastIndexOf('.')) : "";
                var accept_file_types = new RegExp('(\.|\/)(' + _file_type + ')$', 'i');
                if (_input_ext && !accept_file_types.test(_input_ext)) {
                    upload_errors.push(js_lang_label.ACTION_FILE_TYPE_IS_NOT_ACCEPTABLE);
                }
            }
            _file_size = _file_size * 1000;
            if (_input_size && _input_size > _file_size) {
                upload_errors.push(js_lang_label.ACTION_FILE_SIZE_IS_TOO_LARGE);
            }
            if (upload_errors.length > 0) {
                Project.setMessage(upload_errors.join('\n'), 0);
            } else {
//                    $('#practive_' + _input_name).css('width', '0%');
//                    $('#progress_' + _input_name).show();
                _form_data['oldFile'] = $('#' + _temp_name).val();
                $(this).fileupload('option', 'formData', _form_data);
                $('#preview_' + _input_name).html(data.originalFiles[0]['name']);
                data.submit();
            }
        },
        done: function (e, data) {
            if (data && data.result) {
                var _input_name = $(this).fileupload('option', 'name');
                var _temp_name = $(this).fileupload('option', 'temp');
                var jparse_data = parseJSONString(data.result);
                if (jparse_data.success == '0') {
                    Project.setMessage(jparse_data.message, 0);
                } else {
                    $('#' + _input_name).val(jparse_data.uploadfile);
                    $('#' + _temp_name).val(jparse_data.oldfile);
                    displayAdminOntheFlyImage(_input_name, jparse_data);
//                        setTimeout(function() {
//                            $('#progress_' + _input_name).hide();
//                        }, 1000);
                    var old_data = {
                        "old_file": ele_val
                    };
                    saveFormInlineEditble(_input_name, jparse_data.uploadfile, el_form_settings.form_edit_id, old_data);
                    setTimeout(function () {
                        $('.frm-block-layout').click();
                    }, 200);
                }
            }
        },
        fail: function (e, data) {
            $.each(data.messages, function (index, error) {
                Project.setMessage(error, 0);
            });
        }
    };
    var final_params = $.extend({}, basic_params, function_params);
    $('#uploadify_' + ele_name).fileupload(final_params);
}
function makeEditableTextBox(i_name) {
    if (!inline_settings_arr[i_name]) {
        return;
    }
    var i_value = inline_settings_arr[i_name]['value'];
    var show_btn = true;
    if (inline_settings_arr[i_name]['type'] == "file") {
        i_value = inline_settings_arr[i_name]['dbval'];
        show_btn = false;
    } else if (inline_settings_arr[i_name]['type'] == "rating_master") {
        i_value = inline_settings_arr[i_name]['dbval'];
    }
    $('#' + i_name).editable({
        showbuttons: show_btn,
        type: 'text',
        name: i_name,
        placeholder: inline_settings_arr[i_name].place_holder,
        value: i_value,
        pk: el_form_settings.form_edit_id,
        onblur: 'submit',
        validate: function (value) {
            var vid = $(this).attr("id");
            return validateViewInlineEdit(vid, value, inline_settings_arr[vid]);
        },
        url: function (params) {
            saveFormInlineEditble(params.name, params.value, params.id);
        }
    });
    $('#' + i_name).on('shown', function (e, editable) {
        var ele_name = $(this).attr("id");
        var ele_obj = $(editable.$form).find(".editable-input").find("input[type='text']");
        var obj_pro = inline_settings_arr[ele_name];
        var parent_attr = obj_pro.parentattr;
        var edit_attr = obj_pro.editattr;
        switch (obj_pro.type) {
            case 'date':
                $(ele_obj).addClass("date-picker-icon");
                activeDateTimePicker(ele_obj, "date", obj_pro.editevents.datepicker.params);
                addElementProperties($(ele_obj), edit_attr);
                break;
            case 'date_and_time':
                $(ele_obj).addClass("date-picker-icon")
                activeDateTimePicker(ele_obj, "dateTime", obj_pro.editevents.datetimepicker.params);
                addElementProperties($(ele_obj), edit_attr);
                break;
            case 'time':
                $(ele_obj).addClass("date-picker-icon")
                activeDateTimePicker(ele_obj, "time", obj_pro.editevents.timepicker.params);
                addElementProperties($(ele_obj), edit_attr);
                break;
            case 'phone_number':
                $(ele_obj).mask(obj_pro.editoptions.format);
                addElementProperties($(ele_obj), edit_attr);
                break;
            case 'file':
                $(ele_obj).hide();
                appendUploadifyProperties(ele_obj, obj_pro);
//                if (el_general_settings.having_flash_obj) {
//                    appendUploadifyProperties(ele_obj, obj_pro);
//                } else {
//                    uploadifyFlashError();
//                }
                break;
            case 'textbox':
                addElementProperties($(ele_obj), edit_attr);
                applyInputTextCase($(editable.$form).find(".editable-input"));
                applyAddonElementHTML($(editable.$form).find(".editable-input"), obj_pro);
                break;
            case 'color_picker':
                activateColorPicker(ele_obj, edit_attr.color_preview);
                addElementProperties($(ele_obj), edit_attr);
                break;
            case 'autocomplete':
                var $ele_rand_id = Math.floor((Math.random() * 100000) + 1);
                $(ele_obj).attr('id', $ele_rand_id);
                $(ele_obj).wrap('<div class="frm-token-autocomplete frm-size-medium" />');
                activateAutoComplete(ele_obj, obj_pro, ele_name);
                addElementProperties($(ele_obj), edit_attr);
                setTimeout(function () {
                    $(editable.$form).find(".frm-token-autocomplete").append(inline_settings_arr[i_name].add_content);
                    var ref_url = $(editable.$form).find('.fancybox-hash-iframe').attr('href');
                    $(editable.$form).find('.fancybox-hash-iframe').attr('href', ref_url + '|rfhtmlID|' + $ele_rand_id);
                }, 5);
                break;
            case 'rating_master':
                $(ele_obj).hide();
                appendRatingProperties(ele_obj, obj_pro);
                break;
        }
    });
    if (inline_settings_arr[i_name]['type'] == "rating_master") {
        $('#' + i_name).on('hidden', function (e, reason) {
            var ele_name = $(this).attr("id");
            $("#rshow_" + ele_name).show();
        });
    }
}
function activateAutoComplete(ele_obj, obj_pro, ele_name) {
    var par_obj = obj_pro.editevents.token.params;
    token_pre_populates[ele_name] = par_obj.prePopulate;
    getAutoCompDataValueArr(ele_name);
    token_input_assign = $(ele_obj).tokenInput(obj_pro.editevents.serviceUrl, {
        minChars: par_obj.minChars,
        multi: obj_pro.editevents.multi,
        propertyToSearch: par_obj.propertyToSearch,
        theme: par_obj.theme,
        tokenLimit: par_obj.tokenLimit,
        hintText: par_obj.hintText,
        noResultsText: par_obj.noResultsText,
        searchingText: par_obj.searchingText,
        preventDuplicates: par_obj.preventDuplicates,
        prePopulate: par_obj.prePopulate,
        onAdd: function (item) {
            token_pre_populates[ele_name] = token_input_assign.tokenInput('get');
            getAutoCompDataValueArr(ele_name);
        },
        onDelete: function (item) {
            token_pre_populates[ele_name] = token_input_assign.tokenInput('get');
            getAutoCompDataValueArr(ele_name);
        }
    });
}
function getAutoCompDataValueArr(ele_name) {
    var $data_arr = [];
    for (i in token_pre_populates[ele_name]) {
        $data_arr[i] = token_pre_populates[ele_name][i]['val'];
    }
    $("#" + ele_name).attr("data-value", $data_arr.join(","));
}
function appendRatingProperties(eleObj, obj_pro) {
    var raty_elem, rv_elem, rh_elem, txt;
    raty_elem = $('<span />', {"id": "rstar_" + obj_pro.name, "aria-raty-name": obj_pro.name}).addClass("rating-icons-block");
    rh_elem = $("#rshow_" + obj_pro.name);
    rv_elem = $("#rscore_" + obj_pro.name);
    txt = $(rv_elem).text();
    var raty_params = $.extend({}, obj_pro.editevents.raty.params);
    raty_params.target = eleObj;
    activateRatingMasterEvent(raty_elem, raty_params, obj_pro.editevents.raty.hints, txt)
    $(eleObj).after(raty_elem);
    $(rh_elem).hide();
}
function makeEditablePassword(i_name) {
    if (!inline_settings_arr[i_name]) {
        return;
    }
    var i_value = inline_settings_arr[i_name]['value'];
    $('#' + i_name).editable({
        showbuttons: true,
        type: 'password',
        placeholder: inline_settings_arr[i_name].place_holder,
        name: i_name,
        value: i_value,
        pk: el_form_settings.form_edit_id,
        onblur: 'submit',
        validate: function (value) {
            var vid = $(this).attr("id");
            return validateViewInlineEdit(vid, value, inline_settings_arr[vid])
        },
        url: function (params) {
            saveFormInlineEditble(params.name, params.value, params.id);
        }
    });
    $('#' + i_name).on('shown', function (e, editable) {
        var ele_name = $(this).attr("id");
        var ele_obj = $(editable.$form).find(".editable-input").find("input[type='password']");
        var obj_pro = inline_settings_arr[ele_name];
        var parent_attr = obj_pro.parentattr;
        var edit_attr = obj_pro.editattr;
        addElementProperties($(ele_obj), edit_attr);
        if (obj_pro.patternlock) {
            $(ele_obj).attr("role", "patternlock");
            initializePatternPwdEvents($(editable.$form).find(".editable-input"));
        }
    });
}
function intializeInlineEditble(eleObj) {
    if (!inline_settings_arr) {
        return;
    }
    var inline_settings = inline_settings_arr;
    for (var i in inline_settings) {
        var v_editable = inline_settings[i]['editable'];
        if (!v_editable) {
            continue;
        }
        var v_type = inline_settings[i]['type'];
        var v_name = inline_settings[i]['name'];
        if (eleObj && $(eleObj).length) {
            if (!$(eleObj).find("#" + v_name).length) {
                continue;
            }
        }
        switch (v_type) {
            case 'checkboxes' :
                makeEditableDropdown(v_name);
                break;
            case 'code_markup_field' :
                makeEditableTextArea(v_name);
                break;
            case 'date' :
                makeEditableTextBox(v_name);
                break;
            case 'date_and_time' :
                makeEditableTextBox(v_name);
                break;
            case 'dropdown' :
                makeEditableDropdown(v_name);
                break;
            case 'file' :
                makeEditableTextBox(v_name);
                break;
            case 'google_maps' :
                makeEditableTextArea(v_name);
                break;
            case 'multi_select_dropdown' :
                makeEditableDropdown(v_name);
                break;
            case 'password' :
                makeEditablePassword(v_name);
                break;
            case 'phone_number' :
                makeEditableTextBox(v_name);
                break;
            case 'radio_buttons' :
                makeEditableDropdown(v_name);
                break;
            case 'textarea' :
                makeEditableTextArea(v_name);
                break;
            case 'time' :
                makeEditableTextBox(v_name);
                break;
            case 'color_picker' :
                makeEditableTextBox(v_name);
                break;
            case 'autocomplete' :
                makeEditableTextBox(v_name);
                break;
            case 'rating_master' :
                makeEditableTextBox(v_name);
                break;
            case 'wysiwyg' :
                makeEditableTextArea(v_name);
                break;
            default :
                //for textbox
                makeEditableTextBox(v_name);
                break;
        }
    }
}
function displaySettingOntheFlyImage(hid, rarr) {
    if (rarr['fileURL']) {
        var del_btn = "<a title='" + js_lang_label.GENERIC_GRID_DELETE + "' style='text-decoration:none;' href='javascript://' onclick='deleteSettingFileTypeDocs(\"" + hid + "\")' id='anc_imgdel_" + hid + "' >";
        del_btn += "<i class='icon16 entypo-icon-close icon-red no-margin'></i>";
        del_btn += "</a>";

        var $img_str = $("<a />");
        if (rarr['fileType'] == 'file') {
            $($img_str).attr("id", "anc_imgview_" + hid)
                    .attr("href", rarr['fileURL'])
                    .attr("target", "_blank")
                    .html("<i class='fa fa-file-text-o fa-2x'></i>");
            $("#img_view_" + hid).html($img_str);
        } else {
            var $img_attr = '';
            if (!rarr['resized']) {
                $img_attr = "width='" + rarr['width'] + "' height='" + rarr['height'] + "'";
            }
            $($img_str).attr("id", "anc_imgview_" + hid)
                    .attr("href", rarr['fileURL'])
                    .addClass("fancybox-image")
                    .html("<img src='" + rarr['fileURL'] + "' alt='Image' " + $img_attr + "'/>");
            $("#img_view_" + hid).html($img_str);
            /*
             $('#anc_imgview_' + hid).qtip({
             content: "<img src='" + rarr['fileURL'] + "' alt='Image' />"
             });
             */
            initializeFancyBoxEvents($("#img_view_" + hid));
        }
        $("#img_del_" + hid).html(del_btn);
    }
}
function deleteSettingFileTypeDocs(htmlID) {
    var label_elem = '<div />';
    var label_text = js_lang_label.GENERIC_ARE_YOU_SURE_WANT_TO_DELETE_THIS;
    var option_params = {
        title: js_lang_label.GENERIC_GRID_DELETE,
        dialogClass: "dialog-confirm-box form-delete-file-cnf",
        buttons: [{
                text: js_lang_label.GENERIC_DELETE,
                bt_type: 'delete',
                click: function () {
                    $.ajax({
                        url: $upload_form_file,
                        type: 'POST',
                        data: {
                            'vSettingName': htmlID,
                            'actionType': 'delete',
                            'vValue': $("#" + htmlID).val()
                        },
                        success: function (response) {
                            var res_arr = parseJSONString(response);
                            if (res_arr.success == '1') {
                                $('#img_view_' + htmlID).html("");
                                $("#img_del_" + htmlID).html("");
                                $('#old_' + htmlID).val('');
                                $("#" + htmlID).val('');
                            } else {
                                Project.setMessage(js_lang_label.GENERIC_ERROR_IN_FILE_DELETION, 0);
                            }
                        }
                    });
                    $(this).remove();
                }}, {
                text: js_lang_label.GENERIC_CANCEL,
                bt_type: 'cancel',
                click: function () {
                    $(this).remove();
                }
            }]
    }
    jqueryUIdialogBox(label_elem, label_text, option_params);
}
function applyAddonElementHTML(parObj, params) {
    if (params && params.addon_apply) {
        if (params.addon_html) {
            if (params.addon_pos && params.addon_pos == "prefix") {
                $(parObj).prepend(params.addon_html);
            } else {
                $(parObj).append(params.addon_html);
            }
        } else {
            if (params.addon_prefix) {
                $(parObj).prepend(params.addon_prefix);
            }
            if (params.addon_suffix) {
                $(parObj).append(params.addon_suffix)
            }
        }
    }
}
function initDetailViewEditable() {
    if (!detail_view_colmodel_json || !el_topview_settings.permit_edit_btn) {
        return;
    }
    var detail_settings_obj = {};
    for (i in detail_view_colmodel_json) {
        var v_type = detail_view_colmodel_json[i]['type'];
        var v_editable = detail_view_colmodel_json[i]['editable'];
        var v_edittype = detail_view_colmodel_json[i]['edittype'];
        var v_name = detail_view_colmodel_json[i]['htmlID'];
        detail_settings_obj[v_name] = detail_view_colmodel_json[i];

        if (v_type == "rating_master") {
            displayDetailViewRatingProperties(v_name, detail_settings_obj[v_name]);
        }
        if (!v_editable) {
            continue;
        }
        switch (v_type) {
            case 'checkboxes' :
                makeDetailViewEditableDropdown(v_name, detail_settings_obj);
                break;
            case 'code_markup_field' :
                makeDetailViewEditableTextArea(v_name, detail_settings_obj);
                break;
            case 'date' :
                makeDetailViewEditableTextBox(v_name, detail_settings_obj);
                break;
            case 'date_and_time' :
                makeDetailViewEditableTextBox(v_name, detail_settings_obj);
                break;
            case 'dropdown' :
                makeDetailViewEditableDropdown(v_name, detail_settings_obj);
                break;
            case 'file' :
                makeDetailViewEditableTextBox(v_name, detail_settings_obj);
                break;
            case 'google_maps' :
                makeDetailViewEditableTextArea(v_name, detail_settings_obj);
                break;
            case 'multi_select_dropdown' :
                makeDetailViewEditableDropdown(v_name, detail_settings_obj);
                break;
            case 'password' :
                makeDetailViewEditablePassword(v_name, detail_settings_obj);
                break;
            case 'phone_number' :
                makeDetailViewEditableTextBox(v_name, detail_settings_obj);
                break;
            case 'radio_buttons' :
                makeDetailViewEditableDropdown(v_name, detail_settings_obj);
                break;
            case 'textarea' :
                makeDetailViewEditableTextArea(v_name, detail_settings_obj);
                break;
            case 'time' :
                makeDetailViewEditableTextBox(v_name, detail_settings_obj);
                break;
            case 'color_picker':
                makeDetailViewEditableTextBox(v_name, detail_settings_obj);
                break;
            case 'autocomplete' :
                makeDetailViewEditableTextBox(v_name, detail_settings_obj);
                break;
            case 'rating_master' :
                makeDetailViewEditableTextBox(v_name, detail_settings_obj);
                break;
            case 'wysiwyg' :
                makeDetailViewEditableTextArea(v_name, detail_settings_obj);
                break;
            default :
                //for textbox
                makeDetailViewEditableTextBox(v_name, detail_settings_obj);
                break;
        }
    }

}
function saveDetailInlineEdit(name, value, id, extra) {
    var obj_prop = detail_view_colmodel_json[name];
    var data = {
        "name": obj_prop.name,
        "value": value,
        "id": id
    };
    if (typeof extra == 'object') {
        data = $.extend({}, data, extra);
    }
    var options = {
        "url": el_topview_settings.edit_page_url,
        "data": data,
        success: function (obj, config) {
            var res_arr = parseJSONString(obj);
            if (res_arr && res_arr.success == 'false') {
                var $jq_errmsg = js_lang_label.GENERIC_ERROR_IN_UPDATION;
                if (res_arr.message != "") {
                    $jq_errmsg = res_arr.message;
                }
                $('#' + name).editable('option', 'value', $('#' + name).attr("aria-prev-value"));
                $('#' + name).editable('show');
                gridReportMessage(false, $jq_errmsg);
            } else if (res_arr.success == '3' || res_arr.success == '4') {
                if (isRedirectEqualHash(res_arr.red_hash)) {
                    window.location.hash = res_arr.red_hash;
                    window.location.reload();
                } else {
                    window.location.hash = res_arr.red_hash;
                }
            } else if (res_arr.success == '5') {
                window.location.href = res_arr.red_hash;
            } else {
                switch (obj_prop.type) {
                    case "multi_select_dropdown" :
                    case "checkboxes" :
                        if ($('#' + name).attr("data-value") != '') {
                            $('#' + name).html($('#' + name).attr("data-value"));
                        }
                        break;
                    case "autocomplete" :
                        var par_obj = obj_prop.editoptions.token.params;
                        if (detail_token_pre_populates[name].length > 0) {
                            $('#' + name).html($('#' + name).attr("data-value"));
                        }
                        par_obj.prePopulate = detail_token_pre_populates[name];
                        break;
                    case 'password':
                        $('#' + name).html("*****");
                        break;
                    case "file" :
                        detail_view_colmodel_json[name]['dbval'] = value;
                        displayAdminFormFlyImage(name, id, obj_prop.editoptions.uploadify, res_arr);
                        break;
                    case "rating_master":
                        $("#rshow_" + obj_prop.htmlID).raty('set', {score: value});
                        $("#rscore_" + obj_prop.htmlID).text(value);
                        $("#" + obj_prop.htmlID).html('<span class="icon16 icomoon-icon-pencil-5"><b>' + js_lang_label.GENERIC_EDIT + '</b></span>');
                        break;
                    default:
                        $('#' + name).attr("aria-prev-value", value);
                        break;
                }
            }
        }
    };
    $('#' + name).editable("submit", options);
}
function adminAjaxAutoCompChangeEvent(eleObj, replaceId, init, params) {
    var tokenObject = $("#" + replaceId).data("tokenInputObject");
    if (!tokenObject) {
        return false;
    }
    var ele_child = $("#" + replaceId).data("tokenInputObject").getManualsettings();
    ele_child.extraParams = "parent_id=" + $(eleObj).val();
    if ($.isPlainObject(params)) {
        for (var i in params) {
            ele_child.extraParams += "&" + i + "=" + params[i];
        }
    }
    if (!init) {
        ele_child.prePopulate = {};
    }
    $("#" + replaceId).data("tokenInputObject").destroy();
    if ($("#autocomp_" + replaceId).find(".token-input-list-facebook").length) {
        $("#autocomp_" + replaceId).find(".token-input-list-facebook").remove();
    }
    if ($("#autocomp_" + replaceId).find(".token-input-list").length) {
        $("#autocomp_" + replaceId).find(".token-input-list").remove();
    }
    $("#" + replaceId).tokenInput(ele_child.url, ele_child);
}
function makeDetailViewEditableTextBox(v_name, detail_settings_obj) {
    var v_value = detail_settings_obj[v_name]['value'];
    var show_btn = true;
    if (detail_settings_obj[v_name]['type'] == "file") {
        var i_value = detail_settings_obj[v_name]['dbval'];
        show_btn = false;
    }
    $('#' + v_name).editable({
        showbuttons: show_btn,
        placeholder: detail_settings_obj[v_name].editoptions.placeholder,
        type: 'text',
        name: v_name,
        value: i_value,
        pk: el_topview_settings.edit_id,
        onblur: 'submit',
        validate: function (value) {
            var vid = $(this).attr("id");
            return validateViewInlineEdit(vid, value, detail_settings_obj[vid]);
        },
        url: function (params) {
            saveDetailInlineEdit(params.name, params.value, params.id);
        }
    });
    $('#' + v_name).on('shown', function (e, editable) {
        var ele_name = $(this).attr("id");
        var ele_obj = $(editable.$form).find(".editable-input").find("input[type='text']");
        var obj_pro = detail_settings_obj[ele_name];
        switch (obj_pro.type) {
            case 'date':
                $(ele_obj).addClass("date-picker-icon");
                activeDateTimePicker(ele_obj, "date", obj_pro.editoptions);
                break;
            case 'date_and_time':
                $(ele_obj).addClass("date-picker-icon")
                activeDateTimePicker(ele_obj, "dateTime", obj_pro.editoptions);
                break;
            case 'time':
                $(ele_obj).addClass("date-picker-icon")
                activeDateTimePicker(ele_obj, "time", obj_pro.editoptions);
                break;
            case 'phone_number':
                $(ele_obj).mask(obj_pro.editoptions.format);
                break;
            case 'textbox':
                if (obj_pro.editoptions.text_case) {
                    $(ele_obj).addClass(obj_pro.editoptions.text_case);
                    applyInputTextCase($(editable.$form).find(".editable-input"));
                }
                applyAddonElementHTML($(editable.$form).find(".editable-input"), obj_pro);
                break;
            case 'color_picker':
                activateColorPicker(ele_obj, obj_pro.editoptions.color_preview);
                addElementProperties(ele_obj, obj_pro.editoptions);
                break;
            case 'file':
                $(ele_obj).hide();
//                if (el_general_settings.having_flash_obj) {
                //                    appendDetailViewUploadifyProperties(ele_obj, obj_pro);
                //                } else {
//                    uploadifyFlashError();
                //                }
                appendDetailViewUploadifyProperties(ele_obj, obj_pro);
                break;
            case 'autocomplete' :
                var $ele_rand_id = Math.floor((Math.random() * 100000) + 1);
                $(ele_obj).attr('id', $ele_rand_id);
                $(ele_obj).wrap('<div class="frm-token-autocomplete frm-size-medium" />');
                activateDetailViewAutoComplete(ele_obj, obj_pro, v_name);
                addElementProperties(ele_obj, obj_pro.editoptions);
                setTimeout(function () {
                    $(editable.$form).find(".frm-token-autocomplete").append(detail_settings_obj[v_name].add_content);
                    var ref_url = $(editable.$form).find('.fancybox-hash-iframe').attr('href');
                    $(editable.$form).find('.fancybox-hash-iframe').attr('href', ref_url + '|rfhtmlID|' + $ele_rand_id);
                }, 5);
                break;
            case 'rating_master':
                $(ele_obj).hide();
                appendDetailViewRatingProperties(ele_obj, obj_pro);
                break;
        }
        if (parseInt(obj_pro.editoptions.width) > 0) {
            $(ele_obj).css("width", obj_pro.editoptions.width);
        }
    });
    if (detail_settings_obj[v_name]['type'] == "rating_master") {
        $('#' + v_name).on('hidden', function (e, reason) {
            var ele_name = $(this).attr("id");
            $("#rshow_" + ele_name).show();
        });
    }
}
function activateDetailViewAutoComplete(ele_obj, obj_pro, ele_name) {
    var par_obj = obj_pro.editoptions.token.params;
    detail_token_pre_populates[ele_name] = par_obj.prePopulate;
    getDetailAutoCompDataValueArr(ele_name);
    detail_token_input_assign = $(ele_obj).tokenInput(obj_pro.editoptions.serviceUrl, {
        minChars: par_obj.minChars,
        multi: obj_pro.editoptions.multi,
        propertyToSearch: par_obj.propertyToSearch,
        theme: par_obj.theme,
        tokenLimit: par_obj.tokenLimit,
        hintText: par_obj.hintText,
        noResultsText: par_obj.noResultsText,
        searchingText: par_obj.searchingText,
        preventDuplicates: par_obj.preventDuplicates,
        prePopulate: par_obj.prePopulate,
        onAdd: function (item) {
            detail_token_pre_populates[ele_name] = detail_token_input_assign.tokenInput('get');
            getDetailAutoCompDataValueArr(ele_name);
        },
        onDelete: function (item) {
            detail_token_pre_populates[ele_name] = detail_token_input_assign.tokenInput('get');
            getDetailAutoCompDataValueArr(ele_name);
        }
    });
}
function getDetailAutoCompDataValueArr(ele_name) {
    var $data_arr = [];
    for (i in detail_token_pre_populates[ele_name]) {
        $data_arr[i] = detail_token_pre_populates[ele_name][i]['val'];
    }
    $("#" + ele_name).attr("data-value", $data_arr.join(","));
}
function displayDetailViewRatingProperties(v_name, obj_pro) {
    var raty_elem, rv_elem, txt;
    raty_elem = $('<span />').attr("id", "rshow_" + v_name).addClass("rating-icons-block");
    rv_elem = $("#rscore_" + v_name);
    txt = $(rv_elem).text();
    var raty_params = $.extend({}, obj_pro.editoptions.raty.params);
    raty_params.cancel = false;
    raty_params.readOnly = true;
    activateRatingMasterEvent(raty_elem, raty_params, obj_pro.editoptions.raty.hints, txt)
    $(rv_elem).after(raty_elem);
    $(rv_elem).hide();
}
function appendDetailViewRatingProperties(eleObj, obj_pro) {
    var raty_elem, rv_elem, rh_elem, txt;
    raty_elem = $('<span />', {"id": "rstar_" + obj_pro.htmlID, "aria-raty-name": obj_pro.htmlID}).addClass("rating-icons-block");
    rh_elem = $("#rshow_" + obj_pro.htmlID);
    rv_elem = $("#rscore_" + obj_pro.htmlID);
    txt = $(rv_elem).text();
    var raty_params = $.extend({}, obj_pro.editoptions.raty.params);
    raty_params.target = eleObj;
    activateRatingMasterEvent(raty_elem, raty_params, obj_pro.editoptions.raty.hints, txt)
    $(eleObj).after(raty_elem);
    $(rh_elem).hide();
}
function makeDetailViewEditableTextArea(v_name, detail_settings_obj) {
    $('#' + v_name).editable({
        showbuttons: true,
        type: 'textarea',
        placeholder: detail_settings_obj[v_name].editoptions.placeholder, name: v_name,
        pk: el_topview_settings.edit_id,
        onblur: 'submit',
        rows: 3,
        validate: function (value) {
            var vid = $(this).attr("id");
            return validateViewInlineEdit(vid, value, detail_settings_obj[vid]);
        },
        url: function (params) {
            saveDetailInlineEdit(params.name, params.value, params.id);
        }
    });
    $('#' + v_name).on('shown', function (e, editable) {
        var ele_name = $(this).attr("id");
        var ele_obj = $(editable.$form).find(".editable-input").find("textarea");
        var obj_pro = detail_settings_obj[ele_name];
        if (obj_pro.editoptions.text_case) {
            $(ele_obj).addClass(obj_pro.editoptions.text_case);
            applyInputTextCase($(editable.$form).find(".editable-input"));
        }
    });

}
function makeDetailViewEditablePassword(v_name, detail_settings_obj) {
    $('#' + v_name).editable({
        showbuttons: true,
        type: 'password',
        placeholder: detail_settings_obj[v_name].editoptions.placeholder,
        name: v_name,
        pk: el_topview_settings.edit_id,
        onblur: 'submit',
        validate: function (value) {
            var vid = $(this).attr("id");
            return validateViewInlineEdit(vid, value, detail_settings_obj[vid])
        },
        url: function (params) {
            saveDetailInlineEdit(params.name, params.value, params.id);
        }
    });
}
function makeDetailViewEditableDropdown(v_name, detail_settings_obj) {
    if (detail_settings_obj[v_name].editoptions && detail_settings_obj[v_name].editoptions.dataUrl) {
        var v_dataUrl = detail_settings_obj[v_name].editoptions.dataUrl;
        $('#' + v_name).editable({
            showbuttons: true,
            type: 'select',
            source: v_dataUrl,
            pk: el_topview_settings.edit_id,
            sourceCache: false,
            validate: function (value) {
                var vid = $(this).attr("id");
                return validateViewInlineEdit(vid, value, detail_settings_obj[vid])
            },
            url: function (params) {
                saveDetailInlineEdit(params.name, params.value, params.id);
            }
        });
        $('#' + v_name).on('shown', function (e, editable) {
            var $that = $(editable.$form).find(".editable-input").find("select");
            $($that).attr('data-placeholder', detail_settings_obj[v_name].editoptions.data_placeholder);
            $($that).find("option").removeAttr("selected");
            var data_val = $(this).attr("data-value")
            $($that).find("option").each(function () {
                if ($(this).text() == data_val) {
                    $(this).prop("selected", true);
                    return false;
                }
            });
            var ele_name = $(this).attr("id");
            var obj_pro_cc = detail_settings_obj[ele_name];
            switch (obj_pro_cc.type) {
                case 'checkboxes':
                    $($that).attr("multiple", true);
                    break;
                case 'multi_select_dropdown':
                    $($that).attr("multiple", true);
                    break;
            }
            if (parseInt(obj_pro_cc.editoptions.width) > 0) {
                $($that).attr('style', function (i, s) {
                    return 'width: ' + obj_pro_cc.editoptions.width + 'px !important;' + s
                });
            }
            if (obj_pro_cc.type == "checkboxes" || obj_pro_cc.type == "multi_select_dropdown") {
                var data_val_arr = [];
                $.each(data_val.split(","), function () {
                    data_val_arr.push($.trim(this));
                });
                $($that).find("option").each(function () {
                    if ($.inArray($.trim($(this).text()), data_val_arr) != -1) {
                        $(this).prop("selected", true);
                    }
                });
            } else {
                $($that).find("option").each(function () {
                    if ($.trim($(this).text()) == $.trim(data_val)) {
                        $(this).prop("selected", true);
                        return false;
                    }
                });
            }
            setTimeout(function () {
                $($that).chosen({
                    allow_single_deselect: true
                });
                var that_id = $($that).attr("id");
                $('#' + that_id + '_chosen').trigger('mousedown');
                $('#' + that_id + '_chosen').find("input[type='text']").focus();
                var obj_pro = detail_settings_obj[ele_name];
                if (obj_pro.editoptions.ajaxCall == "ajax-call") {
                    var inlineID = obj_pro.editoptions.rel;
                    var $queryStr = "&mode=" + cus_enc_mode_json['Update'] + "&&unique_name=" + inlineID + "&id=" + el_topview_settings.edit_id;
                    var $ajaxSendURL = el_topview_settings.ajax_data_url + $queryStr;
                    $($that).ajaxChosen({
                        dataType: 'json',
                        type: 'POST',
                        url: $ajaxSendURL
                    }, {
                        loadingImg: admin_image_url + "chosen-loading.gif"
                    });
                }
            }, 5)
            $($that).change(function () {
                if (obj_pro_cc.type == "checkboxes" || obj_pro_cc.type == "multi_select_dropdown") {
                    var mlist_val = [];
                    $(this).find("option:selected").each(function () {
                        mlist_val.push($(this).text());
                    });
                    if (mlist_val && mlist_val.length > 0) {
                        $("#" + ele_name).attr("data-value", mlist_val.join(","));
                    } else {
                        $("#" + ele_name).attr("data-value", "");
                    }
                } else {
                    $("#" + ele_name).attr("data-value", $(this).find("option:selected").val());
                }
            })
        });
    }

}
function appendDetailViewUploadifyProperties(ele_obj, obj_pro) {
    if (!obj_pro) {
        return;
    }
    var ele_name = obj_pro.htmlID;
    var ele_val = obj_pro.dbval;
    var ele_label = obj_pro.label;
    var ele_parent = obj_pro.parentattr;
    var ele_events = obj_pro.editoptions;

//    var $fileStr = "<input type='hidden' value='" + ele_val + "' name='temp_" + ele_name + "' id='temp_" + ele_name + "' />";
//    $fileStr += "<input type='file' name='uploadify_" + ele_name + "' id='uploadify_" + ele_name + "' title='" + ele_label + "'/>";
//    var par_obj = $(ele_obj).closest('.editable-container')
//    $(par_obj).wrap('<span ' + ele_parent + ' />');
//    $(ele_obj).after($fileStr);
//    if (ele_events.uploadify) {
//        var upload_data = ele_events.uploadify;
//        var upload_params = upload_data.params;
//        var basic_params = assignEventParams(upload_params);
//        var function_params = {
//            'formData': {
    //                'unique_name': upload_data['unique_name'],
    //                'id': upload_data['id'],
    //                'type': 'uploadify'
//            },
    //            'onSelect': function(file) { //                var joldval = $('#temp_' + ele_name).val();
//                $('#uploadify_' + ele_name).uploadify('settings', 'formData', {
    //                    'oldFile': joldval
//                });
//                $('#uploadify_' + ele_name).uploadify('upload');
//            },
    //            'onUploadSuccess': function(file, data, response) {
    //                if (data) {
    //                    var jparse_data = parseJSONString(data);
    //                    if (jparse_data.success == "0") {
    //                        Project.setMessage(jparse_data.message, 0);
    //                    } else {
    //                        $('#' + ele_name).val(jparse_data.uploadfile);
//                        $('#temp_' + ele_name).val(jparse_data.oldfile);
    //                        displayAdminFormFlyImage(ele_name, upload_data['id'], upload_data, jparse_data);
    //                        var old_data = {
    //                            "old_file": ele_val
//                        };
    //                        saveDetailInlineEdit(ele_name, jparse_data.uploadfile, el_topview_settings.edit_id, old_data);
    //                        setTimeout(function() {
    //                            $('.jqgrid-subview').click();
    //                        }, 200)
    //                    }
//                }
//            }
//        };
    //        var final_params = $.extend({}, basic_params, function_params);
//        $('#uploadify_' + ele_name).uploadify(final_params);
    //    }


    if (!ele_events.fileupload) {
        return false;
    }

    var $fileStr = "<div class='uploader'>";
    $fileStr += "<input type='hidden' value='" + ele_val + "' name='temp_" + ele_name + "' id='temp_" + ele_name + "' />";
    $fileStr += "<input type='file' name='uploadify_" + ele_name + "' id='uploadify_" + ele_name + "' title='" + ele_label + "'/>";
    $fileStr += "<span class='filename' id='preview_caf_file'>" + ele_events.fileupload.placeholder + "</span><span class='action'>Choose File</span>";
    $fileStr += "</div>";

    var par_obj = $(ele_obj).closest('.editable-container')
    $(par_obj).wrap('<div ' + ele_parent + ' id="btn_file_' + ele_name + '"/>');
    $(ele_obj).after($fileStr);

    var upload_data = ele_events.fileupload;
    /*
     if (upload_data.capture && upload_data.capture == "Yes") {
     var cptscr = getCaptureDetailScript(ele_name, upload_data['unique_name'], upload_data['iModuleAddId']);
     $(ele_obj).before(cptscr);
     detectCaptureCameraAllow(ele_name, upload_data['unique_name'], upload_data['uploader']);
     }
     */
    var upload_params = upload_data.params;
    var basic_params = assignEventParams(upload_params);
    var function_params = {
        formData: {
            'unique_name': upload_data['unique_name'],
            'id': upload_data['id'],
            'type': 'uploadify'
        },
        add: function (e, data) {
            var upload_errors = [];
            var _input_name = $(this).fileupload('option', 'name');
            var _temp_name = $(this).fileupload('option', 'temp');
            var _form_data = $(this).fileupload('option', 'formData');
            var _file_size = $(this).fileupload('option', 'maxFileSize');
            var _file_type = $(this).fileupload('option', 'acceptFileTypes');

            var _input_val = data.originalFiles[0]['name'];
            var _input_size = data.originalFiles[0]['size'];
            if (_file_type != '*') {
                var _input_ext = (_input_val) ? _input_val.substr(_input_val.lastIndexOf('.')) : "";
                var accept_file_types = new RegExp('(\.|\/)(' + _file_type + ')$', 'i');
                if (_input_ext && !accept_file_types.test(_input_ext)) {
                    upload_errors.push(js_lang_label.ACTION_FILE_TYPE_IS_NOT_ACCEPTABLE);
                }
            }
            _file_size = _file_size * 1000;
            if (_input_size && _input_size > _file_size) {
                upload_errors.push(js_lang_label.ACTION_FILE_SIZE_IS_TOO_LARGE);
            }
            if (upload_errors.length > 0) {
                Project.setMessage(upload_errors.join('\n'), 0);
            } else {
                //                    $('#practive_' + _input_name).css('width', '0%');
                //                    $('#progress_' + _input_name).show();
                _form_data['oldFile'] = $('#' + _temp_name).val();
                $(this).fileupload('option', 'formData', _form_data);
                $('#preview_' + _input_name).html(_input_val);
                data.submit();
            }
        }, done: function (e, data) {
            if (data && data.result) {
                var _input_name = $(this).fileupload('option', 'name');
                var _temp_name = $(this).fileupload('option', 'temp');
                var jparse_data = parseJSONString(data.result);
                if (jparse_data.success == '0') {
                    Project.setMessage(jparse_data.message, 0);
                } else {
                    $('#' + _input_name).val(jparse_data.uploadfile);
                    $('#' + _temp_name).val(jparse_data.oldfile);
                    displayAdminFormFlyImage(_input_name, upload_data['id'], upload_data, jparse_data);
                    //                        setTimeout(function() {
                    //                            $('#progress_' + _input_name).hide();
                    //                        }, 1000);
                    var old_data = {
                        "old_file": ele_val
                    };
                    saveDetailInlineEdit(_input_name, jparse_data.uploadfile, el_topview_settings.edit_id, old_data);
                    setTimeout(function () {
                        $('.jqgrid-subview').click();
                    }, 200)
                }
            }
        },
        fail: function (e, data) {
            $.each(data.messages, function (index, error) {
                Project.setMessage(error, 0);
            });
        }
    };
    var final_params = $.extend({}, basic_params, function_params);
    $('#uploadify_' + ele_name).fileupload(final_params);
}
//related image/file on the fly display
function displayAdminFormFlyImage(hid, id, upload_data, rarr) {
    if (rarr['fileURL']) {
        var del_btn = "<a title='" + js_lang_label.GENERIC_GRID_DELETE + "' style='text-decoration:none;' href='javascript://' onclick='deleteFileTypeDocs(\"" + id + "\",\"" + upload_data.unique_name + "\",\"" + upload_data.delete_file_url + "\",\"" + upload_data.folder + "\",\"" + hid + "\",\"EN\")' id='anc_imgdel_" + hid + "' >";
        del_btn += "<i class='icon16 entypo-icon-close icon-red no-margin'></i>";
        del_btn += "</a>";

        var $img_str = $("<a />");
        if (rarr['fileType'] == 'file') {
            $($img_str).attr("id", "anc_imgview_" + hid)
                    .attr("href", rarr['fileURL'])
                    .attr("target", "_blank")
                    .addClass("btn btn-success btn-mini")
                    .html("View");
            $("#img_view_" + hid).html($img_str);
        } else {
            var $img_attr = "width='" + rarr['width'] + "' height='" + rarr['height'] + "'";
            $($img_str).attr("id", "anc_imgview_" + hid)
                    .attr("href", rarr['fileURL'])
                    .addClass("fancybox-image").html("<img src='" + rarr['fileURL'] + "' alt='Image' " + $img_attr + "/>");
            $("#img_view_" + hid).html($img_str);
            /*
             $('#anc_imgview_' + hid).qtip({
             content: "<img src='" + rarr['file_url'] + "' alt='Image' />"
             });
             */
        }
        $("#img_del_" + hid).html(del_btn);
        initializeFancyBoxEvents($("#img_view_" + hid));
    }
}
function printErrorMessage(target, source, error) {
    var tar_name = $(target).attr("name");
    if ($.isArray(source)) {
        for (var i = 0; i < source.length; i++) {
            var mat_res = isStringMatched(tar_name, source[i]);
            if (mat_res) {
                if ($.inArray($(target).attr("type"), ["checkbox", "radio"]) != "-1") {
                    var spec_id = $(target).attr('name');
                    if ($(target).attr("type") == "checkbox") {
                        spec_id = spec_id.replace(/\[]/g, '');
                    }
                    spec_id = spec_id.replace(/\[/g, '_').replace(/\]/g, '');
                    $('#' + spec_id + 'Err').html(error);
                } else {
                    $('#' + $(target).attr('id') + 'Err').html(error);
                }
                break;
            }
        }
    } else {
        var mat_res = isStringMatched(tar_name, source);
        if (mat_res) {
            $('#' + $(target).attr('id') + 'Err').html(error);
        }
    }
}
function isStringMatched(tar, src) {
    if (!src || !tar) {
        return false;
    }
    src = src.replace(/\[/g, '\\[').replace(/\]/g, '\\]')
    var src_reg = new RegExp(src);
    var src_mat = tar.match(src_reg);
    if ($.isArray(src_mat) && src_mat.length > 0) {
        return true;
    } else {
        return false;
    }
}
function initFormSaveAsDraft(module, draft) {
    if (draft != "Yes" || !$("#frmaddupdate").length || !$("[data-form-name='" + module + "']").length) {
        stopFormSaveAsDraft();
        return;
    }

    var interval = el_tpl_settings.form_save_draft_interval;
    formSaveAsDraft = setInterval(function () {
        if ($("#frmaddupdate").length) {
            saveFormDraftContents(module);
        } else {
            stopFormSaveAsDraft();
        }
    }, interval);
}
function saveFormDraftContents(module) {
    $.ajax({
        url: admin_url + cus_enc_url_json["general_form_save_draft_action"],
        type: 'POST',
        data: {
            "draft_module": module,
            "form_data": $("#frmaddupdate").serializeArray(),
            "mode": $("#frmaddupdate").find("#mode").val(),
            "id": $("#frmaddupdate").find("#id").val()
        },
        success: function (data) {
            var response = parseJSONString(data);
            if (response && response.draft_id) {
                $("#draft_uniq_id").val(response.draft_id);
            }
        },
        complete: function () {

        }
    });
}
function stopFormSaveAsDraft() {
    try {
        clearInterval(formSaveAsDraft);
    } catch (err) {

    }
}
function initFormFileViewer(items, saved_ext, allowed_ext) {
    var global_ext = 'jpg,jpeg,jpe,png,gif,bmp,ico', local_ext = [];
    if (el_tpl_settings.admin_formats.image_extensions) {
        global_ext = el_tpl_settings.admin_formats.image_extensions;
    }
    global_ext = global_ext.split(",");
    if (saved_ext) {
        local_ext = $.isArray(saved_ext) ? saved_ext : saved_ext.split(",");
    }
    var other_ext = local_ext.filter(function (obj) {
        return global_ext.indexOf(obj) == -1;
    });
    if ($.isArray(other_ext) && other_ext.length > 0) {
        startCustomFileViewer(items);
    } else {
        startCustomImageGallery(items);
    }
}
function startCustomFileViewer(items) {
    createFileViewer();
    FileViewerPlugin.init(items);
    var base_obj = {
        'padding': 0,
        'width': '95%',
        'height': '95%',
        'autoSize': false,
        'helpers': {
            overlay: {
                closeClick: false
            } // prevents closing when clicking OUTSIDE fancybox
        },
        'wrapCSS': 'file-viewer-fancybox'
    };
    var tmpl_obj = getFancyboxTPLParams();
    var final_obj = $.extend({}, base_obj, tmpl_obj);
    $.fancybox.open("#fileViewerBox", final_obj);
}
function startCustomImageGallery(items) {
    var base_obj = {
        'padding': 0,
        'width': '90%',
        'height': '90%',
        'helpers': {
            overlay: {
                closeClick: false
            } // prevents closing when clicking OUTSIDE fancybox
        }
    };
    var tmpl_obj = getFancyboxTPLParams();
    var final_obj = $.extend({}, base_obj, tmpl_obj);
    $.fancybox.open(items, final_obj);
}

function createFileViewer() {
    var div = $('<div/>').attr('id', 'fileViewerBox').addClass('file-viewer-div');
    $('.module-form-container').after(div);

    var header = $('<div/>').addClass('file-viewer-top');
    $('#fileViewerBox').append(header);

    var title = $('<h3/>').attr('id', 'page-title').addClass('file-viewer-title');
    var nav = $('<div/>').addClass('file-viewer-nav');
    $('.file-viewer-top')
            .append(title)
            .append(nav);

    var previous = $('<a/>').attr({'id': 'btn-prev', 'title': 'Previous', 'href': 'javascript:;'})
            .append($('<i/>').addClass('fa fa-arrow-circle-left fa-2x'));

    var next = $('<a/>').attr({'id': 'btn-next', 'title': 'Previous', 'href': 'javascript:;'})
            .append($('<i/>').addClass('fa fa-arrow-circle-right fa-2x'));

    $('.file-viewer-nav')
            .append(previous)
            .append(next);

    var loader1 = $('<div/>').attr('id', 'fileviewer_qLoverlay');
    var loader2 = $('<div/>').attr('id', 'fileviewer_qLbar');
    var iframe = $('<div/>').attr('id', 'iframeFile').addClass('file-viewer-iframe').append($('<iframe/>'));
    $('#fileViewerBox')
            .append(loader1)
            .append(loader2)
            .append(iframe);

}
;
$(document).ready(function () {
    $(function () {
        $(document).on("click", "[aria-save-row]", function () {
            var grid_id = $(this).attr("aria-save-row");
            var row_id = $(this).attr("aria-row-id");
            saveInlineAddRecord(grid_id, row_id);
        });
        $(document).on("click", "[aria-cancel-row]", function () {
            var grid_id = $(this).attr("aria-cancel-row");
            var row_id = $(this).attr("aria-row-id");
            cancelInlineAddRecord(grid_id, row_id);
        });
        $(document).on("click", "[aria-iadd-new]", function () {
            var grid_id = $(this).attr("aria-iadd-new");
            addNewInlineRecord(grid_id);
        });
        $(document).on("click", "[aria-isave-all]", function () {
            var grid_id = $(this).attr("aria-isave-all");
            saveAllInlineRecords(grid_id);
        });
        $(document).on("click", "[aria-icancel-all]", function () {
            var grid_id = $(this).attr("aria-icancel-all");
            cancelAllInlineRecords(grid_id);
        });
        $(document).on("click", "[aria-search-table]", function () {
            var tbl_id = $(this).attr("aria-search-table");
            if ($("#tbl_search_records_" + tbl_id).is(':visible')) {
                $("#tbl_search_records_" + tbl_id).hide();
                $(this).removeClass("minimize-search").addClass("maximize-search");
            } else {
                $("#tbl_search_records_" + tbl_id).show();
                $(this).addClass("minimize-search").removeClass("maximize-search");
            }
        });
    });
});
//related to grid listing
function initMainGridListing() {
    delete el_grid_settings.grid_subgrid_alias;
    el_grid_settings.load_post = {};
    el_grid_settings.load_page = 1;
    var grid_id = el_tpl_settings.main_grid_id, pager_id = el_tpl_settings.main_pager_id, wrapper_id = el_tpl_settings.main_wrapper_id;
    var js_prev_key = '', js_assign_btn_id = '', js_next_btn_id = '', jsave = '', saved_obj = '';
    var js_col_name_arr = [], js_sort_count = 0, jrow = 0, jcol = 0, total_rows = 0, total_pages = 1;
    var apply_hash_filter = false, js_before_req = true, grid_comp_time = true, load_comp_time = true, data_scroll_pos = true;
    var show_paging_var = true, show_toolbar_label = false, show_listview_label = false, saved_search_label = false;
    if (window.location.hash) {
        var req_hash_var_arr = getHashParams(window.location.hash, el_tpl_settings.framework_vars);
    } else {
        var req_hash_var_arr = getQueryParams(window.location.search, el_tpl_settings.framework_vars);
    }
    var load_save_search = setSavedSearchSettings(grid_id, el_grid_settings.enc_location, el_grid_settings['search_list'], el_grid_settings['search_slug']);
    if (el_theme_settings.grid_filteropt) {
        if (el_theme_settings.grid_filteropt != "none" && Object.keys(req_hash_var_arr).length > 0) {
            apply_hash_filter = true;
        }
    } else if (Object.keys(req_hash_var_arr).length > 0) {
        apply_hash_filter = true;
    }
    if (!el_tpl_settings.page_animation) {
        load_comp_time = false;
    }
    if ('grid_toolbar_search_icon' in el_theme_settings) {
        if (!el_theme_settings.grid_toolbar_search_icon) {
            show_toolbar_label = true;
        }
    }
    if ('grid_view_listing_icon' in el_theme_settings) {
        if (!el_theme_settings.grid_view_listing_icon) {
            show_listview_label = true;
        }
    }
    if ('grid_saved_search_icon' in el_theme_settings) {
        if (!el_theme_settings.grid_saved_search_icon) {
            saved_search_label = true;
        }
    }

    var sub_grid_row = (el_grid_settings.subgrid == 'Yes' || el_grid_settings.colgrid == 'Yes') ? true : false;
    var row_numbers = (!sub_grid_row && el_grid_settings.inline_add == "Yes") ? true : false;
    var pager_active = (el_grid_settings.hide_paging_btn == "Yes") ? false : true;

    var add_permit = (el_grid_settings.hide_add_btn == '1' && el_grid_settings.permit_add_btn == "1") ? true : false;
    var del_permit = (el_grid_settings.hide_del_btn == '1' && el_grid_settings.permit_del_btn == '1') ? true : false;
    var status_permit = (el_grid_settings.hide_status_btn == '1' && el_grid_settings.permit_edit_btn == '1') ? true : false;
    var export_permit = (el_grid_settings.hide_export_btn == '1' && el_grid_settings.permit_expo_btn == '1' && !el_general_settings.mobile_platform) ? true : false;
    var print_permit = (el_grid_settings.print_list == 'Yes' && el_grid_settings.permit_print_btn == '1' && !el_general_settings.mobile_platform) ? true : false;

    var columns_permit = (el_grid_settings.hide_columns_btn == 'Yes' || el_general_settings.mobile_platform) ? false : true;
    var adv_search_permit = (el_grid_settings.hide_advance_search == 'Yes') ? false : true;
    var refresh_permit = (el_grid_settings.hide_refresh_btn == 'Yes') ? false : true;
    var inline_add_permit = (el_grid_settings.inline_add == "Yes" && el_grid_settings.permit_add_btn == "1") ? true : false;
    var search_tool_permit = (el_grid_settings.hide_search_tool == "Yes") ? false : true;
    var saved_search_permit = (el_tpl_settings.grid_saved_search_enable == "1") ? true : false;
    if ("show_saved_search" in el_grid_settings) {
        saved_search_permit = (el_grid_settings.show_saved_search == "Yes") ? true : false;
    }

    var viewtemplate = '#layout_view_' + grid_id; //custom
    var gridtemplate = '#layout_grid_' + grid_id; //custom
    var lazy_loading = (el_grid_settings.lazy_loading == "Yes") ? true : false;
    var global_filter = (el_grid_settings.global_filter == "Yes") ? true : false;
    var top_filter_arr = $.isArray(el_grid_settings.top_filter) ? el_grid_settings.top_filter : [];
    var action_callbacks = $.isPlainObject(el_grid_settings['callbacks']) ? el_grid_settings['callbacks'] : {};
    var list_message_arr = $.isPlainObject(el_grid_settings['message_arr']) ? el_grid_settings['message_arr'] : {};

    var grid_button_arr = ($.isArray(el_grid_settings.buttons_arr)) ? el_grid_settings.buttons_arr : [];
    var grid_button_ids = {
        "add": "add_" + grid_id,
        "del": "del_" + grid_id,
        "search": "search_" + grid_id,
        "refresh": "refresh_" + grid_id,
        "columns": "columns_" + grid_id,
        "export": "export_" + grid_id,
        "print": "print_" + grid_id,
    }

    if (el_general_settings.mobile_platform) {
        //el_grid_settings.auto_width = "No";
    }

    if (typeof executeBeforeGridInit == "function") {
        executeBeforeGridInit(el_grid_settings['module_name'], "main");
    }
    if (action_callbacks['before_grid_init'] && $.isFunction(window[action_callbacks['before_grid_init']])) {
        window[action_callbacks['before_grid_init']](el_grid_settings, js_col_model_json, js_col_name_json);
    }

    for (var i in js_col_name_json) {
        js_col_name_arr.push(js_col_name_json[i]['label']);
    }
    $(document).off("click", "input[name='export_mode']");
    $(document).on("click", "input[name='export_mode']", function () {
        if ($(this).val() == "all") {
            $("#export_columns_div").hide();
        } else {
            $("#export_columns_div").show();
        }
    });
    $(document).off("click", "input[name='export_type']");
    $(document).on("click", "input[name='export_type']", function () {
        if ($(this).val() == "pdf") {
            $("#orientation_columns_div").show();
        } else {
            $("#orientation_columns_div").hide();
        }
    });
    setTimeout(function () {
        initLeftPanelSearch(grid_id);
        initLeftPanelAutocomplete(grid_id);
    }, 200);

    if (!apply_hash_filter) {
        getAdminPreferenceLocal("before", grid_id);
    } else {
        if (!getToolbarHashFilters()) {
            getAdminPreferenceLocal("before", grid_id);
        }
    }

    if (!add_permit && !del_permit && !status_permit && !adv_search_permit && !columns_permit && !refresh_permit &&
            !export_permit && !print_permit && !inline_add_permit && !search_tool_permit && !saved_search_permit &&
            !global_filter && !($.isArray(top_filter_arr) && top_filter_arr.length > 0) &&
            !($(viewtemplate).length || $(gridtemplate).length) && el_tpl_settings.grid_top_menu == 'N') {
        show_paging_var = false;
    }
    if (lazy_loading) {
        data_scroll_pos = false;
    }

    var listview = findGridViewParam(window.location.hash, grid_id, el_grid_settings.listview, el_grid_settings.enc_location + '_gv');
    var show_search = getLocalStore(el_grid_settings.enc_location + '_st');
    var force_width = $("#main_content_div").width() - 30;
    var force_height = 400;
    if (isFancyBoxActive()) {
        load_comp_time = grid_comp_time = true;
        force_width = $(parent.window).width() * 75 / 100 - 100;
    }

    setHideColumnSettings(grid_id, js_col_model_json, top_filter_arr);
    getColumnsWidth(el_grid_settings.enc_location + '_cw', grid_id, js_col_model_json);
    if (show_search == 1) {
        $("#grid_data_col").removeClass("hide-search-toolbar")
    } else if (show_search == 0) {
        $("#grid_data_col").addClass("hide-search-toolbar")
    }
    initAutoRefreshGrid(el_grid_settings['module_name'], el_grid_settings['auto_refresh']);

    jQuery("#" + grid_id).jqGrid({
        postData: el_grid_settings.load_post.post,
        url: el_grid_settings.listing_url,
        editurl: el_grid_settings.edit_page_url,
        mtype: 'POST',
        datatype: "json",
        colNames: js_col_name_arr,
        colModel: js_col_model_json,
        page: el_grid_settings.load_page,
        pgbuttons: pager_active,
        pginput: pager_active,
        pgnumbers: (el_theme_settings.grid_pgnumbers) ? true : false, //custom
        pgnumlimit: (el_general_settings.mobile_platform) ? 2 : parseInt(el_theme_settings.grid_pgnumlimit), //custom
        pagingpos: el_theme_settings.grid_pagingpos, //custom
        rowNum: (el_grid_settings.hide_paging_btn == "Yes") ? 1000000 : parseInt(el_tpl_settings.grid_rec_limit),
        rowList: (pager_active) ? pager_row_list : [],
        sortname: el_grid_settings.default_sort,
        sortorder: el_grid_settings.sort_order,
        altRows: true,
        altclass: 'evenRow',
        multiselectWidth: 30,
        multiselect: (el_grid_settings.hide_multi_select == "Yes") ? false : true,
        multiboxonly: true,
        hiderecords: el_grid_settings.admin_rec_arr,
        viewrecords: true,
        scroll: lazy_loading,
        norecmsg: js_lang_label.GENERIC_GRID_NO_RECORDS_FOUND,
        caption: false,
        hidegrid: false,
        listview: listview, //custom 
        showListViewLabel: show_listview_label, //custom 
        viewtemplate: '#layout_view_' + grid_id, //custom
        gridtemplate: '#layout_grid_' + grid_id, //custom
        viewCallback: function (id, type) {
            //custom
            reloadListGrid(grid_id, null, 2, el_grid_settings);
            setLocalStore(el_grid_settings.enc_location + '_gv', type);
        },
        listtags: ['{%', '%}'], //custom
        inlineadd: (el_grid_settings.inline_add == "Yes") ? true : false, //custom
        inlinerecpos: (el_grid_settings.rec_position == "Bottom") ? true : false, //custom
        isSubMod: 0, //custom
        curModule: el_grid_settings.add_page_url, //custom
        parModule: el_grid_settings.par_module, //custom
        parData: el_grid_settings.par_data, //custom
        parField: el_grid_settings.par_field, //custom
        parType: el_grid_settings.par_type, //custom
        extraHash: el_grid_settings.extra_hstr, //custom
        ratingAllow: (el_grid_settings.rating_allow == "Yes") ? true : false, //custom
        preSearch: el_grid_settings.load_post.search, //custom
        pager: (el_tpl_settings.grid_bot_menu == 'Y') ? pager_id : "",
        toppager: (el_tpl_settings.grid_top_menu == 'Y') ? true : false,
        toppaging: (el_tpl_settings.grid_top_menu == 'Y') ? true : false, //custom
        showpaging: show_paging_var, //custom
        cellurl: el_grid_settings.edit_page_url,
        cellsubmit: 'remote',
        sortable: {
            update: function (permutation) {
                setColumnsPosition(el_grid_settings.enc_location + '_cp', permutation, grid_id, js_col_model_json);
            }
        },
        searchGrid: {
            multipleSearch: true,
            savedSearch: (saved_search_permit) ? true : false,
            savedSearchLabel: (saved_search_label) ? true : false,
            savedSearchForm: function (id) {
                triggerSavedSearchForm(id, el_grid_settings.enc_location);
            },
            savedSearchList: function (id) {
                triggerSavedSearchList(id, el_grid_settings.enc_location, el_grid_settings);
            },
            searchToolbar: (search_tool_permit) ? true : false,
            showToolbarLabel: show_toolbar_label, //custom
            globalFilter: (global_filter) ? true : false,
            topFilters: top_filter_arr,
            topDataInit: triggerTopFilterEvent
        },
        afterSearchToggle: function (id) {
            //custom
            var type = 1;
            if ($("#hbox_" + id + "_jqgrid").find(".ui-search-toolbar").is(":hidden")) {
                $("#listsearch_" + id + "_top").removeClass("active");
                type = 0;
            }
            setLocalStore(el_grid_settings.enc_location + '_st', type);
            resizeGridWidth();
        },
        forceApply: true,
        forceWidth: force_width,
        width: force_width,
        height: force_height,
        autowidth: (el_grid_settings.auto_width == "No") ? false : true,
        _autowidth: (el_grid_settings.auto_width == "No") ? false : true,
        shrinkToFit: (el_grid_settings.auto_width == "No") ? false : true,
        fixed: true,
        //rownumbers: row_numbers,
        multiSort: (el_tpl_settings.grid_multiple_sorting) ? true : false,
        subGrid: sub_grid_row,
        subGridWidth: 18,
        subGridRowExpanded: function (subgrid_id, row_id) {
            var subgrid_table_id, add_params = '', t_did = "";
            subgrid_table_id = subgrid_id + "_sub";
            if (el_grid_settings.subgrid == "Yes" && !el_grid_settings.grid_subgrid_alias) {
                add_params = "&SGType=main";
            } else {
                if (el_grid_settings.grid_subgrid_alias) {
                    add_params = "&SGType=each&SGAlias=" + el_grid_settings.grid_subgrid_alias;
                } else {
                    for (var i in js_col_model_json) {
                        if (js_col_model_json[i]['expandrow']) {
                            el_grid_settings.grid_subgrid_alias = js_col_model_json[i]['index'];
                            break;
                        }
                    }
                    add_params = "&SGType=each&SGAlias=" + el_grid_settings.grid_subgrid_alias;
                }
            }
            delete el_grid_settings.grid_subgrid_alias;
            initGirdLoadingOverlay(grid_id);
            $("#" + subgrid_id).html("<div id='" + subgrid_table_id + "' class='scroll subgird-block'></div>");
            $("#" + subgrid_table_id).html('<div class="subgrid-loader"><i class="fa fa-spinner fa-pulse fa-5x fa-fw"></i></div>');
            $.ajax({
                url: el_grid_settings.subgrid_listing_url + '&SGRender=sub' + add_params,
                type: 'POST',
                data: {
                    "SGID": row_id,
                    "SGridID": subgrid_id
                },
                success: function (data) {
                    $("#" + subgrid_table_id).addClass("subgrid_view_div_display");
                    $("#" + subgrid_table_id).html(data);
                    hideGirdLoadingOverlay(grid_id);
                    initializeSubgridEvents($("#" + subgrid_table_id));
                }
            });
        },
        subGridRowColapsed: function (subgrid_id, row_id) {
            // this function is called before removing the data
            var subgrid_table_id = subgrid_id + "_sub";
            jQuery("#" + subgrid_table_id).remove();
            resizeGridWidth();
        },
        grouping: (el_grid_settings.grouping == 'Yes') ? true : false,
        groupingView: {
            groupField: ($.isArray(el_grid_settings.group_attr['field'])) ? el_grid_settings.group_attr['field'] : [],
            groupOrder: ($.isArray(el_grid_settings.group_attr['order'])) ? el_grid_settings.group_attr['order'] : [],
            groupText: ($.isArray(el_grid_settings.group_attr['text'])) ? el_grid_settings.group_attr['text'] : [],
            groupColumnShow: ($.isArray(el_grid_settings.group_attr['column'])) ? el_grid_settings.group_attr['column'] : [],
            groupSummary: ($.isArray(el_grid_settings.group_attr['summary'])) ? el_grid_settings.group_attr['summary'] : [],
            showSummaryOnHide: ($.isArray(el_grid_settings.group_attr['summary'])) ? el_grid_settings.group_attr['summary'] : [],
            groupCollapse: false,
            groupDataSorted: true
        },
        footerrow: (el_grid_settings.footer_row == 'Yes') ? true : false,
        userDataOnFooter: true,
        beforeRequest: function () {
            $(".horizon-data-scroll").scrollLeft(0);
            if (js_before_req) {
                js_before_req = false;
                if (!apply_hash_filter) {
                    getAdminPreferenceLocal("after", grid_id);
                } else {
                    getHashFilterConditions(el_tpl_settings.main_grid_id);
                }
                getColumnsPosition(el_grid_settings.enc_location + '_cp', grid_id);
                getColumnsChoosen(el_grid_settings.enc_location + '_cs', grid_id);
                //activateGridSortColumns(grid_id);
            } else {
                if (el_theme_settings.grid_filteropt) {
                    if (el_theme_settings.grid_filteropt == "always") {
                        getHashFilterConditions(el_tpl_settings.main_grid_id);
                    }
                } else {
                    getHashFilterConditions(el_tpl_settings.main_grid_id);
                }
            }
        },
        beforeProcessing: function (data) {
            total_rows = 0;
            total_pages = 1;
            delete el_general_settings.grid_main_link_model;
            if (data && data.total) {
                total_pages = data.total;
            }
            if (data && data.records) {
                total_rows = data.records;
            }
            if (data && data.links) {
                el_general_settings.grid_main_link_model = data.links;
            }
        },
        loadError: function (xhr, status, error) {
            hideGirdLoadingOverlay(grid_id);
        },
        loadComplete: function (data) {
            hideGirdLoadingOverlay(grid_id);
            Project.hide_adaxloading_div();
            $("#" + grid_id + "_messages_html").remove();
            $("#selAllRows").val('false');
            // No Records Message
            noRecordsMessage(grid_id, data);
            // nowrap width adjusting
            //adjustWrappedWidth(grid_id);
            // Resizing Grid
            if (load_comp_time) {
                load_comp_time = false;
            } else {
                resizeGridWidth();
                checkColumnsWidth(el_grid_settings.enc_location + '_cw', grid_id);
            }
            // Apply Search Active
            applySearchCriteria(grid_id);
            // Add new record
            //addNewInlineRecord(grid_id);
            // Apply row colors
            applyGridRowColors(grid_id, data);
            // Rating Events
            //applyRatingEvents(grid_id);
            // fancybox image events
            initializeFancyBoxEvents();
            setTimeout(function () {
                initNiceScrollBar();
            }, 100);
            if (data_scroll_pos) {
                applyGridScrollPosition(el_grid_settings.enc_location + '_sp', grid_id);
                data_scroll_pos = false;
            }
            if (typeof executeAfterGridLoad == "function") {
                executeAfterGridLoad(el_grid_settings['module_name'], "main");
            }
            if (action_callbacks['after_data_load'] && $.isFunction(window[action_callbacks['after_data_load']])) {
                window[action_callbacks['after_data_load']](data);
            }
        },
        gridComplete: function () {
            var $this = $(this);
            $(".ui-jqgrid-sortable").mousedown(function () {
                $(this).css('cursor', 'crosshair');
            });
            $(".ui-jqgrid-sortable").mouseup(function () {
                $(this).css({
                    cursor: 'pointer'
                });
            });
            if (!$("#grid_data_col").hasClass("hide-search-toolbar") && $("#hbox_" + grid_id + "_jqgrid").find(".ui-search-toolbar").is(":visible")) {
                $("#listsearch_" + grid_id + "_top").addClass("active");
            }

            // Resizing Grid
            if (grid_comp_time) {
                grid_comp_time = false;
                loadTopFilterData(grid_id);
            } else {
                resizeGridWidth();
            }
            // hide admin data checkboxes
            hideAdminDataCheckBox(grid_id, el_grid_settings.admin_rec_arr);
            // image data tooltips
            getAdminImageTooltip(grid_id);
            if (!apply_hash_filter) {
                setAdminPreferenceLocal(grid_id);
            }
        },
        ondblClickRow: function (rowid, iRow, iCol, e) {
            var $this = $(this);
            var view = $this.jqGrid('getGridParam', 'listview');
            if (view == "view" || view == "grid") {
                return;
            }
            var ac = $(e.srcElement).hasClass("add-cell") ? 1 : 0
            var ai = ($(e.srcElement).attr("aria-newrow") == "inline-add-row") ? 1 : 0;
            var bc = ($(e.srcElement).find(".inline-edit-row").length > 0) ? 1 : 0
            var cf = ($(e.srcElement).hasClass("inline-edit-row")) ? 1 : 0
            var sf = ($(e.srcElement).closest("td[role='gridcell']").hasClass('edit-cell')) ? 1 : 0
            if (ac || ai || bc || cf || sf) {
                e.stopPropagation();
            } else {
                $this.jqGrid('setGridParam', {
                    cellEdit: true
                });
                $this.jqGrid('editCell', iRow, iCol, true);
                $this.jqGrid('setGridParam', {
                    cellEdit: false
                });
            }
        },
        beforeEditCell: function (rowid, cellName, cellValue, iRow, iCol) {
            restoreBeforeEditedCell(this, jrow, jcol, jsave);
            if ($(".colpick").length) {
                $(".colpick").hide();
            }
        },
        afterEditCell: function (rowid, cellName, cellValue, iRow, iCol) {
            var cellDOM = this.rows[iRow].cells[iCol], oldKeydown;
            var $cellInput = $("#" + iRow + "_" + cellName, cellDOM);
            var events = $._data($cellInput.eq(0), "events"), cselector = $cellInput["selector"];
            var $this = $(this), date_flag = false, colorpicker_flag = false, phone_flag = false;

            if ($cellInput.hasClass("dateOnly")) {
                inlineDateTimePicker(iRow, cellName, 'date');
                var date_flag = true;
            } else if ($cellInput.hasClass("timeOnly")) {
                inlineDateTimePicker(iRow, cellName, 'time');
                var date_flag = true;
            } else if ($cellInput.hasClass("dateTime")) {
                inlineDateTimePicker(iRow, cellName, 'dateTime');
                var date_flag = true;
            } else if ($cellInput.hasClass("colorPicker")) {
                inlineColorPicker(iRow, cellName, 'colorPicker');
                var colorpicker_flag = true;
            } else if ($cellInput.hasClass("phoneNumber")) {
                var phone_flag = true;
            } else if ($cellInput.hasClass("inline-textarea-edit")) {
                var txt = $($cellInput).val();
                txt = txt.replace(/<br>/g, "");
                txt = txt.replace(/<BR>/g, "");
                $($cellInput).val(txt);
            }

            jrow = iRow;
            jcol = iCol;
            jsave = ($.isArray(this.p.savedRow)) ? this.p.savedRow[this.p.savedRow.length - 1].v : "";
            if ($(cellDOM).find("select[role='select']").length) {
                $cellDrop = $(cellDOM).find("select[role='select']");
                $($cellDrop).attr("aria-update-id", rowid);
                saved_obj = this.p.savedRow;
                $($cellDrop).on('change', function (e) {
                    $this.jqGrid('setGridParam', {
                        cellEdit: true
                    });
                    $this.jqGrid('setGridParam', {
                        savedRow: saved_obj
                    });
                    $this.jqGrid('saveCell', iRow, iCol);
                    $this.jqGrid('restoreCell', iRow, iCol, true);
                    $(cellDOM).removeClass("ui-state-highlight");
                    jrow = 0, jcol = 0, jsave = '';
                    saved_obj = $this.jqGrid('getGridParam', 'savedRow');
                });
                var autoChznInterval = setInterval(function () {
                    if ($(cselector).hasClass("chosen-select") && $(cselector + "_chosen").length) {
                        $(cselector + "_chosen").on('keydown', function (e) {
                            if (e.keyCode == 27) {
                                if ($(cselector + "_chosen").find(".chosen-drop").css("left") == "-9999px") {
                                    $this.jqGrid('setGridParam', {
                                        cellEdit: true
                                    });
                                    $this.jqGrid('setGridParam', {
                                        savedRow: saved_obj
                                    });
                                    $this.jqGrid('restoreCell', iRow, iCol, true);
                                    $(cellDOM).removeClass("ui-state-highlight");
                                    jrow = 0, jcol = 0, jsave = '';
                                }
                            } else if (e.keyCode == 9) {
                                $this.jqGrid('setGridParam', {
                                    cellEdit: true
                                });
                                $this.jqGrid('setGridParam', {
                                    savedRow: saved_obj
                                });
                                if (e.shiftKey) {
                                    $this.jqGrid("prevCell", iRow, iCol);
                                } //Shift TAb
                                else {
                                    $this.jqGrid("nextCell", iRow, iCol);
                                } //Tab
                            }
                        });
                        clearInterval(autoChznInterval);
                    }
                }, 250);
            } else {
                applyInputTextCase($(cellDOM));
                saved_obj = this.p.savedRow;
                setTimeout(function () {
                    if (events && events.keydown && events.keydown.length) {
                        $this.jqGrid('setGridParam', {
                            savedRow: saved_obj
                        });
                        oldKeydown = events.keydown[0].handler;
                        $cellInput.unbind('keydown', oldKeydown);
                        $cellInput.bind('keydown', function (e) {
                            $this.jqGrid('setGridParam', {
                                cellEdit: true
                            });
                            $this.jqGrid('setGridParam', {
                                savedRow: saved_obj
                            });
                            if ($cellInput.hasClass("inline-textarea-edit")) {
                                if (e.keyCode === 13) {
                                    if (e.shiftKey) {
                                        e.stopPropagation();
                                    } else {
                                        $this.jqGrid('saveCell', iRow, iCol);
                                        $this.jqGrid('restoreCell', iRow, iCol, true);
                                        $(cellDOM).removeClass("ui-state-highlight");
                                        jrow = 0, jcol = 0, jsave = '';
                                    }
                                } else {
                                    oldKeydown.call(this, e);
                                }
                            } else if ($cellInput.hasClass("colorPicker")) {
                                if (e.keyCode === 9 || e.keyCode === 13 || e.keyCode === 27) {
                                    if ($(".colpick").length) {
                                        $(".colpick").hide();
                                    }
                                }
                                oldKeydown.call(this, e);
                            } else {
                                oldKeydown.call(this, e);
                            }
                            $this.jqGrid('setGridParam', {
                                cellEdit: false
                            });
                        }).bind('focusout', function (e) {
                            $this.jqGrid('setGridParam', {
                                savedRow: saved_obj
                            });
                            if (date_flag) {
                                if ($(".ui-datepicker").is(":hidden")) {
                                    $this.jqGrid('setGridParam', {
                                        cellEdit: true
                                    });
                                    //$this.jqGrid('saveCell', iRow, iCol);
                                    $this.jqGrid('restoreCell', iRow, iCol, true);
                                    $(cellDOM).removeClass("ui-state-highlight");
                                    jrow = 0, jcol = 0, jsave = '';
                                }
                            } else if (colorpicker_flag) {
                                if ($(".colpick" + "#" + $cellInput.attr("colorpickerid")).is(":hidden")) {
                                    $this.jqGrid('setGridParam', {
                                        cellEdit: true
                                    });
                                    //$this.jqGrid('saveCell', iRow, iCol);
                                    $this.jqGrid('restoreCell', iRow, iCol, true);
                                    $(cellDOM).removeClass("ui-state-highlight");
                                    jrow = 0, jcol = 0, jsave = '';
                                }
                            } else {
                                $this.jqGrid('setGridParam', {
                                    cellEdit: true
                                });
                                if (phone_flag == true) {
                                    $this.jqGrid('saveCell', iRow, iCol);
                                }
                                $this.jqGrid('restoreCell', iRow, iCol, true);
                                $(cellDOM).removeClass("ui-state-highlight");
                                jrow = 0, jcol = 0, jsave = '';
                            }
                        });
                    }
                }, 100);
            }
        },
        beforeSubmitCell: function (rowid, cellName, cellValue, iRow, iCol) {
            if (action_callbacks['before_rec_edit'] && $.isFunction(window[action_callbacks['before_rec_edit']])) {
                return window[action_callbacks['before_rec_edit']](rowid, cellName, cellValue, iRow, iCol);
            }
        },
        afterSubmitCell: function (response, rowid, cellname, value, iRow, iCol) {
            var $c_flag, $c_msg;
            if (response.responseText != 1) {
                var res = parseJSONString(response.responseText);
                var columnNames = $("#" + grid_id).jqGrid('getGridParam', 'colNames');
                $c_flag = true;
                $c_msg = res.message;
                if (res.success == 'false') {
                    $c_flag = false;
                    $c_msg += " : " + columnNames[iCol];
                } else if (res.success == '2') {
                    reloadListGrid(grid_id);
                } else if (res.success == '3' || res.success == '4') {
                    if (isRedirectEqualHash(res.red_hash)) {
                        window.location.hash = res.red_hash;
                        window.location.reload();
                    } else {
                        window.location.hash = res.red_hash;
                    }
                } else if (res.success == '5') {
                    window.location.href = res.red_hash;
                }
                gridReportMessage($c_flag, $c_msg);
            } else {
                $c_flag = true;
            }
            if (action_callbacks['after_rec_edit'] && $.isFunction(window[action_callbacks['after_rec_edit']])) {
                return window[action_callbacks['after_rec_edit']](response, rowid, cellname, value, iRow, iCol);
            }
            return [$c_flag, res.message];
        },
        beforeSaveCell: function (rowid, cellname, value, iRow, iCol) {

        },
        afterSaveCell: function (rowid, cellname, value, iRow, iCol) {

        },
        onSortCol: function (index, iCol, sortorder) {
            $("#" + grid_id).setGridParam({defaultsort: "No"});
            setGridViewSortLayout(index, sortorder, js_col_name_json);
            activateGridSortColumns(grid_id);
        },
        resizeStop: function (newwidth, index) {
            setColumnsWidth(el_grid_settings.enc_location + '_cw', grid_id);
        },
        beforeSelectRow: function (rowid, e) {
            multiSelectHandler(rowid, e);
        }
    });

    if (search_tool_permit) {
        jQuery("#" + grid_id).jqGrid('filterToolbar', {
            stringResult: true,
            searchOnEnter: false,
            searchOperators: (el_theme_settings.grid_searchopt) ? true : false
        });
    }

    var createDelSearchRefreshBtn = function (order_arr, label_arr) {
        var del_icon, del_text = '', del_title;
        del_icon = (el_theme_settings.grid_icons_del || (label_arr['del'] && label_arr['del']['icon_only'] == "Yes")) ? true : false;
        if (!del_icon) {
            del_text = (label_arr['del'] && label_arr['del']['text']) ? label_arr['del']['text'] : js_lang_label.GENERIC_GRID_DELETE;
        }
        del_title = (label_arr['del'] && label_arr['del']['title']) ? label_arr['del']['title'] : js_lang_label.GENERIC_GRID_DELETE_SELECTED_ROW;

        var search_icon, search_text = '', search_title;
        search_icon = (el_theme_settings.grid_icons_search || (label_arr['search'] && label_arr['search']['icon_only'] == "Yes")) ? true : false;
        if (!search_icon) {
            search_text = (label_arr['search'] && label_arr['search']['text']) ? label_arr['search']['text'] : js_lang_label.GENERIC_GRID_SEARCH;
        }
        search_title = (label_arr['search'] && label_arr['search']['title']) ? label_arr['search']['title'] : js_lang_label.GENERIC_GRID_ADVANCE_SEARCH;

        var refresh_icon, refresh_text = '', refresh_title;
        refresh_icon = (el_theme_settings.grid_icons_refresh || (label_arr['refresh'] && label_arr['refresh']['icon_only'] == "Yes")) ? true : false;
        if (!refresh_icon) {
            refresh_text = (label_arr['refresh'] && label_arr['refresh']['text']) ? label_arr['refresh']['text'] : js_lang_label.GENERIC_GRID_SHOW_ALL;
        }
        refresh_title = (label_arr['refresh'] && label_arr['refresh']['title']) ? label_arr['refresh']['title'] : js_lang_label.GENERIC_GRID_SHOW_ALL_LISTING_RECORDS;

        jQuery("#" + grid_id).jqGrid('navGrid', '#' + pager_id, {
            cloneToTop: true,
            add: false,
            addicon: "ui-icon-plus",
            edit: false,
            editicon: "ui-icon-pencil",
            del: del_permit,
            delicon: "ui-icon-trash",
            delicon_p: (del_icon) ? 'uigrid-del-btn del-icon-only' : "uigrid-del-btn",
            deltext: del_text,
            deltitle: del_title,
            search: adv_search_permit,
            searchicon: "ui-icon-search",
            searchicon_p: (search_icon) ? 'uigrid-search-btn search-icon-only' : "uigrid-search-btn",
            searchtext: search_text,
            searchtitle: search_title,
            refresh: refresh_permit,
            refreshicon: "ui-icon-refresh",
            refreshicon_p: (refresh_icon) ? 'uigrid-refresh-btn refresh-icon-only' : "uigrid-refresh-btn",
            refreshtext: refresh_text,
            refreshtitle: refresh_title,
            alertbutton: js_lang_label.GENERIC_GRID_OK,
            alerttext: js_lang_label.GENERIC_GRID_PLEASE_SELECT_ANY_RECORD,
            alertmodal: {},
            beforeRefresh: function () {
                refreshLeftSearchPanel(grid_id);
                $("#" + grid_id).setGridParam({sortname: el_grid_settings.default_sort, sortorder: el_grid_settings.sort_order, defaultsort: "Yes"});
                activateGridSortColumns(grid_id);
            },
            afterRefresh: function () {
                $("#hbox_" + grid_id + "_jqgrid").find(".search-chosen-select").find("option").removeAttr("selected");
                $("#hbox_" + grid_id + "_jqgrid").find(".search-chosen-select").trigger("chosen:updated");
                if ($("#hbox_" + grid_id + "_jqgrid").find(".search-token-autocomplete").length) {
                    $("#hbox_" + grid_id + "_jqgrid").find(".search-token-autocomplete").each(function () {
                        $(this).tokenInput("clear");
                    });
                }
                $("#hbox_" + grid_id + "_jqgrid").find(".top-filter-chosen").find("option").removeAttr("selected");
                $("#hbox_" + grid_id + "_jqgrid").find(".top-filter-chosen").trigger("chosen:updated");
                if ($("#hbox_" + grid_id + "_jqgrid").find(".top-filter-autocomplete").length) {
                    $("#hbox_" + grid_id + "_jqgrid").find(".top-filter-autocomplete").each(function () {
                        $(this).tokenInput("clear");
                    });
                }
                var sort_name = $("#" + grid_id).getGridParam("sortname");
                var sort_order = $("#" + grid_id).getGridParam("sortorder");
                setGridViewSortLayout(sort_name, sort_order, js_col_name_json);
            }
        }, {
            // edit options
        }, {
            // add options
        }, {
            // delete options
            id: grid_button_ids.del,
            width: 320,
            caption: js_lang_label.GENERIC_GRID_DELETE,
            msg: js_lang_label.GENERIC_GRID_ARE_YOU_SURE_WANT_TO_DELETE_SELECTED_RECORDS,
            bSubmit: js_lang_label.GENERIC_GRID_DELETE,
            bCancel: js_lang_label.GENERIC_GRID_CANCEL,
            modal: true,
            closeOnEscape: true,
            serializeDelData: function (postdata) {
                var selAllRows = jQuery('#selAllRows').val();
                // append postdata with any information 
                return {
                    "id": postdata.id,
                    "oper": postdata.oper,
                    "AllRowSelected": selAllRows,
                    "filters": $('#' + grid_id).getGridParam('postData').filters
                }
            },
            beforeSubmit: function (postdata) {
                if (action_callbacks['before_rec_delete'] && $.isFunction(window[action_callbacks['before_rec_delete']])) {
                    return window[action_callbacks['before_rec_delete']](postdata);
                } else {
                    return [true, ""];
                }
            },
            afterSubmit: function (response, postdata) {
                var resdata = {}, $del_flag, $jq_errmsg;
                resdata = parseJSONString(response.responseText);
                if (resdata.success == 'true') {
                    $jq_errmsg = js_lang_label.GENERIC_GRID_RECORDS_DELETED_SUCCESSFULLY;
                    if (resdata.message != "") {
                        $jq_errmsg = resdata.message;
                    }
                    $del_flag = true;
                    refreshLeftSearchPanel(grid_id);
                } else {
                    $jq_errmsg = js_lang_label.GENERIC_GRID_ERROR_IN_DELETION;
                    if (resdata.message != "") {
                        $jq_errmsg = resdata.message;
                    }
                    $del_flag = false;
                }
                gridReportMessage($del_flag, $jq_errmsg);
                if (action_callbacks['after_rec_delete'] && $.isFunction(window[action_callbacks['after_rec_delete']])) {
                    window[action_callbacks['after_rec_delete']](response, postdata);
                }
                return [true, $jq_errmsg];
            }
        }, {
            // search options
            id: grid_button_ids.search,
            multipleSearch: true,
            multipleGroup: (el_grid_settings.group_search == "1") ? true : false,
            showQuery: false,
            Find: js_lang_label.GENERIC_GRID_FIND,
            Reset: js_lang_label.GENERIC_GRID_RESET,
            width: 700,
            height: 275,
            closeOnEscape: true,
            modal: true,
            closeAfterSearch: true
        }, {
            // view options
        }, {
            // refresh options
            id: grid_button_ids.refresh
        }, {
            // order options array
            order: order_arr
        });
    }
    var createAddButton = function (afterId, label_arr) {
        var add_icon, add_text = '', add_title;
        add_icon = (el_theme_settings.grid_icons_add || (label_arr['icon_only'] == "Yes")) ? true : false;
        if (!add_icon) {
            add_text = (label_arr['text']) ? label_arr['text'] : js_lang_label.GENERIC_GRID_ADD_NEW;
        }
        add_title = (label_arr['title']) ? label_arr['title'] : js_lang_label.GENERIC_GRID_ADD_NEW;

        js_assign_btn_id = grid_button_ids.add;
        jQuery("#" + grid_id).navButtonAdd('#' + pager_id, {
            caption: add_text,
            title: add_title,
            buttonicon: "ui-icon-plus",
            buttonicon_p: (add_icon) ? 'uigrid-add-btn add-icon-only' : 'uigrid-add-btn',
            onClickButton: function () {
                adminAddNewRecord(el_grid_settings.add_page_url, el_grid_settings.extra_hstr, el_grid_settings.popup_add_form, grid_id, el_grid_settings.popup_add_size);
            },
            id: js_assign_btn_id,
            afterButtonId: afterId,
            position: "first"
        });
        jQuery("#" + grid_id).navButtonAdd("#" + grid_id + "_toppager_left", {
            caption: add_text,
            title: add_title,
            buttonicon: "ui-icon-plus",
            buttonicon_p: (add_icon) ? 'uigrid-add-btn add-icon-only' : 'uigrid-add-btn',
            onClickButton: function () {
                adminAddNewRecord(el_grid_settings.add_page_url, el_grid_settings.extra_hstr, el_grid_settings.popup_add_form, grid_id, el_grid_settings.popup_add_size);
            },
            id: js_assign_btn_id + "_top",
            afterButtonId: (afterId) ? afterId + "_top" : "",
            position: "first"
        });
    }
    var createStatusButton = function (afterId) {
        var jstatus_btn, jstatus_lbl, status_icon;
        for (var i in el_grid_settings.status_arr) {
            if (!el_grid_settings.status_arr[i]) {
                continue;
            }
            jstatus_btn = el_grid_settings.status_arr[i];
            jstatus_lbl = eval(el_grid_settings.status_lang_arr[i]);
            status_icon = (jstatus_btn || "").replace(/(\s)/g, "").toLowerCase();

            js_assign_btn_id = "status_" + i + "_" + grid_id;
            js_next_btn_id = (i == 0) ? afterId : "status_" + js_prev_key + "_" + grid_id;

            jQuery("#" + grid_id).navButtonAdd('#' + pager_id, {
                caption: jstatus_lbl,
                title: jstatus_lbl,
                lang: jstatus_btn,
                buttonicon: 'ui-icon-newwin',
                buttonicon_p: "uigrid-status-common uigrid-status-btn-" + status_icon,
                onClickButton: function (e, p) {
                    var fids = filterGridSelectedIDs(this);
                    adminStatusChange(grid_id, p.lang, fids, el_grid_settings.edit_page_url, p.title, action_callbacks, list_message_arr);
                },
                id: js_assign_btn_id,
                afterButtonId: js_next_btn_id,
                position: "first"
            });
            jQuery("#" + grid_id).navButtonAdd("#" + grid_id + "_toppager_left", {
                caption: jstatus_lbl,
                title: jstatus_lbl,
                lang: jstatus_btn,
                buttonicon: 'ui-icon-newwin',
                buttonicon_p: "uigrid-status-common uigrid-status-btn-" + status_icon,
                onClickButton: function (e, p) {
                    var fids = filterGridSelectedIDs(this);
                    adminStatusChange(grid_id, p.lang, fids, el_grid_settings.edit_page_url, p.title, action_callbacks, list_message_arr);
                },
                id: js_assign_btn_id + "_top",
                afterButtonId: (js_next_btn_id) ? js_next_btn_id + "_top" : "",
                position: "first"
            });
            js_prev_key = i;
        }
    }
    var createColumnsButton = function (afterId, label_arr) {
        var col_icon, col_text = '', col_title;
        col_icon = (el_theme_settings.grid_icons_columns || (label_arr['icon_only'] == "Yes")) ? true : false;
        if (!col_icon) {
            col_text = (label_arr['text']) ? label_arr['text'] : js_lang_label.GENERIC_GRID_COLUMNS;
        }
        col_title = (label_arr['title']) ? label_arr['title'] : js_lang_label.GENERIC_GRID_HIDESHOW_COLUMNS;

        js_assign_btn_id = grid_button_ids.columns;
        jQuery("#" + grid_id).navButtonAdd('#' + pager_id, {
            caption: col_text,
            title: col_title,
            buttonicon: "ui-icon-columns",
            buttonicon_p: (col_icon) ? 'uigrid-col-btn col-icon-only' : 'uigrid-col-btn',
            onClickButton: function () {
                jQuery("#" + grid_id).jqGrid('columnChooser', {
                    'classname': 'grid-columns-picker',
                    'dialog_opts': {
                        modal: true,
                        minWidth: 460
                    },
                    'msel_opts': {
                        'autoOpen': true,
                        'checkAllText': (js_lang_label.GENERIC_CHECK_ALL ? js_lang_label.GENERIC_CHECK_ALL : "Check all"),
                        'uncheckAllText': (js_lang_label.GENERIC_UNCHECK_ALL ? js_lang_label.GENERIC_UNCHECK_ALL : "Uncheck all"),
                        'noneSelectedText': (js_lang_label.GENERIC_GRID_SELECT_COLUMNS ? js_lang_label.GENERIC_GRID_SELECT_COLUMNS : "Select Columns"),
                        'selectedText': "# " + (js_lang_label.GENERIC_SELECTED ? js_lang_label.GENERIC_SELECTED : "Selected"),
                        'filterPlaceholder': (js_lang_label.GENERIC_GRID_SEARCH_HERE ? js_lang_label.GENERIC_GRID_SEARCH_HERE : "Search here"),
                        'beforeopen': function (event, ui) {
                            applyUIButtonCSS();
                        }
                    },
                    "beforeSubmit": function (div_id) {
                        if ($("#" + div_id).find('select').val() != null) {
                            return true;
                        } else {
                            jQuery.jgrid.info_dialog(js_lang_label.GENERIC_GRID_ERROR, js_lang_label.GENERIC_GRID_PLEASE_SELECT_ATLEAST_ONE_COLUMN, js_lang_label.GENERIC_GRID_OK);
                            return false;
                        }
                    },
                    "done": function (perm) {
                        if (perm) {
                            setColumnsChoosen(el_grid_settings.enc_location + '_cs', grid_id);
                            reloadListGrid(grid_id);
                        }
                    }
                });
            },
            position: "last",
            id: js_assign_btn_id,
            afterButtonId: afterId
        });
        jQuery("#" + grid_id).navButtonAdd("#" + grid_id + "_toppager_left", {
            caption: col_text,
            title: col_title,
            buttonicon: "ui-icon-columns",
            buttonicon_p: (col_icon) ? 'uigrid-col-btn col-icon-only' : 'uigrid-col-btn',
            onClickButton: function () {
                jQuery("#" + grid_id).jqGrid('columnChooser', {
                    'classname': 'grid-columns-picker',
                    'dialog_opts': {
                        modal: true,
                        minWidth: 460
                    },
                    'msel_opts': {
                        'autoOpen': true,
                        'checkAllText': (js_lang_label.GENERIC_CHECK_ALL ? js_lang_label.GENERIC_CHECK_ALL : "Check all"),
                        'uncheckAllText': (js_lang_label.GENERIC_UNCHECK_ALL ? js_lang_label.GENERIC_UNCHECK_ALL : "Uncheck all"),
                        'noneSelectedText': (js_lang_label.GENERIC_GRID_SELECT_COLUMNS ? js_lang_label.GENERIC_GRID_SELECT_COLUMNS : "Select Columns"),
                        'selectedText': "# " + (js_lang_label.GENERIC_SELECTED ? js_lang_label.GENERIC_SELECTED : "Selected"),
                        'filterPlaceholder': (js_lang_label.GENERIC_GRID_SEARCH_HERE ? js_lang_label.GENERIC_GRID_SEARCH_HERE : "Search here"),
                        'beforeopen': function (event, ui) {
                            applyUIButtonCSS();
                        }
                    },
                    "beforeSubmit": function (div_id) {
                        if ($("#" + div_id).find('select').val() != null) {
                            return true;
                        } else {
                            jQuery.jgrid.info_dialog(js_lang_label.GENERIC_GRID_ERROR, js_lang_label.GENERIC_GRID_PLEASE_SELECT_ATLEAST_ONE_COLUMN, js_lang_label.GENERIC_GRID_OK);
                            return false;
                        }
                    },
                    "done": function (perm) {
                        if (perm) {
                            setColumnsChoosen(el_grid_settings.enc_location + '_cs', grid_id);
                            reloadListGrid(grid_id);
                        }
                    }
                });
            },
            position: "last",
            id: js_assign_btn_id + "_top",
            afterButtonId: (afterId) ? afterId + "_top" : ""
        });
    }
    var createExportButton = function (afterId, label_arr) {
        var exp_icon, exp_text = '', exp_title;
        exp_icon = (el_theme_settings.grid_icons_export || (label_arr['icon_only'] == "Yes")) ? true : false;
        if (!exp_icon) {
            exp_text = (label_arr['text']) ? label_arr['text'] : js_lang_label.GENERIC_GRID_EXPORT;
        }
        exp_title = (label_arr['title']) ? label_arr['title'] : js_lang_label.GENERIC_GRID_EXPORT;

        js_assign_btn_id = grid_button_ids.export;
        var export_html = "<div class='data-export-main'>";
        export_html += "<div class='export-row'>\n\
                            <div class='export-left'><strong>" + js_lang_label.GENERIC_GRID_EXPORT_MODE + ":</strong></div>\n\
                            <div class='export-right'>\n\
                                <input type='radio' class='regular-radio export-mode-selected' name='export_mode' value='selected' id='export_mode_selected' checked=true><label for='export_mode_selected'>&nbsp;</label>\n\
                                <label for='export_mode_selected' class='export-label-modes'>" + js_lang_label.GENERIC_GRID_SELECTED + "</label>&nbsp;&nbsp;\n\
                                <input type='radio' class='regular-radio export-mode-all' name='export_mode' value='all' id='export_mode_all'><label for='export_mode_all'>&nbsp;</label>\n\
                                <label for='export_mode_all' class='export-label-modes'>" + js_lang_label.GENERIC_GRID_ALL + "</label>\n\
                            </div>\n\
                        </div>";
        export_html += "<div class='export-row' id='export_columns_div'>\n\
                            <div class='export-left'><strong>" + js_lang_label.GENERIC_GRID_SELECT_COLUMNS + ":</strong></div>\n\
                            <div class='export-right'>" + getColumnsDropDown(grid_id, "export_columns_list", "export_columns_list", '', 'multiple') + " </div>\n\
                        </div>";
        export_html += "<div class='export-row'>\n\
                            <div class='export-left'><strong>" + js_lang_label.GENERIC_GRID_EXPORT_TO + ":</strong></div>\n\
                            <div class='export-right'>\n\
                                <input type='radio' class='regular-radio export-type-csv' name='export_type' value='csv' id='export_type_csv' checked=true><label for='export_type_csv'>&nbsp;</label>\n\
                                <label for='export_type_csv' class='export-label-modes' title='" + js_lang_label.GENERIC_GRID_EXPORT_TO_CSV + "'><i class='fa fa-file-excel-o fa-2x icon-csv'></i></label>\n\
                                <input type='radio' class='regular-radio export-type-pdf' name='export_type' value='pdf' id='export_type_pdf'><label for='export_type_pdf'>&nbsp;</label>\n\
                                <label for='export_type_pdf' class='export-label-modes' title='" + js_lang_label.GENERIC_GRID_EXPORT_TO_PDF + "'><i class='fa fa-file-pdf-o fa-2x icon-pdf'></i></label>\n\
                            </div>\n\
                            <div class='clear'></div>\n\
                        </div>";
        export_html += "<div class='export-row' id='orientation_columns_div' style='display:none'>\n\
                            <div class='export-left'><strong>" + (js_lang_label.GENERIC_GRID_PDF_ORIENTATION ? js_lang_label.GENERIC_GRID_PDF_ORIENTATION : "PDF Orientation") + ":</strong></div>\n\
                            <div class='export-right'>\n\
                                <input type='radio' class='regular-radio export-type-pdf' name='orientation_type' value='portrait' id='orientation_type_portrait' checked=true><label for='orientation_type_portrait'>&nbsp;</label>\n\
                                <label for='orientation_type_portrait' class='export-label-modes'>" + (js_lang_label.GENERIC_GRID_PORTRAIT ? js_lang_label.GENERIC_GRID_PORTRAIT : "Portrait") + "</label>\n\
                                <input type='radio' class='regular-radio orientation-type-landscape' name='orientation_type' value='landscape' id='orientation_type_landscape'><label for='orientation_type_landscape'>&nbsp;</label>\n\
                                <label for='orientation_type_landscape' class='export-label-modes'>" + (js_lang_label.GENERIC_GRID_LANDSCAPE ? js_lang_label.GENERIC_GRID_LANDSCAPE : "Landscape") + "</label>\n\
                            </div>\n\
                            <div class='clear'></div>\n\
                        </div>";
        export_html += "<div class='clear'></div>";
        export_html += "</div>";

        var selected_btn_title = (js_lang_label.GENERIC_GRID_EXPORT_SELECTED_RECORDS) ? js_lang_label.GENERIC_GRID_EXPORT_SELECTED_RECORDS : "Export selected records";
        jQuery("#" + grid_id).navButtonAdd('#' + pager_id, {
            caption: exp_text,
            title: exp_title,
            buttonicon: 'ui-icon-export',
            buttonicon_p: (exp_icon) ? 'uigrid-export-btn export-icon-only' : 'uigrid-export-btn',
            onClickButton: function () {
                var export_elem = '<div />';
                var export_btns = [
                    {
                        text: js_lang_label.GENERIC_GRID_EXPORT_ALL + ' ' + total_rows + ' ' + js_lang_label.GENERIC_GRID_RECORDS,
                        id: "btn_all",
                        "class": 'fm-button ui-state-default ui-corner-all',
                        click: function () {
                            exportData(grid_id, 'all', el_grid_settings.export_url);
                        }
                    },
                    {
                        text: js_lang_label.GENERIC_GRID_EXPORT_CURRENT_PAGE_RECORDS,
                        id: "btn_page",
                        "class": 'fm-button ui-state-default ui-corner-all',
                        click: function () {
                            exportData(grid_id, 'thispage', el_grid_settings.export_url);
                        }
                    }
                ];
                if ($('#' + grid_id).jqGrid("getGridParam", "listview") != 'grid' && $.isArray($('#' + grid_id).getGridParam('selarrrow')) && $('#' + grid_id).getGridParam('selarrrow').length > 0) {
                    export_btns.push({
                        text: selected_btn_title,
                        id: "btn_selected",
                        "class": 'fm-button ui-state-default ui-corner-all',
                        click: function () {
                            exportData(grid_id, 'selected', el_grid_settings.export_url);
                        }
                    });
                }
                $(export_elem).attr("id", "exportmod_" + grid_id).html(export_html).dialog({
                    title: exp_title,
                    //height: 195,
                    width: 600,
                    resize: true,
                    modal: true,
                    buttons: export_btns,
                    "close": function () {
                        $(this).dialog("destroy").remove();
                    }
                });
                $("#export_columns_list").multiselect({
                    'minWidth': 300,
                    'checkAllText': (js_lang_label.GENERIC_CHECK_ALL ? js_lang_label.GENERIC_CHECK_ALL : "Check all"),
                    'uncheckAllText': (js_lang_label.GENERIC_UNCHECK_ALL ? js_lang_label.GENERIC_UNCHECK_ALL : "Uncheck all"),
                    'noneSelectedText': (js_lang_label.GENERIC_GRID_SELECT_COLUMNS ? js_lang_label.GENERIC_GRID_SELECT_COLUMNS : "Select Columns"),
                    'selectedText': "# " + (js_lang_label.GENERIC_SELECTED ? js_lang_label.GENERIC_SELECTED : "Selected")
                }).multiselectfilter({placeholder: js_lang_label.GENERIC_GRID_SEARCH_HERE});
            },
            position: "last",
            id: js_assign_btn_id,
            afterButtonId: afterId
        })
        jQuery("#" + grid_id).navButtonAdd('#' + grid_id + '_toppager_left', {
            caption: exp_text,
            title: exp_title,
            buttonicon: 'ui-icon-export',
            buttonicon_p: (exp_icon) ? 'uigrid-export-btn export-icon-only' : 'uigrid-export-btn',
            onClickButton: function () {
                var export_elem = '<div />';
                var export_btns = [
                    {
                        text: js_lang_label.GENERIC_GRID_EXPORT_ALL + ' ' + total_rows + ' ' + js_lang_label.GENERIC_GRID_RECORDS,
                        id: "btn_all",
                        "class": 'fm-button ui-state-default ui-corner-all',
                        click: function () {
                            exportData(grid_id, 'All', el_grid_settings.export_url);
                        }
                    },
                    {
                        text: js_lang_label.GENERIC_GRID_EXPORT_CURRENT_PAGE_RECORDS,
                        id: "btn_page",
                        "class": 'fm-button ui-state-default ui-corner-all',
                        click: function () {
                            exportData(grid_id, 'thispage', el_grid_settings.export_url);
                        }
                    }
                ];
                if ($('#' + grid_id).jqGrid("getGridParam", "listview") != 'grid' && $.isArray($('#' + grid_id).getGridParam('selarrrow')) && $('#' + grid_id).getGridParam('selarrrow').length > 0) {
                    export_btns.push({
                        text: selected_btn_title,
                        id: "btn_selected",
                        "class": 'fm-button ui-state-default ui-corner-all',
                        click: function () {
                            exportData(grid_id, 'selected', el_grid_settings.export_url);
                        }
                    });
                }
                $(export_elem).attr("id", "exportmod_" + grid_id).html(export_html).dialog({
                    title: exp_title,
                    //height: 195,
                    width: 600,
                    resize: true,
                    modal: true,
                    buttons: export_btns,
                    "close": function () {
                        $(this).dialog("destroy").remove();
                    }
                });
                $("#export_columns_list").multiselect({
                    'minWidth': 300,
                    'checkAllText': (js_lang_label.GENERIC_CHECK_ALL ? js_lang_label.GENERIC_CHECK_ALL : "Check all"),
                    'uncheckAllText': (js_lang_label.GENERIC_UNCHECK_ALL ? js_lang_label.GENERIC_UNCHECK_ALL : "Uncheck all"),
                    'noneSelectedText': (js_lang_label.GENERIC_GRID_SELECT_COLUMNS ? js_lang_label.GENERIC_GRID_SELECT_COLUMNS : "Select Columns"),
                    'selectedText': "# " + (js_lang_label.GENERIC_SELECTED ? js_lang_label.GENERIC_SELECTED : "Selected"),
                }).multiselectfilter({placeholder: js_lang_label.GENERIC_GRID_SEARCH_HERE});
            },
            position: "last",
            id: js_assign_btn_id + "_top",
            afterButtonId: (afterId) ? afterId + "_top" : ""
        });
    }
    var createPrintButton = function (afterId, label_arr) {
        var prnt_icon, prnt_text = '', prnt_title;
        prnt_icon = (el_theme_settings.grid_icons_print || (label_arr['icon_only'] == "Yes")) ? true : false;
        if (!prnt_icon) {
            prnt_text = (label_arr['text']) ? label_arr['text'] : js_lang_label.GENERIC_GRID_PRINT;
        }
        prnt_title = (label_arr['title']) ? label_arr['title'] : js_lang_label.GENERIC_GRID_PRINT;

        js_assign_btn_id = grid_button_ids.print;
        var print_html = "<div class='data-print-main'>";
        print_html += "<div class='print-row'>\n\
                            <strong>" + js_lang_label.GENERIC_PLEASE_CHOOSE_THE_BELOW_RECORDS_SELECTION_FOR_PRINTING + "</strong>\n\
                        </div>";
        print_html += "</div>";

        jQuery("#" + grid_id).navButtonAdd('#' + pager_id, {
            caption: prnt_text,
            title: prnt_title,
            buttonicon: 'ui-icon-print',
            buttonicon_p: (prnt_icon) ? 'uigrid-print-btn print-icon-only' : 'uigrid-print-btn',
            onClickButton: function () {
                var print_elem = '<div />';
                var print_btns = [
                    {
                        text: js_lang_label.GENERIC_GRID_PRINT_ALL + ' ' + total_rows + ' ' + js_lang_label.GENERIC_GRID_RECORDS,
                        id: "btn_all",
                        "class": 'fm-button ui-state-default ui-corner-all',
                        click: function () {
                            printData(grid_id, 'all', el_grid_settings.print_url, {});
                        }
                    },
                    {
                        text: js_lang_label.GENERIC_GRID_PRINT_CURRENT_PAGE_RECORDS,
                        id: "btn_page",
                        "class": 'fm-button ui-state-default ui-corner-all',
                        click: function () {
                            printData(grid_id, 'thispage', el_grid_settings.print_url, {});
                        }
                    }
                ];
                if ($('#' + grid_id).jqGrid("getGridParam", "listview") != 'grid' && $.isArray($('#' + grid_id).getGridParam('selarrrow')) && $('#' + grid_id).getGridParam('selarrrow').length > 0) {
                    print_btns.push({
                        text: js_lang_label.GENERIC_GRID_PRINT_SELECTED_RECORDS,
                        id: "btn_selected",
                        "class": 'fm-button ui-state-default ui-corner-all',
                        click: function () {
                            printData(grid_id, 'selected', el_grid_settings.print_url, {});
                        }
                    });
                }
                $(print_elem).attr("id", "printmod_" + grid_id).html(print_html).dialog({
                    title: prnt_title,
                    //height: 195,
                    width: 600,
                    resize: true,
                    modal: true,
                    buttons: print_btns,
                    "close": function () {
                        $(this).dialog("destroy").remove();
                    }
                });
            },
            position: "last",
            id: js_assign_btn_id,
            afterButtonId: afterId
        })
        jQuery("#" + grid_id).navButtonAdd('#' + grid_id + '_toppager_left', {
            caption: prnt_text,
            title: prnt_title,
            buttonicon: 'ui-icon-print',
            buttonicon_p: (prnt_icon) ? 'uigrid-print-btn print-icon-only' : 'uigrid-print-btn',
            onClickButton: function () {
                var print_elem = '<div />';
                var print_btns = [
                    {
                        text: js_lang_label.GENERIC_GRID_PRINT_ALL + ' ' + total_rows + ' ' + js_lang_label.GENERIC_GRID_RECORDS,
                        id: "btn_all",
                        "class": 'fm-button ui-state-default ui-corner-all',
                        click: function () {
                            printData(grid_id, 'all', el_grid_settings.print_url, {});
                        }
                    },
                    {
                        text: js_lang_label.GENERIC_GRID_PRINT_CURRENT_PAGE_RECORDS,
                        id: "btn_page",
                        "class": 'fm-button ui-state-default ui-corner-all',
                        click: function () {
                            printData(grid_id, 'thispage', el_grid_settings.print_url, {});
                        }
                    }
                ];
                if ($('#' + grid_id).jqGrid("getGridParam", "listview") != 'grid' && $.isArray($('#' + grid_id).getGridParam('selarrrow')) && $('#' + grid_id).getGridParam('selarrrow').length > 0) {
                    print_btns.push({
                        text: js_lang_label.GENERIC_GRID_PRINT_SELECTED_RECORDS,
                        id: "btn_selected",
                        "class": 'fm-button ui-state-default ui-corner-all',
                        click: function () {
                            printData(grid_id, 'selected', el_grid_settings.print_url, {});
                        }
                    });
                }
                $(print_elem).attr("id", "printmod_" + grid_id).html(print_html).dialog({
                    title: prnt_title,
                    //height: 195,
                    width: 600,
                    resize: true,
                    modal: true,
                    buttons: print_btns,
                    "close": function () {
                        $(this).dialog("destroy").remove();
                    }
                });
            },
            position: "last",
            id: js_assign_btn_id + "_top",
            afterButtonId: (afterId) ? afterId + "_top" : ""
        });
    }
    var createInlineAddSaveDelBtn = function () {
        jQuery("#" + grid_id).navButtonAdd('#' + pager_id, {
            caption: "",
            title: js_lang_label.GENERIC_GRID_ADD_NEW,
            buttonicon: 'icon16 iconic-icon-plus-alt',
            buttonicon_p: "uigrid-inlineadd-btn",
            buttonname: "addnew",
            onClickButton: function (e) {
                addNewInlineRecord(grid_id);
            },
            id: 'inlineadd_' + grid_id,
            position: "last"
        });
        jQuery("#" + grid_id).navButtonAdd("#" + grid_id + "_toppager_left", {
            caption: "",
            title: js_lang_label.GENERIC_GRID_ADD_NEW,
            buttonicon: 'icon16 iconic-icon-plus-alt',
            buttonicon_p: "uigrid-inlineadd-btn",
            buttonname: "addnew",
            onClickButton: function (e) {
                addNewInlineRecord(grid_id);
            },
            id: 'inlineadd_' + grid_id + '_top',
            position: "last"
        });

        jQuery("#" + grid_id).navButtonAdd('#' + pager_id, {
            caption: "",
            title: js_lang_label.GENERIC_GRID_SAVE_ALL,
            buttonicon: 'icon16 iconic-icon-check-alt',
            buttonicon_p: "uigrid-inlinesave-btn",
            buttonname: "saveall",
            onClickButton: function (e) {
                saveAllInlineRecords(grid_id);
            },
            id: 'saveall_' + grid_id,
            position: "last"
        });
        jQuery("#" + grid_id).navButtonAdd("#" + grid_id + "_toppager_left", {
            caption: "",
            title: js_lang_label.GENERIC_GRID_SAVE_ALL,
            buttonicon: 'icon16 iconic-icon-check-alt',
            buttonicon_p: "uigrid-inlinesave-btn",
            buttonname: "saveall",
            onClickButton: function (e) {
                saveAllInlineRecords(grid_id);
            },
            id: 'saveall_' + grid_id + '_top',
            position: "last"
        });

        jQuery("#" + grid_id).navButtonAdd('#' + pager_id, {
            caption: "",
            title: js_lang_label.GENERIC_GRID_CANCEL_ALL,
            buttonicon: 'icon16 icomoon-icon-cancel-2',
            buttonicon_p: "uigrid-cancelall-btn",
            buttonname: "cancelall",
            onClickButton: function (e) {
                cancelAllInlineRecords(grid_id);
            },
            id: 'cancelall_' + grid_id,
            position: "last"
        });
        jQuery("#" + grid_id).navButtonAdd("#" + grid_id + "_toppager_left", {
            caption: "",
            title: js_lang_label.GENERIC_GRID_CANCEL_ALL,
            buttonicon: 'icon16 icomoon-icon-cancel-2',
            buttonicon_p: "uigrid-cancelall-btn",
            buttonname: "cancelall",
            onClickButton: function (e) {
                cancelAllInlineRecords(grid_id);
            },
            id: 'cancelall_' + grid_id + '_top',
            position: "last"
        });
    }

    if (grid_button_arr.length > 0) {
        var ord_dsr_arr = [], btn_dsr_arr = {}, btn_name;
        for (var b = 0; b < grid_button_arr.length; b++) {
            btn_name = grid_button_arr[b]['name'];
            if ($.inArray(btn_name, ["del", "search", "refresh"]) != -1) {
                ord_dsr_arr.push(btn_name);
                btn_dsr_arr[btn_name] = grid_button_arr[b];
            }
            if (ord_dsr_arr.length >= 3) {
                break;
            }
        }
        createDelSearchRefreshBtn(ord_dsr_arr, btn_dsr_arr);
        for (var b = 0; b < grid_button_arr.length; b++) {
            if (grid_button_arr[b]['type'] == "custom") {
                js_assign_btn_id = createCustomGridButton(grid_button_arr[b], grid_id, pager_id, js_assign_btn_id);
            } else {
                btn_name = grid_button_arr[b]['name'];
                if (btn_name && btn_name.substring(0, 6) == "status") {
                    if (status_permit) {
                        createStatusButton(js_assign_btn_id);
                    }
                } else {
                    switch (btn_name) {
                        case "del":
                            if (del_permit) {
                                js_assign_btn_id = grid_button_ids.del;
                            }
                            break;
                        case "search":
                            if (adv_search_permit) {
                                js_assign_btn_id = grid_button_ids.search;
                            }
                            break;
                        case "refresh":
                            if (refresh_permit) {
                                js_assign_btn_id = grid_button_ids.refresh;
                            }
                            break;
                        case "add":
                            if (add_permit) {
                                createAddButton(js_assign_btn_id, grid_button_arr[b]);
                            }
                            break;
                        case "columns":
                            if (columns_permit) {
                                createColumnsButton(js_assign_btn_id, grid_button_arr[b]);
                            }
                            break;
                        case "export":
                            if (export_permit) {
                                createExportButton(js_assign_btn_id, grid_button_arr[b]);
                            }
                            break;
                        case "print":
                            if (print_permit) {
                                createPrintButton(js_assign_btn_id, grid_button_arr[b]);
                            }
                            break;
                    }
                }
            }
        }
    } else {
        createDelSearchRefreshBtn([], {});
        if (add_permit) {
            createAddButton(js_assign_btn_id, {});
        }
        if (del_permit) {
            js_assign_btn_id = grid_button_ids.del;
        }
        if (status_permit) {
            createStatusButton(js_assign_btn_id);
        }
        if (columns_permit) {
            createColumnsButton(js_assign_btn_id, {});
        }
        if (export_permit) {
            createExportButton(js_assign_btn_id, {});
        }
        if (print_permit) {
            createPrintButton(js_assign_btn_id, {});
        }
    }
    if (inline_add_permit) {
        createInlineAddSaveDelBtn();
    }

    $(".cbox").change(function () {
        setTimeout(function () {
            if ($("#cb_" + grid_id).is(':checked') && total_pages > 1) {
                if (!$("#" + grid_id + "_messages_html").length) {
                    $("#" + grid_id + "_toppager").after("<div id='" + grid_id + "_messages_html' style='text-align:center;'><a id='" + grid_id + "_messages' href='javascript:void(0);'> " + js_lang_label.GENERIC_GRID_SELECT_ALL + " " + total_rows + " " + js_lang_label.GENERIC_GRID_RECORDS + "</a></span></div>");
                }
                $("#" + grid_id + "_messages").off('click');
                $("#" + grid_id + "_messages").on('click', function () {
                    $("#selAllRows").val('true');
                    $("#" + grid_id + "_messages_html").html(js_lang_label.GENERIC_GRID_ALL + " " + total_rows + ' ' + js_lang_label.GENERIC_GRID_RECORDS_ARE_SELECTED + ' <a id="clearSelections" href="javascript:void(0);">' + js_lang_label.GENERIC_GRID_CLEAR_SELECTIONS + '</a>');
                    $("#clearSelections").unbind();
                    $("#clearSelections").click(function () {
                        $("#" + grid_id).resetSelection();
                        $("#" + grid_id + "_messages_html").remove();
                    });
                });
            } else {
                $("#" + grid_id + "_messages_html").remove();
                $("#selAllRows").val('false');
            }
        }, 100);
    });

    $(document).off("click", ".expand-subview");
    $(document).on("click", ".expand-subview", function () {
        var curr_alias = $(this).attr("aria-alias");
        var curr_row_id = $(this).attr("aria-rowid");
        if (el_grid_settings.grid_subgrid_alias && curr_alias == el_grid_settings.grid_subgrid_alias) {
            el_grid_settings.grid_subgrid_alias = curr_alias;
            $("#" + grid_id).jqGrid('toggleSubGridRow', curr_row_id);
        } else {
            el_grid_settings.grid_subgrid_alias = curr_alias;
            $("#" + grid_id).jqGrid('toggleSubGridRow', curr_row_id);
            setTimeout(function () {
                $("#" + grid_id).jqGrid('expandSubGridRow', curr_row_id);
            }, 100)
        }
    });

    var orgViewModal = $.jgrid.viewModal;
    $.extend($.jgrid, {
        viewModal: function (selector, o) {
            if (selector == '#searchmodfbox_' + o.gid || selector == "#delmod" + o.gid ||
                    selector == "#exportmod_" + o.gid || selector == "#printmod_" + o.gid ||
                    selector == '#alertmod' || selector == "#info_dialog") {
                var of = jQuery("#gbox_" + el_tpl_settings.main_grid_id).offset();
                var w = jQuery("#gbox_" + el_tpl_settings.main_grid_id).width();
                var h = jQuery("#gbox_" + el_tpl_settings.main_grid_id).height();
                var w1 = $(selector).width();
                var h1 = $(selector).height();
                $(selector).css({
                    'top': of.top + ((h - h1) / 2) - 40,
                    'left': 'calc(50% - ' + w1 / 2 + 'px)'
                });
            }
            orgViewModal.call(this, selector, o);
        }
    });
    var oldInfoDialog = $.jgrid.info_dialog;
    $.extend($.jgrid, {
        info_dialog: function (caption, content, c_b, modalopt) {
            return oldInfoDialog.call(this, caption, content, c_b, modalopt);
        }
    });
}
//related to local storage
function setAdminPreferenceLocal(grid_id) {
    if (!isLocalStorageAllow()) {
        return false;
    }
    var gridInfo = {}, grid = $('#' + grid_id);
    gridInfo.sortname = grid.jqGrid('getGridParam', 'sortname');
    gridInfo.sortorder = grid.jqGrid('getGridParam', 'sortorder');
    gridInfo.page = grid.jqGrid('getGridParam', 'page');
    gridInfo.rowNum = grid.jqGrid('getGridParam', 'rowNum');
    gridInfo.postData = grid.jqGrid('getGridParam', 'postData');
    setLocalStore(el_grid_settings.enc_location + '_sh', JSON.stringify(gridInfo), true);
}
function getAdminPreferenceLocal(type, grid_id) {
    if (!isLocalStorageAllow()) {
        if (type == "before") {
            el_grid_settings.load_post['post'] = {};
            el_grid_settings.load_post['search'] = {};
        }
        return false;
    }
    var gridParams = getLocalStore(el_grid_settings.enc_location + '_sh', true);
    var gridInfo = parseJSONString(gridParams);
    var filt;
    if (type == "before") {
        el_grid_settings.load_post['post'] = {};
        if (el_grid_settings.filters_arr && el_grid_settings.filters_arr.groups) {
            var js_groupOp = el_grid_settings.filters_arr.groupOp;
            var js_rules = el_grid_settings.filters_arr.rules;
            var js_d_groups = el_grid_settings.filters_arr.groups;
            apply_default_filter = false;
            filt = {groupOp: js_groupOp, rules: [], groups: []};
            if ($.isArray(js_d_groups) && js_d_groups.length > 0) {
                var js_group, js_group_rules, inner_rules, data_set;
                for (var req_g in js_d_groups) {
                    js_group = js_d_groups[req_g];
                    js_group_rules = js_group.rules;
                    inner_rules = [];
                    if ($.isArray(js_group_rules) && js_group_rules.length > 0) {
                        for (var req_i in js_group_rules) {
                            if (typeof js_group_rules[req_i].field != "undefined" && js_group_rules[req_i].field && js_group_rules[req_i].data) {
                                data_set = js_group_rules[req_i].data;
                                inner_rules.push({field: js_group_rules[req_i].field, op: js_group_rules[req_i].op, data: data_set});
                                apply_default_filter = true;
                            }
                        }
                        if (el_grid_settings.group_search == '1') {
                            filt.groups.push({groupOp: js_group.groupOp, rules: inner_rules, groups: []});
                        } else {
                            filt.rules = inner_rules;
                            delete filt.groups;
                            break;
                        }
                    }
                }
            }
            if (apply_default_filter) {
                el_grid_settings.load_post['post'] = {filters: JSON.stringify(filt)};
            }
        } else if (gridParams && gridInfo && gridInfo.postData && gridInfo.postData.filters) {
            el_grid_settings.load_post['post'] = {
                filters: gridInfo.postData.filters
            }
        }
        var sort_flag = true, sortname, sortorder, page, rowNum, sort_arr, sort_ord;
        el_grid_settings.load_post['post']['sdef'] = "Yes";
        if (gridInfo && gridInfo.sortname) {
            sort_arr = gridInfo.sortname.split(",");
            sort_ord = gridInfo.sortorder.split(",");
            if (el_grid_settings.grouping == 'Yes' && $.isArray(el_grid_settings.group_attr['field'])) {
                if (el_grid_settings.group_attr['field'][1]) {
                    sort_arr.unshift(el_grid_settings.group_attr['field'][1]);
                    sort_ord.unshift(el_grid_settings.group_attr['order'][1] || "asc");
                }
                sort_arr.unshift(el_grid_settings.group_attr['field'][0]);
                sort_ord.unshift(el_grid_settings.group_attr['order'][0] || "asc");
            }
            for (var i in js_col_model_json) {
                if ($.inArray(js_col_model_json[i]['index'], sort_arr) == -1) {
                    sort_flag = false;
                    break;
                }
            }
            if (sort_flag) {
                el_grid_settings.load_post['post']['sidx'] = sort_arr.join(',');
                el_grid_settings.load_post['post']['sord'] = sort_ord.join(',');
            }
        }
        if (gridInfo && gridInfo.page) {
            el_grid_settings.load_post['post']['page'] = gridInfo.page;
        }
        if (gridInfo && gridInfo.rowNum) {
            el_grid_settings.load_post['post']['rows'] = parseInt(gridInfo.rowNum);
        }
        if (el_grid_settings.load_post && el_grid_settings.load_post.post && el_grid_settings.load_post.post.filters) {
            keepSearchToolbarValue(grid_id, js_col_model_json, el_grid_settings.load_post.post.filters, "local");
        }
    } else if (type == "after") {
        var pD = $("#" + grid_id).getGridParam("postData");
        pD = $.isPlainObject(pD) ? pD : {};
        if (gridParams && gridInfo) {
            var sort_flag = true, sortname, sortorder, page, rowNum, sort_arr, sort_ord;
            if (gridInfo.sortname) {
                sort_arr = gridInfo.sortname.split(",");
                sort_ord = gridInfo.sortorder.split(",");
                if (el_grid_settings.grouping == 'Yes' && $.isArray(el_grid_settings.group_attr['field'])) {
                    if (el_grid_settings.group_attr['field'][1]) {
                        sort_arr.unshift(el_grid_settings.group_attr['field'][1]);
                        sort_ord.unshift(el_grid_settings.group_attr['order'][1] || "asc");
                    }
                    sort_arr.unshift(el_grid_settings.group_attr['field'][0]);
                    sort_ord.unshift(el_grid_settings.group_attr['order'][0] || "asc");
                }
                for (var i in js_col_model_json) {
                    if ($.inArray(js_col_model_json[i]['index'], sort_arr) == -1) {
                        sort_flag = false;
                        break;
                    }
                }
                if (sort_flag) {
                    sortname = sort_arr.join(",");
                    $("#" + grid_id).setGridParam({sortname: sortname});
                    pD['sidx'] = sortname;
                    if ($.isArray(sort_ord) && sort_ord.length) {
                        sortorder = sort_ord.join(",");
                        $("#" + grid_id).setGridParam({sortorder: sortorder});
                        pD['sord'] = sortorder;
                    }
                }
            }
            if (gridInfo.page) {
                page = gridInfo.page
                $("#" + grid_id).setGridParam({page: page});
                pD['page'] = page;
            }
            if (gridInfo.rowNum) {
                rowNum = parseInt(gridInfo.rowNum);
                $("#" + grid_id).setGridParam({rowNum: rowNum});
                $("select[class='ui-pg-selbox'][role='listbox']").val(rowNum);
                pD['rows'] = rowNum;
            }
            $("#" + grid_id).setGridParam("postData", pD);
        }
    }
    return true;
}
function keepSearchToolbarValue(grid_id, gridModel, filters, type) {
    if (!filters) {
        return;
    }
    filters = parseJSONString(filters);
    if (!filters || !filters.rules) {
        return;
    }
    var sfilt = filters.rules, found_arr = [], cmodel_obj = {}, smodel_obj = {}, data_val, temp_val;
    for (var i in gridModel) {
        if (gridModel[i].name == "cb" || gridModel[i].name == "subgrid" || gridModel[i].name == "prec") {
            continue;
        }
        cmodel_obj[gridModel[i].name] = gridModel[i];
    }
    for (var i = 0; i < sfilt.length; i++) {
        var field = sfilt[i].field;
        var fcm = cmodel_obj[field];
        if (!fcm) {
            continue;
        }
        if (sfilt[i].op == fcm.filterSopt && sfilt[i].data != "" && ($.inArray(field, found_arr) == "-1" || fcm.filterSopt == "in")) {
            if (!$.isPlainObject(smodel_obj[field])) {
                smodel_obj[field] = {};
            }
            if (!$.isArray(smodel_obj[field]['data'])) {
                smodel_obj[field]['data'] = [];
            }
            data_val = sfilt[i].data;
            if (fcm.filterSopt == "in") {
                temp_val = smodel_obj[field]['data']
                if ($.isArray(temp_val)) {
                    data_val = ($.isArray(data_val)) ? data_val : data_val.split(",");
                    data_val.concat(temp_val);
                }
                smodel_obj[field]['data'] = data_val;
            } else {
                smodel_obj[field]['data'].push(data_val);
            }
            found_arr.push(field);
        }
    }
    el_grid_settings.load_post['search'] = smodel_obj;
}
//related to filters
function getToolbarHashFilters(grid_id) {
    if (window.location.hash) {
        var req_hash_var_arr = getHashParams(window.location.hash, el_tpl_settings.framework_vars);
    } else {
        var req_hash_var_arr = getQueryParams(window.location.search, el_tpl_settings.framework_vars);
    }
    if (!Object.keys(req_hash_var_arr).length) {
        return false;
    }
    var alias_name_arr = [];
    if (js_col_model_json.length > 1) {
        for (var i in js_col_model_json) {
            if (js_col_model_json[i].name) {
                alias_name_arr.push(js_col_model_json[i].name);
            }
        }
    }
    if (alias_name_arr.length > 0) {
        var filt = {}, req_i, col_i;
        filt.rules = [];
        for (req_i in req_hash_var_arr) {
            if (req_i != "" && $.inArray(req_i, alias_name_arr) >= 0) {
                col_i = alias_name_arr.indexOf(req_i);
                if (js_col_model_json[col_i]['stype'] && js_col_model_json[col_i]['stype'] == "select") {
                    js_col_model_json[col_i]['filterSopt'] = 'in';
                    filt.rules.push({field: req_i, op: "in", data: req_hash_var_arr[req_i]});
                } else {
                    js_col_model_json[col_i]['filterSopt'] = 'eq';
                    filt.rules.push({field: req_i, op: "eq", data: req_hash_var_arr[req_i]});
                }
            }
        }
        if (filt.rules.length > 0) {
            keepSearchToolbarValue(grid_id, js_col_model_json, JSON.stringify(filt), "hash");
            return true;
        } else {
            return false;
        }
    } else {
        return false;
    }
}
function getHashFilterConditions(grid_id) {
    if (window.location.hash) {
        var req_hash_var_arr = getHashParams(window.location.hash, el_tpl_settings.framework_vars);
    } else {
        var req_hash_var_arr = getQueryParams(window.location.search, el_tpl_settings.framework_vars);
    }
    if (!Object.keys(req_hash_var_arr).length) {
        return;
    }
    var loc_grid, colModel, alias_name_arr = [];
    loc_grid = $('#' + grid_id);
    colModel = loc_grid.jqGrid('getGridParam', 'colModel');
    if (colModel.length > 1) {
        for (var i in colModel) {
            if (colModel[i].name) {
                alias_name_arr.push(colModel[i].name);
            }
        }
    }
    if (alias_name_arr.length > 0) {
        var filt, post_data, filters, req_i;
        post_data = loc_grid.jqGrid("getGridParam", "postData");
        filters = (post_data && post_data.filters) ? parseJSONString(post_data.filters) : {};
        filt = {
            groupOp: "AND",
            rules: (filters && filters.rules) ? filters.rules : [],
            entrys: (filters && filters.entrys) ? filters.entrys : "",
            range: (filters && filters.range) ? filters.range : ""
        };
        for (req_i in req_hash_var_arr) {
            if (req_i != "" && $.inArray(req_i, alias_name_arr) >= 0) {
                filt.rules.push({field: req_i, op: "eq", data: req_hash_var_arr[req_i]});
            }
        }
        loc_grid[0].p.search = true;
        $.extend(loc_grid[0].p.postData, {
            filters: JSON.stringify(filt)
        });
    }
}
function getHashParams(query, avoid_params) {
    var params = {};
    var neg_params = ($.isArray(avoid_params)) ? avoid_params : [];
    if (!query) {
        return params;
    }// return empty object
    query = query.toString().replace(/%7c/gi, '|');
    //var pairs = query.split(/[;|]/);
    var pairs = query.split("|");
    for (var i = 1; i < pairs.length; i += 2) {
        if (pairs[i] && $.inArray(pairs[i], neg_params) == "-1") {
            var key = unescape(pairs[i]);
            var val = (pairs[i + 1] != undefined) ? unescape(pairs[i + 1]) : "";
            val.replace(/\+/g, ' ');
            params[key] = val;
        }
    }
    return params;
}
function getQueryParams(query, avoid_params) {
    var params = {};
    var neg_params = ($.isArray(avoid_params)) ? avoid_params : [];
    if (!query) {
        return params;
    }// return empty object
    var queryStr = query.substring(1);
    if (!queryStr) {
        return params;
    }// return empty object
    //var pairs = query.split(/[;|]/);
    var pairs = query.split("&");
    for (var i = 0; i < pairs.length; i++) {
        var keyset = pairs[i].split("=");
        if (keyset[0] && $.inArray(keyset[0], neg_params) == "-1") {
            var key = unescape(keyset[0]);
            var val = (keyset[1] != undefined) ? unescape(keyset[1]) : "";
            val.replace(/\+/g, ' ');
            params[key] = val;
        }
    }
    return params;
}
function findGridViewParam(query, grid_id, type, key) {
    if (!query) {
        return type;
    }
    var arr = ["list", "view", "grid"];
    if (!$("#layout_view_" + grid_id).length && !$("#layout_grid_" + grid_id).length) {
        return type;
    }
    query = query.toString().replace(/%7c/gi, '|');
    //var pairs = query.split(/[;|]/);
    var pairs = query.split("|"), p1, mode;
    for (var i = 1; i < pairs.length; i += 2) {
        if (pairs[i] == "view") {
            p1 = (pairs[i + 1]) ? unescape(pairs[i + 1]) : "";
            if (p1 == "list") {
                mode = "view";
            } else if (p1 == "grid") {
                mode = "grid";
            } else {
                mode = "list";
            }
            break;
        }
    }
    if (!mode || $.inArray(mode, arr) == -1) {
        mode = getLocalStore(key);
    }
    if ($.inArray(mode, arr) == -1) {
        mode = type;
    } else {
        type = mode;
    }
    return type;
}
//related to subgrid listing
function initSubGridListing() {
    delete el_subgrid_settings.grid_nesgrid_alias;

    var subgrid_id = el_subgrid_settings.table_id, sub_pager_id = el_subgrid_settings.pager_id;
    var sub_js_prev_key = '', sub_js_assign_btn_id = '', sub_js_next_btn_id = '', sub_jsave = '', sub_saved_obj = '';
    var sub_js_col_name_arr = [], sub_js_sort_count = 0, sub_jrow = 0, sub_jcol = 0, sub_total_rows = 0, sub_total_pages = 1;
    var sub_js_before_req = true, sub_show_paging_var = true;

    var nes_grid_row = (el_subgrid_settings.nesgrid == 'Yes') ? true : false;
    var sub_row_numbers = (el_subgrid_settings.inline_add == "Yes") ? true : false;
    var sub_pager_active = (el_subgrid_settings.hide_paging_btn == "Yes") ? false : true;

    var sub_add_permit = (el_subgrid_settings.hide_add_btn == '1' && el_subgrid_settings.permit_add_btn == "1" && el_subgrid_settings.advanced_grid == '1') ? true : false;
    var sub_del_permit = (el_subgrid_settings.hide_del_btn == '1' && el_subgrid_settings.permit_del_btn == '1' && el_subgrid_settings.advanced_grid == '1') ? true : false;
    var sub_status_permit = (el_subgrid_settings.hide_status_btn == '1' && el_subgrid_settings.permit_edit_btn == '1' && el_subgrid_settings.advanced_grid == '1') ? true : false;
    var sub_export_permit = (el_subgrid_settings.hide_export_btn == '1' && el_subgrid_settings.permit_expo_btn == '1' && !el_general_settings.mobile_platform) ? true : false;
    var sub_print_permit = (el_subgrid_settings.print_list == 'Yes' && el_subgrid_settings.permit_print_btn == '1' && !el_general_settings.mobile_platform) ? true : false;

    var sub_columns_permit = (el_subgrid_settings.hide_columns_btn == 'Yes' || el_general_settings.mobile_platform) ? false : true;
    var sub_adv_search_permit = (el_subgrid_settings.hide_advance_search == 'Yes' || el_subgrid_settings.advanced_grid != '1') ? false : true;
    var sub_refresh_permit = (el_subgrid_settings.hide_refresh_btn == 'Yes' || el_subgrid_settings.advanced_grid != '1') ? false : true;

    var sub_inline_add_permit = (el_subgrid_settings.inline_add == "Yes" && el_subgrid_settings.permit_add_btn == "1" && el_subgrid_settings.advanced_grid == '1') ? true : false;
    var sub_search_tool_permit = (el_subgrid_settings.hide_search_tool == "Yes") ? false : true;

    var sub_global_filter = (el_subgrid_settings.global_filter == "Yes") ? true : false;
    var sub_top_filter_arr = $.isPlainObject(el_subgrid_settings.top_filter) ? el_subgrid_settings.top_filter : [];
    var sub_action_callbacks = $.isPlainObject(el_subgrid_settings['callbacks']) ? el_subgrid_settings['callbacks'] : {};
    var sub_list_message_arr = $.isPlainObject(el_subgrid_settings['message_arr']) ? el_subgrid_settings['message_arr'] : {};

    var sub_viewtemplate = '#layout_view_' + subgrid_id;
    var sub_gridtemplate = '#layout_grid' + subgrid_id;

    var sub_grid_button_arr = ($.isArray(el_subgrid_settings.buttons_arr)) ? el_subgrid_settings.buttons_arr : [];
    var sub_grid_button_ids = {
        "add": "add_" + subgrid_id,
        "del": "del_" + subgrid_id,
        "search": "search_" + subgrid_id,
        "refresh": "refresh_" + subgrid_id,
        "columns": "columns_" + subgrid_id,
        "export": "export_" + subgrid_id,
        "print": "print_" + subgrid_id
    }

    if (el_general_settings.mobile_platform) {
        //el_subgrid_settings.auto_width = "Yes";
    }

    if (typeof executeBeforeGridInit == "function") {
        executeBeforeGridInit(el_subgrid_settings['module_name'], "sub");
    }
    if (sub_action_callbacks['before_grid_init'] && $.isFunction(window[sub_action_callbacks['before_grid_init']])) {
        window[sub_action_callbacks['before_grid_init']](el_subgrid_settings, sub_js_col_model_json, sub_js_col_name_json);
    }

    for (var i in sub_js_col_name_json) {
        sub_js_col_name_arr.push(sub_js_col_name_json[i]['label']);
    }

    if (!sub_add_permit && !sub_del_permit && !sub_status_permit && !sub_adv_search_permit && !sub_columns_permit &&
            !sub_refresh_permit && !sub_inline_add_permit && !sub_search_tool_permit && !sub_global_filter &&
            !($.isArray(sub_top_filter_arr) && sub_top_filter_arr.length > 0) &&
            !($(sub_viewtemplate).length || $(sub_gridtemplate).length) && el_tpl_settings.grid_top_menu == 'N') {
        sub_show_paging_var = false;
    }
    var listview = findGridViewParam(window.location.hash, subgrid_id, el_subgrid_settings.listview, el_grid_settings.enc_location + '_sg_gv');
    setHideColumnSettings(subgrid_id, sub_js_col_model_json, sub_top_filter_arr);
    getColumnsWidth(el_grid_settings.enc_location + '_sg_cw', subgrid_id, sub_js_col_model_json);

    jQuery("#" + subgrid_id).jqGrid({
        url: el_subgrid_settings.listing_url,
        editurl: el_subgrid_settings.edit_page_url,
        mtype: 'POST',
        datatype: "json",
        colNames: sub_js_col_name_arr,
        colModel: sub_js_col_model_json,
        page: 1,
        pgbuttons: sub_pager_active,
        pginput: sub_pager_active,
        pgnumbers: (el_theme_settings.grid_sub_pgnumbers) ? true : false, //custom
        pgnumlimit: (el_general_settings.mobile_platform) ? 2 : parseInt(el_theme_settings.grid_sub_pgnumlimit), //custom
        pagingpos: el_theme_settings.grid_sub_pagingpos, //custom
        rowNum: (el_subgrid_settings.hide_paging_btn == "Yes") ? 1000000 : parseInt(el_tpl_settings.grid_rec_limit),
        rowList: (sub_pager_active) ? pager_row_list : [],
        sortname: el_subgrid_settings.default_sort,
        sortorder: el_subgrid_settings.sort_order,
        altRows: true,
        altclass: 'evenRow',
        multiselectWidth: 30,
        multiselect: (el_subgrid_settings.hide_multi_select == "Yes") ? false : true,
        multiboxonly: true,
        hiderecords: el_subgrid_settings.admin_rec_arr,
        viewrecords: true,
        norecmsg: js_lang_label.GENERIC_GRID_NO_RECORDS_FOUND,
        caption: false,
        hidegrid: false,
        listview: listview, //custom 
        viewtemplate: '#layout_view_' + subgrid_id, //custom
        gridtemplate: '#layout_grid' + subgrid_id, //custom
        viewCallback: function (id, type) {
            //custom
            reloadListGrid(subgrid_id, null, 2, el_subgrid_settings);
            setLocalStore(el_grid_settings.enc_location + '_sg_gv', type);
        },
        listtags: ['{', '}'], //custom
        inlineadd: (el_subgrid_settings.inline_add == "Yes") ? true : false, //custom
        inlinerecpos: (el_subgrid_settings.rec_position == "Bottom") ? true : false, //custom
        isSubMod: 1, //custom
        curModule: el_subgrid_settings.add_page_url, //custom
        parModule: el_subgrid_settings.par_module, //custom
        parData: el_subgrid_settings.par_data, //custom
        parField: el_subgrid_settings.par_field, //custom
        parType: el_subgrid_settings.par_type, //custom
        extraHash: el_subgrid_settings.extra_hstr, //custom
        ratingAllow: (el_subgrid_settings.rating_allow == "Yes") ? true : false, //custom
        pager: (el_tpl_settings.grid_bot_menu == 'Y') ? sub_pager_id : "",
        toppager: (el_tpl_settings.grid_top_menu == 'Y') ? true : false,
        toppaging: (el_tpl_settings.grid_top_menu == 'Y') ? true : false, //custom
        showpaging: sub_show_paging_var, //custom
        cellurl: el_subgrid_settings.edit_page_url,
        cellsubmit: 'remote',
        sortable: {
            update: function (permutation) {
                setColumnsPosition(el_grid_settings.enc_location + '_sg_cp', permutation, subgrid_id, sub_js_col_model_json);
            }
        },
        searchGrid: {
            multipleSearch: true,
            searchToolbar: (sub_search_tool_permit) ? true : false,
            globalFilter: (sub_global_filter) ? true : false,
            topFilters: sub_top_filter_arr,
            topDataInit: triggerTopFilterEvent
        },
        afterSearchToggle: function (id) {
            //custom
            if ($("#hbox_" + id + "_jqgrid").find(".ui-search-toolbar").is(":hidden")) {
                $("#listsearch_" + id + "_top").removeClass("active");
            }
            resizeGridWidth();
        },
        height: '100%',
        autowidth: (el_subgrid_settings.auto_width == "No") ? false : true,
        _autowidth: (el_subgrid_settings.auto_width == "No") ? false : true,
        shrinkToFit: (el_subgrid_settings.auto_width == "No") ? false : true,
        fixed: true,
        //rownumbers: sub_row_numbers,
        multiSort: (el_tpl_settings.grid_multiple_sorting) ? true : false,
        subGrid: nes_grid_row,
        subGridWidth: 18,
        subGridRowExpanded: function (nesgrid_id, row_id) {
            var nesgrid_table_id, add_params = '', t_did = "";
            nesgrid_table_id = nesgrid_id + "_nes";
            if (el_subgrid_settings.nesgrid == "Yes") {
                add_params = "&SGType=main";
            } else {
                if (!el_subgrid_settings.grid_nesgrid_alias) {
                    if (el_subgrid_settings.nesgrid == "Yes") {
                        add_params = "&SGType=main";
                    } else {
                        for (var i in sub_js_col_model_json) {
                            if (sub_js_col_model_json[i]['expandrow']) {
                                sub_js_col_model_json.grid_nesgrid_alias = sub_js_col_model_json[i]['index'];
                                break;
                            }
                        }
                        add_params = "&SGType=each&SGAlias=" + el_subgrid_settings.grid_nesgrid_alias;
                    }
                } else {
                    add_params = "&SGType=each&SGAlias=" + el_subgrid_settings.grid_nesgrid_alias;
                }
            }
            delete el_subgrid_settings.grid_nesgrid_alias;
            initGirdLoadingOverlay(el_tpl_settings.main_grid_id);
            $("#" + nesgrid_id).html("<div id='" + nesgrid_table_id + "' class='scroll subgird-block'></div>");
            $("#" + nesgrid_table_id).html('<div class="subgrid-loader"><i class="fa fa-spinner fa-pulse fa-5x fa-fw"></i></div>');
            $.ajax({
                url: el_subgrid_settings.nesgrid_listing_url + '&SGRender=nested' + add_params,
                type: 'POST',
                data: {
                    "SGID": row_id,
                    "SGridID": nesgrid_id
                },
                success: function (data) {
                    $("#" + nesgrid_table_id).addClass("subgrid_view_div_display");
                    $("#" + nesgrid_table_id).html(data);
                    hideGirdLoadingOverlay(el_tpl_settings.main_grid_id);
                    initializeNesgridEvents($("#" + nesgrid_table_id));
                }
            });
        },
        subGridRowColapsed: function (nesgrid_id, row_id) {
            // this function is called before removing the data
            var nesgrid_table_id = nesgrid_id + "_nes";
            jQuery("#" + nesgrid_table_id).remove();
            resizeGridWidth();
        },
        grouping: (el_subgrid_settings.grouping == 'Yes') ? true : false,
        groupingView: {
            groupField: ($.isArray(el_subgrid_settings.group_attr['field'])) ? el_subgrid_settings.group_attr['field'] : [],
            groupOrder: ($.isArray(el_subgrid_settings.group_attr['order'])) ? el_subgrid_settings.group_attr['order'] : [],
            groupText: ($.isArray(el_subgrid_settings.group_attr['text'])) ? el_subgrid_settings.group_attr['text'] : [],
            groupColumnShow: ($.isArray(el_subgrid_settings.group_attr['column'])) ? el_subgrid_settings.group_attr['column'] : [],
            groupSummary: ($.isArray(el_subgrid_settings.group_attr['summary'])) ? el_subgrid_settings.group_attr['summary'] : [],
            showSummaryOnHide: ($.isArray(el_subgrid_settings.group_attr['summary'])) ? el_subgrid_settings.group_attr['summary'] : [],
            groupCollapse: false,
            groupDataSorted: true
        },
        footerrow: (el_subgrid_settings.footer_row == 'Yes') ? true : false,
        userDataOnFooter: true,
        beforeRequest: function () {
            if (sub_js_before_req) {
                sub_js_before_req = false;
                getColumnsPosition(el_grid_settings.enc_location + '_sg_cp', subgrid_id);
            }
        },
        beforeProcessing: function (data) {
            sub_total_rows = 0;
            sub_total_pages = 1;
            delete el_general_settings.grid_sub_link_model;
            if (data && data.total) {
                sub_total_pages = data.total;
            }
            if (data && data.records) {
                sub_total_rows = data.records;
            }
            if (data && data.links) {
                el_general_settings.grid_sub_link_model = data.links;
            }
        },
        loadError: function (xhr, status, error) {
            hideGirdLoadingOverlay(el_tpl_settings.main_grid_id);
        },
        loadComplete: function (data) {
            setTimeout(function () {
                hideGirdLoadingOverlay(el_tpl_settings.main_grid_id);
                Project.hide_adaxloading_div();
            }, 2);
            $("#" + el_tpl_settings.main_grid_id + "_messages_html").remove();
            $("#selAllRows").val('false');
            // No Records Message
            noRecordsMessage(subgrid_id, data);
            // Add new record
            //addNewInlineRecord(subgrid_id);
            // Row colors
            applyGridRowColors(subgrid_id, data);
            // Rating Events
            //applyRatingEvents(subgrid_id);
            // Resizing Sub Grid
            resizeSubGridWidth(subgrid_id);
            // adjust main grid width
            adjustMainGridColumnWidth();
            // fancybox image events
            initializeFancyBoxEvents();
            //set columns widths
            checkColumnsWidth(el_grid_settings.enc_location + '_sg_cw', subgrid_id);
            if (typeof executeAfterGridLoad == "function") {
                executeAfterGridLoad(el_subgrid_settings['module_name'], "sub");
            }
            if (sub_action_callbacks['after_data_load'] && $.isFunction(window[sub_action_callbacks['after_data_load']])) {
                window[sub_action_callbacks['after_data_load']](data);
            }
        },
        gridComplete: function () {
            // Resizing Sub Grid
            resizeSubGridWidth(subgrid_id);
            hideAdminDataCheckBox(subgrid_id, el_subgrid_settings.admin_rec_arr);
            getAdminImageTooltip(subgrid_id);
        },
        ondblClickRow: function (rowid, iRow, iCol, e) {
            var ac = $(e.srcElement).hasClass("add-cell") ? 1 : 0
            var ai = ($(e.srcElement).attr("aria-newrow") == "inline-add-row") ? 1 : 0;
            var bc = ($(e.srcElement).find(".inline-edit-row").length > 0) ? 1 : 0
            var cf = ($(e.srcElement).hasClass(".inline-edit-row")) ? 1 : 0
            var sf = ($(e.srcElement).closest("td[role='gridcell']").hasClass('edit-cell')) ? 1 : 0
            if (ac || ai || bc || cf || sf) {
                e.stopPropagation();
            } else {
                $("#" + el_tpl_settings.main_grid_id).jqGrid('setGridParam', {
                    cellEdit: false
                });
                var $this = $(this);
                $this.jqGrid('setGridParam', {
                    cellEdit: true
                });
                $this.jqGrid('editCell', iRow, iCol, true);
                $this.jqGrid('setGridParam', {
                    cellEdit: false
                });
                e.stopPropagation();
            }
        },
        beforeEditCell: function (rowid, cellName, cellValue, iRow, iCol) {
            restoreBeforeEditedCell(this, sub_jrow, sub_jcol, sub_jsave);
            if ($(".colpick").length) {
                $(".colpick").hide();
            }
        },
        afterEditCell: function (rowid, cellName, cellValue, iRow, iCol) {
            var cellDOM = this.rows[iRow].cells[iCol], oldKeydown;
            var $cellInput = $("#" + iRow + "_" + cellName, cellDOM);
            var events = $._data($cellInput.eq(0), "events"), cselector = $cellInput["selector"];
            var $this = $(this), date_flag = false, colorpicker_flag = false, phone_flag = false;
            if ($cellInput.hasClass("dateOnly")) {
                inlineDateTimePicker(iRow, cellName, 'date');
                var date_flag = true;
            } else if ($cellInput.hasClass("timeOnly")) {
                inlineDateTimePicker(iRow, cellName, 'time');
                var date_flag = true;
            } else if ($cellInput.hasClass("dateTime")) {
                inlineDateTimePicker(iRow, cellName, 'dateTime');
                var date_flag = true;
            } else if ($cellInput.hasClass("colorPicker")) {
                inlineColorPicker(iRow, cellName, 'colorPicker');
                var colorpicker_flag = true;
            } else if ($cellInput.hasClass("phoneNumber")) {
                var phone_flag = true;
            } else if ($cellInput.hasClass("inline-textarea-edit")) {
                var txt = $($cellInput).val();
                txt = txt.replace(/<br>/g, "");
                txt = txt.replace(/<BR>/g, "");
                $($cellInput).val(txt);
            }
            sub_jrow = iRow;
            sub_jcol = iCol;
            sub_jsave = ($.isArray(this.p.savedRow)) ? this.p.savedRow[this.p.savedRow.length - 1].v : "";
            if ($(cellDOM).find("select[role='select']").length) {
                $cellDrop = $(cellDOM).find("select[role='select']");
                $($cellDrop).attr("aria-update-id", rowid);
                sub_saved_obj = this.p.savedRow;
                $($cellDrop).on('change', function (e) {
                    $this.jqGrid('setGridParam', {
                        cellEdit: true
                    });
                    $this.jqGrid('setGridParam', {
                        savedRow: sub_saved_obj
                    });
                    $this.jqGrid('saveCell', iRow, iCol);
                    $this.jqGrid('restoreCell', iRow, iCol, true);
                    $(cellDOM).removeClass("ui-state-highlight");
                    sub_jrow = 0, sub_jcol = 0, sub_jsave = '';
                    sub_saved_obj = $this.jqGrid('getGridParam', 'savedRow');
                });
                var autoChznInterval = setInterval(function () {
                    if ($(cselector).hasClass("chosen-select") && $(cselector + "_chosen").length) {
                        $(cselector + "_chosen").on('keydown', function (e) {
                            if (e.keyCode == 27) {
                                if ($(cselector + "_chosen").find(".chosen-drop").css("left") == "-9999px") {
                                    $this.jqGrid('setGridParam', {
                                        cellEdit: true
                                    });
                                    $this.jqGrid('setGridParam', {
                                        savedRow: sub_saved_obj
                                    });
                                    $this.jqGrid('restoreCell', iRow, iCol, true);
                                    $(cellDOM).removeClass("ui-state-highlight");
                                    sub_jrow = 0, sub_jcol = 0, sub_jsave = '';
                                }
                            }
                        });
                        clearInterval(autoChznInterval);
                    }
                }, 250);
            } else {
                applyInputTextCase($(cellDOM));
                sub_saved_obj = this.p.savedRow;
                setTimeout(function () {
                    if (events && events.keydown && events.keydown.length) {
                        $this.jqGrid('setGridParam', {
                            savedRow: sub_saved_obj
                        });
                        oldKeydown = events.keydown[0].handler;
                        $cellInput.unbind('keydown', oldKeydown);
                        $cellInput.bind('keydown', function (e) {
                            $this.jqGrid('setGridParam', {
                                cellEdit: true
                            });
                            $this.jqGrid('setGridParam', {
                                savedRow: sub_saved_obj
                            });
                            if ($cellInput.hasClass("inline-textarea-edit")) {
                                if (e.keyCode === 13) {
                                    if (e.shiftKey) {
                                        e.stopPropagation();
                                    } else {
                                        $this.jqGrid('saveCell', iRow, iCol);
                                        $this.jqGrid('restoreCell', iRow, iCol, true);
                                        $(cellDOM).removeClass("ui-state-highlight");
                                        sub_jrow = 0, sub_jcol = 0, sub_jsave = '';
                                    }
                                } else {
                                    oldKeydown.call(this, e);
                                }
                            } else if ($cellInput.hasClass("colorPicker")) {
                                if (e.keyCode === 9 || e.keyCode === 13 || e.keyCode === 27) {
                                    if ($(".colpick").length) {
                                        //$(".colpick").remove();
                                        $(".colpick").hide();

                                    }
                                }
                                oldKeydown.call(this, e);
                            } else {
                                oldKeydown.call(this, e);
                                $this.jqGrid('setGridParam', {
                                    cellEdit: false
                                });
                            }
                        }).bind('focusout', function (e) {
                            $this.jqGrid('setGridParam', {
                                savedRow: sub_saved_obj
                            });
                            if (date_flag) {
                                if ($(".ui-datepicker").is(":hidden")) {
                                    $this.jqGrid('setGridParam', {
                                        cellEdit: true
                                    });
                                    //$this.jqGrid('saveCell', iRow, iCol);
                                    $this.jqGrid('restoreCell', iRow, iCol, true);
                                    $(cellDOM).removeClass("ui-state-highlight");
                                    sub_jrow = 0, sub_jcol = 0, sub_jsave = '';
                                }
                            } else if (colorpicker_flag) {
                                if ($(".colpick" + "#" + $cellInput.attr("colorpickerid")).is(":hidden")) {
                                    $this.jqGrid('setGridParam', {
                                        cellEdit: true
                                    });
                                    //$this.jqGrid('saveCell', iRow, iCol);
                                    $this.jqGrid('restoreCell', iRow, iCol, true);
                                    $(cellDOM).removeClass("ui-state-highlight");
                                    sub_jrow = 0, sub_jcol = 0, sub_jsave = '';
                                }
                            } else {
                                var save_flag = true;
                                if (save_flag) {
                                    $this.jqGrid('setGridParam', {
                                        cellEdit: true
                                    });
                                    if (phone_flag == true) {
                                        $this.jqGrid('saveCell', iRow, iCol);
                                    }
                                    $this.jqGrid('restoreCell', iRow, iCol, true);
                                    $(cellDOM).removeClass("ui-state-highlight");
                                    sub_jrow = 0, sub_jcol = 0, sub_jsave = '';
                                }
                            }
                        });
                    }
                }, 100);
            }
        },
        beforeSubmitCell: function (rowid, cellName, cellValue, iRow, iCol) {
            if (sub_action_callbacks['before_rec_edit'] && $.isFunction(window[sub_action_callbacks['before_rec_edit']])) {
                return window[sub_action_callbacks['before_rec_edit']](rowid, cellName, cellValue, iRow, iCol);
            }
        },
        afterSubmitCell: function (response, rowid, cellname, value, iRow, iCol) {
            var $c_flag, $c_msg;
            if (response.responseText != 1) {
                var res = parseJSONString(response.responseText);
                var columnNames = $("#" + subgrid_id).jqGrid('getGridParam', 'colNames');
                $c_flag = true;
                $c_msg = res.message;
                if (res.success == 'false') {
                    $c_flag = false;
                    $c_msg += " : " + columnNames[iCol];
                } else if (res.success == '2') {
                    reloadListGrid(subgrid_id);
                } else if (res.success == '3' || res.success == '4') {
                    if (isRedirectEqualHash(res.red_hash)) {
                        window.location.hash = res.red_hash;
                        window.location.reload();
                    } else {
                        window.location.hash = res.red_hash;
                    }
                } else if (res.success == '5') {
                    window.location.href = res.red_hash;
                }
                gridReportMessage($c_flag, $c_msg);
            } else {
                $c_flag = true;
            }
            if (sub_action_callbacks['after_rec_edit'] && $.isFunction(window[sub_action_callbacks['after_rec_edit']])) {
                return window[sub_action_callbacks['after_rec_edit']](response, rowid, cellname, value, iRow, iCol);
            }
            return [$c_flag, res.message];
        },
        afterSaveCell: function (rowid, cellname, value, iRow, iCol) {

        },
        onSortCol: function (index, iCol, sortorder) {
            $("#" + subgrid_id).setGridParam({defaultsort: "No"});
            activateGridSortColumns(subgrid_id);
        },
        resizeStop: function (newwidth, index) {
            setColumnsWidth(el_grid_settings.enc_location + '_sg_cw', subgrid_id);
        },
        beforeSelectRow: function (rowid, e) {
            multiSelectHandler(rowid, e);
        }
    });

    if (sub_search_tool_permit) {
        jQuery("#" + subgrid_id).jqGrid('filterToolbar', {
            stringResult: true,
            searchOnEnter: false,
            searchOperators: (el_theme_settings.grid_sub_searchopt) ? true : false
        });
    }

    var createDelSearchRefreshBtn = function (order_arr, label_arr) {
        var del_icon, del_text = '', del_title;
        del_icon = (el_theme_settings.grid_sub_icons_del || (label_arr['del'] && label_arr['del']['icon_only'] == "Yes")) ? true : false;
        if (!del_icon) {
            del_text = (label_arr['del'] && label_arr['del']['text']) ? label_arr['del']['text'] : js_lang_label.GENERIC_GRID_DELETE;
        }
        del_title = (label_arr['del'] && label_arr['del']['title']) ? label_arr['del']['title'] : js_lang_label.GENERIC_GRID_DELETE_SELECTED_ROW;

        var search_icon, search_text = '', search_title;
        search_icon = (el_theme_settings.grid_sub_icons_search || (label_arr['search'] && label_arr['search']['icon_only'] == "Yes")) ? true : false;
        if (!search_icon) {
            search_text = (label_arr['search'] && label_arr['search']['text']) ? label_arr['search']['text'] : js_lang_label.GENERIC_GRID_SEARCH;
        }
        search_title = (label_arr['search'] && label_arr['search']['title']) ? label_arr['search']['title'] : js_lang_label.GENERIC_GRID_ADVANCE_SEARCH;

        var refresh_icon, refresh_text = '', refresh_title;
        refresh_icon = (el_theme_settings.grid_sub_icons_refresh || (label_arr['refresh'] && label_arr['refresh']['icon_only'] == "Yes")) ? true : false;
        if (!refresh_icon) {
            refresh_text = (label_arr['refresh'] && label_arr['refresh']['text']) ? label_arr['refresh']['text'] : js_lang_label.GENERIC_GRID_SHOW_ALL;
        }
        refresh_title = (label_arr['refresh'] && label_arr['refresh']['title']) ? label_arr['refresh']['title'] : js_lang_label.GENERIC_GRID_SHOW_ALL_LISTING_RECORDS;

        jQuery("#" + subgrid_id).jqGrid('navGrid', '#' + sub_pager_id, {
            cloneToTop: true,
            add: false,
            addicon: "ui-icon-plus",
            edit: false,
            editicon: "ui-icon-pencil",
            del: sub_del_permit,
            delicon: "ui-icon-trash",
            delicon_p: (del_icon) ? 'uigrid-del-btn del-icon-only' : "uigrid-del-btn",
            deltext: del_text,
            deltitle: del_title,
            search: sub_adv_search_permit,
            searchicon: "ui-icon-search",
            searchicon_p: (search_icon) ? 'uigrid-search-btn search-icon-only' : "uigrid-search-btn",
            searchtext: search_text,
            searchtitle: search_title,
            refresh: sub_refresh_permit,
            refreshicon: "ui-icon-refresh",
            refreshicon_p: (refresh_icon) ? 'uigrid-refresh-btn refresh-icon-only' : "uigrid-refresh-btn",
            refreshtext: refresh_text,
            refreshtitle: refresh_title,
            alerttext: js_lang_label.GENERIC_GRID_PLEASE_SELECT_ANY_RECORD,
            beforeRefresh: function () {
                $("#" + subgrid_id).setGridParam({sortname: el_subgrid_settings.default_sort, sortorder: el_subgrid_settings.sort_order, defaultsort: "Yes"});
                activateGridSortColumns(subgrid_id);
            },
            afterRefresh: function () {
                $("#hbox_" + subgrid_id + "_jqgrid").find(".search-chosen-select").find("option").removeAttr("selected");
                $("#hbox_" + subgrid_id + "_jqgrid").find(".search-chosen-select").trigger("chosen:updated");
                if ($("#hbox_" + subgrid_id + "_jqgrid").find(".search-token-autocomplete").length) {
                    $("#hbox_" + subgrid_id + "_jqgrid").find(".search-token-autocomplete").each(function () {
                        $(this).tokenInput("clear");
                    });
                }
                $("#hbox_" + subgrid_id + "_jqgrid").find(".top-filter-chosen").find("option").removeAttr("selected");
                $("#hbox_" + subgrid_id + "_jqgrid").find(".top-filter-chosen").trigger("chosen:updated");
                if ($("#hbox_" + subgrid_id + "_jqgrid").find(".top-filter-autocomplete").length) {
                    $("#hbox_" + subgrid_id + "_jqgrid").find(".top-filter-autocomplete").each(function () {
                        $(this).tokenInput("clear");
                    });
                }
            }
        }, {
            // edit options
        }, {
            // add options
        }, {
            // delete options
            id: sub_grid_button_ids.del,
            width: 320,
            caption: js_lang_label.GENERIC_GRID_DELETE,
            msg: js_lang_label.GENERIC_GRID_ARE_YOU_SURE_WANT_TO_DELETE_SELECTED_RECORDS,
            bSubmit: js_lang_label.GENERIC_GRID_DELETE,
            bCancel: js_lang_label.GENERIC_GRID_CANCEL,
            modal: true,
            closeOnEscape: true,
            serializeDelData: function (postdata) {
                var selAllRows = jQuery('#selAllRows').val();
                // append postdata with any information 
                return {
                    "id": postdata.id,
                    "oper": postdata.oper,
                    "AllRowSelected": selAllRows,
                    "filters": $('#' + subgrid_id).getGridParam('postData').filters
                }
            },
            beforeSubmit: function (postdata) {
                if (sub_action_callbacks['before_rec_delete'] && $.isFunction(window[sub_action_callbacks['before_rec_delete']])) {
                    return window[sub_action_callbacks['before_rec_delete']](postdata);
                } else {
                    return [true, ""];
                }
            },
            afterSubmit: function (response, postdata) {
                var resdata = parseJSONString(response.responseText), $del_flag, $jq_errmsg;
                if (resdata.success == 'true') {
                    $jq_errmsg = js_lang_label.GENERIC_GRID_RECORDS_DELETED_SUCCESSFULLY;
                    if (resdata.message != "") {
                        $jq_errmsg = resdata.message;
                    }
                    $del_flag = true;
                } else {
                    $jq_errmsg = js_lang_label.GENERIC_GRID_ERROR_IN_DELETION;
                    if (resdata.message != "") {
                        $jq_errmsg = resdata.message;
                    }
                    $del_flag = false;
                }
                gridReportMessage($del_flag, $jq_errmsg);
                if (sub_action_callbacks['after_rec_delete'] && $.isFunction(window[sub_action_callbacks['after_rec_delete']])) {
                    window[sub_action_callbacks['after_rec_delete']](response, postdata);
                }
                return [true, $jq_errmsg];
            }
        }, {
            // search options
            id: sub_grid_button_ids.search,
            multipleSearch: true,
            multipleGroup: (el_subgrid_settings.group_search == "1") ? true : false,
            showQuery: false,
            Find: js_lang_label.GENERIC_GRID_FIND,
            Reset: js_lang_label.GENERIC_GRID_RESET,
            width: 700,
            height: 275,
            closeOnEscape: true,
            modal: true,
            closeAfterSearch: true
        }, {
            // view options
        }, {
            // refresh options
            id: sub_grid_button_ids.refresh
        }, {
            // order options array
            order: order_arr
        });
    }

    var createAddButton = function (afterId, label_arr) {
        var add_icon, add_text = '', add_title;
        add_icon = (el_theme_settings.grid_sub_icons_add || (label_arr['icon_only'] == "Yes")) ? true : false;
        if (!add_icon) {
            add_text = (label_arr['text']) ? label_arr['text'] : js_lang_label.GENERIC_GRID_ADD_NEW;
        }
        add_title = (label_arr['title']) ? label_arr['title'] : js_lang_label.GENERIC_GRID_ADD_NEW;

        sub_js_assign_btn_id = sub_grid_button_ids.add;
        jQuery("#" + subgrid_id).navButtonAdd('#' + sub_pager_id, {
            caption: add_text,
            title: add_title,
            buttonicon: "ui-icon-plus",
            buttonicon_p: (add_icon) ? 'uigrid-add-btn add-icon-only' : 'uigrid-add-btn',
            onClickButton: function () {
                adminAddNewRecord(el_subgrid_settings.add_page_url, el_subgrid_settings.extra_hstr, el_subgrid_settings.popup_add_form, subgrid_id, el_subgrid_settings.popup_add_size);
            },
            id: sub_js_assign_btn_id,
            afterButtonId: afterId,
            position: "first"
        });
        jQuery("#" + subgrid_id).navButtonAdd("#" + subgrid_id + "_toppager_left", {
            caption: add_text,
            title: add_title,
            buttonicon: "ui-icon-plus",
            buttonicon_p: (add_icon) ? 'uigrid-add-btn add-icon-only' : 'uigrid-add-btn',
            onClickButton: function () {
                adminAddNewRecord(el_subgrid_settings.add_page_url, el_subgrid_settings.extra_hstr, el_subgrid_settings.popup_add_form, subgrid_id, el_subgrid_settings.popup_add_size);
            },
            id: sub_js_assign_btn_id + "_top",
            afterButtonId: (afterId) ? afterId + "_top" : "",
            position: "first"
        });
    }
    var createStatusButton = function (afterId) {
        var sub_jstatus_btn, sub_jstatus_lbl, sub_status_icon;
        for (var i in el_subgrid_settings.status_arr) {
            if (!el_subgrid_settings.status_arr[i]) {
                continue;
            }
            sub_jstatus_btn = el_subgrid_settings.status_arr[i];
            sub_jstatus_lbl = eval(el_subgrid_settings.status_lang_arr[i]);
            sub_status_icon = (sub_jstatus_btn || "").replace(/(\s)/g, "").toLowerCase();

            sub_js_assign_btn_id = "status_" + i + "_" + subgrid_id;
            sub_js_next_btn_id = (i == 0) ? afterId : "status_" + sub_js_prev_key + "_" + subgrid_id;

            jQuery("#" + subgrid_id).navButtonAdd('#' + sub_pager_id, {
                caption: sub_jstatus_lbl,
                title: sub_jstatus_lbl,
                lang: sub_jstatus_btn,
                buttonicon: "ui-icon-newwin",
                buttonicon_p: "uigrid-status-common uigrid-status-btn-" + sub_status_icon,
                onClickButton: function (e, p) {
                    var fids = filterGridSelectedIDs(this);
                    adminStatusChange(subgrid_id, p.lang, fids, el_subgrid_settings.edit_page_url, p.title, sub_action_callbacks, sub_list_message_arr);
                },
                id: sub_js_assign_btn_id,
                afterButtonId: sub_js_next_btn_id,
                position: "first"
            });
            jQuery("#" + subgrid_id).navButtonAdd("#" + subgrid_id + "_toppager_left", {
                caption: "" + sub_jstatus_lbl,
                title: sub_jstatus_lbl,
                lang: sub_jstatus_btn,
                buttonicon: "ui-icon-newwin",
                buttonicon_p: "uigrid-status-common uigrid-status-btn-" + sub_status_icon,
                onClickButton: function (e, p) {
                    var fids = filterGridSelectedIDs(this);
                    adminStatusChange(subgrid_id, p.lang, fids, el_subgrid_settings.edit_page_url, p.title, sub_action_callbacks, sub_list_message_arr);
                },
                id: sub_js_assign_btn_id + "_top",
                afterButtonId: (sub_js_next_btn_id) ? sub_js_next_btn_id + "_top" : "",
                position: "first"
            });
            sub_js_prev_key = i;
        }
    }
    var createColumnsButton = function (afterId, label_arr) {
        var col_icon, col_text = '', col_title;
        col_icon = (el_theme_settings.grid_sub_icons_columns || (label_arr['icon_only'] == "Yes")) ? true : false;
        if (!col_icon) {
            col_text = (label_arr['text']) ? label_arr['text'] : js_lang_label.GENERIC_GRID_COLUMNS;
        }
        col_title = (label_arr['title']) ? label_arr['title'] : js_lang_label.GENERIC_GRID_HIDESHOW_COLUMNS;

        sub_js_assign_btn_id = sub_grid_button_ids.columns;
        jQuery("#" + subgrid_id).navButtonAdd('#' + sub_pager_id, {
            caption: col_text,
            title: col_title,
            buttonicon: "ui-icon-columns",
            buttonicon_p: (col_icon) ? 'uigrid-col-btn col-icon-only' : 'uigrid-col-btn',
            onClickButton: function () {
                jQuery("#" + subgrid_id).jqGrid('columnChooser', {
                    'classname': 'grid-columns-picker',
                    'dialog_opts': {
                        modal: true,
                        minWidth: 460
                    },
                    'msel_opts': {
                        'autoOpen': true,
                        'checkAllText': (js_lang_label.GENERIC_CHECK_ALL ? js_lang_label.GENERIC_CHECK_ALL : "Check all"),
                        'uncheckAllText': (js_lang_label.GENERIC_UNCHECK_ALL ? js_lang_label.GENERIC_UNCHECK_ALL : "Uncheck all"),
                        'noneSelectedText': (js_lang_label.GENERIC_GRID_SELECT_COLUMNS ? js_lang_label.GENERIC_GRID_SELECT_COLUMNS : "Select Columns"),
                        'selectedText': "# " + (js_lang_label.GENERIC_SELECTED ? js_lang_label.GENERIC_SELECTED : "Selected"),
                        'filterPlaceholder': (js_lang_label.GENERIC_GRID_SEARCH_HERE ? js_lang_label.GENERIC_GRID_SEARCH_HERE : "Search here"),
                        'beforeopen': function (event, ui) {
                            applyUIButtonCSS();
                        }
                    },
                    "beforeSubmit": function (div_id) {
                        if ($("#" + div_id).find('select').val() != null) {
                            return true;
                        } else {
                            jQuery.jgrid.info_dialog(js_lang_label.GENERIC_GRID_ERROR, js_lang_label.GENERIC_GRID_PLEASE_SELECT_ATLEAST_ONE_COLUMN, js_lang_label.GENERIC_GRID_OK);
                            return false;
                        }
                    },
                    "done": function (perm) {
                        if (perm) {
                            setColumnsChoosen(el_grid_settings.enc_location + '_sg_cs', subgrid_id);
                            reloadListGrid(subgrid_id);
                        }
                    }
                });
            },
            position: "last",
            id: sub_js_assign_btn_id,
            afterButtonId: afterId
        });
        jQuery("#" + subgrid_id).navButtonAdd("#" + subgrid_id + "_toppager_left", {
            caption: col_text,
            title: col_title,
            buttonicon: "ui-icon-columns",
            buttonicon_p: (col_icon) ? 'uigrid-col-btn col-icon-only' : 'uigrid-col-btn',
            onClickButton: function () {
                jQuery("#" + subgrid_id).jqGrid('columnChooser', {
                    'classname': 'grid-columns-picker',
                    'dialog_opts': {
                        modal: true,
                        minWidth: 460
                    },
                    'msel_opts': {
                        'autoOpen': true,
                        'checkAllText': (js_lang_label.GENERIC_CHECK_ALL ? js_lang_label.GENERIC_CHECK_ALL : "Check all"),
                        'uncheckAllText': (js_lang_label.GENERIC_UNCHECK_ALL ? js_lang_label.GENERIC_UNCHECK_ALL : "Uncheck all"),
                        'noneSelectedText': (js_lang_label.GENERIC_GRID_SELECT_COLUMNS ? js_lang_label.GENERIC_GRID_SELECT_COLUMNS : "Select Columns"),
                        'selectedText': "# " + (js_lang_label.GENERIC_SELECTED ? js_lang_label.GENERIC_SELECTED : "Selected"),
                        'filterPlaceholder': (js_lang_label.GENERIC_GRID_SEARCH_HERE ? js_lang_label.GENERIC_GRID_SEARCH_HERE : "Search here"),
                        'beforeopen': function (event, ui) {
                            applyUIButtonCSS();
                        }
                    },
                    "beforeSubmit": function (div_id) {
                        if ($("#" + div_id).find('select').val() != null) {
                            return true;
                        } else {
                            jQuery.jgrid.info_dialog(js_lang_label.GENERIC_GRID_ERROR, js_lang_label.GENERIC_GRID_PLEASE_SELECT_ATLEAST_ONE_COLUMN, js_lang_label.GENERIC_GRID_OK);
                            return false;
                        }
                    },
                    "done": function (perm) {
                        if (perm) {
                            setColumnsChoosen(el_grid_settings.enc_location + '_sg_cs', subgrid_id);
                            reloadListGrid(subgrid_id);
                        }
                    }
                });
            },
            position: "last",
            id: sub_js_assign_btn_id + "_top",
            afterButtonId: (afterId) ? afterId + "_top" : ""
        });
    }
    var createExportButton = function (afterId, label_arr) {
        var exp_icon, exp_text = '', exp_title;
        exp_icon = (el_theme_settings.grid_sub_icons_export || (label_arr['icon_only'] == "Yes")) ? true : false;
        if (!exp_icon) {
            exp_text = (label_arr['text']) ? label_arr['text'] : js_lang_label.GENERIC_GRID_EXPORT;
        }
        exp_title = (label_arr['title']) ? label_arr['title'] : js_lang_label.GENERIC_GRID_EXPORT;

        sub_js_assign_btn_id = sub_grid_button_ids.export;
        var export_html = "<div class='data-export-main'>";
        export_html += "<div class='export-row'>\n\
                            <div class='export-left'><strong>" + js_lang_label.GENERIC_GRID_EXPORT_MODE + ":</strong></div>\n\
                            <div class='export-right'>\n\
                                <input type='radio' class='regular-radio export-mode-selected' name='export_mode' value='selected' id='export_mode_selected' checked=true><label for='export_mode_selected'>&nbsp;</label>\n\
                                <label for='export_mode_selected' class='export-label-modes'>" + js_lang_label.GENERIC_GRID_SELECTED + "</label>&nbsp;&nbsp;\n\
                                <input type='radio' class='regular-radio export-mode-all' name='export_mode' value='all' id='export_mode_all'><label for='export_mode_all'>&nbsp;</label>\n\
                                <label for='export_mode_all' class='export-label-modes'>" + js_lang_label.GENERIC_GRID_ALL + "</label>\n\
                            </div>\n\
                        </div>";
        export_html += "<div class='export-row' id='export_columns_div'>\n\
                            <div class='export-left'><strong>" + js_lang_label.GENERIC_GRID_SELECT_COLUMNS + ":</strong></div>\n\
                            <div class='export-right'>" + getColumnsDropDown(subgrid_id, "export_columns_list", "export_columns_list", '', 'multiple') + " </div>\n\
                        </div>";
        export_html += "<div class='export-row'>\n\
                            <div class='export-left'><strong>" + js_lang_label.GENERIC_GRID_EXPORT_TO + ":</strong></div>\n\
                            <div class='export-right'>\n\
                                <input type='radio' class='regular-radio export-type-csv' name='export_type' value='csv' id='export_type_csv' checked=true><label for='export_type_csv'>&nbsp;</label>\n\
                                <label for='export_type_csv' class='export-label-modes' title='" + js_lang_label.GENERIC_GRID_EXPORT_TO_CSV + "'><i class='fa fa-file-excel-o fa-2x icon-csv'></i></label>\n\
                                <input type='radio' class='regular-radio export-type-pdf' name='export_type' value='pdf' id='export_type_pdf'><label for='export_type_pdf'>&nbsp;</label>\n\
                                <label for='export_type_pdf' class='export-label-modes' title='" + js_lang_label.GENERIC_GRID_EXPORT_TO_PDF + "'><i class='fa fa-file-pdf-o fa-2x icon-pdf'></i></label>\n\
                            </div>\n\
                            <div class='clear'></div>\n\
                        </div>";
        export_html += "<div class='export-row' id='orientation_columns_div' style='display:none'>\n\
                            <div class='export-left'><strong>" + (js_lang_label.GENERIC_GRID_PDF_ORIENTATION ? js_lang_label.GENERIC_GRID_PDF_ORIENTATION : "PDF Orientation") + ":</strong></div>\n\
                            <div class='export-right'>\n\
                                <input type='radio' class='regular-radio export-type-pdf' name='orientation_type' value='portrait' id='orientation_type_portrait' checked=true><label for='orientation_type_portrait'>&nbsp;</label>\n\
                                <label for='orientation_type_portrait' class='export-label-modes'>" + (js_lang_label.GENERIC_GRID_PORTRAIT ? js_lang_label.GENERIC_GRID_PORTRAIT : "Portrait") + "</label>\n\
                                <input type='radio' class='regular-radio orientation-type-landscape' name='orientation_type' value='landscape' id='orientation_type_landscape'><label for='orientation_type_landscape'>&nbsp;</label>\n\
                                <label for='orientation_type_landscape' class='export-label-modes'>" + (js_lang_label.GENERIC_GRID_LANDSCAPE ? js_lang_label.GENERIC_GRID_LANDSCAPE : "Landscape") + "</label>\n\
                            </div>\n\
                            <div class='clear'></div>\n\
                        </div>";
        export_html += "<div class='clear'></div>";
        export_html += "</div>";

        var selected_btn_title = (js_lang_label.GENERIC_GRID_EXPORT_SELECTED_RECORDS) ? js_lang_label.GENERIC_GRID_EXPORT_SELECTED_RECORDS : "Export selected records";
        jQuery("#" + subgrid_id).navButtonAdd('#' + sub_pager_id, {
            caption: exp_text,
            title: exp_title,
            buttonicon: 'ui-icon-export',
            buttonicon_p: (exp_icon) ? 'uigrid-export-btn export-icon-only' : 'uigrid-export-btn',
            onClickButton: function () {
                var export_elem = '<div />';
                var export_btns = [
                    {
                        text: js_lang_label.GENERIC_GRID_EXPORT_ALL + ' ' + sub_total_rows + ' ' + js_lang_label.GENERIC_GRID_RECORDS,
                        id: "btn_all",
                        "class": 'fm-button ui-state-default ui-corner-all',
                        click: function () {
                            exportData(subgrid_id, 'all', el_subgrid_settings.export_url);
                        }
                    },
                    {
                        text: js_lang_label.GENERIC_GRID_EXPORT_CURRENT_PAGE_RECORDS,
                        id: "btn_page",
                        "class": 'fm-button ui-state-default ui-corner-all',
                        click: function () {
                            exportData(subgrid_id, 'thispage', el_subgrid_settings.export_url);
                        }
                    }
                ];
                if ($('#' + subgrid_id).jqGrid("getGridParam", "listview") != 'grid' && $.isArray($('#' + subgrid_id).getGridParam('selarrrow')) && $('#' + subgrid_id).getGridParam('selarrrow').length > 0) {
                    export_btns.push({
                        text: selected_btn_title,
                        id: "btn_selected",
                        "class": 'fm-button ui-state-default ui-corner-all',
                        click: function () {
                            exportData(subgrid_id, 'selected', el_subgrid_settings.export_url);
                        }
                    });
                }
                $(export_elem).attr("id", "exportmod_" + subgrid_id).html(export_html).dialog({
                    title: exp_title,
                    //height: 195,
                    width: 600,
                    resize: true,
                    modal: true,
                    buttons: export_btns,
                    "close": function () {
                        $(this).dialog("destroy").remove();
                    }
                });
                $("#export_columns_list").multiselect({
                    'minWidth': 300,
                    'checkAllText': (js_lang_label.GENERIC_CHECK_ALL ? js_lang_label.GENERIC_CHECK_ALL : "Check all"),
                    'uncheckAllText': (js_lang_label.GENERIC_UNCHECK_ALL ? js_lang_label.GENERIC_UNCHECK_ALL : "Uncheck all"),
                    'noneSelectedText': (js_lang_label.GENERIC_GRID_SELECT_COLUMNS ? js_lang_label.GENERIC_GRID_SELECT_COLUMNS : "Select Columns"),
                    'selectedText': "# " + (js_lang_label.GENERIC_SELECTED ? js_lang_label.GENERIC_SELECTED : "Selected")
                }).multiselectfilter({placeholder: js_lang_label.GENERIC_GRID_SEARCH_HERE});
            },
            position: "last",
            id: sub_js_assign_btn_id,
            afterButtonId: afterId
        })
        jQuery("#" + subgrid_id).navButtonAdd('#' + subgrid_id + '_toppager_left', {
            caption: exp_text,
            title: exp_title,
            buttonicon: 'ui-icon-export',
            buttonicon_p: (exp_icon) ? 'uigrid-export-btn export-icon-only' : 'uigrid-export-btn',
            onClickButton: function () {
                var export_elem = '<div />';
                var export_btns = [
                    {
                        text: js_lang_label.GENERIC_GRID_EXPORT_ALL + ' ' + sub_total_rows + ' ' + js_lang_label.GENERIC_GRID_RECORDS,
                        id: "btn_all",
                        "class": 'fm-button ui-state-default ui-corner-all',
                        click: function () {
                            exportData(subgrid_id, 'All', el_subgrid_settings.export_url);
                        }
                    },
                    {
                        text: js_lang_label.GENERIC_GRID_EXPORT_CURRENT_PAGE_RECORDS,
                        id: "btn_page",
                        "class": 'fm-button ui-state-default ui-corner-all',
                        click: function () {
                            exportData(subgrid_id, 'thispage', el_subgrid_settings.export_url);
                        }
                    }
                ];
                if ($('#' + subgrid_id).jqGrid("getGridParam", "listview") != 'grid' && $.isArray($('#' + subgrid_id).getGridParam('selarrrow')) && $('#' + subgrid_id).getGridParam('selarrrow').length > 0) {
                    export_btns.push({
                        text: selected_btn_title,
                        id: "btn_selected",
                        "class": 'fm-button ui-state-default ui-corner-all',
                        click: function () {
                            exportData(subgrid_id, 'selected', el_subgrid_settings.export_url);
                        }
                    });
                }
                $(export_elem).attr("id", "exportmod_" + subgrid_id).html(export_html).dialog({
                    title: exp_title,
                    //height: 195,
                    width: 600,
                    resize: true,
                    modal: true,
                    buttons: export_btns,
                    "close": function () {
                        $(this).dialog("destroy").remove();
                    }
                });
                $("#export_columns_list").multiselect({
                    'minWidth': 300,
                    'checkAllText': (js_lang_label.GENERIC_CHECK_ALL ? js_lang_label.GENERIC_CHECK_ALL : "Check all"),
                    'uncheckAllText': (js_lang_label.GENERIC_UNCHECK_ALL ? js_lang_label.GENERIC_UNCHECK_ALL : "Uncheck all"),
                    'noneSelectedText': (js_lang_label.GENERIC_GRID_SELECT_COLUMNS ? js_lang_label.GENERIC_GRID_SELECT_COLUMNS : "Select Columns"),
                    'selectedText': "# " + (js_lang_label.GENERIC_SELECTED ? js_lang_label.GENERIC_SELECTED : "Selected"),
                }).multiselectfilter({placeholder: js_lang_label.GENERIC_GRID_SEARCH_HERE});
            },
            position: "last",
            id: sub_js_assign_btn_id + "_top",
            afterButtonId: (afterId) ? afterId + "_top" : ""
        });
    }
    var createPrintButton = function (afterId, label_arr) {
        var prnt_icon, prnt_text = '', prnt_title;
        prnt_icon = (el_theme_settings.grid_sub_icons_print || (label_arr['icon_only'] == "Yes")) ? true : false;
        if (!prnt_icon) {
            prnt_text = (label_arr['text']) ? label_arr['text'] : js_lang_label.GENERIC_GRID_PRINT;
        }
        prnt_title = (label_arr['title']) ? label_arr['title'] : js_lang_label.GENERIC_GRID_PRINT;

        sub_js_assign_btn_id = sub_grid_button_ids.print;
        var print_html = "<div class='data-print-main'>";
        print_html += "<div class='print-row'>\n\
                            <strong>" + js_lang_label.GENERIC_PLEASE_CHOOSE_THE_BELOW_RECORDS_SELECTION_FOR_PRINTING + "</strong>\n\
                        </div>";
        print_html += "</div>";

        jQuery("#" + subgrid_id).navButtonAdd('#' + sub_pager_id, {
            caption: prnt_text,
            title: prnt_title,
            buttonicon: 'ui-icon-print',
            buttonicon_p: (prnt_icon) ? 'uigrid-print-btn print-icon-only' : 'uigrid-print-btn',
            onClickButton: function () {
                var print_elem = '<div />';
                var print_btns = [
                    {
                        text: js_lang_label.GENERIC_GRID_PRINT_ALL + ' ' + sub_total_rows + ' ' + js_lang_label.GENERIC_GRID_RECORDS,
                        id: "btn_all",
                        "class": 'fm-button ui-state-default ui-corner-all',
                        click: function () {
                            printData(subgrid_id, 'all', el_sub_grid_settings.print_url, {});
                        }
                    },
                    {
                        text: js_lang_label.GENERIC_GRID_PRINT_CURRENT_PAGE_RECORDS,
                        id: "btn_page",
                        "class": 'fm-button ui-state-default ui-corner-all',
                        click: function () {
                            printData(subgrid_id, 'thispage', el_sub_grid_settings.print_url, {});
                        }
                    }
                ];
                if ($('#' + subgrid_id).jqGrid("getGridParam", "listview") != 'grid' && $.isArray($('#' + subgrid_id).getGridParam('selarrrow')) && $('#' + subgrid_id).getGridParam('selarrrow').length > 0) {
                    print_btns.push({
                        text: js_lang_label.GENERIC_GRID_PRINT_SELECTED_RECORDS,
                        id: "btn_selected",
                        "class": 'fm-button ui-state-default ui-corner-all',
                        click: function () {
                            printData(subgrid_id, 'selected', el_sub_grid_settings.print_url, {});
                        }
                    });
                }
                $(print_elem).attr("id", "printmod_" + subgrid_id).html(print_html).dialog({
                    title: prnt_title,
                    //height: 195,
                    width: 600,
                    resize: true,
                    modal: true,
                    buttons: print_btns,
                    "close": function () {
                        $(this).dialog("destroy").remove();
                    }
                });
            },
            position: "last",
            id: sub_js_assign_btn_id,
            afterButtonId: afterId
        })
        jQuery("#" + subgrid_id).navButtonAdd('#' + subgrid_id + '_toppager_left', {
            caption: prnt_text,
            title: prnt_title,
            buttonicon: 'ui-icon-print',
            buttonicon_p: (prnt_icon) ? 'uigrid-print-btn print-icon-only' : 'uigrid-print-btn',
            onClickButton: function () {
                var print_elem = '<div />';
                var print_btns = [
                    {
                        text: js_lang_label.GENERIC_GRID_PRINT_ALL + ' ' + sub_total_rows + ' ' + js_lang_label.GENERIC_GRID_RECORDS,
                        id: "btn_all",
                        "class": 'fm-button ui-state-default ui-corner-all',
                        click: function () {
                            printData(subgrid_id, 'all', el_sub_grid_settings.print_url, {});
                        }
                    },
                    {
                        text: js_lang_label.GENERIC_GRID_PRINT_CURRENT_PAGE_RECORDS,
                        id: "btn_page",
                        "class": 'fm-button ui-state-default ui-corner-all',
                        click: function () {
                            printData(subgrid_id, 'thispage', el_sub_grid_settings.print_url, {});
                        }
                    }
                ];
                if ($('#' + subgrid_id).jqGrid("getGridParam", "listview") != 'grid' && $.isArray($('#' + subgrid_id).getGridParam('selarrrow')) && $('#' + subgrid_id).getGridParam('selarrrow').length > 0) {
                    print_btns.push({
                        text: js_lang_label.GENERIC_GRID_PRINT_SELECTED_RECORDS,
                        id: "btn_selected",
                        "class": 'fm-button ui-state-default ui-corner-all',
                        click: function () {
                            printData(subgrid_id, 'selected', el_sub_grid_settings.print_url, {});
                        }
                    });
                }
                $(print_elem).attr("id", "printmod_" + subgrid_id).html(print_html).dialog({
                    title: prnt_title,
                    //height: 195,
                    width: 600,
                    resize: true,
                    modal: true,
                    buttons: print_btns,
                    "close": function () {
                        $(this).dialog("destroy").remove();
                    }
                });
            },
            position: "last",
            id: sub_js_assign_btn_id + "_top",
            afterButtonId: (afterId) ? afterId + "_top" : ""
        });
    }
    var createInlineAddSaveDelBtn = function () {
        jQuery("#" + subgrid_id).navButtonAdd('#' + sub_pager_id, {
            caption: "",
            title: js_lang_label.GENERIC_GRID_ADD_NEW,
            buttonicon: 'icon16 iconic-icon-plus-alt',
            buttonicon_p: "uigrid-inlineadd-btn",
            buttonname: "addnew",
            onClickButton: function (e) {
                addNewInlineRecord(subgrid_id);
            },
            id: 'inlineadd_' + subgrid_id,
            position: "last"
        });

        jQuery("#" + subgrid_id).navButtonAdd("#" + subgrid_id + "_toppager_left", {
            caption: "",
            title: js_lang_label.GENERIC_GRID_ADD_NEW,
            buttonicon: 'icon16 iconic-icon-plus-alt',
            buttonicon_p: "uigrid-inlineadd-btn",
            buttonname: "addnew",
            onClickButton: function (e) {
                addNewInlineRecord(subgrid_id);
            },
            id: 'inlineadd_' + subgrid_id + '_top',
            position: "last"
        });
        jQuery("#" + subgrid_id).navButtonAdd('#' + sub_pager_id, {
            caption: "",
            title: js_lang_label.GENERIC_GRID_SAVE_ALL,
            buttonicon: 'icon16 iconic-icon-check-alt',
            buttonicon_p: "uigrid-inlinesave-btn",
            buttonname: "saveall",
            onClickButton: function (e) {
                saveAllInlineRecords(subgrid_id);
            },
            id: 'saveall_' + subgrid_id,
            position: "last"
        });

        jQuery("#" + subgrid_id).navButtonAdd("#" + subgrid_id + "_toppager_left", {
            caption: "",
            title: js_lang_label.GENERIC_GRID_SAVE_ALL,
            buttonicon: 'icon16 iconic-icon-check-alt',
            buttonicon_p: "uigrid-inlinesave-btn",
            buttonname: "saveall",
            onClickButton: function (e) {
                saveAllInlineRecords(subgrid_id);
            },
            id: 'saveall_' + subgrid_id + '_top',
            position: "last"
        });
        jQuery("#" + subgrid_id).navButtonAdd('#' + sub_pager_id, {
            caption: "",
            title: js_lang_label.GENERIC_GRID_CANCEL_ALL,
            buttonicon: 'icon16 icomoon-icon-cancel-2',
            buttonicon_p: "uigrid-cancelall-btn",
            buttonname: "cancelall",
            onClickButton: function (e) {
                cancelAllInlineRecords(subgrid_id);
            },
            id: 'cancelall_' + subgrid_id,
            position: "last"
        });

        jQuery("#" + subgrid_id).navButtonAdd("#" + subgrid_id + "_toppager_left", {
            caption: "",
            title: js_lang_label.GENERIC_GRID_CANCEL_ALL,
            buttonicon: 'icon16 icomoon-icon-cancel-2',
            buttonicon_p: "uigrid-cancelall-btn",
            buttonname: "cancelall",
            onClickButton: function (e) {
                cancelAllInlineRecords(subgrid_id);
            },
            id: 'cancelall_' + subgrid_id + '_top',
            position: "last"
        });
    }

    if (sub_grid_button_arr.length > 0) {
        var sub_ord_dsr_arr = [], sub_btn_dsr_arr = {}, btn_name;
        for (var b = 0; b < sub_grid_button_arr.length; b++) {
            btn_name = sub_grid_button_arr[b]['name'];
            if ($.inArray(btn_name, ["del", "search", "refresh"]) != -1) {
                sub_ord_dsr_arr.push(btn_name);
                sub_btn_dsr_arr[btn_name] = sub_grid_button_arr[b];
            }
            if (sub_ord_dsr_arr.length >= 3) {
                break;
            }
        }
        createDelSearchRefreshBtn(sub_ord_dsr_arr, sub_btn_dsr_arr);
        for (var b = 0; b < sub_grid_button_arr.length; b++) {
            if (sub_grid_button_arr[b]['type'] == "custom") {
                sub_js_assign_btn_id = createCustomGridButton(sub_grid_button_arr[b], subgrid_id, sub_pager_id, sub_js_assign_btn_id);
            } else {
                btn_name = sub_grid_button_arr[b]['name'];
                if (btn_name && btn_name.substring(0, 6) == "status") {
                    if (sub_status_permit) {
                        createStatusButton(sub_js_assign_btn_id);
                    }
                } else {
                    switch (btn_name) {
                        case "del":
                            if (sub_del_permit) {
                                sub_js_assign_btn_id = sub_grid_button_ids.del;
                            }
                            break;
                        case "search":
                            if (sub_adv_search_permit) {
                                sub_js_assign_btn_id = sub_grid_button_ids.search;
                            }
                            break;
                        case "refresh":
                            if (sub_refresh_permit) {
                                sub_js_assign_btn_id = sub_grid_button_ids.refresh;
                            }
                            break;
                        case "add":
                            if (sub_add_permit) {
                                createAddButton(sub_js_assign_btn_id, sub_grid_button_arr[b]);
                            }
                            break;
                        case "columns":
                            if (sub_columns_permit) {
                                createColumnsButton(sub_js_assign_btn_id, sub_grid_button_arr[b]);
                            }
                            break;
                        case "export":
                            if (sub_export_permit) {
                                createExportButton(sub_js_assign_btn_id, sub_grid_button_arr[b]);
                            }
                            break;
                        case "print":
                            if (sub_print_permit) {
                                createPrintButton(sub_js_assign_btn_id, sub_grid_button_arr[b]);
                            }
                    }
                }
            }
        }
    } else {
        createDelSearchRefreshBtn([], {});
        if (sub_add_permit) {
            createAddButton(sub_js_assign_btn_id, {});
        }
        if (sub_del_permit) {
            sub_js_assign_btn_id = sub_grid_button_ids.del;
        }
        if (sub_status_permit) {
            createStatusButton(sub_js_assign_btn_id);
        }
        if (sub_columns_permit) {
            createColumnsButton(sub_js_assign_btn_id, {});
        }
        if (sub_export_permit) {
            createExportButton(sub_js_assign_btn_id, {});
        }
        if (sub_print_permit) {
            createPrintButton(sub_js_assign_btn_id, {});
        }
    }
    if (sub_inline_add_permit) {
        createInlineAddSaveDelBtn();
    }

    $(document).off("click", ".expand-nesview");
    $(document).on("click", ".expand-nesview", function () {
        var curr_alias = $(this).attr("aria-alias");
        var curr_row_id = $(this).attr("aria-rowid");
        if (el_subgrid_settings.grid_nesgrid_alias && curr_alias == el_subgrid_settings.grid_nesgrid_alias) {
            el_subgrid_settings.grid_nesgrid_alias = curr_alias;
            $("#" + subgrid_id).jqGrid('toggleSubGridRow', curr_row_id);
        } else {
            el_subgrid_settings.grid_nesgrid_alias = curr_alias;
            $("#" + subgrid_id).jqGrid('toggleSubGridRow', curr_row_id);
            setTimeout(function () {
                $("#" + subgrid_id).jqGrid('expandSubGridRow', curr_row_id);
            }, 100)
        }
    });
}
//related to subgrid detail view
function initSubGridDetailView() {
    if (!view_js_col_model_json || !el_subview_settings.permit_edit_btn) {
        return;
    }
    var view_settings_obj = {};
    for (i in view_js_col_model_json) {
        var v_editable = view_js_col_model_json[i]['editable'];
        var v_type = view_js_col_model_json[i]['type'];
        var v_edittype = view_js_col_model_json[i]['edittype'];
        var v_name = view_js_col_model_json[i]['htmlID'];
        view_settings_obj[v_name] = view_js_col_model_json[i];
        if (v_type == "rating_master") {
            displayAddListRatingProperties(v_name, view_settings_obj[v_name]);
        }
        if (!v_editable) {
            continue;
        }

        switch (v_type) {
            case 'checkboxes' :
                makeAddListEditableDropdown(v_name, view_settings_obj);
                break;
            case 'code_markup_field' :
                makeAddListEditableTextArea(v_name, view_settings_obj);
                break;
            case 'date' :
                makeAddListEditableTextBox(v_name, view_settings_obj);
                break;
            case 'date_and_time' :
                makeAddListEditableTextBox(v_name, view_settings_obj);
                break;
            case 'dropdown' :
                makeAddListEditableDropdown(v_name, view_settings_obj);
                break;
            case 'file' :
                makeAddListEditableTextBox(v_name, view_settings_obj);
                break;
            case 'google_maps' :
                makeAddListEditableTextArea(v_name, view_settings_obj);
                break;
            case 'multi_select_dropdown' :
                makeAddListEditableDropdown(v_name, view_settings_obj);
                break;
            case 'password' :
                makeAddListEditablePassword(v_name, view_settings_obj);
                break;
            case 'phone_number' :
                makeAddListEditableTextBox(v_name, view_settings_obj);
                break;
            case 'radio_buttons' :
                makeAddListEditableDropdown(v_name, view_settings_obj);
                break;
            case 'textarea' :
                makeAddListEditableTextArea(v_name, view_settings_obj);
                break;
            case 'time' :
                makeAddListEditableTextBox(v_name, view_settings_obj);
                break;
            case 'color_picker':
                makeAddListEditableTextBox(v_name, view_settings_obj);
                break;
            case 'autocomplete' :
                makeAddListEditableTextBox(v_name, view_settings_obj);
                break;
            case 'rating_master' :
                makeAddListEditableTextBox(v_name, view_settings_obj);
                break;
            case 'wysiwyg' :
                makeAddListEditableTextArea(v_name, view_settings_obj);
                break;
            default :
                //for textbox
                makeAddListEditableTextBox(v_name, view_settings_obj);
                break;
        }
    }
}
//related to x-editable forms
function saveViewInlineEdit(name, value, id, extra) {
    var obj_prop = view_js_col_model_json[name];
    var data = {
        "name": obj_prop.name,
        "value": value,
        "id": id
    };
    if (typeof extra == 'object') {
        data = $.extend({}, data, extra);
    }
    var options = {
        "url": el_subview_settings.edit_page_url,
        "data": data,
        success: function (obj, config) {
            var res_arr = parseJSONString(obj);
            if (res_arr && res_arr.success == 'false') {
                var $jq_errmsg = js_lang_label.GENERIC_GRID_ERROR_IN_UPDATION;
                if (res_arr.message != "") {
                    $jq_errmsg = res_arr.message;
                }
                $('#' + name).editable('option', 'value', $('#' + name).attr("aria-prev-value"));
                $('#' + name).editable('show');
                gridReportMessage(false, $jq_errmsg);
            } else if (res_arr.success == '3' || res_arr.success == '4') {
                if (isRedirectEqualHash(res_arr.red_hash)) {
                    window.location.hash = res_arr.red_hash;
                    window.location.reload();
                } else {
                    window.location.hash = res_arr.red_hash;
                }
            } else if (res_arr.success == '5') {
                window.location.href = res_arr.red_hash;
            } else {
                switch (obj_prop.type) {
                    case "multi_select_dropdown":
                    case "checkboxes":
                        if ($('#' + name).attr("data-value") != '') {
                            $('#' + name).html($('#' + name).attr("data-value"));
                        }
                        break;
                    case "autocomplete":
                        var par_obj = obj_prop.editoptions.token.params;
                        if (view_token_pre_populates[name].length > 0) {
                            $('#' + name).html($('#' + name).attr("data-value"));
                        }
                        par_obj.prePopulate = view_token_pre_populates[name];
                    case 'password':
                        $('#' + name).html("*****");
                        break;
                    case "file":
                        view_js_col_model_json[name]['dbval'] = value;
                        displayAdminListFlyImage(name, obj_prop.editoptions.uploadify, res_arr);
                        break;
                    case "rating_master":
                        $("#rshow_" + obj_prop.htmlID).raty('set', {score: value});
                        $("#rscore_" + obj_prop.htmlID).text(value);
                        $("#" + obj_prop.htmlID).html('<span class="icon16 icomoon-icon-pencil-5"><b>Edit</b></span>');
                        break;
                    default :
                        $('#' + name).attr("aria-prev-value", value);
                        break;
                }
            }
        }
    };
    $('#' + name).editable("submit", options);
}
//related to nested grid listing
function initNesGridListing() {
    var nesgrid_id = el_nesgrid_settings.table_id, nes_pager_id = el_nesgrid_settings.pager_id;
    var nes_js_prev_key = '', nes_js_assign_btn_id = '', nes_js_next_btn_id = '', nes_jsave = '', nes_saved_obj = '';
    var nes_js_col_name_arr = [], nes_js_sort_count = 0, nes_jrow = 0, nes_jcol = 0;
    var nes_js_before_req = true, nes_show_paging_var = true;

    var nes_row_numbers = (el_nesgrid_settings.inline_add == "Yes") ? true : false;
    var nes_pager_active = (el_nesgrid_settings.hide_paging_btn == "Yes") ? false : true;

    var nes_add_permit = (el_nesgrid_settings.hide_add_btn == '1' && el_nesgrid_settings.permit_add_btn == "1" && el_nesgrid_settings.advanced_grid == '1') ? true : false;
    var nes_del_permit = (el_nesgrid_settings.hide_del_btn == '1' && el_nesgrid_settings.permit_del_btn == '1' && el_nesgrid_settings.advanced_grid == '1') ? true : false;
    var nes_status_permit = (el_nesgrid_settings.hide_status_btn == '1' && el_nesgrid_settings.permit_edit_btn == '1' && el_nesgrid_settings.advanced_grid == '1') ? true : false;

    var nes_adv_search_permit = (el_nesgrid_settings.hide_advance_search == 'Yes' || el_nesgrid_settings.advanced_grid != '1') ? false : true;
    var nes_refresh_permit = (el_nesgrid_settings.hide_refresh_btn == 'Yes' || el_nesgrid_settings.advanced_grid != '1') ? false : true;

    var nes_inline_add_permit = (el_nesgrid_settings.inline_add == "Yes" && el_nesgrid_settings.permit_add_btn == "1" && el_nesgrid_settings.advanced_grid == '1') ? true : false;
    var nes_search_tool_permit = (el_nesgrid_settings.hide_search_tool == "Yes") ? false : true;

    var nes_global_filter = (el_nesgrid_settings.global_filter == "Yes") ? true : false;
    var nes_top_filter_arr = $.isPlainObject(el_nesgrid_settings.top_filter) ? el_nesgrid_settings.top_filter : [];
    var nes_action_callbacks = $.isPlainObject(el_nesgrid_settings['callbacks']) ? el_nesgrid_settings['callbacks'] : {};
    var nes_list_message_arr = $.isPlainObject(el_nesgrid_settings['message_arr']) ? el_nesgrid_settings['message_arr'] : {};
    
    var nes_viewtemplate = '#layout_view_' + nesgrid_id;
    var nes_gridtemplate = '#layout_grid' + nesgrid_id;
    
    var nes_grid_button_arr = ($.isArray(el_nesgrid_settings.buttons_arr)) ? el_nesgrid_settings.buttons_arr : [];
    var nes_grid_button_ids = {
        "add": "add_" + nesgrid_id,
        "del": "del_" + nesgrid_id,
        "search": "search_" + nesgrid_id,
        "refresh": "refresh_" + nesgrid_id
    }

    if (el_general_settings.mobile_platform) {
        //el_subgrid_settings.auto_width = "Yes";
    }

    if (typeof executeBeforeGridInit == "function") {
        executeBeforeGridInit(el_nesgrid_settings['module_name'], "nes");
    }
    if (nes_action_callbacks['before_grid_init'] && $.isFunction(window[nes_action_callbacks['before_grid_init']])) {
        window[nes_action_callbacks['before_grid_init']](el_nesgrid_settings, nes_js_col_model_json, nes_js_col_name_json);
    }

    for (var i in nes_js_col_name_json) {
        nes_js_col_name_arr.push(nes_js_col_name_json[i]['label']);
    }

    if (!nes_add_permit && !nes_del_permit && !nes_status_permit && !nes_adv_search_permit &&  !nes_refresh_permit && !nes_inline_add_permit && 
            !nes_search_tool_permit && !nes_global_filter && !($.isArray(nes_top_filter_arr) && nes_top_filter_arr.length > 0) &&
            !($(nes_viewtemplate).length || $(nes_gridtemplate).length) && el_tpl_settings.grid_top_menu == 'N') {
        nes_show_paging_var = false;
    }
    var listview = findGridViewParam(window.location.hash, nesgrid_id, el_nesgrid_settings.listview, el_grid_settings.enc_location + '_ng_gv');
    setHideColumnSettings(nesgrid_id, nes_js_col_model_json, nes_top_filter_arr);
    getColumnsWidth(el_grid_settings.enc_location + '_ng_cw', nesgrid_id, nes_js_col_model_json);

    jQuery("#" + nesgrid_id).jqGrid({
        url: el_nesgrid_settings.listing_url,
        editurl: el_nesgrid_settings.edit_page_url,
        mtype: 'POST',
        datatype: "json",
        colNames: nes_js_col_name_arr,
        colModel: nes_js_col_model_json,
        page: 1,
        pgbuttons: nes_pager_active,
        pginput: nes_pager_active,
        pgnumbers: (el_theme_settings.grid_sub_pgnumbers) ? true : false, //custom
        pgnumlimit: (el_general_settings.mobile_platform) ? 2 : parseInt(el_theme_settings.grid_sub_pgnumlimit), //custom
        pagingpos: el_theme_settings.grid_sub_pagingpos, //custom
        rowNum: (el_nesgrid_settings.hide_paging_btn == "Yes") ? 1000000 : parseInt(el_tpl_settings.grid_rec_limit),
        rowList: (nes_pager_active) ? pager_row_list : [],
        sortname: el_nesgrid_settings.default_sort,
        sortorder: el_nesgrid_settings.sort_order,
        altRows: true,
        altclass: 'evenRow',
        multiselectWidth: 30,
        multiselect: (el_nesgrid_settings.hide_multi_select == "Yes") ? false : true,
        multiboxonly: true,
        hiderecords: el_nesgrid_settings.admin_rec_arr,
        viewrecords: true,
        norecmsg: js_lang_label.GENERIC_GRID_NO_RECORDS_FOUND,
        caption: false,
        hidegrid: false,
        listview: listview, //custom 
        viewtemplate: '#layout_view_' + nesgrid_id, //custom
        gridtemplate: '#layout_grid' + nesgrid_id, //custom
        viewCallback: function (id, type) {
            //custom
            reloadListGrid(nesgrid_id, null, 2, el_nesgrid_settings);
            setLocalStore(el_grid_settings.enc_location + '_ng_gv', type);
        },
        listtags: ['{', '}'], //custom
        inlineadd: (el_nesgrid_settings.inline_add == "Yes") ? true : false, //custom
        inlinerecpos: (el_nesgrid_settings.rec_position == "Bottom") ? true : false, //custom
        isSubMod: 2, //custom
        curModule: el_nesgrid_settings.add_page_url, //custom
        parModule: el_nesgrid_settings.par_module, //custom
        parData: el_nesgrid_settings.par_data, //custom
        parField: el_nesgrid_settings.par_field, //custom
        parType: el_nesgrid_settings.par_type, //custom
        extraHash: el_nesgrid_settings.extra_hstr, //custom
        ratingAllow: (el_nesgrid_settings.rating_allow == "Yes") ? true : false, //custom
        pager: (el_tpl_settings.grid_bot_menu == 'Y') ? nes_pager_id : "",
        toppager: (el_tpl_settings.grid_top_menu == 'Y') ? true : false,
        toppaging: (el_tpl_settings.grid_top_menu == 'Y') ? true : false, //custom
        showpaging: nes_show_paging_var, //custom
        cellurl: el_nesgrid_settings.edit_page_url,
        cellsubmit: 'remote',
        sortable: {
            update: function (permutation) {
                setColumnsPosition(el_grid_settings.enc_location + '_ng_cp', permutation, nesgrid_id, nes_js_col_model_json);
            }
        },
        searchGrid: {
            multipleSearch: true,
            searchToolbar: (nes_search_tool_permit) ? true : false,
            globalFilter: (nes_global_filter) ? true : false,
            topFilters: nes_top_filter_arr,
            topDataInit: triggerTopFilterEvent
        },
        afterSearchToggle: function (id) {
            //custom
            if ($("#hbox_" + id + "_jqgrid").find(".ui-search-toolbar").is(":hidden")) {
                $("#listsearch_" + id + "_top").removeClass("active");
            }
            resizeGridWidth();
        },
        height: '100%',
        autowidth: (el_nesgrid_settings.auto_width == "No") ? false : true,
        _autowidth: (el_nesgrid_settings.auto_width == "No") ? false : true,
        shrinkToFit: (el_nesgrid_settings.auto_width == "No") ? false : true,
        fixed: true,
        //rownumbers: nes_row_numbers,
        multiSort: (el_tpl_settings.grid_multiple_sorting) ? true : false,
        grouping: (el_nesgrid_settings.grouping == 'Yes') ? true : false,
        groupingView: {
            groupField: ($.isArray(el_nesgrid_settings.group_attr['field'])) ? el_nesgrid_settings.group_attr['field'] : [],
            groupOrder: ($.isArray(el_nesgrid_settings.group_attr['order'])) ? el_nesgrid_settings.group_attr['order'] : [],
            groupText: ($.isArray(el_nesgrid_settings.group_attr['text'])) ? el_nesgrid_settings.group_attr['text'] : [],
            groupColumnShow: ($.isArray(el_nesgrid_settings.group_attr['column'])) ? el_nesgrid_settings.group_attr['column'] : [],
            groupSummary: ($.isArray(el_nesgrid_settings.group_attr['summary'])) ? el_nesgrid_settings.group_attr['summary'] : [],
            showSummaryOnHide: ($.isArray(el_nesgrid_settings.group_attr['summary'])) ? el_nesgrid_settings.group_attr['summary'] : [],
            groupCollapse: false,
            groupDataSorted: true
        },
        footerrow: (el_nesgrid_settings.footer_row == 'Yes') ? true : false,
        userDataOnFooter: true,
        beforeRequest: function () {
            if (nes_js_before_req) {
                nes_js_before_req = false;
                getColumnsPosition(el_grid_settings.enc_location + '_ng_cp', nesgrid_id);
            }
        },
        beforeProcessing: function (data) {
            delete el_general_settings.grid_nes_link_model;
            if (data && data.links) {
                el_general_settings.grid_nes_link_model = data.links;
            }
        },
        loadError: function (xhr, status, error) {
            hideGirdLoadingOverlay(el_tpl_settings.main_grid_id);
        },
        loadComplete: function (data) {
            setTimeout(function () {
                hideGirdLoadingOverlay(el_tpl_settings.main_grid_id);
                Project.hide_adaxloading_div();
            }, 2);
            $("#" + el_tpl_settings.main_grid_id + "_messages_html").remove();
            $("#selAllRows").val('false');
            // No Records Message
            noRecordsMessage(nesgrid_id, data);
            // Add new record
            //addNewInlineRecord(subgrid_id);
            // Row colors
            applyGridRowColors(nesgrid_id, data);
            // Rating Events
            //applyRatingEvents(nesgrid_id);
            // Resizing Sub Grid
            resizeSubGridWidth(nesgrid_id);
            // adjust main grid width
            adjustMainGridColumnWidth();
            // fancybox image events
            initializeFancyBoxEvents();
            //set columns widths
            checkColumnsWidth(el_grid_settings.enc_location + '_ng_cw', nesgrid_id);
            if (typeof executeAfterGridLoad == "function") {
                executeAfterGridLoad(el_nesgrid_settings['module_name'], "nested");
            }
            if (nes_action_callbacks['after_data_load'] && $.isFunction(window[nes_action_callbacks['after_data_load']])) {
                window[nes_action_callbacks['after_data_load']](data);
            }
        },
        gridComplete: function () {
            // Resizing Sub Grid
            resizeSubGridWidth(nesgrid_id);
            hideAdminDataCheckBox(nesgrid_id, el_nesgrid_settings.admin_rec_arr);
            getAdminImageTooltip(nesgrid_id);
        },
        ondblClickRow: function (rowid, iRow, iCol, e) {
            var ac = $(e.srcElement).hasClass("add-cell") ? 1 : 0
            var ai = ($(e.srcElement).attr("aria-newrow") == "inline-add-row") ? 1 : 0;
            var bc = ($(e.srcElement).find(".inline-edit-row").length > 0) ? 1 : 0
            var cf = ($(e.srcElement).hasClass(".inline-edit-row")) ? 1 : 0
            var sf = ($(e.srcElement).closest("td[role='gridcell']").hasClass('edit-cell')) ? 1 : 0
            if (ac || ai || bc || cf || sf) {
                e.stopPropagation();
            } else {
                $("#" + el_tpl_settings.main_grid_id).jqGrid('setGridParam', {
                    cellEdit: false
                });
                var $this = $(this);
                $this.jqGrid('setGridParam', {
                    cellEdit: true
                });
                $this.jqGrid('editCell', iRow, iCol, true);
                $this.jqGrid('setGridParam', {
                    cellEdit: false
                });
                e.stopPropagation();
            }
        },
        beforeEditCell: function (rowid, cellName, cellValue, iRow, iCol) {
            restoreBeforeEditedCell(this, nes_jrow, nes_jcol, nes_jsave);
            if ($(".colpick").length) {
                $(".colpick").hide();
            }
        },
        afterEditCell: function (rowid, cellName, cellValue, iRow, iCol) {
            var cellDOM = this.rows[iRow].cells[iCol], oldKeydown;
            var $cellInput = $("#" + iRow + "_" + cellName, cellDOM);
            var events = $._data($cellInput.eq(0), "events"), cselector = $cellInput["selector"];
            var $this = $(this), date_flag = false, colorpicker_flag = false, phone_flag = false;
            if ($cellInput.hasClass("dateOnly")) {
                inlineDateTimePicker(iRow, cellName, 'date');
                var date_flag = true;
            } else if ($cellInput.hasClass("timeOnly")) {
                inlineDateTimePicker(iRow, cellName, 'time');
                var date_flag = true;
            } else if ($cellInput.hasClass("dateTime")) {
                inlineDateTimePicker(iRow, cellName, 'dateTime');
                var date_flag = true;
            } else if ($cellInput.hasClass("colorPicker")) {
                inlineColorPicker(iRow, cellName, 'colorPicker');
                var colorpicker_flag = true;
            } else if ($cellInput.hasClass("phoneNumber")) {
                var phone_flag = true;
            } else if ($cellInput.hasClass("inline-textarea-edit")) {
                var txt = $($cellInput).val();
                txt = txt.replace(/<br>/g, "");
                txt = txt.replace(/<BR>/g, "");
                $($cellInput).val(txt);
            }
            nes_jrow = iRow;
            nes_jcol = iCol;
            nes_jsave = ($.isArray(this.p.savedRow)) ? this.p.savedRow[this.p.savedRow.length - 1].v : "";
            if ($(cellDOM).find("select[role='select']").length) {
                $cellDrop = $(cellDOM).find("select[role='select']");
                $($cellDrop).attr("aria-update-id", rowid);
                nes_saved_obj = this.p.savedRow;
                $($cellDrop).on('change', function (e) {
                    $this.jqGrid('setGridParam', {
                        cellEdit: true
                    });
                    $this.jqGrid('setGridParam', {
                        savedRow: nes_saved_obj
                    });
                    $this.jqGrid('saveCell', iRow, iCol);
                    $this.jqGrid('restoreCell', iRow, iCol, true);
                    $(cellDOM).removeClass("ui-state-highlight");
                    nes_jrow = 0, nes_jcol = 0, nes_jsave = '';
                    nes_saved_obj = $this.jqGrid('getGridParam', 'savedRow');
                });
                var autoChznInterval = setInterval(function () {
                    if ($(cselector).hasClass("chosen-select") && $(cselector + "_chosen").length) {
                        $(cselector + "_chosen").on('keydown', function (e) {
                            if (e.keyCode == 27) {
                                if ($(cselector + "_chosen").find(".chosen-drop").css("left") == "-9999px") {
                                    $this.jqGrid('setGridParam', {
                                        cellEdit: true
                                    });
                                    $this.jqGrid('setGridParam', {
                                        savedRow: nes_saved_obj
                                    });
                                    $this.jqGrid('restoreCell', iRow, iCol, true);
                                    $(cellDOM).removeClass("ui-state-highlight");
                                    nes_jrow = 0, nes_jcol = 0, nes_jsave = '';
                                }
                            }
                        });
                        clearInterval(autoChznInterval);
                    }
                }, 250);
            } else {
                applyInputTextCase($(cellDOM));
                nes_saved_obj = this.p.savedRow;
                setTimeout(function () {
                    if (events && events.keydown && events.keydown.length) {
                        $this.jqGrid('setGridParam', {
                            savedRow: nes_saved_obj
                        });
                        oldKeydown = events.keydown[0].handler;
                        $cellInput.unbind('keydown', oldKeydown);
                        $cellInput.bind('keydown', function (e) {
                            $this.jqGrid('setGridParam', {
                                cellEdit: true
                            });
                            $this.jqGrid('setGridParam', {
                                savedRow: nes_saved_obj
                            });
                            if ($cellInput.hasClass("inline-textarea-edit")) {
                                if (e.keyCode === 13) {
                                    if (e.shiftKey) {
                                        e.stopPropagation();
                                    } else {
                                        $this.jqGrid('saveCell', iRow, iCol);
                                        $this.jqGrid('restoreCell', iRow, iCol, true);
                                        $(cellDOM).removeClass("ui-state-highlight");
                                        nes_jrow = 0, nes_jcol = 0, nes_jsave = '';
                                    }
                                } else {
                                    oldKeydown.call(this, e);
                                }
                            } else if ($cellInput.hasClass("colorPicker")) {
                                if (e.keyCode === 9 || e.keyCode === 13 || e.keyCode === 27) {
                                    if ($(".colpick").length) {
                                        //$(".colpick").remove();
                                        $(".colpick").hide();

                                    }
                                }
                                oldKeydown.call(this, e);
                            } else {
                                oldKeydown.call(this, e);
                                $this.jqGrid('setGridParam', {
                                    cellEdit: false
                                });
                            }
                        }).bind('focusout', function (e) {
                            $this.jqGrid('setGridParam', {
                                savedRow: nes_saved_obj
                            });
                            if (date_flag) {
                                if ($(".ui-datepicker").is(":hidden")) {
                                    $this.jqGrid('setGridParam', {
                                        cellEdit: true
                                    });
                                    //$this.jqGrid('saveCell', iRow, iCol);
                                    $this.jqGrid('restoreCell', iRow, iCol, true);
                                    $(cellDOM).removeClass("ui-state-highlight");
                                    nes_jrow = 0, nes_jcol = 0, nes_jsave = '';
                                }
                            } else if (colorpicker_flag) {
                                if ($(".colpick" + "#" + $cellInput.attr("colorpickerid")).is(":hidden")) {
                                    $this.jqGrid('setGridParam', {
                                        cellEdit: true
                                    });
                                    //$this.jqGrid('saveCell', iRow, iCol);
                                    $this.jqGrid('restoreCell', iRow, iCol, true);
                                    $(cellDOM).removeClass("ui-state-highlight");
                                    nes_jrow = 0, nes_jcol = 0, nes_jsave = '';
                                }
                            } else {
                                var save_flag = true;
                                if (save_flag) {
                                    $this.jqGrid('setGridParam', {
                                        cellEdit: true
                                    });
                                    if (phone_flag == true) {
                                        $this.jqGrid('saveCell', iRow, iCol);
                                    }
                                    $this.jqGrid('restoreCell', iRow, iCol, true);
                                    $(cellDOM).removeClass("ui-state-highlight");
                                    nes_jrow = 0, nes_jcol = 0, nes_jsave = '';
                                }
                            }
                        });
                    }
                }, 100);
            }
        },
        beforeSubmitCell: function (rowid, cellName, cellValue, iRow, iCol) {
            if (nes_action_callbacks['before_rec_edit'] && $.isFunction(window[nes_action_callbacks['before_rec_edit']])) {
                return window[nes_action_callbacks['before_rec_edit']](rowid, cellName, cellValue, iRow, iCol);
            }
        },
        afterSubmitCell: function (response, rowid, cellname, value, iRow, iCol) {
            var $c_flag, $c_msg;
            if (response.responseText != 1) {
                var res = parseJSONString(response.responseText);
                var columnNames = $("#" + nesgrid_id).jqGrid('getGridParam', 'colNames');
                $c_flag = true;
                $c_msg = res.message;
                if (res.success == 'false') {
                    $c_flag = false;
                    $c_msg += " : " + columnNames[iCol];
                } else if (res.success == '2') {
                    reloadListGrid(nesgrid_id);
                } else if (res.success == '3' || res.success == '4') {
                    if (isRedirectEqualHash(res.red_hash)) {
                        window.location.hash = res.red_hash;
                        window.location.reload();
                    } else {
                        window.location.hash = res.red_hash;
                    }
                } else if (res.success == '5') {
                    window.location.href = res.red_hash;
                }
                gridReportMessage($c_flag, $c_msg);
                if (nes_action_callbacks['after_rec_edit'] && $.isFunction(window[nes_action_callbacks['after_rec_edit']])) {
                    return window[nes_action_callbacks['after_rec_edit']](response, rowid, cellname, value, iRow, iCol);
                }
            } else {
                $c_flag = true;
            }
            return [$c_flag, res.message];
        },
        afterSaveCell: function (rowid, cellname, value, iRow, iCol) {

        },
        onSortCol: function (index, iCol, sortorder) {
            $("#" + nesgrid_id).setGridParam({defaultsort: "No"});
            activateGridSortColumns(nesgrid_id);
        },
        resizeStop: function (newwidth, index) {
            setColumnsWidth(el_grid_settings.enc_location + '_ng_cw', nesgrid_id);
        },
        beforeSelectRow: function (rowid, e) {
            multiSelectHandler(rowid, e);
        }
    });

    if (nes_search_tool_permit) {
        jQuery("#" + nesgrid_id).jqGrid('filterToolbar', {
            stringResult: true,
            searchOnEnter: false,
            searchOperators: (el_theme_settings.grid_sub_searchopt) ? true : false
        });
    }

    var createDelSearchRefreshBtn = function (order_arr, label_arr) {
        var del_icon, del_text = '', del_title;
        del_icon = (el_theme_settings.grid_sub_icons_del || (label_arr['del'] && label_arr['del']['icon_only'] == "Yes")) ? true : false;
        if (!del_icon) {
            del_text = (label_arr['del'] && label_arr['del']['text']) ? label_arr['del']['text'] : js_lang_label.GENERIC_GRID_DELETE;
        }
        del_title = (label_arr['del'] && label_arr['del']['title']) ? label_arr['del']['title'] : js_lang_label.GENERIC_GRID_DELETE_SELECTED_ROW;

        var search_icon, search_text = '', search_title;
        search_icon = (el_theme_settings.grid_sub_icons_search || (label_arr['search'] && label_arr['search']['icon_only'] == "Yes")) ? true : false;
        if (!search_icon) {
            search_text = (label_arr['search'] && label_arr['search']['text']) ? label_arr['search']['text'] : js_lang_label.GENERIC_GRID_SEARCH;
        }
        search_title = (label_arr['search'] && label_arr['search']['title']) ? label_arr['search']['title'] : js_lang_label.GENERIC_GRID_ADVANCE_SEARCH;

        var refresh_icon, refresh_text = '', refresh_title;
        refresh_icon = (el_theme_settings.grid_sub_icons_refresh || (label_arr['refresh'] && label_arr['refresh']['icon_only'] == "Yes")) ? true : false;
        if (!refresh_icon) {
            refresh_text = (label_arr['refresh'] && label_arr['refresh']['text']) ? label_arr['refresh']['text'] : js_lang_label.GENERIC_GRID_SHOW_ALL;
        }
        refresh_title = (label_arr['refresh'] && label_arr['refresh']['title']) ? label_arr['refresh']['title'] : js_lang_label.GENERIC_GRID_SHOW_ALL_LISTING_RECORDS;

        jQuery("#" + nesgrid_id).jqGrid('navGrid', '#' + nes_pager_id, {
            cloneToTop: true,
            add: false,
            addicon: "ui-icon-plus",
            edit: false,
            editicon: "ui-icon-pencil",
            del: nes_del_permit,
            delicon: "ui-icon-trash",
            delicon_p: (del_icon) ? 'uigrid-del-btn del-icon-only' : "uigrid-del-btn",
            deltext: del_text,
            deltitle: del_title,
            search: nes_adv_search_permit,
            searchicon: "ui-icon-search",
            searchicon_p: (search_icon) ? 'uigrid-search-btn search-icon-only' : "uigrid-search-btn",
            searchtext: search_text,
            searchtitle: search_title,
            refresh: nes_refresh_permit,
            refreshicon: "ui-icon-refresh",
            refreshicon_p: (refresh_icon) ? 'uigrid-refresh-btn refresh-icon-only' : "uigrid-refresh-btn",
            refreshtext: refresh_text,
            refreshtitle: refresh_title,
            alerttext: js_lang_label.GENERIC_GRID_PLEASE_SELECT_ANY_RECORD,
            beforeRefresh: function () {
                $("#" + nesgrid_id).setGridParam({sortname: el_nesgrid_settings.default_sort, sortorder: el_nesgrid_settings.sort_order, defaultsort: "Yes"});
                activateGridSortColumns(nesgrid_id);
            },
            afterRefresh: function () {
                $("#hbox_" + nesgrid_id + "_jqgrid").find(".search-chosen-select").find("option").removeAttr("selected");
                $("#hbox_" + nesgrid_id + "_jqgrid").find(".search-chosen-select").trigger("chosen:updated");
                if ($("#hbox_" + nesgrid_id + "_jqgrid").find(".search-token-autocomplete").length) {
                    $("#hbox_" + nesgrid_id + "_jqgrid").find(".search-token-autocomplete").each(function () {
                        $(this).tokenInput("clear");
                    });
                }
                $("#hbox_" + nesgrid_id + "_jqgrid").find(".top-filter-chosen").find("option").removeAttr("selected");
                $("#hbox_" + nesgrid_id + "_jqgrid").find(".top-filter-chosen").trigger("chosen:updated");
                if ($("#hbox_" + nesgrid_id + "_jqgrid").find(".top-filter-autocomplete").length) {
                    $("#hbox_" + nesgrid_id + "_jqgrid").find(".top-filter-autocomplete").each(function () {
                        $(this).tokenInput("clear");
                    });
                }
            }
        }, {
            // edit options
        }, {
            // add options
        }, {
            // delete options
            id: nes_grid_button_ids.del,
            width: 320,
            caption: js_lang_label.GENERIC_GRID_DELETE,
            msg: js_lang_label.GENERIC_GRID_ARE_YOU_SURE_WANT_TO_DELETE_SELECTED_RECORDS,
            bSubmit: js_lang_label.GENERIC_GRID_DELETE,
            bCancel: js_lang_label.GENERIC_GRID_CANCEL,
            modal: true,
            closeOnEscape: true,
            serializeDelData: function (postdata) {
                var selAllRows = jQuery('#selAllRows').val();
                // append postdata with any information 
                return {
                    "id": postdata.id,
                    "oper": postdata.oper,
                    "AllRowSelected": selAllRows,
                    "filters": $('#' + nesgrid_id).getGridParam('postData').filters
                }
            },
            beforeSubmit: function (postdata) {
                if (nes_action_callbacks['before_rec_delete'] && $.isFunction(window[nes_action_callbacks['before_rec_delete']])) {
                    return window[nes_action_callbacks['before_rec_delete']](postdata);
                } else {
                    return [true, ""];
                }
            },
            afterSubmit: function (response, postdata) {
                var resdata = parseJSONString(response.responseText), $del_flag, $jq_errmsg;
                if (resdata.success == 'true') {
                    $jq_errmsg = js_lang_label.GENERIC_GRID_RECORDS_DELETED_SUCCESSFULLY;
                    if (resdata.message != "") {
                        $jq_errmsg = resdata.message;
                    }
                    $del_flag = true;
                } else {
                    $jq_errmsg = js_lang_label.GENERIC_GRID_ERROR_IN_DELETION;
                    if (resdata.message != "") {
                        $jq_errmsg = resdata.message;
                    }
                    $del_flag = false;
                }
                gridReportMessage($del_flag, $jq_errmsg);
                if (nes_action_callbacks['after_rec_delete'] && $.isFunction(window[nes_action_callbacks['after_rec_delete']])) {
                    window[nes_action_callbacks['after_rec_delete']](response, postdata);
                }
                return [true, $jq_errmsg];
            }
        }, {
            // search options
            id: nes_grid_button_ids.search,
            multipleSearch: true,
            multipleGroup: (el_nesgrid_settings.group_search == "1") ? true : false,
            showQuery: false,
            Find: js_lang_label.GENERIC_GRID_FIND,
            Reset: js_lang_label.GENERIC_GRID_RESET,
            width: 700,
            height: 275,
            closeOnEscape: true,
            modal: true,
            closeAfterSearch: true
        }, {
            // view options
        }, {
            // refresh options
            id: nes_grid_button_ids.refresh
        }, {
            // order options array
            order: order_arr
        });
    }

    var createAddButton = function (afterId, label_arr) {
        var add_icon, add_text = '', add_title;
        add_icon = (el_theme_settings.grid_sub_icons_add || (label_arr['icon_only'] == "Yes")) ? true : false;
        if (!add_icon) {
            add_text = (label_arr['text']) ? label_arr['text'] : js_lang_label.GENERIC_GRID_ADD_NEW;
        }
        add_title = (label_arr['title']) ? label_arr['title'] : js_lang_label.GENERIC_GRID_ADD_NEW;

        nes_js_assign_btn_id = nes_grid_button_ids.add;
        jQuery("#" + nesgrid_id).navButtonAdd('#' + nes_pager_id, {
            caption: add_text,
            title: add_title,
            buttonicon: "ui-icon-plus",
            buttonicon_p: (add_icon) ? 'uigrid-add-btn add-icon-only' : 'uigrid-add-btn',
            onClickButton: function () {
                adminAddNewRecord(el_nesgrid_settings.add_page_url, el_nesgrid_settings.extra_hstr, el_nesgrid_settings.popup_add_form, nesgrid_id, el_nesgrid_settings.popup_add_size);
            },
            id: nes_js_assign_btn_id,
            afterButtonId: afterId,
            position: "first"
        });
        jQuery("#" + nesgrid_id).navButtonAdd("#" + nesgrid_id + "_toppager_left", {
            caption: add_text,
            title: add_title,
            buttonicon: "ui-icon-plus",
            buttonicon_p: (add_icon) ? 'uigrid-add-btn add-icon-only' : 'uigrid-add-btn',
            onClickButton: function () {
                adminAddNewRecord(el_nesgrid_settings.add_page_url, el_nesgrid_settings.extra_hstr, el_nesgrid_settings.popup_add_form, nesgrid_id, el_nesgrid_settings.popup_add_size);
            },
            id: nes_js_assign_btn_id + "_top",
            afterButtonId: (afterId) ? afterId + "_top" : "",
            position: "first"
        });
    }

    var createStatusButton = function (afterId) {
        var nes_jstatus_btn, nes_jstatus_lbl, nes_status_icon;
        for (var i in el_nesgrid_settings.status_arr) {
            if (!el_nesgrid_settings.status_arr[i]) {
                continue;
            }
            nes_jstatus_btn = el_grid_settings.status_arr[i];
            nes_jstatus_lbl = eval(el_grid_settings.status_lang_arr[i]);
            nes_status_icon = (nes_jstatus_btn || "").replace(/(\s)/g, "").toLowerCase();

            nes_js_assign_btn_id = "status_" + i + "_" + nesgrid_id;
            nes_js_next_btn_id = (i == 0) ? afterId : "status_" + nes_js_prev_key + "_" + nesgrid_id;

            jQuery("#" + nesgrid_id).navButtonAdd('#' + nes_pager_id, {
                caption: nes_jstatus_lbl,
                title: nes_jstatus_lbl,
                lang: nes_jstatus_btn,
                buttonicon: "ui-icon-newwin",
                buttonicon_p: "uigrid-status-common uigrid-status-btn-" + nes_status_icon,
                onClickButton: function (e, p) {
                    var fids = filterGridSelectedIDs(this);
                    adminStatusChange(nesgrid_id, p.lang, fids, el_nesgrid_settings.edit_page_url, p.title, nes_action_callbacks, nes_list_message_arr);
                },
                id: nes_js_assign_btn_id,
                afterButtonId: nes_js_next_btn_id,
                position: "first"
            });
            jQuery("#" + nesgrid_id).navButtonAdd("#" + nesgrid_id + "_toppager_left", {
                caption: "" + nes_jstatus_lbl,
                title: nes_jstatus_lbl,
                lang: nes_jstatus_btn,
                buttonicon: "ui-icon-newwin",
                buttonicon_p: "uigrid-status-common uigrid-status-btn-" + nes_status_icon,
                onClickButton: function (e, p) {
                    var fids = filterGridSelectedIDs(this);
                    adminStatusChange(nesgrid_id, p.lang, fids, el_nesgrid_settings.edit_page_url, p.title, nes_action_callbacks, nes_list_message_arr);
                },
                id: nes_js_assign_btn_id + "_top",
                afterButtonId: (nes_js_next_btn_id) ? nes_js_next_btn_id + "_top" : "",
                position: "first"
            });
            nes_js_prev_key = i;
        }
    }

    var createInlineAddSaveDelBtn = function () {
        jQuery("#" + nesgrid_id).navButtonAdd('#' + nes_pager_id, {
            caption: "",
            title: js_lang_label.GENERIC_GRID_ADD_NEW,
            buttonicon: 'icon16 iconic-icon-plus-alt',
            buttonicon_p: "uigrid-inlineadd-btn",
            buttonname: "addnew",
            onClickButton: function (e) {
                addNewInlineRecord(nesgrid_id);
            },
            id: 'inlineadd_' + nesgrid_id,
            position: "last"
        });

        jQuery("#" + nesgrid_id).navButtonAdd("#" + nesgrid_id + "_toppager_left", {
            caption: "",
            title: js_lang_label.GENERIC_GRID_ADD_NEW,
            buttonicon: 'icon16 iconic-icon-plus-alt',
            buttonicon_p: "uigrid-inlineadd-btn",
            buttonname: "addnew",
            onClickButton: function (e) {
                addNewInlineRecord(nesgrid_id);
            },
            id: 'inlineadd_' + nesgrid_id + '_top',
            position: "last"
        });
        jQuery("#" + nesgrid_id).navButtonAdd('#' + nes_pager_id, {
            caption: "",
            title: js_lang_label.GENERIC_GRID_SAVE_ALL,
            buttonicon: 'icon16 iconic-icon-check-alt',
            buttonicon_p: "uigrid-inlinesave-btn",
            buttonname: "saveall",
            onClickButton: function (e) {
                saveAllInlineRecords(nesgrid_id);
            },
            id: 'saveall_' + nesgrid_id,
            position: "last"
        });

        jQuery("#" + nesgrid_id).navButtonAdd("#" + nesgrid_id + "_toppager_left", {
            caption: "",
            title: js_lang_label.GENERIC_GRID_SAVE_ALL,
            buttonicon: 'icon16 iconic-icon-check-alt',
            buttonicon_p: "uigrid-inlinesave-btn",
            buttonname: "saveall",
            onClickButton: function (e) {
                saveAllInlineRecords(nesgrid_id);
            },
            id: 'saveall_' + nesgrid_id + '_top',
            position: "last"
        });
        jQuery("#" + nesgrid_id).navButtonAdd('#' + nes_pager_id, {
            caption: "",
            title: js_lang_label.GENERIC_GRID_CANCEL_ALL,
            buttonicon: 'icon16 icomoon-icon-cancel-2',
            buttonicon_p: "uigrid-cancelall-btn",
            buttonname: "cancelall",
            onClickButton: function (e) {
                cancelAllInlineRecords(nesgrid_id);
            },
            id: 'cancelall_' + nesgrid_id,
            position: "last"
        });

        jQuery("#" + nesgrid_id).navButtonAdd("#" + nesgrid_id + "_toppager_left", {
            caption: "",
            title: js_lang_label.GENERIC_GRID_CANCEL_ALL,
            buttonicon: 'icon16 icomoon-icon-cancel-2',
            buttonicon_p: "uigrid-cancelall-btn",
            buttonname: "cancelall",
            onClickButton: function (e) {
                cancelAllInlineRecords(nesgrid_id);
            },
            id: 'cancelall_' + nesgrid_id + '_top',
            position: "last"
        });
    }

    if (nes_grid_button_arr.length > 0) {
        var nes_ord_dsr_arr = [], nes_btn_dsr_arr = {}, btn_name;
        for (var b = 0; b < nes_grid_button_arr.length; b++) {
            btn_name = nes_grid_button_arr[b]['name'];
            if ($.inArray(btn_name, ["del", "search", "refresh"]) != -1) {
                nes_ord_dsr_arr.push(btn_name);
                nes_btn_dsr_arr[btn_name] = nes_grid_button_arr[b];
            }
            if (nes_ord_dsr_arr.length >= 3) {
                break;
            }
        }
        createDelSearchRefreshBtn(nes_ord_dsr_arr, nes_btn_dsr_arr);
        for (var b = 0; b < nes_grid_button_arr.length; b++) {
            if (nes_grid_button_arr[b]['type'] == "custom") {
                nes_js_assign_btn_id = createCustomGridButton(nes_grid_button_arr[b], nesgrid_id, nes_pager_id, nes_js_assign_btn_id);
            } else {
                btn_name = nes_grid_button_arr[b]['name'];
                if (btn_name && btn_name.substring(0, 6) == "status") {
                    if (nes_status_permit) {
                        createStatusButton(nes_js_assign_btn_id);
                    }
                } else {
                    switch (btn_name) {
                        case "del":
                            if (nes_del_permit) {
                                nes_js_assign_btn_id = nes_grid_button_ids.del;
                            }
                            break;
                        case "search":
                            if (nes_adv_search_permit) {
                                nes_js_assign_btn_id = nes_grid_button_ids.search;
                            }
                            break;
                        case "refresh":
                            if (nes_refresh_permit) {
                                nes_js_assign_btn_id = nes_grid_button_ids.refresh;
                            }
                            break;
                        case "add":
                            if (nes_add_permit) {
                                createAddButton(nes_js_assign_btn_id);
                            }
                            break;
                    }
                }
            }
        }
    } else {
        createDelSearchRefreshBtn([], {});
        if (nes_add_permit) {
            createAddButton(nes_js_assign_btn_id);
        }
        if (nes_del_permit) {
            nes_js_assign_btn_id = nes_grid_button_ids.del;
        }
        if (nes_status_permit) {
            createStatusButton(nes_js_assign_btn_id);
        }
    }
    if (nes_inline_add_permit) {
        createInlineAddSaveDelBtn();
    }
}
//related to left search filters
function initLeftPanelSearch(grid_id) {
    if (!$("#left_search_panel").length) {
        return;
    }
    $("#input_left_search").bind("keypress", function (e) {
        if (e.which == 13) {
            filterCharacterSearchData(grid_id);
        }
    });
    $(document).off("click", ".left-data-row");
    $(document).on("click", ".left-data-row", function () {
        if ($(this).find(".data-left-anchor").hasClass("selected")) {
            $(this).find(".data-right-align").removeClass("active");
            $(this).find(".data-left-anchor").removeClass("selected");
        } else {
            $(this).find(".data-left-anchor").addClass("selected");
            $(this).find(".data-right-align").addClass("active");
        }
        filterLeftSearchPanelData(grid_id)
    });
    loadLeftSearchPanelData(grid_id);
}
function filterCharacterSearchData(grid_id) {
    var search_val = $("#input_left_search").val();
    var grid = $("#" + grid_id), filt;
    filt = {
        groupOp: "OR",
        rules: [],
        entrys: "",
        range: ""
    };
    if (search_val != "") {
        var gridModel = $("#" + grid_id).jqGrid('getGridParam', 'colModel');
        for (var i = 0; i < gridModel.length; i++) {
            if (gridModel[i].name == "cb" || gridModel[i].name == "subgrid" || gridModel[i].name == "prec") {
                continue;
            }
            var searchable = (typeof gridModel[i].search === 'undefined') ? true : gridModel[i].search;
            var hidden = (gridModel[i].hidden === true);
            var ignoreHiding = (gridModel[i].searchoptions && gridModel[i].searchoptions.searchhidden === true);
            if ((ignoreHiding && searchable) || (searchable && !hidden)) {
                filt.rules.push({
                    field: gridModel[i].name,
                    op: "bw",
                    data: search_val
                });
            }
        }
    }
    grid[0].p.search = true;
    $.extend(grid[0].p.postData, {
        filters: JSON.stringify(filt)
    });
    reloadListGrid(grid_id, [{
            page: 1,
            current: true
        }]);
    $("#tbl_left_search").find(".data-right-align").removeClass("active");
    $("#tbl_left_search").find(".data-left-anchor").removeClass("selected");
}
function filterLeftSearchPanelData(grid_id) {
    //Project.show_adaxloading_div();
//    if (!$(".left-data-row").length) {
//        return false;
//    }
    var _left_search_obj = {}, _left_search_txt = {};
    $(".left-data-row").each(function () {
        var left_anc = $(this).find(".data-left-anchor");
        if ($(left_anc).hasClass("selected")) {
            var search_type = $(left_anc).attr("aria-search-type");
            var search_key = $(left_anc).attr("aria-search-field");
            var search_val = '', search_max = '';
            if (search_type == "range") {
                var search_min = $(left_anc).attr("aria-search-min");
                var search_level = $(left_anc).attr("aria-search-level");
                if ($.inArray(search_level, ['below', 'above']) >= 0) {
                    search_max = search_level;
                    if (search_level == "below") {
                        search_min = $(left_anc).attr("aria-search-max");
                    }
                } else {
                    search_max = $(left_anc).attr("aria-search-max");
                }
                search_val = search_min + ' to ' + search_max;
            } else {
                search_val = $(left_anc).attr("aria-search-value");
            }
            if (!$.isArray(_left_search_obj[search_key])) {
                _left_search_obj[search_key] = [];
            }
            _left_search_obj[search_key].push(search_val);
        }
    });
    $('.lsac-input-left-filter').each(function () {
        var js_sc_type = $(this).attr("aria-field-type");
        var search_key = $(this).attr("aria-search-field");
        var search_val = $(this).val();
        if (search_val) {
            if (!$.isArray(_left_search_obj[search_key])) {
                _left_search_obj[search_key] = [];
            }
            if ($.inArray(js_sc_type, ["date", "date_and_time", "time"]) >= 0) {
                _left_search_obj[search_key].push(search_val);
            } else {
                var search_arr = search_val.split(",");
                $.merge(_left_search_obj[search_key], search_arr);
                if (!$.isArray(_left_search_txt[search_key])) {
                    _left_search_txt[search_key] = [];
                }
                if ($(this).data("tokenInputObject")) {
                    var tokens = $(this).data("tokenInputObject").getTokens();
                    _left_search_txt[search_key].push(tokens);
                } else {
                    _left_search_txt[search_key].push(search_val);
                }
            }
        }
    });
    $('.lsac-select-left-filter').each(function () {
        var js_sc_type = $(this).attr("aria-field-type");
        var search_key = $(this).attr("aria-search-field");
        var search_val = $(this).val();
        if (search_val) {
            if (!$.isArray(_left_search_obj[search_key])) {
                _left_search_obj[search_key] = [];
            }
            var search_arr = search_val;
            if (!$.isArray(search_val)) {
                search_arr = search_val.split(",");
            }
            $.merge(_left_search_obj[search_key], search_arr);
            if (!$.isArray(_left_search_txt[search_key])) {
                _left_search_txt[search_key] = [];
            }
            var keyvals = [], idtxt, valtxt;
            for (var i in search_arr) {
                try {
                    idtxt = search_arr[i];
                    valtxt = $(this).find("option[value='" + idtxt + "']").text();
                    keyvals.push({
                        "id": idtxt,
                        "val": valtxt
                    });
                } catch (err) {

                }
            }
            _left_search_txt[search_key].push(keyvals);
        }
    });
    $('.search-range-icon').each(function () {
        if ($(this).hasClass("active")) {
            var search_key = $(this).attr("aria-search-field");
            var search_val = $(this).val();
            var search_min = $("#lsrange_min_" + search_key).val();
            var search_max = $("#lsrange_max_" + search_key).val();
            if (search_min != "" || search_max != "") {
                if (!$.isArray(_left_search_obj[search_key])) {
                    _left_search_obj[search_key] = [];
                }
                if (search_min == "") {
                    search_val = search_max + " to above";
                } else if (search_max == "") {
                    search_val = search_min + " to below";
                } else {
                    search_val = search_min + " to " + search_max;
                }
                _left_search_obj[search_key].push(search_val);
            }
        }
    });
    for (var i in _left_search_obj) {
        if ($.isArray(_left_search_obj[i])) {
            _left_search_obj[i] = _left_search_obj[i].filter(function (itm, i, a) {
                return i == a.indexOf(itm);
            });
        }
    }
    var grid = $("#" + grid_id), filt;
    var post_data = $("#" + grid_id).jqGrid("getGridParam", "postData");
    var filters = (post_data && post_data.filters) ? parseJSONString(post_data.filters) : {};
    filt = {
        groupOp: "AND",
        rules: (filters && filters.rules) ? filters.rules : [],
        entrys: _left_search_obj,
        range: (filters && filters.range) ? filters.range : ""
    };
    grid[0].p.search = true;
    $.extend(grid[0].p.postData, {
        filters: JSON.stringify(filt)
    });
    reloadListGrid(grid_id, [
        {
            page: 1,
            current: true
        }
    ]);
    setLocalStore(el_grid_settings.enc_location + '_sv', JSON.stringify(_left_search_txt), true);
}
function loadLeftSearchPanelData(grid_id) {
    var post_data, save_data, save_json = {};
    var post_data = $("#" + grid_id).jqGrid("getGridParam", "postData");
    var save_data = getLocalStore(el_grid_settings.enc_location + '_sv');
    if (save_data) {
        save_json = parseJSONString(save_data);
    }
    if (post_data) {
        var filter_json = (post_data && post_data.filters) ? parseJSONString(post_data.filters) : {};
        if (filter_json && filter_json.entrys) {
            var entrys = filter_json.entrys, name, text_elem, range_elem, select_list;
            var d_val, anc_obj, range_arr, rmin_obj, rmax_obj;
            for (var i in entrys) {
                if (!$.isArray(entrys[i])) {
                    continue;
                }
//                if (!$.isArray(_left_search_obj[i])) {
//                    _left_search_obj[i] = [];
//                }
                select_list = [];
                text_elem = $("#lsac_" + i);
                range_elem = $("#search_range_slider_" + i);
                for (var j = 0; j < entrys[i].length; j++) {
                    d_val = entrys[i][j];
                    anc_obj = $(".data-left-anchor[aria-search-field='" + i + "'][aria-search-value='" + d_val + "']");
                    if ($(anc_obj).length) {
                        $(anc_obj).closest(".left-data-row").find(".data-left-anchor").addClass("selected");
                        $(anc_obj).closest(".left-data-row").find(".data-right-align").addClass("active");
                    } else {
                        if (text_elem.length) {
                            if (text_elem.attr("aria-search-mode") == "dropdown") {
                                select_list.push(d_val);
                            } else {
                                $(text_elem).val(d_val);
                            }
                        } else if (range_elem.length) {
                            if (d_val) {
                                range_arr = d_val.split(" to ");
                                rmin_obj = $(".data-left-anchor[aria-search-field='" + i + "'][aria-search-min='" + range_arr[0] + "']");
                                rmax_obj = $(".data-left-anchor[aria-search-field='" + i + "'][aria-search-max='" + range_arr[1] + "']");
                                if (rmin_obj.length && rmax_obj.length) {
                                    $(rmin_obj).closest(".left-data-row").find(".data-left-anchor").addClass("selected");
                                    $(rmin_obj).closest(".left-data-row").find(".data-right-align").addClass("active");
                                } else {
                                    $(range_elem).attr("aria-range-values", JSON.stringify(range_arr));
                                }
                            }
                        }
                    }
//                    _left_search_obj[i].push(d_val);
                }
                if (text_elem.attr("aria-search-mode") == "auto") {
                    if (i in save_json && save_json[i].length > 0 && save_json[i][0].length > 0) {
                        $(text_elem).attr("aria-token-json", JSON.stringify(save_json[i][0]));
                    }
                } else if (text_elem.attr("aria-search-mode") == "dropdown") {
                    $(text_elem).val(select_list).trigger("chosen:updated");
                }
            }
        }
    }
}
function initLeftPanelAutocomplete(grid_id) {
    if ($('.lsac-input-left-filter').length) {
        $('.lsac-input-left-filter').each(function () {
            var js_left_type = $(this).attr('aria-field-type');
            switch (js_left_type) {
                case 'date':
                    activateLSDateRangePicker($(this), grid_id);
                    break;
                case 'date_and_time':
                    activateLSDateTimePicker($(this), grid_id);
                    break;
                case 'time':
                    activateLSTimePicker($(this), grid_id);
                    break;
                default:
                    if ($(this).attr('aria-search-mode') == "text") {
                        $(this).bind("keypress", function (e) {
                            if (e.which == 13) {
                                filterLeftSearchPanelData(grid_id);
                            }
                        });
                    } else {
                        activateLSAutoComplete($(this), grid_id);
                    }
                    break;
            }
        });
    }
    if ($('.lsac-select-left-filter').length) {
        $('.lsac-select-left-filter').each(function () {
            $(this).bind("change", function (e) {
                filterLeftSearchPanelData(grid_id);
            });
        });
    }
    if ($('.search-range-slider').length) {
        $('.search-range-slider').each(function () {
            var range_key = $(this).attr("aria-range-key");
            var range_min = $(this).attr("aria-range-min");
            var range_max = $(this).attr("aria-range-max");
            var range_values = $(this).attr("aria-range-values");
            range_min = (range_min != "") ? parseInt(range_min) : 0;
            range_max = (range_max != "") ? parseInt(range_max) : 100;
            var slider_values = [range_min, range_max];
            if (range_values) {
                var parsed_values = parseJSONString(range_values);
                if ($.isArray(parsed_values)) {
                    var pmin = parseInt(parsed_values[0]);
                    var pmax = parseInt(parsed_values[1]);
                    slider_values = [pmin, pmax];
                    $("#lsrange_min_" + range_key).val(pmin);
                    $("#lsrange_max_" + range_key).val(pmax);
                }
            }
            $(this).slider({
                range: true,
                min: range_min,
                max: range_max,
                values: slider_values,
                slide: function (event, ui) {
                    var range_key = $(this).attr("aria-range-key");
                    $("#lsrange_min_" + range_key).val(ui.values[0]);
                    $("#lsrange_max_" + range_key).val(ui.values[1]);
                }
            });
        });
        $(document).on("click", ".search-range-icon", function () {
            if ($(this).hasClass("active")) {
                $(this).removeClass("active");
            } else {
                $(this).addClass("active");
            }
            filterLeftSearchPanelData(grid_id);
        });
    }
}
//related to left search filter events
function activateLSDateRangePicker(eleObj, grid_id) {
    var d_ranges, d_months, d_weeks;
    d_ranges = getRangePickerQuickList();
    d_months = getRangePickerMonthNames();
    d_weeks = getRangePickerWeekNames();
    $(eleObj).daterangepicker({
        ranges: d_ranges,
        opens: 'left',
        timePicker: false,
        timePickerIncrement: 1,
        timePicker12Hour: true,
        showDropdowns: true,
        locale: {
            format: $(eleObj).attr('aria-date-format'),
            separator: ' to ',
            applyLabel: js_lang_label.GENERIC_GRID_SUBMIT,
            fromLabel: js_lang_label.GENERIC_FROM,
            toLabel: js_lang_label.GENERIC_TO,
            customRangeLabel: js_lang_label.GENERIC_CUSTOM_RANGE,
            daysOfWeek: d_weeks,
            monthNames: d_months,
            firstDay: 1
        },
        dateLimit: false,
        autoUpdateInput: false,
    });
    $(eleObj).on('apply.daterangepicker', function (ev, picker) {
        $(this).val(picker.startDate.format(picker.locale.format) + picker.locale.separator + picker.endDate.format(picker.locale.format));
        $(this).trigger('change');
    });
    $(eleObj).on('cancel.daterangepicker', function (ev, picker) {
        $(this).val('').trigger('change');
    });
    activateLSSearchChangeEvent(eleObj, grid_id);
}
function activateLSDateTimePicker(eleObj, grid_id) {
    var d_ranges, d_months, d_weeks;
    d_ranges = getRangePickerQuickList();
    d_months = getRangePickerMonthNames();
    d_weeks = getRangePickerWeekNames();
    $(eleObj).daterangepicker({
        ranges: d_ranges,
        opens: 'left',
        timePicker: true,
        timePickerIncrement: 1,
        timePicker12Hour: ($(eleObj).attr('aria-enable-time') == 'false') ? false : true,
        showDropdowns: true,
        locale: {
            format: $(eleObj).attr('aria-date-format'),
            separator: ' to ',
            applyLabel: js_lang_label.GENERIC_GRID_SUBMIT,
            fromLabel: js_lang_label.GENERIC_FROM,
            toLabel: js_lang_label.GENERIC_TO,
            customRangeLabel: js_lang_label.GENERIC_CUSTOM_RANGE,
            daysOfWeek: d_weeks,
            monthNames: d_months,
            firstDay: 1
        },
        dateLimit: false,
        autoUpdateInput: false,
        linkedCalendars: false
    });
    $(eleObj).on('apply.daterangepicker', function (ev, picker) {
        $(this).val(picker.startDate.format(picker.locale.format) + picker.locale.separator + picker.endDate.format(picker.locale.format));
        $(this).trigger('change');
    });
    $(eleObj).on('cancel.daterangepicker', function (ev, picker) {
        $(this).val('').trigger('change');
    });
    activateLSSearchChangeEvent(eleObj, grid_id);
}
function activateLSTimePicker(eleObj, grid_id) {
    $(eleObj).timepicker({
        timeFormat: $(eleObj).attr('aria-time-format'),
        showSecond: ($(eleObj).attr('aria-enable-sec') == "false") ? false : true,
        ampm: ($(eleObj).attr('aria-enable-ampm') == "false") ? false : true,
        showOn: 'focus',
        onClose: function (dateText, inst) {
            $(eleObj).trigger('change');
        }
    });
    activateLSSearchChangeEvent(eleObj, grid_id);
}
function activateLSAutoComplete(eleObj, grid_id) {
    var $js_list_id = $(eleObj).attr('aria-search-field');
    var js_url_action = el_grid_settings.search_autocomp_url + '&alias_name=' + $js_list_id;
    var pre_populate = parseJSONString($(eleObj).attr('aria-token-json'));
    $(eleObj).tokenInput(js_url_action, {
        'minChars': 1,
        'hintText': js_lang_label.GENERIC_TYPE_IN_A_SEARCH_TERM,
        'noResultsText': js_lang_label.GENERIC_NO_RESULTS,
        'searchingText': js_lang_label.GENERIC_SEARCHING,
        'preventDuplicates': true,
        'propertyToSearch': 'val',
        'theme': 'facebook',
        'prePopulate': pre_populate,
        'resultsFormatter': function (item) {
            if (item.count && item.count > 0) {
                return "<li>" + item.val + " <b style='float:right;width:20px;text-align:right;'>" + item.count + "</b></li>";
            } else {
                return "<li>" + item.val + "</li>";
            }
        },
        'tokenFormatter': function (item) {
            return "<li>" + item.val + "</li>"
        },
        'onAdd': function (item) {
            filterLeftSearchPanelData(grid_id);
        },
        'onDelete': function (item) {
            filterLeftSearchPanelData(grid_id);
        }
    });
}
function activateLSSearchChangeEvent(eleObj, grid_id) {
    $(eleObj).change(function () {
        filterLeftSearchPanelData(grid_id);
    });
}
//related to inline add new records
function getAddNewRecordContent(grid_id) {
    var $addgrid = $("#" + grid_id);

    var add_col_model = $addgrid.jqGrid("getGridParam", "colModel");
    if (!add_col_model) {
        return;
    }
    var tot_row = 0;
    $($addgrid).find("tr[aria-rec-row]").each(function () {
        var new_id = $(this).attr("id");
        if (new_id && parseInt(new_id) < tot_row) {
            tot_row = parseInt(new_id);
        }
    });
    tot_row--;
    var add_row = '', pos = 0, event_arr = [], sico = false, ffoc = true, ffoc_name;
    var new_row = $("<tr />").attr("role", "row").attr("id", tot_row).attr("tabindex", "-1").attr("class", "add-row ui-widget-content jqgrow ui-row-ltr").attr("aria-rec-row", tot_row);
    for (var i in add_col_model) {
        var cel_mod = add_col_model[i];
        var headers = $("#" + grid_id)[0].grid.headers;
        var tdwidth = headers[pos].width;
        if (cel_mod.hidden) {
            continue;
        }
        if ((cel_mod.name == "cb" || cel_mod.name == "subgrid" || cel_mod.name == "prec") && !sico) {
            var save_anc = '<a href="javascript://" title="' + js_lang_label.GENERIC_CANCEL + '" aria-cancel-row="' + grid_id + '" aria-row-id="' + tot_row + '">';
            save_anc += '<span aria-hidden="true" class="icomoon-icon-cancel-2 icon16"></span></a>';
            add_row = $("<td />").attr("role", "gridcell").attr("style", "text-align:center;vertical-align:middle;padding-left:0px;").attr("aria-describedby", grid_id + "_" + cel_mod.name).html(save_anc);
            sico = true;
        } else if (cel_mod.name == "subgrid" || cel_mod.name == "prec") {
            var cancel_anc = '<a href="javascript://" title="' + js_lang_label.GENERIC_SAVE + '" aria-save-row="' + grid_id + '" aria-row-id="' + tot_row + '">';
            cancel_anc += '<span aria-hidden="true" class="iconic-icon-check-alt icon16"></span></a>';
            add_row = $("<td />").attr("role", "gridcell").attr("style", "text-align:center;vertical-align:middle").attr("aria-describedby", grid_id + "_" + cel_mod.name);//.html(cancel_anc)
        } else {
            if (!cel_mod.addable) {
                add_row = $("<td />").attr("class", "add-cell ui-state-highlight").bind("dblclick", function (e) {
                    e.stopPropagation();
                });
            } else {
                var cel_name = cel_mod.name;
                if (!cel_mod.edittype) {
                    cel_mod.edittype = "text";
                }
                var opt = $.extend({
                    "aria-newrow": "inline-add-row"
                }, cel_mod.editoptions || {}, {
                    id: tot_row + "_" + cel_name,
                    name: cel_name
                });
                var elc = $.jgrid.createEl.call($addgrid, cel_mod.edittype, opt, '', true, $.extend({}, $.jgrid.ajaxOptions, {}), false);
                var funtype = "";
                if ($(elc).hasClass("dateOnly")) {
                    funtype = "date";
                } else if ($(elc).hasClass("timeOnly")) {
                    funtype = "time";
                } else if ($(elc).hasClass("dateTime")) {
                    funtype = "dateTime";
                } else if ($(elc).hasClass("colorPicker")) {
                    funtype = "colorPicker";
                }
                event_arr.push({
                    "row": tot_row,
                    "cell": cel_name,
                    "type": funtype
                });
                if ($(elc).attr('role') == "select") {
                    $(elc).attr("aria-default-val", cel_mod.default_value);
                } else {
                    $(elc).val(cel_mod.default_value);
                }
                var prp = formatAddCol(grid_id, cel_mod, pos, tot_row, '', '', 0, true);
                add_row = $("<td " + prp + "/>").attr("class", "add-cell ui-state-highlight").attr("role", "gridcell").append(elc).bind("dblclick", function (e) {
                    e.stopPropagation();
                });
                if (ffoc) {
                    ffoc_name = cel_mod.name;
                    ffoc = false;
                }
                $(add_row).find("input[type='text'], input[type='password'], textarea").bind("keydown", function (e) {
                    if ((e.ctrlKey || e.metaKey) && e.keyCode == 83) {
                        saveInlineAddRecord(grid_id, tot_row);
                        e.stopPropagation();
                        e.preventDefault();
                    }
                });
            }
        }
        $(new_row).append(add_row);
        pos++;
    }
    var ret_row = {
        "data": new_row,
        "events": event_arr,
        "row_id": tot_row,
        "focus_name": ffoc_name
    };
    return ret_row;
}
function addNewInlineRecord(grid_id) {
    var $addgrid = $("#" + grid_id);
    var inline_add = $addgrid.jqGrid("getGridParam", "inlineadd");
    if (!inline_add) {
        return;
    }
    var record_pos = $addgrid.jqGrid("getGridParam", "recordpos");
    var new_row = getAddNewRecordContent(grid_id);
    if (new_row) {
        if (record_pos == "Bottom") {
            $("#" + grid_id).append(new_row.data);
        } else {
            if ($("#" + grid_id).find("tr[aria-rec-row]").length) {
                $("#" + grid_id).find("tr[aria-rec-row]:last").after(new_row.data);
            } else {
                $("#" + grid_id).find("tr.jqgfirstrow").after(new_row.data);
            }
        }
        $("#" + grid_id).find("tr[id='" + new_row.row_id + "']").find("[name='" + new_row.focus_name + "']").focus();
        setTimeout(function () {
            activateAddRowEvents(new_row.events);
            applyInputTextCase($("#" + grid_id).find("tr[id='" + new_row.row_id + "']"));
        }, 100);
    }
}
function saveInlineAddRecord(grid_id, row_id) {
    var $savegrid = $("#" + grid_id);
    var row_obj = $($savegrid).find("tr[aria-rec-row='" + row_id + "']");
    if (!$(row_obj).find("[aria-newrow='inline-add-row']").length) {
        jqueryUIalertBox(js_lang_label.GENERIC_GRID_NO_DATA_FIELDS_FOUND_FOR_SAVING, js_lang_label.GENERIC_GRID_NO_DATA_FIELDS)
        return;
    }
    var iparams_obj = {}, ivalid_obj = {}, vfalg = true;
    var cmv = $savegrid.jqGrid("getGridParam", "colModel");
    for (var i in cmv) {
        if (cmv[i]['addable'] && cmv[i]['editrules']) {
            ivalid_obj[cmv[i]['name']] = {};
            ivalid_obj[cmv[i]['name']]['editrules'] = cmv[i]['editrules'];
        }
    }
    $(row_obj).find("[aria-newrow='inline-add-row']").each(function () {
        var vname = $(this).attr('name');
        var vval = $(this).val();
        if (ivalid_obj[vname] && ivalid_obj[vname]['editrules']) {
            var vres = validateViewInlineEdit(vname, vval, ivalid_obj[vname]);
            if (vres === false) {
                $(this).removeClass("inline-input-error");
                $(this).parent().find("div.inline-msg-error").remove();
            } else {
                if (vfalg) {
                    $(this).focus();
                }
                vfalg = false;
                $(this).addClass("inline-input-error");
                if ($(this).parent().find("div.inline-msg-error").length) {
                    $(this).parent().find("div.inline-msg-error").html(vres);
                } else {
                    var error_div = $("<div />").addClass("inline-msg-error").html(vres);
                    $(this).parent().append(error_div);
                }
            }
        }
        iparams_obj[vname] = vval;
    });
    if (!vfalg) {
        return false;
    }
    Project.show_adaxloading_div();
    iparams_obj["oper"] = "add";
    if ($savegrid.jqGrid("getGridParam", "parModule")) {
        iparams_obj["parMod"] = $savegrid.jqGrid("getGridParam", "parModule");
        iparams_obj["parID"] = $savegrid.jqGrid("getGridParam", "parData");
        iparams_obj["parField"] = $savegrid.jqGrid("getGridParam", "parField");
        iparams_obj["parType"] = $savegrid.jqGrid("getGridParam", "parType");
    }
    $.ajax({
        url: $savegrid.jqGrid("getGridParam", "editurl"),
        type: 'POST',
        data: iparams_obj,
        success: function (data) {
            Project.hide_adaxloading_div();
            var resp_data = parseJSONString(data);
            if (resp_data.success == 'true') {
                $(row_obj).remove();
                reloadListGrid(grid_id, null, 1);
                var $jq_errmsg = js_lang_label.GENERIC_GRID_RECORD_ADDED_SUCCESSFULLY;
                if (resp_data.message != "") {
                    $jq_errmsg = resp_data.message;
                }
                gridReportMessage(true, $jq_errmsg);
            } else {
                var $jq_errmsg = js_lang_label.GENERIC_GRID_ERROR_IN_ADDING_RECORD;
                if (resp_data.message != "") {
                    $jq_errmsg = resp_data.message;
                }
                gridReportMessage(false, $jq_errmsg);
            }

        }
    });
}
function saveAllInlineRecords(grid_id) {
    var $savegrid = $("#" + grid_id);
    if (!$($savegrid).find("tr[aria-rec-row]").length) {
        jqueryUIalertBox(js_lang_label.GENERIC_GRID_NO_DATA_FIELDS_FOUND_FOR_SAVING, js_lang_label.GENERIC_GRID_NO_RECORDS)
        return;
    }
    var fflag = true, sflag = true;
    $($savegrid).find("tr[aria-rec-row]").each(function () {
        var row_obj = $(this);
        if (!$(row_obj).find("[aria-newrow='inline-add-row']").length) {
            fflag = false;
        }
        return false;
    });
    if (!fflag) {
        jqueryUIalertBox(js_lang_label.GENERIC_GRID_NO_DATA_FIELDS_FOUND_FOR_SAVING, js_lang_label.GENERIC_GRID_NO_DATA_FIELDS);
        return false;
    }
    var ivalid_obj = {};
    var cmv = $savegrid.jqGrid("getGridParam", "colModel");
    for (var i in cmv) {
        if (cmv[i]['addable'] && cmv[i]['editrules']) {
            ivalid_obj[cmv[i]['name']] = {};
            ivalid_obj[cmv[i]['name']]['editrules'] = cmv[i]['editrules'];
        }
    }
    Project.show_adaxloading_div();
    $($savegrid).find("tr[aria-rec-row]").each(function () {
        var iparams_obj = {}, vfalg = true;
        var row_obj = $(this);
        $(row_obj).find("[aria-newrow='inline-add-row']").each(function () {
            var vname = $(this).attr('name');
            var vval = $(this).val();
            if (ivalid_obj[vname] && ivalid_obj[vname]['editrules']) {
                var vres = validateViewInlineEdit(vname, vval, ivalid_obj[vname]);
                if (vres === false) {
                    $(this).removeClass("inline-input-error");
                    $(this).parent().find("div.inline-msg-error").remove();
                } else {
                    if (vfalg) {
                        $(this).focus();
                    }
                    vfalg = false;
                    $(this).addClass("inline-input-error");
                    if ($(this).parent().find("div.inline-msg-error").length) {
                        $(this).parent().find("div.inline-msg-error").html(vres);
                    } else {
                        var error_div = $("<div />").addClass("inline-msg-error").html(vres);
                        $(this).parent().append(error_div);
                    }
                }
            }
            iparams_obj[vname] = vval;
        });
        if (!vfalg) {
            sflag = false;
            return false;
        }
        iparams_obj["oper"] = "add";
        if ($savegrid.jqGrid("getGridParam", "parModule")) {
            iparams_obj["parMod"] = $savegrid.jqGrid("getGridParam", "parModule");
            iparams_obj["parID"] = $savegrid.jqGrid("getGridParam", "parData");
            iparams_obj["parField"] = $savegrid.jqGrid("getGridParam", "parField");
            iparams_obj["parType"] = $savegrid.jqGrid("getGridParam", "parType");
        }
        $.ajax({
            url: $savegrid.jqGrid("getGridParam", "editurl"),
            type: 'POST',
            async: false,
            data: iparams_obj,
            success: function (data) {
                var resp_data = parseJSONString(data);
                if (resp_data.success == 'true') {
                    $(row_obj).remove();
                    var $jq_errmsg = js_lang_label.GENERIC_GRID_RECORD_ADDED_SUCCESSFULLY;
                    if (resp_data.message != "") {
                        $jq_errmsg = resp_data.message;
                    }
                    gridReportMessage(true, $jq_errmsg);
                } else {
                    var $jq_errmsg = js_lang_label.GENERIC_GRID_ERROR_IN_ADDING_RECORD;
                    if (resp_data.message != "") {
                        $jq_errmsg = resp_data.message;
                    }
                    gridReportMessage(false, $jq_errmsg);
                    sflag = false;
                    return false;
                }
            }
        });
    });
    Project.hide_adaxloading_div();
    if (sflag) {
        reloadListGrid(grid_id, null, 1);
    }
}
function cancelInlineAddRecord(grid_id, row_id) {
    var label_elem = '<div />';
    var label_text = js_lang_label.GENERIC_GRID_ARE_YOU_SURE_WANT_TO_DELETE_ADDED_RECORD;
    var option_params = {
        title: js_lang_label.GENERIC_GRID_DELETE,
        dialogClass: "dialog-confirm-box grid-inline-rec-cnf",
        buttons: [
            {
                text: js_lang_label.GENERIC_DELETE,
                bt_type: 'delete',
                click: function () {
                    $("#" + grid_id).find("tr[aria-rec-row='" + row_id + "']").remove();
                    $(this).remove();
                }
            },
            {
                text: js_lang_label.GENERIC_CANCEL,
                bt_type: 'cancel',
                click: function () {
                    $(this).remove();
                }
            }]
    }
    jqueryUIdialogBox(label_elem, label_text, option_params);
}
function cancelAllInlineRecords(grid_id) {
    if (!$("#" + grid_id).find("tr[aria-rec-row]").length) {
        jqueryUIalertBox(js_lang_label.GENERIC_GRID_NO_NEW_RECORDS_FOUND_FOR_DELETE, js_lang_label.GENERIC_GRID_NO_RECORDS)
        return;
    }
    var label_elem = '<div />';
    var label_text = js_lang_label.GENERIC_GRID_ARE_YOU_SURE_WANT_TO_DELETE_ALL_NEW_RECORDS;
    var option_params = {
        title: js_lang_label.GENERIC_GRID_DELETE,
        dialogClass: "dialog-confirm-box grid-inline-all-cnf",
        buttons: [{
                text: js_lang_label.GENERIC_DELETE,
                bt_type: 'delete',
                click: function () {
                    $("#" + grid_id).find("tr[aria-rec-row]").remove();
                    $(this).remove();
                }
            }, {
                text: js_lang_label.GENERIC_CANCEL,
                bt_type: 'cancel',
                click: function () {
                    $(this).remove();
                }
            }]
    }
    jqueryUIdialogBox(label_elem, label_text, option_params);
}
function activateAddRowEvents(events) {
    if (events) {
        for (i in events) {
            if (events[i]['type'] == "date") {
                inlineDateTimePicker(events[i]['row'], events[i]['cell'], 'date');
            } else if (events[i]['type'] == "time") {
                inlineDateTimePicker(events[i]['row'], events[i]['cell'], 'time');
            } else if (events[i]['type'] == "dateTime") {
                inlineDateTimePicker(events[i]['row'], events[i]['cell'], 'dateTime');
            } else if (events[i]['type'] == "colorPicker") {
                inlineColorPicker(events[i]['row'], events[i]['cell'], "colorPicker");
            }
        }
    }
}
function formatAddCol(grid_id, cm, pos, rowInd, tv, rawObject, rowId, rdata) {
    var $addgrid = $("#" + grid_id);
    var ral = cm.align, result = "style=\"", clas = cm.classes, nm = cm.name;
    if (ral) {
        result += "text-align:" + ral + ";";
    }
    if (cm.hidden === true) {
        result += "display:none;";
    }
    result += (clas !== undefined ? (" class=\"" + clas + "\"") : "") + ((cm.title && tv) ? ("") : "");// title=\""+$.jgrid.stripHtml(tv)+"\"
    result += " aria-describedby=\"" + grid_id + "_" + nm + "\"";
    return result;
}
function applySearchCriteria(grid_id) {
    var pD, fR, sA;
    pD = $("#" + grid_id).getGridParam("postData");
    if (pD.filters) {
        fR = parseJSONString(pD.filters);
        if (fR && fR.rules) {
            if ($.isArray(fR.rules) && fR.rules.length) {
                sA = 1;
            }
        }
    }
    if (sA == 1) {
        $("#search_" + grid_id + "_top").find("div.btn").addClass("active");
    } else {
        $("#search_" + grid_id + "_top").find("div.btn").removeClass("active");
    }
}
//related to grid BG colors
function applyGridRowColors(grid_id, data) {
    var $color_grid = $("#" + grid_id);
    if (!data || !data.records || !data.colors) {
        return false;
    }
    var ccm = $color_grid.jqGrid("getGridParam", "colModel");
    var lv = $color_grid.jqGrid("getGridParam", "listview");
    var color_arr = data.colors, n;

    for (var i in color_arr) {
        if (!color_arr[i]) {
            continue;
        }
        for (var j in color_arr[i]) {
            var ca = color_arr[i][j];
            if (lv == "grid") {
                if (ca['fill'] == "cell" || ca['fill'] == "text") {
                    n = ca['cell'].toLowerCase();
                    n = n.replace(new RegExp("_", 'gi'), "-");
                    if (ca['fill'] == "text") {
                        $($color_grid).find(".item-grid[id='" + i + "']").find('.' + n).css("color", ca['color']);
                    } else {
                        $($color_grid).find(".item-grid[id='" + i + "']").find('.' + n).css("background-color", ca['color']);
                    }
                } else {
                    $($color_grid).find(".item-grid[id='" + i + "']").css("background-color", ca['color']);
                }
            } else if (lv == "view") {
                if (ca['fill'] == "cell" || ca['fill'] == "text") {
                    n = ca['cell'].toLowerCase();
                    n = n.replace(new RegExp("_", 'gi'), "-");
                    if (ca['fill'] == "text") {
                        $($color_grid).find("tr[id='" + i + "'] .item-list").find('.' + n).css("color", ca['color']);
                    } else {
                        $($color_grid).find("tr[id='" + i + "'] .item-list").find('.' + n).css("background-color", ca['color']);
                    }
                } else {
                    $($color_grid).find("tr[id='" + i + "'] td").css("background-color", ca['color']);
                }
            } else {
                if (ca['fill'] == "cell" || ca['fill'] == "text") {
                    n = 0;
                    for (var k in ccm) {
                        if (ccm[k].name == ca['cell']) {
                            break;
                        }
                        n++;
                    }
                    if (ca['fill'] == "text") {
                        $($color_grid).find("tr[id='" + i + "'] td:eq(" + n + ")").css("color", ca['color']);
                    } else {
                        $($color_grid).find("tr[id='" + i + "'] td:eq(" + n + ")").css("background-color", ca['color']);
                    }
                } else {
                    $($color_grid).find("tr[id='" + i + "'] td").css("background-color", ca['color']);
                }
            }
        }
    }
}
//related to grid rating icons
function applyRatingEvents(grid_id) {
    var $rating_grid = $("#" + grid_id);
    var ccrating = $rating_grid.jqGrid("getGridParam", "ratingAllow");
    if (!ccrating) {
        return false;
    }
    var ccm = $rating_grid.jqGrid("getGridParam", "colModel");
    var row_ids = $rating_grid.getDataIDs();
    var t, raty_events, raty_elem, gr_elem, txt;
    for (var i in row_ids) {
        t = row_ids[i];
        for (var k in ccm) {
            if (ccm[k].ctrl_type == "rating_master" && ccm[k].ratyallow && ccm[k].ratyevents) {
                raty_events = ccm[k].ratyevents;
                gr_elem = $($rating_grid).find("tr[id='" + t + "'] td:eq(" + k + ")");
                txt = $(gr_elem).text();
                raty_elem = $('<span />').addClass("rating-icons-block");
                activateRatingMasterEvent(raty_elem, ccm[k].ratyevents.raty.params, ccm[k].ratyevents.raty.hints, txt)
                $(gr_elem).text("");
                $(gr_elem).append(raty_elem);
            }
        }
    }
}
//related to grid widths
function adjustMainGridColumnWidth() {
    var main_auto_width = $("#" + el_tpl_settings.main_grid_id).jqGrid('getGridParam', '_autowidth');
    if (main_auto_width) {
        return false;
    }
    var head_obj = $("#hbox_" + el_tpl_settings.main_grid_id + "_jqgrid").find(".ui-jqgrid-htable:first");
    var data_obj = $("#" + el_tpl_settings.main_grid_id);
    var label_obj = $(head_obj).find(".ui-jqgrid-labels");
    var first_obj = $(data_obj).find(".jqgfirstrow:first");

    var head_wt = $(head_obj).get(0).scrollWidth;
    var data_wt = $(data_obj).get(0).scrollWidth;
    var diff_wt = data_wt - head_wt, items = 0;

    $(label_obj).find("th").each(function () {
        if (!$(this).is(":hidden")) {
            items++;
        }
    });
    if (diff_wt > 8 && items > 0) {
        var split_wt = Math.round(diff_wt / items);
        $(label_obj).find("th").each(function (i) {
            if (!$(this).is(":hidden")) {
                var cur_wt = $(this).width() + parseInt(split_wt);
                $(this).width(cur_wt);
                $(first_obj).find("td:eq(" + i + ")").width(cur_wt);
            }
        });
    }
}
function initGirdLoadingProgress(grid_id) {
    $("#load_" + grid_id).show();
}
function hideGirdLoadingProgress(grid_id) {
    $("#load_" + grid_id).hide();
}
function initGirdLoadingOverlay(grid_id) {
    $("#lui_" + grid_id).show();
}
function hideGirdLoadingOverlay(grid_id) {
    $("#lui_" + grid_id).hide();
}
function noRecordsMessage(grid_id, data) {
    if (!data || !data.records || data.records == '0') {
        var nrm = $("#" + grid_id);
        var message = (data.no_records_msg) ? data.no_records_msg : $(nrm).jqGrid("getGridParam", "norecmsg");
        var noc = $(nrm).find("tr.jqgfirstrow").find("td").length;
        var nrr = $("<tr />").html("<td colspan='" + noc + "' align='center'><div class='grid-norec-msg'>" + message + "</div></td>");
        $(nrm).append(nrr);
    }
}
function adjustWrappedWidth(grid_id) {
    var $wrap_grid = $("#" + grid_id);
    var autowidth = $($wrap_grid).jqGrid("getGridParam", "_autowidth");
    var cm = $($wrap_grid).jqGrid("getGridParam", "colModel");
    var row_ids = $wrap_grid.getDataIDs();
    if (!row_ids || !row_ids.length || autowidth == true) {
        return false;
    }
    $("#" + grid_id).find("tr.ui-row-ltr td").css("white-space", "nowrap");
    var wrap_arr = {};
    for (var i in row_ids) {
        var row_obj = $("#" + grid_id).find("tr[id='" + row_ids[i] + "']");
        $(row_obj).find("td").each(function (i) {
            if (!$.isArray(wrap_arr[i])) {
                wrap_arr[i] = [];
            }
            wrap_arr[i].push($(this)[0].scrollWidth);
            //wrap_arr[i].push($(this).textWidth());
        });
    }
    var head_obj = $("#hbox_" + grid_id + "_jqgrid").find(".ui-jqgrid-htable:first");
    var data_obj = $("#" + grid_id);
    var label_obj = $(head_obj).find(".ui-jqgrid-labels");
    var first_obj = $(data_obj).find(".jqgfirstrow:first");
    for (var i in wrap_arr) {
        var is_hide = $(label_obj).find("th:eq(" + i + ")").is(":hidden");
        var is_spec = (cm[i] && cm[i]['name'] && $.inArray(cm[i]['name'], ['cb', 'rn', 'subgrid', 'prec']) == -1) ? false : true;
        if (is_hide) {
            $(label_obj).find("th:eq(" + i + ")").width(0);
            $(first_obj).find("td:eq(" + i + ")").width(0);
        } else if (is_spec) {
            var maxWidth = (cm[i] && cm[i]['width']) ? cm[i]['width'] : 0;
            $(label_obj).find("th:eq(" + i + ")").width(maxWidth);
            $(first_obj).find("td:eq(" + i + ")").width(maxWidth);
        } else {
            var maxWidth = Math.max.apply(null, wrap_arr[i]);
            maxWidth += 2;
            maxWidth = (maxWidth > el_tpl_settings.grid_column_width) ? maxWidth : el_tpl_settings.grid_column_width;
            $(label_obj).find("th:eq(" + i + ")").width(maxWidth);
            $(first_obj).find("td:eq(" + i + ")").width(maxWidth);
        }
    }
    //$("#" + grid_id).find("tr.ui-row-ltr td").css("white-space", "none");
    return true;
}
//related to x-editable events
function makeAddListEditableTextBox(v_name, view_settings_obj) {
    var v_value = view_settings_obj[v_name]['value'];
    var show_btn = true;
    if (view_settings_obj[v_name]['type'] == "file") {
        var i_value = view_settings_obj[v_name]['dbval'];
        show_btn = false;
    }
    $('#' + v_name).editable({
        showbuttons: show_btn,
        placeholder: view_settings_obj[v_name].editoptions.placeholder,
        type: 'text',
        name: v_name,
        value: i_value,
        pk: el_subview_settings.edit_id,
        onblur: 'submit',
        validate: function (value) {
            var vid = $(this).attr("id");
            return validateViewInlineEdit(vid, value, view_settings_obj[vid]);
        },
        url: function (params) {
            saveViewInlineEdit(params.name, params.value, params.id);
        }
    });
    $('#' + v_name).on('shown', function (e, editable) {
        var ele_name = $(this).attr("id");
        var ele_obj = $(editable.$form).find(".editable-input").find("input[type='text']");
        var obj_pro = view_settings_obj[ele_name];
        switch (obj_pro.type) {
            case 'date':
                $(ele_obj).addClass("date-picker-icon");
                activeDateTimePicker(ele_obj, "date", obj_pro.editoptions);
                break;
            case 'date_and_time':
                $(ele_obj).addClass("date-picker-icon")
                activeDateTimePicker(ele_obj, "dateTime", obj_pro.editoptions);
                break;
            case 'time':
                $(ele_obj).addClass("date-picker-icon")
                activeDateTimePicker(ele_obj, "time", obj_pro.editoptions);
                break;
            case 'phone_number':
                $(ele_obj).mask(obj_pro.editoptions.format);
                break;
            case 'textbox':
                if (obj_pro.editoptions.text_case) {
                    $(ele_obj).addClass(obj_pro.editoptions.text_case);
                    applyInputTextCase($(editable.$form).find(".editable-input"));
                }
                applyAddonElementHTML($(editable.$form).find(".editable-input"), obj_pro);
                break;
            case 'color_picker':
                activateColorPicker(ele_obj, obj_pro.editoptions.color_preview);
                addElementProperties(ele_obj, obj_pro.editoptions);
                break;
            case 'file':
                $(ele_obj).hide();
                appendAddListUploadifyProperties(ele_obj, obj_pro);
//                if (el_general_settings.having_flash_obj) {
//                    appendAddListUploadifyProperties(ele_obj, obj_pro);
//                } else {
//                    uploadifyFlashError();
//                }
                break;
            case 'autocomplete' :
                var $ele_rand_id = Math.floor((Math.random() * 100000) + 1);
                $(ele_obj).attr('id', $ele_rand_id);
                $(ele_obj).wrap('<div class="frm-token-autocomplete frm-size-medium" />');
                activateAddListAutoComplete(ele_obj, obj_pro, v_name);
                addElementProperties(ele_obj, obj_pro.editoptions);
                setTimeout(function () {
                    $(editable.$form).find(".frm-token-autocomplete").append(view_settings_obj[v_name].add_content);
                    var ref_url = $(editable.$form).find('.fancybox-hash-iframe').attr('href');
                    $(editable.$form).find('.fancybox-hash-iframe').attr('href', ref_url + '|rfhtmlID|' + $ele_rand_id);
                }, 5);
                break;
            case 'rating_master':
                $(ele_obj).hide();
                appendAddListRatingProperties(ele_obj, obj_pro);
                break;
        }
        if (parseInt(obj_pro.editoptions.width) > 0) {
            $(ele_obj).css("width", obj_pro.editoptions.width);
        }
    });
    if (view_settings_obj[v_name]['type'] == "rating_master") {
        $('#' + v_name).on('hidden', function (e, reason) {
            var ele_name = $(this).attr("id");
            $("#rshow_" + ele_name).show();
        });
    }
}
function activateAddListAutoComplete(ele_obj, obj_pro, ele_name) {
    var par_obj = obj_pro.editoptions.token.params;
    view_token_pre_populates[ele_name] = par_obj.prePopulate;
    getAddListAutoCompDataValueArr(ele_name);
    view_token_input_assign = $(ele_obj).tokenInput(obj_pro.editoptions.serviceUrl, {
        minChars: par_obj.minChars,
        multi: obj_pro.editoptions.multi,
        propertyToSearch: par_obj.propertyToSearch,
        theme: par_obj.theme,
        tokenLimit: par_obj.tokenLimit,
        hintText: par_obj.hintText,
        noResultsText: par_obj.noResultsText,
        searchingText: par_obj.searchingText,
        preventDuplicates: par_obj.preventDuplicates,
        prePopulate: par_obj.prePopulate,
        onAdd: function (item) {
            view_token_pre_populates[ele_name] = view_token_input_assign.tokenInput('get');
            getAddListAutoCompDataValueArr(ele_name);
        },
        onDelete: function (item) {
            view_token_pre_populates[ele_name] = view_token_input_assign.tokenInput('get');
            getAddListAutoCompDataValueArr(ele_name);
        }
    });
}
function getAddListAutoCompDataValueArr(ele_name) {
    var $data_arr = [];
    for (i in view_token_pre_populates[ele_name]) {
        $data_arr[i] = view_token_pre_populates[ele_name][i]['val'];
    }
    $("#" + ele_name).attr("data-value", $data_arr.join(","));
}
function displayAddListRatingProperties(v_name, obj_pro) {
    var raty_elem, rv_elem, txt;
    raty_elem = $('<span />').attr("id", "rshow_" + v_name).addClass("rating-icons-block");
    rv_elem = $("#rscore_" + v_name);
    txt = $(rv_elem).text();
    var raty_params = $.extend({}, obj_pro.editoptions.raty.params);
    raty_params.cancel = false;
    raty_params.readOnly = true;
    activateRatingMasterEvent(raty_elem, raty_params, obj_pro.editoptions.raty.hints, txt)
    $(rv_elem).after(raty_elem);
    $(rv_elem).hide();
}
function appendAddListRatingProperties(eleObj, obj_pro) {
    var raty_elem, rv_elem, rh_elem, txt;
    raty_elem = $('<span />', {"id": "rstar_" + obj_pro.htmlID, "aria-raty-name": obj_pro.htmlID}).addClass("rating-icons-block");
    rh_elem = $("#rshow_" + obj_pro.htmlID);
    rv_elem = $("#rscore_" + obj_pro.htmlID);
    txt = $(rv_elem).text();
    var raty_params = $.extend({}, obj_pro.editoptions.raty.params);
    raty_params.target = eleObj;
    activateRatingMasterEvent(raty_elem, raty_params, obj_pro.editoptions.raty.hints, txt)
    $(eleObj).after(raty_elem);
    $(rh_elem).hide();
}
function makeAddListEditableTextArea(v_name, view_settings_obj) {
    $('#' + v_name).editable({
        showbuttons: true,
        type: 'textarea',
        placeholder: view_settings_obj[v_name].editoptions.placeholder,
        name: v_name,
        pk: el_subview_settings.edit_id,
        onblur: 'submit',
        rows: 3,
        validate: function (value) {
            var vid = $(this).attr("id");
            return validateViewInlineEdit(vid, value, view_settings_obj[vid]);
        },
        url: function (params) {
            saveViewInlineEdit(params.name, params.value, params.id);
        }
    });
    $('#' + v_name).on('shown', function (e, editable) {
        var ele_name = $(this).attr("id");
        var ele_obj = $(editable.$form).find(".editable-input").find("textarea");
        var obj_pro = view_settings_obj[ele_name];
        if (obj_pro.editoptions.text_case) {
            $(ele_obj).addClass(obj_pro.editoptions.text_case);
            applyInputTextCase($(editable.$form).find(".editable-input"));
        }
    });

}
function makeAddListEditablePassword(v_name, view_settings_obj) {
    $('#' + v_name).editable({
        showbuttons: true,
        type: 'password',
        placeholder: view_settings_obj[v_name].editoptions.placeholder,
        name: v_name,
        pk: el_subview_settings.edit_id,
        onblur: 'submit',
        validate: function (value) {
            var vid = $(this).attr("id");
            return validateViewInlineEdit(vid, value, view_settings_obj[vid])
        },
        url: function (params) {
            saveViewInlineEdit(params.name, params.value, params.id);
        }
    });
}
function makeAddListEditableDropdown(v_name, view_settings_obj) {
    if (view_settings_obj[v_name].editoptions && view_settings_obj[v_name].editoptions.dataUrl) {
        var v_dataUrl = view_settings_obj[v_name].editoptions.dataUrl;
        $('#' + v_name).editable({
            showbuttons: true,
            type: 'select',
            source: v_dataUrl,
            pk: el_subview_settings.edit_id,
            sourceCache: false,
            validate: function (value) {
                var vid = $(this).attr("id");
                return validateViewInlineEdit(vid, value, view_settings_obj[vid])
            },
            url: function (params) {
                saveViewInlineEdit(params.name, params.value, params.id);
            }
        });
        $('#' + v_name).on('shown', function (e, editable) {
            var $that = $(editable.$form).find(".editable-input").find("select");
            $($that).attr('data-placeholder', view_settings_obj[v_name].editoptions.data_placeholder);
            $($that).find("option").removeAttr("selected");
            var data_val = $(this).attr("data-value")
            $($that).find("option").each(function () {
                if ($(this).text() == data_val) {
                    $(this).prop("selected", true);
                    return false;
                }
            });
            var ele_name = $(this).attr("id");
            var obj_pro_cc = view_settings_obj[ele_name];
            switch (obj_pro_cc.type) {
                case 'checkboxes':
                    $($that).attr("multiple", true);
                    break;
                case 'multi_select_dropdown':
                    $($that).attr("multiple", true);
                    break;
            }
            if (parseInt(obj_pro_cc.editoptions.width) > 0) {
                $($that).attr('style', function (i, s) {
                    return 'width: ' + obj_pro_cc.editoptions.width + 'px !important;' + s
                });
            }
            if (obj_pro_cc.type == "checkboxes" || obj_pro_cc.type == "multi_select_dropdown") {
                var data_val_arr = [];
                $.each(data_val.split(","), function () {
                    data_val_arr.push($.trim(this));
                });
                $($that).find("option").each(function () {
                    if ($.inArray($.trim($(this).text()), data_val_arr) != -1) {
                        $(this).prop("selected", true);
                    }
                });
            } else {
                $($that).find("option").each(function () {
                    if ($.trim($(this).text()) == $.trim(data_val)) {
                        $(this).prop("selected", true);
                        return false;
                    }
                });
            }
            setTimeout(function () {
                $($that).chosen({
                    allow_single_deselect: true
                });
                var that_id = $($that).attr("id");
                $('#' + that_id + '_chosen').trigger('mousedown');
                $('#' + that_id + '_chosen').find("input[type='text']").focus();
                var obj_pro = view_settings_obj[ele_name];
                if (obj_pro.editoptions.ajaxCall == "ajax-call") {
                    var inlineID = obj_pro.editoptions.rel;
                    var $queryStr = "&mode=" + cus_enc_mode_json['Update'] + "&unique_name=" + inlineID;
                    var $ajaxSendURL = el_subview_settings.ajax_data_url + '' + $queryStr;
                    $($that).ajaxChosen({
                        dataType: 'json',
                        type: 'POST',
                        url: $ajaxSendURL
                    }, {
                        loadingImg: admin_image_url + "chosen-loading.gif"
                    });
                }
            }, 5)
            $($that).change(function () {
                if (obj_pro_cc.type == "checkboxes" || obj_pro_cc.type == "multi_select_dropdown") {
                    var mlist_val = [];
                    $(this).find("option:selected").each(function () {
                        mlist_val.push($(this).text());
                    });
                    if (mlist_val && mlist_val.length > 0) {
                        $("#" + ele_name).attr("data-value", mlist_val.join(","));
                    } else {
                        $("#" + ele_name).attr("data-value", "");
                    }
                } else {
                    $("#" + ele_name).attr("data-value", $(this).find("option:selected").val());
                }
            })
        });
    }

}
function appendAddListUploadifyProperties(ele_obj, obj_pro) {
    if (!obj_pro) {
        return;
    }
    var ele_name = obj_pro.htmlID;
    var ele_val = obj_pro.dbval;
    var ele_label = obj_pro.label;
    var ele_parent = obj_pro.parentattr;
    var ele_events = obj_pro.editoptions;

    if (!ele_events.fileupload) {
        return false;
    }

    var $fileStr = "<div class='uploader'>";
    $fileStr += "<input type='hidden' value='" + ele_val + "' name='temp_" + ele_name + "' id='temp_" + ele_name + "' />";
    $fileStr += "<input type='file' name='uploadify_" + ele_name + "' id='uploadify_" + ele_name + "' title='" + ele_label + "'/>";
    $fileStr += "<span class='filename' id='preview_caf_file'>" + ele_events.fileupload.placeholder + "</span><span class='action'>Choose File</span>";
    $fileStr += "</div>";

    var par_obj = $(ele_obj).closest('.editable-container')
    $(par_obj).wrap('<div ' + ele_parent + ' id="btn_file_' + ele_name + '"/>');
    $(ele_obj).after($fileStr);

    if (ele_events.fileupload) {
        var upload_data = ele_events.fileupload;
        var upload_params = upload_data.params;
        var basic_params = assignEventParams(upload_params);
        var function_params = {
            formData: {
                'unique_name': upload_data['unique_name'],
                'id': upload_data['id'],
                'type': 'uploadify'
            },
            add: function (e, data) {
                var upload_errors = [];
                var _input_name = $(this).fileupload('option', 'name');
                var _temp_name = $(this).fileupload('option', 'temp');
                var _form_data = $(this).fileupload('option', 'formData');
                var _file_size = $(this).fileupload('option', 'maxFileSize');
                var _file_type = $(this).fileupload('option', 'acceptFileTypes');

                var _input_val = data.originalFiles[0]['name'];
                var _input_size = data.originalFiles[0]['size'];
                if (_file_type != '*') {
                    var _input_ext = (_input_val) ? _input_val.substr(_input_val.lastIndexOf('.')) : "";
                    var accept_file_types = new RegExp('(\.|\/)(' + _file_type + ')$', 'i');
                    if (_input_ext && !accept_file_types.test(_input_ext)) {
                        upload_errors.push(js_lang_label.ACTION_FILE_TYPE_IS_NOT_ACCEPTABLE);
                    }
                }
                _file_size = _file_size * 1000;
                if (_input_size && _input_size > _file_size) {
                    upload_errors.push(js_lang_label.ACTION_FILE_SIZE_IS_TOO_LARGE);
                }
                if (upload_errors.length > 0) {
                    Project.setMessage(upload_errors.join('\n'), 0);
                } else {
                    _form_data['oldFile'] = $('#' + _temp_name).val();
                    $(this).fileupload('option', 'formData', _form_data);
                    $('#preview_' + _input_name).html(_input_val);
                    data.submit();
                }
            },
            done: function (e, data) {
                if (data && data.result) {
                    var _input_name = $(this).fileupload('option', 'name');
                    var _temp_name = $(this).fileupload('option', 'temp');
                    var jparse_data = parseJSONString(data.result);
                    if (jparse_data.success == '0') {
                        Project.setMessage(jparse_data.message, 0);
                    } else {
                        $('#' + _input_name).val(jparse_data.uploadfile);
                        $('#' + _temp_name).val(jparse_data.oldfile);
                        displayAdminListFlyImage(_input_name, upload_data, jparse_data);
                        var old_data = {
                            "old_file": ele_val
                        };
                        saveViewInlineEdit(_input_name, jparse_data.uploadfile, el_subview_settings.edit_id, old_data);
                        setTimeout(function () {
                            $('.jqgrid-subview').click();
                        }, 200)
                    }
                }
            },
            fail: function (e, data) {
                $.each(data.messages, function (index, error) {
                    Project.setMessage(error, 0);
                });
            }
        };
        var final_params = $.extend({}, basic_params, function_params);
        $('#uploadify_' + ele_name).fileupload(final_params);
    }
}
//related to image/file on the fly display
function displayAdminListFlyImage(hid, upload_data, rarr) {
    if (rarr['fileURL']) {
        var del_btn = "<a title='" + js_lang_label.GENERIC_GRID_DELETE + "' style='text-decoration:none;' href='javascript://' onclick='deleteFileTypeDocs(\"" + upload_data.id + "\",\"" + upload_data.unique_name + "\",\"" + upload_data.delete_file_url + "\",\"" + upload_data.folder + "\",\"" + hid + "\")' id='anc_imgdel_" + hid + "' >";
        del_btn += "<span class='icon16 minia-icon-trashcan'></span>";
        del_btn += "</a>";

        var $img_str = $("<a />");
        if (rarr['fileType'] == 'file') {
            $($img_str).attr("id", "anc_imgview_" + hid)
                    .attr("href", rarr['fileURL'])
                    .attr("target", "_blank")
                    .addClass("btn btn-success btn-mini")
                    .html("View");
            $("#img_view_" + hid).html($img_str);
        } else {
            $($img_str).attr("id", "anc_imgview_" + hid)
                    .attr("href", rarr['fileURL'])
                    .addClass("fancybox-image")
                    .html("<img src='" + rarr['fileURL'] + "' alt='Image' width='" + rarr['width'] + "' height='" + rarr['height'] + "'/>");
            $("#img_view_" + hid).html($img_str);
            /*
             $('#anc_imgview_' + hid).qtip({
             content: "<img src='" + rarr['fileURL'] + "' alt='Image' />"
             });
             */
        }
        $("#img_del_" + hid).html(del_btn);
        initializeFancyBoxEvents($("#img_view_" + hid));
    }
}
//related to grid sort columns activation
function activateGridSortColumns(grid_id) {
    var sortname = $("#" + grid_id).jqGrid('getGridParam', "sortname");
    var sortorder = $("#" + grid_id).jqGrid('getGridParam', "sortorder");
    if ($("#" + grid_id).jqGrid('getGridParam', "multiSort")) {
        $("div[id^='jqgh_" + grid_id + "'] span.s-ico").css("display", "none");
        if (sortname && sortorder) {
            var sortname_arr = sortname.split(",");
            var sortorder_arr = sortorder.split(",");
            for (var i in sortname_arr) {
                var $show_sort_div = $("div[id='jqgh_" + grid_id + "_" + sortname_arr[i] + "'] span.s-ico");
                if (!$show_sort_div) {
                    return false;
                }
                $($show_sort_div).css("display", "inline");
                if (sortorder_arr[i] == "asc") {
                    $($show_sort_div).find("span[sort='asc']").removeClass("ui-state-disabled");
                    $($show_sort_div).find("span[sort='desc']").addClass("ui-state-disabled");
                } else {
                    $($show_sort_div).find("span[sort='asc']").addClass("ui-state-disabled");
                    $($show_sort_div).find("span[sort='desc']").removeClass("ui-state-disabled");
                }
            }
        }
    } else {
        $("div[id^='jqgh_" + grid_id + "'] span.s-ico").css("display", "none");
        var $show_sort_div = $("div[id='jqgh_" + grid_id + "_" + sortname + "'] span.s-ico");
        if (!$show_sort_div) {
            return false;
        }
        $($show_sort_div).css("display", "inline");
        if (sortorder == "asc") {
            $($show_sort_div).find("span[sort='asc']").removeClass("ui-state-disabled");
            $($show_sort_div).find("span[sort='desc']").addClass("ui-state-disabled");
        } else {
            $($show_sort_div).find("span[sort='asc']").addClass("ui-state-disabled");
            $($show_sort_div).find("span[sort='desc']").removeClass("ui-state-disabled");
        }
    }
}
function getColumnsPosition(key, grid_id) {
    var data = getLocalStore(key, true);
    if (!data) {
        return false;
    }
    try {
        var data = parseJSONString(data);
        if (!data.columns) {
            return false;
        }
        var arr = data.columns;
        if (!$.isArray(arr) || arr.length == 0) {
            return false;
        }
        $("#" + grid_id).jqGrid("remapColumns", arr, true);
    } catch (e) {

    }
}
function setColumnsPosition(key, data, grid_id, tcm) {
    var gcm = $("#" + grid_id).jqGrid('getGridParam', 'colModel');
    var arr = [], g_name, t_name, ind = 0, i, j;
    for (i = 0; i < gcm.length; i++) {
        g_name = gcm[i]['name'];
        if ($.inArray(g_name, ['cb', 'rn', 'subgrid', 'prec']) != -1) {
            arr.push(i);
            ind++;
            continue;
        }
        for (j = 0; j < tcm.length; j++) {
            t_name = tcm[j]['name'];
            if (t_name == g_name) {
                arr.push(j + ind);
                break;
            }
        }
    }
    var str = {"columns": arr};
    setLocalStore(key, JSON.stringify(str), true);
}
function getColumnsChoosen(key, grid_id) {
    var data = getLocalStore(key, true);
    if (!data) {
        return false;
    }
    try {
        var data = parseJSONString(data);
        if (!data.columns) {
            return false;
        }
        var arr = data.columns;
        if (!$.isArray(arr) || arr.length == 0) {
            return false;
        }
        var gcm = $("#" + grid_id).jqGrid('getGridParam', 'colModel');
        for (var i = 0; i < gcm.length; i++) {
            if ($.inArray(gcm[i]['name'], arr) != -1) {
                if (gcm[i]['hidden'] !== true) {
                    $("#" + grid_id).jqGrid('hideCol', gcm[i]['name']);
                }
            } else {
                if (gcm[i]['hidden'] === true) {
                    $("#" + grid_id).jqGrid('showCol', gcm[i]['name']);
                }
            }
        }
    } catch (e) {

    }
}
function setColumnsChoosen(key, grid_id) {
    var gcm = $("#" + grid_id).jqGrid('getGridParam', 'colModel');
    var arr = [], g_name, i;
    for (i = 0; i < gcm.length; i++) {
        g_name = gcm[i]['name'];
        if ($.inArray(g_name, ['cb', 'rn', 'subgrid', 'prec']) != -1) {
            continue;
        }
        if (gcm[i]['hidden'] === true) {
            arr.push(g_name);
        }
    }
    var str = {"columns": arr};
    setLocalStore(key, JSON.stringify(str), true);
}
function getColumnsWidth(key, grid_id, tcm) {
    var data = getLocalStore(key, true);
    if (!data) {
        return false;
    }
    try {
        var data = parseJSONString(data);
        if (!data.columns) {
            return false;
        }
        var arr = data.columns;
        if (!$.isPlainObject(arr)) {
            return false;
        }
        var i, t_name, n_width;
        for (i = 0; i < tcm.length; i++) {
            t_name = tcm[i]['name'];
            if ($.inArray(t_name, ['cb', 'rn', 'subgrid', 'prec']) != -1) {
                continue;
            }
            n_width = parseInt(arr[t_name]);
            if (isNaN(n_width) || !n_width) {
                continue;
            }
            if (n_width > el_tpl_settings.grid_column_width) {
                tcm[i]['width'] = n_width;
            } else {
                tcm[i]['width'] = el_tpl_settings.grid_column_width;
            }
        }
    } catch (e) {

    }
}
function setColumnsWidth(key, grid_id) {
    var gcm = $("#" + grid_id).jqGrid('getGridParam', 'colModel');
    var arr = {}, g_name, i;
    for (i = 0; i < gcm.length; i++) {
        g_name = gcm[i]['name'];
        if ($.inArray(g_name, ['cb', 'rn', 'subgrid', 'prec']) != -1) {
            continue;
        }
        arr[g_name] = gcm[i]['width'];
    }
    var str = {"columns": arr};
    setLocalStore(key, JSON.stringify(str), true);
}
function checkColumnsWidth(key, grid_id) {
    var data = getLocalStore(key, true);
    if (!data) {
        setColumnsWidth(key, grid_id);
    }
    try {
        var data = parseJSONString(data);
        var arr = data.columns;
        if (!$.isPlainObject(arr)) {
            setColumnsWidth(key, grid_id);
        }
    } catch (e) {

    }
}
function createCustomGridButton(settings, grid_id, pager_id, afterId) {
    if (typeof settings.callback != "undefined" && settings.callback == "0") {
        return afterId;
    }
    var custom_btn_id = settings.name + "_" + grid_id;
    jQuery("#" + grid_id).navButtonAdd('#' + pager_id, {
        caption: settings.text,
        title: settings.title,
        alert: settings.alert,
        confirm: settings.confirm,
        buttonicon: 'ico-cutom-btn ' + ((settings.icon) ? settings.icon : 'ui-icon-newwin'),
        buttonicon_p: "uigrid-custom-common uigrid-custom-btn",
        onClickButton: function (e, p) {
            var fids = filterGridSelectedIDs(this);
            adminCustomButtonAction(fids, p.alert, p.confirm, grid_id, el_grid_settings['extra_qstr'], e, p);
        },
        position: "last",
        id: custom_btn_id,
        afterButtonId: afterId
    });
    jQuery("#" + grid_id).navButtonAdd("#" + grid_id + "_toppager_left", {
        caption: settings.text,
        title: settings.title,
        alert: settings.alert,
        confirm: settings.confirm,
        buttonicon: 'ico-cutom-btn ' + ((settings.icon) ? settings.icon : 'ui-icon-newwin'),
        buttonicon_p: "uigrid-custom-common uigrid-custom-btn",
        onClickButton: function (e, p) {
            var fids = filterGridSelectedIDs(this);
            adminCustomButtonAction(fids, p.alert, p.confirm, grid_id, el_grid_settings['extra_qstr'], e, p);
        },
        position: "last",
        id: custom_btn_id + "_top",
        afterButtonId: (afterId) ? afterId + "_top" : ""
    });
    return custom_btn_id;
}
function filterGridSelectedIDs(obj) {
    var sids = $(obj).getGridParam('selarrrow')
    var hids = $(obj).getGridParam('hiderecords');
    var fids = $.isArray(hids) ? $(sids).not(hids).get() : sids;
    return fids;
}
function reloadListGrid(grid_id, options, defsort, grid_settings) {
    if (defsort == 1) {
        $("#" + grid_id).setGridParam({defaultsort: "Yes"});
    } else if (defsort == 2) {
        $("#" + grid_id).setGridParam({sortname: grid_settings.default_sort, sortorder: grid_settings.sort_order, defaultsort: "Yes"});
    }
    if (options) {
        $("#" + grid_id).trigger('reloadGrid', options);
    } else {
        $("#" + grid_id).trigger('reloadGrid');
    }
}
function setGridViewSortLayout(index, sortorder, col_names) {
    for (var i in col_names) {
        if (col_names[i]['name'] == index) {
            $(".listsort-container").find(".sort-item-label").html(col_names[i]['label']);
            var sobj = $(".listsort-container").find(".sort-item-icon");
            if (sortorder == 'desc') {
                $(sobj).addClass("fa-sort-amount-desc").removeClass("fa-sort-amount-asc");
            } else {
                $(sobj).addClass("fa-sort-amount-asc").removeClass("fa-sort-amount-desc");
            }
            break;
        }
    }
}
function loadTopFilterData(grid_id) {
    var pD, fR;
    pD = $("#" + grid_id).getGridParam("postData");
    if (pD.filters) {
        fR = parseJSONString(pD.filters);
        if (fR && fR.range) {
            if ($("select.topfilter-ctrl").length) {
                if ($.isArray(fR.range.val)) {
                    $("select.topfilter-ctrl").attr("aria-top-val", JSON.stringify(fR.range.val));
                } else {
                    $("select.topfilter-ctrl").attr("aria-top-val", fR.range.val);
                }
                if ($.isArray(fR.range.txt)) {
                    $("select.topfilter-ctrl").attr("aria-top-txt", JSON.stringify(fR.range.txt));
                }
                $("select.topfilter-ctrl option[aria-filter-name='" + fR.range.key + "']").attr("selected", true);
                $("select.topfilter-ctrl").trigger("change");
            }
        }
    }
}
function refreshLeftSearchPanel(grid_id) {
    if (!$('#left_search_panel').length) {
        return false;
    }
    $("#input_left_search").val("");
    $('#left_search_items').html('<div align="center" class="left-search-loader"><i class="fa fa-refresh fa-spin fa-3x fa-fw"></i></div>');
    $.ajax({
        url: el_grid_settings.search_refresh_url,
        type: 'POST',
        data: {"tempalte": "Yes"},
        success: function (response) {
            $('#left_search_items').html(response);
            initLeftPanelAutocomplete(grid_id);
            initializejQueryChosenEvents($("#left_search_panel"));
        }
    });
    return true;
};
Project.modules.backup = {
    init: function () {

    },
    showFullBackupListing: function () {
        var that = this, total_rows, js_col_name_arr = [], grid_comp_time = true, load_comp_time = true;
        var grid_id = el_tpl_settings.main_grid_id, pager_id = el_tpl_settings.main_pager_id, wrapper_id = el_tpl_settings.main_wrapper_id;
        for (var i in js_col_name_json) {
            js_col_name_arr.push(js_col_name_json[i]['label']);
        }
        var force_width = $("#main_content_div").width() - 30;
        getColumnsWidth(el_grid_settings.enc_location + '_cw', grid_id, js_col_model_json);
        jQuery("#list2").jqGrid({
            editurl: el_grid_settings.delete_url,
            data: js_data_json,
            datatype: "local",
            colNames: js_col_name_arr,
            colModel: js_col_model_json,
            rowNum: el_tpl_settings.grid_rec_limit,
            pgnumbers: (el_theme_settings.grid_pgnumbers) ? true : false,
            pgnumlimit: parseInt(el_theme_settings.grid_pgnumlimit),
            pagingpos: el_theme_settings.grid_pagingpos,
            rowList: [10, 20, 30, 50, 100, 200, 500],
            sortname: el_grid_settings.default_sort,
            sortorder: el_grid_settings.sort_order,
            altRows: true,
            altclass: 'evenRow',
            multiselectWidth: 30,
            viewrecords: true,
            multiselect: true,
            multiboxonly: true,
            caption: false,
            hidegrid: false,
            pager: (el_tpl_settings.grid_bot_menu == 'Y') ? "#pager2" : "",
            toppager: (el_tpl_settings.grid_top_menu == 'Y') ? true : false,
            toppaging: (el_tpl_settings.grid_top_menu == 'Y') ? true : false,
            sortable: {
                update: function (permutation) {
                    setColumnsPosition(el_grid_settings.enc_location + '_cp', permutation, grid_id, js_col_model_json);
                }
            },
            searchGrid: {
                multipleSearch: true
            },
            forceApply: true,
            forceWidth: force_width,
            width: force_width,
            height: 400,
            autowidth: true,
            shrinkToFit: 800,
            fixed: true,
            grouping: true,
            groupingView: {
                groupField: ['month'],
                groupOrder: ['desc'],
                groupText: ['<b>{0}</b>'],
                groupColumnShow: [false],
                groupSummary: [true],
                showSummaryOnHide: true,
                groupCollapse: false,
                groupDataSorted: true
            },
            //footerrow: true, 
            //userDataOnFooter: true,
            beforeRequest: function () {
                getColumnsPosition(el_grid_settings.enc_location + '_cp', grid_id);
            },
            loadComplete: function (data) {
                $("#" + grid_id + "_messages_html").remove();
                $("#selAllRows").val('false');
                if (data) {
                    total_rows = data.records;
                }
                // Resizing Grid
                if (load_comp_time) {
                    load_comp_time = false;
                } else {
                    resizeGridWidth();
                    checkColumnsWidth(el_grid_settings.enc_location + '_cw', grid_id);
                }
            },
            gridComplete: function () {
                $(".ui-jqgrid-sortable").mousedown(function () {
                    $(this).css('cursor', 'crosshair');
                });
                $(".ui-jqgrid-sortable").mouseup(function () {
                    $(this).css({
                        cursor: 'pointer'
                    });
                });
                // Resizing Grid
                if (grid_comp_time) {
                    grid_comp_time = false;
                } else {
                    resizeGridWidth();
                }
            },
            onSortCol: function (index, iCol, sortorder) {

            },
            resizeStop: function (newwidth, index) {
                setColumnsWidth(el_grid_settings.enc_location + '_cw', grid_id);
            },
            beforeSelectRow: function (rowid, e) {
                multiSelectHandler(rowid, e);
            }
        });
        jQuery("#" + grid_id).jqGrid('navGrid', '#' + pager_id, {
            cloneToTop: true,
            add: false,
            edit: false,
            search: false,
            del: (el_grid_settings.permit_del_btn == '1') ? true : false,
            delicon_p: (el_theme_settings.grid_icons.del) ? 'uigrid-del-btn del-icon-only' : "uigrid-del-btn",
            deltext: (el_theme_settings.grid_icons.del) ? '' : js_lang_label.GENERIC_GRID_DELETE,
            alerttext: js_lang_label.GENERIC_PLEASE_SELECT_ANY_RECORD,
            refreshicon_p: (el_theme_settings.grid_icons.refresh) ? 'uigrid-refresh-btn refresh-icon-only' : "uigrid-refresh-btn",
            refreshtext: (el_theme_settings.grid_icons.refresh) ? '' : js_lang_label.GENERIC_GRID_SHOW_ALL,
            refreshtitle: js_lang_label.GENERIC_REFRESH_LISTING,
            afterRefresh: function () {
                $(".search-chosen-select").find("option").removeAttr("selected");
                $(".search-chosen-select").trigger("chosen:updated");
            }
        }, {
            // edit options
        }, {
            // add options
        }, {
            // delete options
            width: 350,
            caption: js_lang_label.GENERIC_GRID_DELETE,
            msg: js_lang_label.GENERIC_ARE_YOU_SURE_WANT_TO_DELETE_SELECTED_RECORDS,
            bSubmit: js_lang_label.GENERIC_GRID_DELETE,
            bCancel: js_lang_label.GENERIC_CANCEL,
            modal: true,
            closeOnEscape: true
        }, {
            //del options
        });
        if (el_grid_settings.permit_add_btn == '1') {
            jQuery("#" + grid_id).navButtonAdd('#' + pager_id, {
                caption: (el_theme_settings.grid_icons.add) ? '' : js_lang_label.GENERIC_CREATE_BACKUP,
                title: js_lang_label.GENERIC_CREATE_BACKUP,
                buttonicon: "ui-icon-plus",
                buttonicon_p: (el_theme_settings.grid_icons.add) ? 'uigrid-add-btn add-icon-only' : 'uigrid-add-btn',
                onClickButton: function () {
                    that.createNewBackup();
                },
                position: "first"
            });
            jQuery("#" + grid_id).navButtonAdd('#' + grid_id + '_toppager_left', {
                caption: (el_theme_settings.grid_icons.add) ? '' : js_lang_label.GENERIC_CREATE_BACKUP,
                title: js_lang_label.GENERIC_CREATE_BACKUP,
                buttonicon: "ui-icon-plus",
                buttonicon_p: (el_theme_settings.grid_icons.add) ? 'uigrid-add-btn add-icon-only' : 'uigrid-add-btn',
                onClickButton: function () {
                    that.createNewBackup();
                },
                position: "first"
            });
        }
        jQuery("#" + grid_id).navButtonAdd('#' + pager_id, {
            caption: (el_theme_settings.grid_icons.columns) ? '' : js_lang_label.GENERIC_GRID_COLUMNS,
            title: js_lang_label.GENERIC_GRID_HIDESHOW_COLUMNS,
            buttonicon: "ui-icon-columns",
            buttonicon_p: (el_theme_settings.grid_icons.columns) ? 'uigrid-col-btn col-icon-only' : 'uigrid-col-btn',
            onClickButton: function () {
                jQuery("#" + grid_id).jqGrid('columnChooser', {
                    'classname': 'grid-columns-picker',
                    'msel_opts': {
                        'autoOpen': true,
                        'beforeopen': function (event, ui) {
                            applyUIButtonCSS();
                        }
                    },
                    "beforeSubmit": function (div_id) {
                        if ($("#" + div_id).find('select').val() != null) {
                            return true;
                        } else {
                            jQuery.jgrid.info_dialog(js_lang_label.GENERIC_GRID_ERROR, js_lang_label.GENERIC_GRID_PLEASE_SELECT_ATLEAST_ONE_COLUMN, js_lang_label.GENERIC_GRID_OK);
                            return false;
                        }
                    },
                    "done": function (perm) {
                        $("#" + grid_id).trigger('reloadGrid');
                    }
                });
            },
            position: "last"
        });
        jQuery("#" + grid_id).navButtonAdd('#' + grid_id + '_toppager_left', {
            caption: (el_theme_settings.grid_icons.columns) ? '' : js_lang_label.GENERIC_GRID_COLUMNS,
            title: js_lang_label.GENERIC_GRID_HIDESHOW_COLUMNS,
            buttonicon: "ui-icon-columns",
            buttonicon_p: (el_theme_settings.grid_icons.columns) ? 'uigrid-col-btn col-icon-only' : 'uigrid-col-btn',
            onClickButton: function () {
                jQuery("#" + grid_id).jqGrid('columnChooser', {
                    'classname': 'grid-columns-picker',
                    'msel_opts': {
                        'autoOpen': true,
                        'beforeopen': function (event, ui) {
                            applyUIButtonCSS();
                        }
                    },
                    "beforeSubmit": function (div_id) {
                        if ($("#" + div_id).find('select').val() != null) {
                            return true;
                        } else {
                            jQuery.jgrid.info_dialog(js_lang_label.GENERIC_GRID_ERROR, js_lang_label.GENERIC_GRID_PLEASE_SELECT_ATLEAST_ONE_COLUMN, js_lang_label.GENERIC_GRID_OK);
                            return false;
                        }
                    },
                    "done": function (perm) {
                        $("#" + grid_id).trigger('reloadGrid');
                    }
                });
            },
            position: "last"
        });
        var orgViewModal = $.jgrid.viewModal;
        $.extend($.jgrid, {
            viewModal: function (selector, o) {
                if (selector == '#searchmodfbox_' + o.gid || selector == '#alertmod' || selector == "#delmod" + o.gid || selector == "#info_dialog") {
                    var of = jQuery("#gbox_" + el_tpl_settings.main_grid_id).offset();
                    var w = jQuery("#gbox_" + el_tpl_settings.main_grid_id).width();
                    var h = jQuery("#gbox_" + el_tpl_settings.main_grid_id).height();
                    var w1 = $(selector).width();
                    var h1 = $(selector).height();
                    $(selector).css({
                        'top': of.top + ((h - h1) / 2) - 40,
                        'left': 'calc(50% - ' + w1 / 2 + 'px)'
                    });
                }
                orgViewModal.call(this, selector, o);
            }
        });
        var oldInfoDialog = $.jgrid.info_dialog;
        $.extend($.jgrid, {
            info_dialog: function (caption, content, c_b, modalopt) {
                return oldInfoDialog.call(this, caption, content, c_b, modalopt);
            }
        });
    },
    showTableBackupListing: function () {
        var that = this, total_rows, js_col_name_arr = [], grid_comp_time = true, load_comp_time = true;
        var grid_id = el_tpl_settings.main_grid_id, pager_id = el_tpl_settings.main_pager_id, wrapper_id = el_tpl_settings.main_wrapper_id;
        for (var i in js_col_name_json) {
            js_col_name_arr.push(js_col_name_json[i]['label']);
        }
        var force_width = $("#main_content_div").width() - 30;
        getColumnsWidth(el_grid_settings.enc_location + '_cw', grid_id, js_col_model_json);
        jQuery("#list2").jqGrid({
            editurl: el_grid_settings.delete_url,
            data: js_data_json,
            datatype: "local",
            colNames: js_col_name_arr,
            colModel: js_col_model_json,
            rowNum: el_tpl_settings.grid_rec_limit,
            pgnumbers: (el_theme_settings.grid_pgnumbers) ? true : false,
            pgnumlimit: parseInt(el_theme_settings.grid_pgnumlimit),
            pagingpos: el_theme_settings.grid_pagingpos,
            rowList: [10, 20, 30, 50, 100, 200, 500],
            sortname: el_grid_settings.default_sort,
            sortorder: el_grid_settings.sort_order,
            altRows: true,
            altclass: 'evenRow',
            multiselectWidth: 30,
            viewrecords: true,
            multiselect: true,
            multiboxonly: true,
            caption: false,
            hidegrid: false,
            pager: (el_tpl_settings.grid_bot_menu == 'Y') ? "#pager2" : "",
            toppager: (el_tpl_settings.grid_top_menu == 'Y') ? true : false,
            toppaging: (el_tpl_settings.grid_top_menu == 'Y') ? true : false,
            sortable: {
                update: function (permutation) {
                    setColumnsPosition(el_grid_settings.enc_location + '_cp', permutation, grid_id, js_col_model_json);
                }
            },
            searchGrid: {
                multipleSearch: true
            },
            forceApply: true,
            forceWidth: force_width,
            width: force_width,
            height: 400,
            autowidth: true,
            shrinkToFit: 800,
            fixed: true,
            grouping: false,
            beforeRequest: function () {
                getColumnsPosition(el_grid_settings.enc_location + '_cp', grid_id);
            },
            loadComplete: function (data) {
                $("#" + grid_id + "_messages_html").remove();
                $("#selAllRows").val('false');
                if (data) {
                    total_rows = data.records;
                }
                // Resizing Grid
                if (load_comp_time) {
                    load_comp_time = false;
                } else {
                    resizeGridWidth();
                    checkColumnsWidth(el_grid_settings.enc_location + '_cw', grid_id);
                }
            },
            gridComplete: function () {
                $(".ui-jqgrid-sortable").mousedown(function () {
                    $(this).css('cursor', 'crosshair');
                });
                $(".ui-jqgrid-sortable").mouseup(function () {
                    $(this).css({
                        cursor: 'pointer'
                    });
                });
                // Resizing Grid
                if (grid_comp_time) {
                    grid_comp_time = false;
                } else {
                    resizeGridWidth();
                }
            },
            onSortCol: function (index, iCol, sortorder) {

            },
            resizeStop: function (newwidth, index) {
                setColumnsWidth(el_grid_settings.enc_location + '_cw', grid_id);
            },
            beforeSelectRow: function (rowid, e) {
                multiSelectHandler(rowid, e);
            }
        });

        jQuery("#" + grid_id).jqGrid('filterToolbar', {
            stringResult: true,
            searchOnEnter: false,
            searchOperators: (el_theme_settings.grid_searchopt) ? true : false,
            operandTitle: js_lang_label.GENERIC_CLICK_TO_SELECT_SEARCH_OPERATION,
            clearTitle: js_lang_label.GENERIC_CLEAR_SEARCH_VALUE
        });

        jQuery("#" + grid_id).jqGrid('navGrid', '#' + pager_id, {
            cloneToTop: true,
            add: false,
            edit: false,
            search: false,
            del: false,
            alerttext: js_lang_label.GENERIC_PLEASE_SELECT_ANY_RECORD,
            refreshicon_p: (el_theme_settings.grid_icons.refresh) ? 'uigrid-refresh-btn refresh-icon-only' : "uigrid-refresh-btn",
            refreshtext: (el_theme_settings.grid_icons.refresh) ? '' : js_lang_label.GENERIC_GRID_SHOW_ALL,
            refreshtitle: js_lang_label.GENERIC_REFRESH_LISTING,
            afterRefresh: function () {
                $(".search-chosen-select").find("option").removeAttr("selected");
                $(".search-chosen-select").trigger("chosen:updated");
            }
        }, {
            // edit options
        }, {
            // add options
        }, {
            // delete options
            width: 350,
            caption: js_lang_label.GENERIC_GRID_DELETE,
            msg: js_lang_label.GENERIC_ARE_YOU_SURE_WANT_TO_DELETE_SELECTED_RECORDS,
            bSubmit: js_lang_label.GENERIC_GRID_DELETE,
            bCancel: js_lang_label.GENERIC_CANCEL,
            modal: true,
            closeOnEscape: true
        }, {
            //del options
        });

        if (el_grid_settings.permit_add_btn == '1') {
            jQuery("#" + grid_id).navButtonAdd('#' + pager_id, {
                caption: (el_theme_settings.grid_icons.add) ? '' : js_lang_label.GENERIC_CREATE_BACKUP,
                title: js_lang_label.GENERIC_CREATE_BACKUP,
                buttonicon: "ui-icon-plus",
                buttonicon_p: (el_theme_settings.grid_icons.add) ? 'uigrid-add-btn add-icon-only' : 'uigrid-add-btn',
                onClickButton: function () {
                    var id_list_arr = $(this).getGridParam('selarrrow');
                    if (!id_list_arr || id_list_arr.length == 0) {
                        var label_elem = '<div />';
                        var label_text = js_lang_label.GENERIC_PLEASE_SELECT_ANY_RECORD_TO_TAKE_BACKUP;
                        var option_params = {
                            title: "Backup",
                            dialogClass: "dialog-confirm-box grid-backup-cnf",
                            buttons: [{
                                    text: js_lang_label.GENERIC_BACKUP,
                                    bt_type: 'backup',
                                    click: function () {
                                        $(this).remove();
                                    }
                                }]
                        }
                        jqueryUIdialogBox(label_elem, label_text, option_params);
                    } else {
                        var id_str = id_list_arr.join(",");
                        that.createTableBackup(id_str, 'backup_table');
                    }
                },
                position: "first"
            });
            jQuery("#" + grid_id).navButtonAdd('#' + grid_id + '_toppager_left', {
                caption: (el_theme_settings.grid_icons.add) ? '' : js_lang_label.GENERIC_CREATE_BACKUP,
                title: js_lang_label.GENERIC_CREATE_BACKUP,
                buttonicon: "ui-icon-plus",
                buttonicon_p: (el_theme_settings.grid_icons.add) ? 'uigrid-add-btn add-icon-only' : 'uigrid-add-btn',
                onClickButton: function () {
                    var id_list_arr = $(this).getGridParam('selarrrow');
                    if (!id_list_arr || id_list_arr.length == 0) {
                        var label_elem = '<div />';
                        var label_text = js_lang_label.GENERIC_PLEASE_SELECT_ANY_RECORD_TO_TAKE_BACKUP;
                        var option_params = {
                            title: "Backup",
                            dialogClass: "dialog-confirm-box grid-backup-cnf",
                            buttons: [{
                                    text: js_lang_label.GENERIC_BACKUP,
                                    bt_type: 'backup',
                                    click: function () {
                                        $(this).remove();
                                    }
                                }]
                        }
                        jqueryUIdialogBox(label_elem, label_text, option_params);
                    } else {
                        var id_str = id_list_arr.join(",");
                        that.createTableBackup(id_str, 'backup_table');
                    }
                },
                position: "first",
                id: 'btn_top_backup'
            });
        }
        jQuery("#" + grid_id).navButtonAdd('#' + pager_id, {
            caption: (el_theme_settings.grid_icons.export) ? '' : js_lang_label.GENERIC_BACKUP_AND_DOWNLOAD,
            title: js_lang_label.GENERIC_BACKUP_AND_DOWNLOAD,
            buttonicon: "ui-icon-export",
            buttonicon_p: (el_theme_settings.grid_icons.export) ? 'uigrid-export-btn export-icon-only' : 'uigrid-export-btn',
            onClickButton: function () {
                var id_list_arr = $(this).getGridParam('selarrrow');
                if (!id_list_arr || id_list_arr.length == 0) {
                    var label_elem = '<div />';
                    var label_text = js_lang_label.GENERIC_PLEASE_SELECT_ANY_RECORD_TO_BACKUP_AND_DOWNLOAD;
                    var option_params = {
                        title: "Backup",
                        dialogClass: "dialog-confirm-box grid-backup-cnf",
                        buttons: [{
                                text: js_lang_label.GENERIC_BACKUP,
                                bt_type: 'backup',
                                click: function () {
                                    $(this).remove();
                                }
                            }]
                    }
                    jqueryUIdialogBox(label_elem, label_text, option_params);
                } else {
                    var id_str = id_list_arr.join(",");
                    that.createTableBackup(id_str, 'backup_download');
                }
            },
            position: "last",
            id: 'btn_bot_download',
            afterButtonId: "btn_bot_backup"
        });
        jQuery("#" + grid_id).navButtonAdd('#' + grid_id + '_toppager_left', {
            caption: (el_theme_settings.grid_icons.export) ? '' : js_lang_label.GENERIC_BACKUP_AND_DOWNLOAD,
            title: js_lang_label.GENERIC_BACKUP_AND_DOWNLOAD,
            buttonicon: "ui-icon-export",
            buttonicon_p: (el_theme_settings.grid_icons.export) ? 'uigrid-export-btn export-icon-only' : 'uigrid-export-btn',
            onClickButton: function () {
                var id_list_arr = $(this).getGridParam('selarrrow');
                if (!id_list_arr || id_list_arr.length == 0) {
                    var label_elem = '<div />';
                    var label_text = js_lang_label.GENERIC_PLEASE_SELECT_ANY_RECORD_TO_BACKUP_AND_DOWNLOAD;
                    var option_params = {
                        title: "Backup",
                        dialogClass: "dialog-confirm-box grid-backup-cnf",
                        buttons: [{
                                text: js_lang_label.GENERIC_BACKUP,
                                bt_type: 'backup',
                                click: function () {
                                    $(this).remove();
                                }
                            }]
                    }
                    jqueryUIdialogBox(label_elem, label_text, option_params);
                } else {
                    var id_str = id_list_arr.join(",");
                    that.createTableBackup(id_str, 'backup_download');
                }
            },
            position: "last",
            id: 'btn_top_download',
            afterButtonId: "btn_top_backup"
        });
        var orgViewModal = $.jgrid.viewModal;
        $.extend($.jgrid, {
            viewModal: function (selector, o) {
                if (selector == '#searchmodfbox_' + o.gid || selector == '#alertmod' || selector == "#delmod" + o.gid || selector == "#info_dialog") {
                    var of = jQuery("#gbox_" + el_tpl_settings.main_grid_id).offset();
                    var w = jQuery("#gbox_" + el_tpl_settings.main_grid_id).width();
                    var h = jQuery("#gbox_" + el_tpl_settings.main_grid_id).height();
                    var w1 = $(selector).width();
                    var h1 = $(selector).height();
                    $(selector).css({
                        'top': of.top + ((h - h1) / 2) - 40,
                        'left': 'calc(50% - ' + w1 / 2 + 'px)'
                    });
                }
                orgViewModal.call(this, selector, o);
            }
        });
        var oldInfoDialog = $.jgrid.info_dialog;
        $.extend($.jgrid, {
            info_dialog: function (caption, content, c_b, modalopt) {
                return oldInfoDialog.call(this, caption, content, c_b, modalopt);
            }
        });
    },
    createNewBackup: function () {
        $("#btype").val("full");
        var options = {
            url: el_grid_settings.save_url,
            beforeSubmit: showAdminAjaxRequest,
            success: function (respText, statText, xhr, $form) {
                var resArr = $.parseJSON(respText);
                responseAjaxDataSubmission(resArr);
                if (resArr.success == "0") {
                    return false;
                } else if (resArr.return_url != "") {
                    window.location.hash = resArr.return_url;
                }
            }
        };
        $('#frmbackupsave').ajaxSubmit(options);
        return false;
    },
    createTableBackup: function (id_str, type) {
        $("#id_arr").val(id_str);
        $("#btype").val(type);
        if (type == "backup_download") {
            $("#frmbackupsave").submit();
        } else if (type == "backup_table") {
            var options = {
                url: el_grid_settings.save_url,
                beforeSubmit: showAdminAjaxRequest,
                success: function (respText, statText, xhr, $form) {
                    var resArr = $.parseJSON(respText);
                    responseAjaxDataSubmission(resArr);
                    if (resArr.success == "0") {
                        return false;
                    } else if (resArr.return_url != "") {
                        window.location.hash = resArr.return_url;
                    }
                }
            };
            $('#frmbackupsave').ajaxSubmit(options);
            return false;
        }
    },
    downloadDBBackupFile: function (fname) {
        $("#fname").val(fname);
        $("#frmbackupdwnd").submit();
    }
}
function formatBackupFileSize(cval, opt, rowObj) {
    var size_str = cval + " KB";
    return size_str;
}
function formatBackupDownloadLink(cval, opt, rowObj) {
    var down_str = '';
    if (el_grid_settings.permit_view_btn == '1') {
        down_str = "<a href='javascript://' title='" + js_lang_label.GENERIC_DOWNLOAD_FILE + "' onclick='Project.modules.backup.downloadDBBackupFile(\"" + cval + "\");return false;'>"
        down_str += "<span class='icon16 entypo-icon-download'></span>";
        down_str += "</a>";
    } else {
        down_str = '<div class="errormsg"> N/A </div>';
    }
    return down_str;
}
Project.modules.backup.init();;
//related to charts
$(document).on("click", ".chart-search-icon", function () {
    var bdata, js_grid_id, cid;
    cid = $(this).attr("aria-chart-id");
    if (!DB_pivot_data_JSON[cid]) {
        if (!DB_data_list_JSON[cid]) {
            alert("Search not found..!");
            return false;
        } else {
            bdata = DB_data_list_JSON[cid];
        }
    } else {
        bdata = DB_pivot_data_JSON[cid];
    }

    js_grid_id = bdata['gridID'];
    $("#" + js_grid_id).jqGrid('searchGrid', {
        multipleSearch: true,
        width: 600,
        height: 275,
        closeOnEscape: true,
        modal: true,
        closeAfterSearch: true,
        onSearch: function () {
            DB_block_config_JSON[cid]['ajaxUpdate'] = "No";
            clearInterval(DB_block_config_JSON[cid]['clearID']);
        },
        onReset: function () {
            DB_block_config_JSON[cid]['ajaxUpdate'] = "No";
            clearInterval(DB_block_config_JSON[cid]['clearID']);
        }
    });
});
$(document).on("click", ".chart-refresh-icon", function () {
    var bdata, js_grid_id, cid, post_data;
    cid = $(this).attr("aria-chart-id");
    $("#tfilter_" + cid).attr("data-label-refresh", "true");
    setDateRangeFilterLabel(cid);
    if (DB_block_config_JSON[cid]['ajaxUpdate'] == "Yes") {
        var DASHBAORD_AUTOLOAD_URL = admin_url + cus_enc_url_json["autoload_dashboard"];
        $("#board_loader_icon_" + cid).show();
        $.ajax({
            url: DASHBAORD_AUTOLOAD_URL,
            type: 'POST',
            data: {
                "code": $("#vBoardCode_" + cid).val()
            },
            success: function (data) {
                if (data) {
                    clearInterval(DB_block_config_JSON[cid]['clearID']);
                    initDashBoardAutoLoad(cid);
                    autoLoadDashboardBlock(cid, data, DB_block_config_JSON[cid]['chartType']);
                }
            }
        });
    } else {
        if (!DB_pivot_data_JSON[cid]) {
            if (!DB_data_list_JSON[cid]) {
                alert("Filters not found..!");
                return false;
            } else {
                bdata = DB_data_list_JSON[cid];
            }
        } else {
            bdata = DB_pivot_data_JSON[cid];
        }
        js_grid_id = bdata['gridID'];
        $("#" + js_grid_id).jqGrid('setGridParam', {search: false, resetsearch: true});
        post_data = $("#" + js_grid_id).jqGrid('getGridParam', 'postData');
        $.extend(post_data, {filters: ""});
        $("#" + js_grid_id).trigger("reloadGrid", [{page: 1}]);
        DB_block_config_JSON[cid]['ajaxUpdate'] = "Yes";
    }
});
$(document).on("click", ".chart-back-link", function () {
    var cid = $(this).attr("aria-chart-id");
    var ctype = $("#chart_preview_" + cid).attr("aria-chart-type");
    generateBoardContent(cid, ctype, true);
});
$(document).on("change", ".daggr-filter", function () {
    var caggr = $(this).val();
    var cid = $(this).attr("aria-chart-id");
    var ctype = $("#chart_preview_" + cid).attr("aria-chart-type");
    $("#chart_preview_" + cid).attr("aria-chart-aggr", caggr);
    generateBoardContent(cid, ctype, true);
});
$(document).on("change", ".dpie-filter", function () {
    var cid = $(this).attr("aria-chart-id");
    var crow = $(this).attr("aria-chart-row");
    var ctype = $("#chart_preview_" + cid).attr("aria-chart-type");
    var caggr = $("#chart_preview_" + cid).attr("aria-chart-aggr");
    if (ctype == "donut") {
        var settings_arr = getDonutChartOptions(cid, caggr, crow);
        plotDonutChartDiagram(settings_arr);
    } else {
        var settings_arr = getPieChartOptions(cid, caggr, crow);
        plotPieChartDiagram(settings_arr);
    }
});
$(document).on("click", ".bar-chart-child", function () {
    var cid = $(this).attr("aria-chart-id");
    var crow = $(this).attr("aria-chart-row");
    var caggr = $("#chart_preview_" + cid).attr("aria-chart-aggr");
    $("#chart_preview_" + cid).attr("aria-chart-type", "bar");
    $("#dbacklink_" + cid).show();
    var settings_arr = getBarChartOptions(cid, caggr, crow);
    plotBarChartDiagram(settings_arr);
});
$(document).on("click", ".pie-chart-child", function () {
    var cid = $(this).attr("aria-chart-id");
    var crow = $(this).attr("aria-chart-row");
    var caggr = $("#chart_preview_" + cid).attr("aria-chart-aggr");
    $("#chart_preview_" + cid).attr("aria-chart-type", "pie");
    $("#dbacklink_" + cid).show();
    var settings_arr = getPieChartOptions(cid, caggr, crow);
    plotPieChartDiagram(settings_arr);
});
$(document).on("click", ".donut-chart-child", function () {
    var cid = $(this).attr("aria-chart-id");
    var crow = $(this).attr("aria-chart-row");
    var caggr = $("#chart_preview_" + cid).attr("aria-chart-aggr");
    $("#chart_preview_" + cid).attr("aria-chart-type", "donut");
    $("#dbacklink_" + cid).show();
    var settings_arr = getDonutChartOptions(cid, caggr, crow);
    plotDonutChartDiagram(settings_arr);
});
$(document).on("click", ".area-chart-child", function () {
    var cid = $(this).attr("aria-chart-id");
    var crow = $(this).attr("aria-chart-row");
    var caggr = $("#chart_preview_" + cid).attr("aria-chart-aggr");
    $("#chart_preview_" + cid).attr("aria-chart-type", "area");
    $("#dbacklink_" + cid).show();
    var settings_arr = getAreaChartOptions(cid, caggr, crow);
    plotAreaChartDiagram(settings_arr);
});
$(document).on("click", ".line-chart-child", function () {
    var cid = $(this).attr("aria-chart-id");
    var crow = $(this).attr("aria-chart-row");
    var caggr = $("#chart_preview_" + cid).attr("aria-chart-aggr");
    $("#chart_preview_" + cid).attr("aria-chart-type", "line");
    $("#dbacklink_" + cid).show();
    var settings_arr = getLineChartOptions(cid, caggr, crow);
    plotLineChartDiagram(settings_arr);
});
$(document).on("click", ".horizbar-chart-child", function () {
    var cid = $(this).attr("aria-chart-id");
    var crow = $(this).attr("aria-chart-row");
    var caggr = $("#chart_preview_" + cid).attr("aria-chart-aggr");
    $("#chart_preview_" + cid).attr("aria-chart-type", "horizbar");
    $("#dbacklink_" + cid).show();
    var settings_arr = getHorizontalBarChartOptions(cid, caggr, crow);
    plotHorizontalBarChartDiagram(settings_arr);
});
$(document).on("click", ".stackbar-chart-child", function () {
    var cid = $(this).attr("aria-chart-id");
    var crow = $(this).attr("aria-chart-row");
    var caggr = $("#chart_preview_" + cid).attr("aria-chart-aggr");
    $("#chart_preview_" + cid).attr("aria-chart-type", "stackbar");
    $("#dbacklink_" + cid).show();
    var settings_arr = getStackedBarChartOptions(cid, caggr, crow);
    plotStackedBarChartDiagram(settings_arr);
});
$(document).on("click", ".stackhorizbar-chart-child", function () {
    var cid = $(this).attr("aria-chart-id");
    var crow = $(this).attr("aria-chart-row");
    var caggr = $("#chart_preview_" + cid).attr("aria-chart-aggr");
    $("#chart_preview_" + cid).attr("aria-chart-type", "stackhorizbar");
    $("#dbacklink_" + cid).show();
    var settings_arr = getStackedHorizBarChartOptions(cid, caggr, crow);
    plotStackedHorizBarChartDiagram(settings_arr);
});
$(document).on("click", ".autoupdating-chart-child", function () {
    var cid = $(this).attr("aria-chart-id");
    var crow = $(this).attr("aria-chart-row");
    var caggr = $("#chart_preview_" + cid).attr("aria-chart-aggr");
    $("#chart_preview_" + cid).attr("aria-chart-type", "autoupdating");
    $("#dbacklink_" + cid).show();
    var settings_arr = getAutoUpdatingChartOptions(cid, caggr, crow);
    plotAutoUpdatingChartDiagram(settings_arr);
});
function initDashBoardSettings() {
    var hmrg, vmrg, twd, gwd, cpad, eht, ctime;
    hmrg = 5, vmrg = 5, cpad = 5, eht = 2;
    setTimeout(function () {
        $(".dash-board-item").each(function () {
            var lht, hht, cht, bht;
            lht = $(this).height();
            hht = $(this).find(".dash-board-header").height();
            cht = parseInt(lht) - parseInt(hht) - (2 * cpad) - eht;
            if ($(this).find("[id^='content_block']").hasClass("pivot-detail-view")) {
                bht = parseInt(lht) - parseInt(hht) - (2 * cpad) - eht;
            } else {
                bht = parseInt(lht) - parseInt(hht) - 1 - eht;
            }
            $(this).find("[id^='content_block']").height(bht);
            $(this).find("[id^='content_chart']").height(cht);
            $(this).find("[id^='chart_preview']").height(cht);
        });

        if ($("#sidebar").length) {
            twd = $("#dash_board_list").width();
        } else {
            twd = $("#main_content_div").width() - 35;
        }
        twd = Math.floor(twd / 6);
        gwd = twd - hmrg - vmrg;
        el_general_settings.dashboard_grid = $("#dash_board_list").gridster({
            widget_base_dimensions: [gwd, 50],
            max_cols: 6,
            min_cols: 1,
            max_size_x: 6,
            widget_margins: [hmrg, vmrg],
            draggable: {
                handle: '.dash-board-mover',
                start: function (e, ui, $widget) {
                    if (ctime) {
                        clearTimeout(ctime);
                    }
                },
                stop: function (e, ui, $widget) {
                    $("#widget_position_text").slideDown();
                    ctime = setTimeout(function () {
                        $("#widget_position_text").hide();
                    }, 200000);
                }
            }
        }).data('gridster');

        $(".dash-board-item").each(function () {
            var lht, hht, cht, bht;
            lht = $(this).height();
            hht = $(this).find(".dash-board-header").height();
            cht = parseInt(lht) - parseInt(hht) - (2 * cpad) - eht;
            if ($(this).find("[id^='content_block']").hasClass("pivot-detail-view")) {
                bht = parseInt(lht) - parseInt(hht) - (2 * cpad) - eht;
            } else {
                bht = parseInt(lht) - parseInt(hht) - 1 - eht;
            }
            $(this).find("[id^='content_block']").height(bht);
            $(this).find("[id^='content_chart']").height(cht);
            $(this).find("[id^='chart_preview']").height(cht);
        });

        for (var i in DB_pivot_data_JSON) {
            if (!DB_pivot_data_JSON[i]['dbID']) {
                continue;
            }
            resizeDashboardGrid(DB_pivot_data_JSON[i]['dbID']);
        }
        for (var i in DB_data_list_JSON) {
            if (!DB_data_list_JSON[i]['dbID']) {
                continue;
            }
            resizeDashboardGrid(DB_data_list_JSON[i]['dbID']);
        }
        setTimeout(function () {
            hideMainLoader();
        }, 200);
    }, 500);

    $("#widget_position_save").click(function () {
        var sarr = el_general_settings.dashboard_grid.serialize();
        var cobj = [], col, row, size_x, size_y, bid;
        for (var i in sarr) {
            row = sarr[i]['row'];
            col = sarr[i]['col'];
            size_x = sarr[i]['size_x'];
            size_y = sarr[i]['size_y'];
            bid = $("[id^='board_item'][data-row='" + row + "'][data-col='" + col + "'][data-sizex='" + size_x + "'][data-sizey='" + size_y + "']").find("input[name^='iDashBoardId']").val();
            cobj.push({"chart_id": bid, "chart_sequence": sarr[i]})
        }
        updateDashboardSequence(cobj);
    });

    $(window).bind('resize', function () {
        var chartResize = ['bar', 'pie', 'donut', 'area', 'line', 'horizbar', 'stackbar', 'stackhorizbar', 'autoupdating'];
        $("[id^='board_block']").each(function () {
            var type = $(this).attr("rel");
            var bid = $(this).attr("id").split("_")[2];
            if ($.inArray(type, chartResize) != "-1") {
                //generateBoardContent(bid, type, true);
            }
        });

    }).trigger("resize");

    $('.toggle-extra-options').click(function () {
        $('.wrapper-dropdown').removeClass('active');
        $('.dropdown').hide();
        var $js_wrp_id = $(this).attr('aria-id');
        $('#wrapper_dropdown_' + $js_wrp_id).addClass('active');
        $('#options_dropdown_' + $js_wrp_id).show();
    });

    $(document).click(function () {
        $('.wrapper-dropdown').removeClass('active');
        $('.dropdown').hide();
    });
}
function initDashBoardFilters() {
    for (var i in DB_block_config_JSON) {
        var bid = DB_block_config_JSON[i]['id'];
        if (DB_block_config_JSON[i]['dateFilter'] == "Yes") {
            var fld = DB_block_config_JSON[i]['filterField'];
            $("#dfilter_" + bid).show();
            $("#drefresh_" + bid).show();
            initFilterDSDateRangePicker(bid, fld);
        }
        if (DB_block_config_JSON[i]['autoUpdate'] == "Yes") {
            $("#drefresh_" + bid).show();
            DB_block_config_JSON[i]['clearID'] = initDashBoardAutoLoad(bid);
        }
    }
}
function initDashBoardAutoLoad(bid) {
    var sid = setInterval(function () {
        var code = bid;
        var DASHBAORD_AUTOLOAD_URL = admin_url + cus_enc_url_json["autoload_dashboard"];
        $("#board_loader_icon_" + code).show();
        $.ajax({
            url: DASHBAORD_AUTOLOAD_URL,
            type: 'POST',
            data: {
                "code": $("#vBoardCode_" + code).val()
            },
            success: function (data) {
                if (data) {
                    autoLoadDashboardBlock(code, data, DB_block_config_JSON[code]['chartType']);
                }
            }
        });
    }, el_tpl_settings.dashboard_auto_time);
    return sid;
}
function autoLoadDashboardBlock(bid, data, type) {
    switch (type) {
        case 'Grid List':
            DB_data_list_JSON[bid] = $.parseJSON(data);
            var js_grid_id = DB_data_list_JSON[bid]['gridID'];
            var result = $("#" + js_grid_id).jqGrid().GridDestroy();
            $("#dbgrid2_" + bid).html('<div id="dbpager2_' + bid + '"></div><table id="dblist2_' + bid + '"></table>');
            callDashBoardGridListing(DB_data_list_JSON[bid]);
            break;
        case 'Pivot':
            DB_pivot_data_JSON[bid] = $.parseJSON(data);
            var js_grid_id = DB_pivot_data_JSON[bid]['gridID'];
            var result = $("#" + js_grid_id).jqGrid().GridDestroy();
            $("#dbgrid2_" + bid).html('<div id="dbpager2_' + bid + '"></div><table id="dblist2_' + bid + '"></table>');
            callDashBoardPivotListing(DB_pivot_data_JSON[bid]);
            break;
        case 'Detail View':
            $("#content_block_" + bid).html(data);
            break;
    }
    $("#board_loader_icon_" + bid).hide();    
}
function initFilterDSDateRangePicker(bid, fld) {
    var date_fld, filter_val, filter_arr = [], d_ranges, d_months, d_weeks;
    date_fld = fld;
    filter_val = DB_block_config_JSON[bid]['filterValue'];
    if (filter_val) {
        filter_arr = filter_val.split(" to ");
    }
    d_ranges = getRangePickerQuickList();
    d_months = getRangePickerMonthNames();
    d_weeks = getRangePickerWeekNames();
    var options = {
        ranges: d_ranges,
        opens: 'left',
        timePicker: false,
        timePickerIncrement: 1,
        timePicker12Hour: true,
        showDropdowns: true,
        locale: {
            format: el_tpl_settings.admin_formats.date.moment,
            separator: ' to ',
            applyLabel: js_lang_label.GENERIC_GRID_SUBMIT,
            fromLabel: js_lang_label.GENERIC_FROM,
            toLabel: js_lang_label.GENERIC_TO,
            customRangeLabel: js_lang_label.GENERIC_CUSTOM_RANGE,
            daysOfWeek: d_weeks,
            monthNames: d_months,
            firstDay: 1
        },
        dateLimit: false,
        autoUpdateInput: false
    };
    if (filter_arr[0]) {
        options.startDate = moment(filter_arr[0], "YYYY-MM-DD").format(el_tpl_settings.admin_formats.date.moment);
        if (filter_arr[1]) {
            options.endDate = moment(filter_arr[1], "YYYY-MM-DD").format(el_tpl_settings.admin_formats.date.moment);
        } else {
            options.endDate = moment(filter_arr[0], "YYYY-MM-DD").format(el_tpl_settings.admin_formats.date.moment);
        }     
    }
    $("#dfilter_" + bid).daterangepicker(options);
    if (filter_arr[0]) {
        $("#tfilter_" + bid).attr("data-label-refresh", "true");
        setDateRangeFilterLabel(bid);
    }
    $("#dfilter_" + bid).on('apply.daterangepicker', function (ev, picker) {
        $("#tfilter_" + bid).attr("data-label-refresh", "false");
        filterDSBlockResponse(bid, date_fld, picker.startDate.format('YYYY-MM-DD'), picker.endDate.format('YYYY-MM-DD'));
        var txt_start = picker.startDate.format(el_tpl_settings.admin_formats.date.moment);
        var txt_end = picker.endDate.format(el_tpl_settings.admin_formats.date.moment);
        $("#tfilter_" + bid).html(txt_start + " to " + txt_end).show();
    });
    $("#dfilter_" + bid).on('cancel.daterangepicker', function (ev, picker) {
        $("#tfilter_" + bid).attr("data-label-refresh", "false");
        filterDSBlockResponse(bid, date_fld, '', '');
        $("#tfilter_" + bid).html("").hide();
    });
}
function setDateRangeFilterLabel(bid) {
    var filter_val, filter_arr = [];
    filter_val = DB_block_config_JSON[bid]['filterValue'];
    if (filter_val) {
        filter_arr = filter_val.split(" to ");
    }
    var lable_txt = '';
    if (filter_arr[0]) {
        lable_txt += moment(filter_arr[0], "YYYY-MM-DD").format(el_tpl_settings.admin_formats.date.moment);
        $('#dfilter_' + bid).data('daterangepicker').setStartDate(moment(filter_arr[0], "YYYY-MM-DD").format(el_tpl_settings.admin_formats.date.moment));
    }
    if (filter_arr[1]) {
        lable_txt += " to " + moment(filter_arr[1], "YYYY-MM-DD").format(el_tpl_settings.admin_formats.date.moment);
        $('#dfilter_' + bid).data('daterangepicker').setEndDate(moment(filter_arr[1], "YYYY-MM-DD").format(el_tpl_settings.admin_formats.date.moment));
    }
    $("#tfilter_" + bid).html(lable_txt).show();
}
function filterDSBlockResponse(bid, date_fld, from_date, to_date) {
    DB_block_config_JSON[bid]['ajaxUpdate'] = "Yes";
    clearInterval(DB_block_config_JSON[bid]['clearID']);
    var DASHBAORD_FILTER_URL = admin_url + cus_enc_url_json["filter_dashboard"];
    $("#board_loader_icon_" + bid).show();
    $.ajax({
        url: DASHBAORD_FILTER_URL,
        type: 'POST',
        data: {
            "code": $("#vBoardCode_" + bid).val(),
            "field": date_fld,
            "from_date": from_date,
            "to_date": to_date
        },
        success: function (data) {
            if (data) {
                autoLoadDashboardBlock(bid, data, DB_block_config_JSON[bid]['chartType']);
            }
        }
    });
}
function initSearchDSDatePicker(elem, opt) {
    var date_obj = {}, d_format;
    if (opt && opt['attr'] && opt['attr']['aria-grid-id']) {
        d_format = opt['attr']["aria-date-format"];
    } else {
        d_format = $(elem).attr("aria-date-format");
    }
    date_obj['dateFormat'] = d_format;
    activeDSSearchPicker($(elem), "date", date_obj);
}
function initSearchDSDateTimePicker(elem, opt) {
    var date_obj = {}, d_format, t_format, e_time, e_ampm;
    if (opt && opt['attr'] && opt['attr']['aria-grid-id']) {
        d_format = opt['attr']["aria-date-format"];
        t_format = opt['attr']['aria-time-format'];
        e_time = opt['attr']['aria-enable-sec'];
        e_ampm = opt['attr']['aria-enable-ampm'];
    } else {
        d_format = $(elem).attr("aria-date-format");
        t_format = $(elem).attr('aria-time-format');
        e_time = $(elem).attr('aria-enable-sec');
        e_ampm = $(elem).attr('aria-enable-ampm');
    }
    date_obj['dateFormat'] = d_format;
    date_obj['timeFormat'] = t_format;
    date_obj['showSecond'] = e_time;
    date_obj['ampm'] = e_ampm;
    activeDSSearchPicker($(elem), "dateTime", date_obj);
}
function initSearchDSTimePicker(elem, opt) {
    var date_obj = {}, t_format, e_time, e_ampm;
    if (opt && opt['attr'] && opt['attr']['aria-grid-id']) {
        t_format = opt['attr']['aria-time-format'];
        e_time = opt['attr']['aria-enable-sec'];
        e_ampm = opt['attr']['aria-enable-ampm'];
    } else {
        t_format = $(elem).attr('aria-time-format');
        e_time = $(elem).attr('aria-enable-sec');
        e_ampm = $(elem).attr('aria-enable-ampm');
    }
    date_obj['timeFormat'] = t_format;
    date_obj['showSecond'] = e_time;
    date_obj['ampm'] = e_ampm;
    activeDSSearchPicker($(elem), 'time', date_obj);
}
function activeDSSearchPicker(eleObj, type, jfmtArr) {
    switch (type) {
        case 'date' :
            var min_max_obj = {};
            var base_obj = {
                dateFormat: jfmtArr['dateFormat'],
                showOn: 'focus',
                changeMonth: true,
                changeYear: true,
                yearRange: 'c-100:c+100',
                onClose: function (dateText, inst) {
                    $(eleObj).trigger('change');
                }
            }
            var final_obj = $.extend({}, min_max_obj, base_obj);
            $(eleObj).datepicker(final_obj);
            break;
        case 'time' :
            $(eleObj).timepicker({
                timeFormat: jfmtArr['timeFormat'],
                showSecond: (jfmtArr['showSecond'] == "true" || jfmtArr['showSecond'] == '1' || jfmtArr['showSecond'] === true) ? true : false,
                ampm: (jfmtArr['ampm'] == "true" || jfmtArr['ampm'] == '1' || jfmtArr['ampm'] === true) ? true : '',
                showOn: 'focus',
                onClose: function (dateText, inst) {
                    $(eleObj).trigger('change');
                }
            });
            break;
        case 'dateTime' :
            var min_max_obj = {};
            var base_obj = {
                dateFormat: jfmtArr['dateFormat'],
                timeFormat: jfmtArr['timeFormat'],
                showSecond: (jfmtArr['showSecond'] == "true" || jfmtArr['showSecond'] == '1' || jfmtArr['showSecond'] === true) ? true : false,
                ampm: (jfmtArr['ampm'] == "true" || jfmtArr['ampm'] == '1' || jfmtArr['ampm'] === true) ? true : '',
                showOn: 'focus',
                changeMonth: true,
                changeYear: true,
                yearRange: 'c-100:c+100',
                onClose: function (dateText, inst) {
                    $(eleObj).trigger('change');
                }
            }
            var final_obj = $.extend({}, min_max_obj, base_obj);
            $(eleObj).datetimepicker(final_obj);
            break;
    }
    if (el_general_settings.mobile_platform) {
        $(eleObj).attr('readonly', true);
    }
}
function updateDashboardSequence(cobj) {
    var DASHBAORD_SEQUENCE_URL = admin_url + cus_enc_url_json["dashboard_sequence"];
    $.ajax({
        url: DASHBAORD_SEQUENCE_URL,
        type: 'POST',
        data: {
            "id": $("#iDashBoardPageId").val(),
            "tab": $("#iDashBoardTabId").val(),
            "obj": cobj,
            "type": "block_sequence"
        },
        success: function (data) {
            $("#widget_position_text").slideUp();
            var res_arr = $.parseJSON(data);
            var jmgcls = 1;
            if (res_arr.success == "0") {
                jmgcls = 0;
            }
            Project.setMessage(res_arr.message, jmgcls);
        }
    });
}
function updateDashboardChart(cobj) {
    var DASHBAORD_SEQUENCE_URL = admin_url + cus_enc_url_json["dashboard_sequence"];
    $.ajax({
        url: DASHBAORD_SEQUENCE_URL,
        type: 'POST',
        data: {
            "id": $("#iDashBoardPageId").val(),
            "tab": $("#iDashBoardTabId").val(),
            "obj": cobj,
            "type": "block_type"
        },
        success: function (data) {

        }
    });
}

function toggleBoardContent(bid, type) {
    generateBoardContent(bid, type);
    updateDashboardChart([{"chart_id": bid, "chart_type": type}])
}
function generateBoardContent(bid, type, flag) {
    if (type == $("#board_block_" + bid).attr("rel") && flag !== true) {
        return false;
    }
    $("#board_block_" + bid).attr("rel", type);
    if (!DB_pivot_data_JSON[bid]) {
        $('#chart_preview_' + bid).html('<div class="errormsg" align="center">' + js_lang_label.GENERIC_NO_DATA_FOUND_C46_C46_C33 + '</div>')
        return false;
    }

    $("#dbacklink_" + bid).hide();
    $("#dpiecombo_" + bid).hide();
    if (!$("#dpieselect_" + bid).length) {
        makePieCategoryCombo(bid);
    }
    if (!$("#daggrselect_" + bid).length) {
        makeAggrCategoryCombo(bid);
    }
    if ($.inArray(type, ['bar', 'pie', 'donut', 'area', 'line', 'horizbar', 'stackbar', 'stackhorizbar', 'autoupdating']) != "-1") {
        $("#chart_preview_" + bid).attr("aria-chart-type", type);
        $("#daggrcombo_" + bid).show();
    } else {
        $("#daggrcombo_" + bid).hide();
    }
    if (DB_pivot_data_JSON[bid]['searchMode'] && DB_pivot_data_JSON[bid]['searchMode'] == "Yes") {
        $("#dsearch_" + bid).show();
        $("#drefresh_" + bid).show();
    } else {
        $("#dsearch_" + bid).hide();
        $("#drefresh_" + bid).hide();
    }
    if (DB_pivot_data_JSON[bid]['dateFilter'] && DB_pivot_data_JSON[bid]['dateFilter'] == "Yes") {
        $("#dfilter_" + bid).show();
        $("#drefresh_" + bid).show();
    } else {
        $("#dfilter_" + bid).hide();
        $("#drefresh_" + bid).hide();
    }
    if (DB_block_config_JSON[bid]['autoUpdate'] == "Yes") {
        $("#drefresh_" + bid).show();
    }
    var settings_arr, aggr;
    aggr = $("#chart_preview_" + bid).attr("aria-chart-aggr");
    switch (type) {
        case 'pivot':
            $("#content_chart_" + bid).hide();
            $("#content_block_" + bid).show();
            resizeDashboardGrid(bid);
            break;
        case 'bar':
            $("#content_block_" + bid).hide();
            $("#content_chart_" + bid).show();
            settings_arr = getBarChartOptions(bid, aggr);
            plotBarChartDiagram(settings_arr);
            break;
        case 'pie':
            $("#content_block_" + bid).hide();
            $("#content_chart_" + bid).show();
            settings_arr = getPieChartOptions(bid, aggr);
            plotPieChartDiagram(settings_arr);
            break;
        case 'donut':
            $("#content_block_" + bid).hide();
            $("#content_chart_" + bid).show();
            settings_arr = getDonutChartOptions(bid, aggr);
            plotDonutChartDiagram(settings_arr);
            break;
        case 'area':
            $("#content_block_" + bid).hide();
            $("#content_chart_" + bid).show();
            settings_arr = getAreaChartOptions(bid, aggr);
            plotAreaChartDiagram(settings_arr);
            break;
        case 'line':
            $("#content_block_" + bid).hide();
            $("#content_chart_" + bid).show();
            settings_arr = getLineChartOptions(bid, aggr);
            plotLineChartDiagram(settings_arr);
            break;
        case 'horizbar':
            $("#content_block_" + bid).hide();
            $("#content_chart_" + bid).show();
            settings_arr = getHorizontalBarChartOptions(bid, aggr);
            plotHorizontalBarChartDiagram(settings_arr);
            break;
        case 'stackbar':
            $("#content_block_" + bid).hide();
            $("#content_chart_" + bid).show();
            settings_arr = getStackedBarChartOptions(bid, aggr);
            plotStackedBarChartDiagram(settings_arr);
            break;
        case 'stackhorizbar':
            $("#content_block_" + bid).hide();
            $("#content_chart_" + bid).show();
            settings_arr = getStackedHorizBarChartOptions(bid, aggr);
            plotStackedHorizBarChartDiagram(settings_arr);
            break;
        case 'autoupdating':
            $("#content_block_" + bid).hide();
            $("#content_chart_" + bid).show();
            settings_arr = getAutoUpdatingChartOptions(bid, aggr);
            plotAutoUpdatingChartDiagram(settings_arr);
            break;
    }
}

function makePieCategoryCombo(bid) {
    if (!DB_pivot_data_JSON[bid]) {
        return false;
    }
    var bdata = DB_pivot_data_JSON[bid];
    var js_grid_id = bdata['gridID'];
    var result = $("#" + js_grid_id).jqGrid("getGridParam", "dataSet");
    if (!result) {
        return false;
    }
    if (!result.columns) {
        return false;
    }
    var columns = result.columns;
    var str = '<select name="dpieselect_' + bid + '" id="dpieselect_' + bid + '" class="dfilter-combo dpie-filter" aria-chart-id="' + bid + '">';
    for (var i in columns) {
        str += '<option value="' + columns[i].titleText + '">' + columns[i].titleText + '</option>';
    }
    str += '</select>';
    $("#dpiecombo_" + bid).html(str);
    return true;
}
function makeAggrCategoryCombo(bid) {
    if (!DB_pivot_data_JSON[bid]) {
        return false;
    }
    var bdata = DB_pivot_data_JSON[bid];
    var js_grid_id = bdata['gridID'];
    var result = $("#" + js_grid_id).jqGrid("getGridParam", "dataSet");
    if (!result) {
        return false;
    }
    if (!result.sums || result.sums.length < 2) {
        return false;
    }
    var sums = result.sums;
    var str = '<select name="daggrselect_' + bid + '" id="daggrselect_' + bid + '" class="dfilter-combo daggr-filter" aria-chart-id="' + bid + '">';
    for (var i in sums) {
        str += '<option value="' + i + '">' + sums[i].label + '</option>';
    }
    str += '</select>';
    $("#daggrcombo_" + bid).html(str);
    return true;
}

function getBarChartOptions(bid, aggr, filt) {
    try {
        if (!DB_pivot_data_JSON[bid]) {
            throw '-1';
        }
        var bdata = DB_pivot_data_JSON[bid];
        var js_grid_id = bdata['gridID'];
        var result = $("#" + js_grid_id).jqGrid("getGridParam", "dataSet");
        if (!result) {
            throw '-2';
        }
        if (!result.rows) {
            throw '-3';
        }
        aggr = (aggr == 1) ? aggr : 0;
        var js_pivot_mode = bdata['pivotMode'];
        var js_aggr_mode = bdata['aggrMode'];
        var js_x_dimension = bdata['xDimension'];
        var js_aggregates = bdata['aggregates'];
        var rsums = result.sums;
        var settings = {}, oparams = {}, iparams = {}, data = [], pdata, gdata, title, title_link, value, dkey = false;
        var xaixs_label, yaxis_label, show_legend = true, xaxis_ticks = [];
        if (!chartCtrlActivity("bar", "legend")) {
            show_legend = false;
        }
        if (chartCtrlActivity("bar", "xaxis")) {
            xaixs_label = js_x_dimension[0]['label'];
        }
        if (chartCtrlActivity("bar", "yaxis")) {
            yaxis_label = js_aggregates[aggr]['rowTotalsText'];
        }
        oparams = {
            xaxis: {
                axisLabel: xaixs_label,
                tickLength: 0
            },
            yaxis: {
                axisLabel: yaxis_label,
                fmatter: rsums[aggr]['formatter'],
                tickFormatter: function (item, y) {
                    if (y.options.fmatter) {
                        return getChartDataFormat(y.options.fmatter, item);
                    } else {
                        return item;
                    }
                }
            },
            tooltipOpts: {
                fmatter: rsums[aggr]['formatter']
            },
            legend: {
                position: chartCtrlActivity("bar", "position"),
                show: show_legend
            }
        }

        if (bdata['chartOptions'] && bdata['chartOptions']['barChart']) {
            if ("xaxisAngle" in bdata['chartOptions']['barChart']) {
                oparams.xaxis.rotateTicks = parseInt(bdata['chartOptions']['barChart']['xaxisAngle']);
            }
        }

        if (js_pivot_mode == "2R1C") {
            if (!result.columns) {
                throw '-3';
            }
            gdata = result.columns;
            var ticks = [], temp = [], rc, dd = 0, cd = 1, c, d;
            for (var i in gdata) {
                d = [];
                c = gdata[i].titleText;
                dd = 0;
                if (filt) {
                    if (!result.rows[filt] || !result.rows[filt].children) {
                        continue;
                    }
                    dkey = true;
                    pdata = result.rows[filt].children;
                } else {
                    pdata = result.rows;
                }
                for (var j in pdata) {
                    var rc = pdata[j].columns;
                    value = (rc[c] && rc[c][aggr]) ? rc[c][aggr] : 0;
                    d.push([dd, value]);
                    if (!$.isArray(temp[dd])) {
                        title = (pdata[j].titleText) ? pdata[j].titleText : "";
                        if (dkey === true) {
                            title_link = title;
                        } else {
                            title_link = '<a href="javascript://" title="' + title + '" aria-chart-id="' + bid + '" aria-chart-row="' + j + '" class="bar-chart-child chart-parent-link">' + title + '</a>';
                        }
                        temp[dd] = [j, title_link];
                    }
                    dd++;
                }
                data.push({
                    label: c,
                    data: d,
                    bars: {order: cd}
                });
                cd++;
            }
            for (var k in temp) {
                ticks.push(temp[k]);
            }
            iparams = {
                bars: {
                    barWidth: 0.2
                },
                xaxis: {
                    ticks: ticks
                },
                tooltipOpts: {
                    content: function (label, x, y, item, fmt) {
                        return label + " - " + getChartDataFormat(fmt, y);
                    }
                }
            }
        } else if (js_pivot_mode == "2R") {
            if (filt) {
                if (!result.rows[filt] || !result.rows[filt].children) {
                    throw '-3';
                }
                pdata = result.rows[filt].children;
                dkey = true;
            } else {
                pdata = result.rows
            }
            for (var i in pdata) {
                title = (pdata[i].titleText) ? pdata[i].titleText : '';
                value = (pdata[i].values[aggr]) ? pdata[i].values[aggr] : 0;
                if (dkey === true) {
                    title_link = title;
                } else {
                    title_link = '<a href="javascript://" title="' + title + '" aria-chart-id="' + bid + '" aria-chart-row="' + i + '" class="bar-chart-child chart-parent-link">' + title + '</a>';
                }
                //data.push([title_link, value]);
                data.push({
                    "data": [[i, value]]
                });
                xaxis_ticks.push([i, title_link]);
            }
            // data = [data];
            iparams = {
                bars: {
                    barWidth: 0.4
                },
                xaxis: {
                    mode: "categories",
                    ticks: xaxis_ticks
                },
                tooltipOpts: {
                    content: function (label, x, y, item, fmt) {
                        return getChartDataFormat(fmt, y);
                    }
                }
            }
        } else if (js_pivot_mode == "1R1C") {
            if (!result.columns) {
                throw '-3';
            }
            gdata = result.columns;
            var ticks = [], temp = [], rc, dd = 0, cd = 1, c, d;
            for (var i in gdata) {
                d = [];
                c = gdata[i].titleText;
                dd = 0;
                for (var j in result.rows) {
                    rc = result.rows[j].columns;
                    title = (result.rows[j].titleText) ? result.rows[j].titleText : "";
                    value = (rc[c] && rc[c][aggr]) ? rc[c][aggr] : 0;
                    d.push([dd, value]);
                    if (!$.isArray(temp[dd])) {
                        temp[dd] = [j, title];
                    }
                    dd++;
                }
                data.push({
                    label: c,
                    data: d,
                    bars: {order: cd}
                });
                cd++;
            }
            for (var k in temp) {
                ticks.push(temp[k]);
            }
            iparams = {
                bars: {
                    barWidth: 0.2
                },
                xaxis: {
                    ticks: ticks
                },
                tooltipOpts: {
                    content: function (label, x, y, item, fmt) {
                        return label + " - " + getChartDataFormat(fmt, y);
                    }
                }
            }
        } else {
            pdata = result.rows;
            for (var i in pdata) {
                title = (pdata[i].titleText) ? pdata[i].titleText : '';
                value = (pdata[i].values[aggr]) ? pdata[i].values[aggr] : 0;
                //data.push([title, value]);
                data.push({
                    "data": [[i, value]]
                });
                xaxis_ticks.push([i, title]);
            }
            //data = [data];
            iparams = {
                bars: {
                    barWidth: 0.4
                },
                xaxis: {
                    mode: "categories",
                    ticks: xaxis_ticks
                },
                tooltipOpts: {
                    content: function (label, x, y, item, fmt) {
                        return getChartDataFormat(fmt, y);
                    }
                }
            }
        }

        settings['params'] = $.extend(true, oparams, iparams);
        settings['colors'] = getDSChartColors(bdata);
        settings['data'] = data;
        settings['id'] = bid;

        return settings;
    } catch (e) {
        $('#chart_preview_' + bid).html('<div class="errormsg" align="center">' + js_lang_label.GENERIC_NO_DATA_FOUND + '</div>')
        return false;
    }
}
function getPieChartOptions(bid, aggr, filt) {
    try {
        if (!DB_pivot_data_JSON[bid]) {
            throw '-1';
        }
        var bdata = DB_pivot_data_JSON[bid];
        var js_grid_id = bdata['gridID'];
        var result = $("#" + js_grid_id).jqGrid("getGridParam", "dataSet");
        if (!result) {
            throw '-2';
        }
        if (!result.rows) {
            throw '-3';
        }
        aggr = (aggr == 1) ? aggr : 0;
        var js_pivot_mode = bdata['pivotMode'];
        var js_aggr_mode = bdata['aggrMode'];
        var js_x_dimension = bdata['xDimension'];
        var js_aggregates = bdata['aggregates'];
        var rsums = result.sums;
        var settings = {}, oparams = {}, iparams = {}, data = [], pdata, gdata, title, title_link, value, dkey = false, pval;
        var show_label = true, label_style, show_legend = true;

        if (!chartCtrlActivity("pie", "legend")) {
            show_legend = false;
        }
        if (!chartCtrlActivity("pie", "label")) {
            show_label = false;
        }

        oparams = {
            tooltipOpts: {
                fmatter: rsums[aggr]['formatter']
            },
            legend: {
                position: chartCtrlActivity("pie", "position"),
                show: show_legend
            },
            series: {
                pie: {
                    label: {
                        show: show_label,
                        radius: (chartCtrlActivity("pie", "style") == "s2") ? 3 / 4 : 1
                    }
                },
                fmatter: rsums[aggr]['formatter']
            }
        }

        if (js_pivot_mode == "2R1C") {
            if (!result.columns) {
                throw '-3';
            }
            var rc, c;
            $("#dpiecombo_" + bid).show();
            $("#dpieselect_" + bid).attr("aria-chart-row", filt);
            c = $("#dpieselect_" + bid).val();
            if (filt) {
                if (!result.rows[filt] || !result.rows[filt].children) {
                    throw '-3';
                }
                dkey = true;
                pdata = result.rows[filt].children;
            } else {
                pdata = result.rows;
            }
            for (var j in pdata) {
                rc = pdata[j].columns;
                value = (rc[c] && rc[c][aggr]) ? rc[c][aggr] : 0;
                title = (pdata[j].titleText) ? pdata[j].titleText : "";
                if (dkey === true) {
                    title_link = title;
                } else {
                    title_link = '<a href="javascript://" title="' + title + '" aria-chart-id="' + bid + '" aria-chart-row="' + j + '" class="pie-chart-child chart-parent-link">' + title + '</a>';
                }
                data.push({
                    label: title_link,
                    data: value
                });
            }
        } else if (js_pivot_mode == "2R") {
            if (filt) {
                if (!result.rows[filt] || !result.rows[filt].children) {
                    throw '-3';
                }
                pdata = result.rows[filt].children;
                dkey = true;
            } else {
                pdata = result.rows
            }
            for (var i in pdata) {
                title = (pdata[i].titleText) ? pdata[i].titleText : '';
                value = (pdata[i].values[aggr]) ? pdata[i].values[aggr] : 0;
                if (dkey === true) {
                    title_link = title;
                } else {
                    title_link = '<a href="javascript://" title="' + title + '" aria-chart-id="' + bid + '" aria-chart-row="' + i + '" class="pie-chart-child chart-parent-link">' + title + '</a>';
                }
                data.push({
                    "label": title_link,
                    "data": value
                });
            }
        } else if (js_pivot_mode == "1R1C") {
            if (!result.columns) {
                throw '-3';
            }
            var rc, c;
            $("#dpiecombo_" + bid).show();
            $("#dpieselect_" + bid).attr("aria-chart-row", filt);
            c = $("#dpieselect_" + bid).val();
            for (var j in result.rows) {
                rc = result.rows[j].columns;
                title = (result.rows[j].titleText) ? result.rows[j].titleText : "";
                value = (rc[c] && rc[c][aggr]) ? rc[c][aggr] : 0;
                data.push({
                    label: title,
                    data: value
                });
            }
        } else {
            pdata = result.rows;
            for (var i in pdata) {
                title = (pdata[i].titleText) ? pdata[i].titleText : '';
                value = (pdata[i].values[aggr]) ? pdata[i].values[aggr] : 0;
                data.push({
                    "label": title,
                    "data": value
                });
            }
        }

        settings['params'] = $.extend(true, oparams, iparams);
        settings['colors'] = getDSChartColors(bdata);
        settings['data'] = data;
        settings['id'] = bid;

        return settings;
    } catch (e) {
        $('#chart_preview_' + bid).html('<div class="errormsg" align="center">' + js_lang_label.GENERIC_NO_DATA_FOUND + '</div>')
        return false;
    }
}
function getDonutChartOptions(bid, aggr, filt) {
    try {
        if (!DB_pivot_data_JSON[bid]) {
            throw '-1';
        }
        var bdata = DB_pivot_data_JSON[bid];
        var js_grid_id = bdata['gridID'];
        var result = $("#" + js_grid_id).jqGrid("getGridParam", "dataSet");
        if (!result) {
            throw '-2';
        }
        if (!result.rows) {
            throw '-3';
        }
        aggr = (aggr == 1) ? aggr : 0;
        var js_pivot_mode = bdata['pivotMode'];
        var js_aggr_mode = bdata['aggrMode'];
        var js_x_dimension = bdata['xDimension'];
        var js_aggregates = bdata['aggregates'];
        var rsums = result.sums;
        var settings = {}, oparams = {}, iparams = {}, data = [], pdata, gdata, title, title_link, value, dkey = false, pval;
        var show_label = true, label_style, show_legend = true;

        if (!chartCtrlActivity("donut", "legend")) {
            show_legend = false;
        }
        if (!chartCtrlActivity("donut", "label")) {
            show_label = false;
        }

        oparams = {
            tooltipOpts: {
                fmatter: rsums[aggr]['formatter']
            },
            legend: {
                position: chartCtrlActivity("donut", "position"),
                show: show_legend
            },
            series: {
                pie: {
                    label: {
                        show: show_label,
                        radius: (chartCtrlActivity("donut", "style") == "s2") ? 3 / 4 : 1
                    }
                },
                fmatter: rsums[aggr]['formatter']
            }
        }

        if (js_pivot_mode == "2R1C") {
            if (!result.columns) {
                throw '-3';
            }
            var rc, c;
            $("#dpiecombo_" + bid).show();
            $("#dpieselect_" + bid).attr("aria-chart-row", filt);
            c = $("#dpieselect_" + bid).val();
            if (filt) {
                if (!result.rows[filt] || !result.rows[filt].children) {
                    throw '-3';
                }
                dkey = true;
                pdata = result.rows[filt].children;
            } else {
                pdata = result.rows;
            }
            for (var j in pdata) {
                rc = pdata[j].columns;
                value = (rc[c] && rc[c][aggr]) ? rc[c][aggr] : 0;
                title = (pdata[j].titleText) ? pdata[j].titleText : "";
                if (dkey === true) {
                    title_link = title;
                } else {
                    title_link = '<a href="javascript://" title="' + title + '" aria-chart-id="' + bid + '" aria-chart-row="' + j + '" class="donut-chart-child chart-parent-link">' + title + '</a>';
                }
                data.push({
                    label: title_link,
                    data: value
                });
            }
        } else if (js_pivot_mode == "2R") {
            if (filt) {
                if (!result.rows[filt] || !result.rows[filt].children) {
                    throw '-3';
                }
                pdata = result.rows[filt].children;
                dkey = true;
            } else {
                pdata = result.rows
            }
            for (var i in pdata) {
                title = (pdata[i].titleText) ? pdata[i].titleText : '';
                value = (pdata[i].values[aggr]) ? pdata[i].values[aggr] : 0;
                if (dkey === true) {
                    title_link = title;
                } else {
                    title_link = '<a href="javascript://" title="' + title + '" aria-chart-id="' + bid + '" aria-chart-row="' + i + '" class="donut-chart-child chart-parent-link">' + title + '</a>';
                }
                data.push({
                    "label": title_link,
                    "data": value
                });
            }
        } else if (js_pivot_mode == "1R1C") {
            if (!result.columns) {
                throw '-3';
            }
            var rc, c;
            $("#dpiecombo_" + bid).show();
            $("#dpieselect_" + bid).attr("aria-chart-row", filt);
            c = $("#dpieselect_" + bid).val();
            for (var j in result.rows) {
                rc = result.rows[j].columns;
                title = (result.rows[j].titleText) ? result.rows[j].titleText : "";
                value = (rc[c] && rc[c][aggr]) ? rc[c][aggr] : 0;
                data.push({
                    label: title,
                    data: value
                });
            }
        } else {
            pdata = result.rows;
            for (var i in pdata) {
                title = (pdata[i].titleText) ? pdata[i].titleText : '';
                value = (pdata[i].values[aggr]) ? pdata[i].values[aggr] : 0;
                data.push({
                    "label": title,
                    "data": value
                });
            }
        }

        settings['params'] = $.extend(true, oparams, iparams);
        settings['colors'] = getDSChartColors(bdata);
        settings['data'] = data;
        settings['id'] = bid;

        return settings;
    } catch (e) {
        $('#chart_preview_' + bid).html('<div class="errormsg" align="center">' + js_lang_label.GENERIC_NO_DATA_FOUND + '</div>')
        return false;
    }
}
function getAreaChartOptions(bid, aggr, filt) {
    try {
        if (!DB_pivot_data_JSON[bid]) {
            throw '-1';
        }
        var bdata = DB_pivot_data_JSON[bid];
        var js_grid_id = bdata['gridID'];
        var result = $("#" + js_grid_id).jqGrid("getGridParam", "dataSet");
        if (!result) {
            throw '-2';
        }
        if (!result.rows) {
            throw '-3';
        }
        aggr = (aggr == 1) ? aggr : 0;
        var js_pivot_mode = bdata['pivotMode'];
        var js_aggr_mode = bdata['aggrMode'];
        var js_x_dimension = bdata['xDimension'];
        var js_aggregates = bdata['aggregates'];
        var rsums = result.sums;
        var settings = {}, oparams = {}, iparams = {}, data = [], ticks = [], pdata, gdata, title, title_link, value, dkey = false;
        var xaixs_label, yaxis_label, show_legend = true;

        if (!chartCtrlActivity("area", "legend")) {
            show_legend = false;
        }
        if (chartCtrlActivity("area", "xaxis")) {
            xaixs_label = js_x_dimension[0]['label'];
        }
        if (chartCtrlActivity("area", "yaxis")) {
            yaxis_label = js_aggregates[aggr]['rowTotalsText'];
        }
        oparams = {
            xaxis: {
                axisLabel: xaixs_label
            },
            yaxis: {
                axisLabel: yaxis_label,
                fmatter: rsums[aggr]['formatter'],
                tickFormatter: function (item, y) {
                    if (y.options.fmatter) {
                        return getChartDataFormat(y.options.fmatter, item);
                    } else {
                        return item;
                    }
                }
            },
            tooltipOpts: {
                fmatter: rsums[aggr]['formatter']
            },
            legend: {
                position: chartCtrlActivity("area", "position"),
                show: show_legend
            }
        }

        if (js_pivot_mode == "2R1C") {
            if (!result.columns) {
                throw '-3';
            }
            gdata = result.columns;
            var temp = [], rc, dd = 0, cd = 1, c, d;
            for (var i in gdata) {
                d = [];
                c = gdata[i].titleText;
                dd = 0;
                if (filt) {
                    if (!result.rows[filt] || !result.rows[filt].children) {
                        continue;
                    }
                    dkey = true;
                    pdata = result.rows[filt].children;
                } else {
                    pdata = result.rows;
                }
                for (var j in pdata) {
                    var rc = pdata[j].columns;
                    value = (rc[c] && rc[c][aggr]) ? rc[c][aggr] : 0;
                    d.push([dd, value]);
                    if (!$.isArray(temp[dd])) {
                        title = (pdata[j].titleText) ? pdata[j].titleText : "";
                        if (dkey === true) {
                            title_link = title;
                        } else {
                            title_link = '<a href="javascript://" title="' + title + '" aria-chart-id="' + bid + '" aria-chart-row="' + j + '" class="area-chart-child chart-parent-link">' + title + '</a>';
                        }
                        temp[dd] = [j, title_link];
                    }
                    dd++;
                }
                data.push({
                    label: c,
                    data: d
                });
                cd++;
            }
            for (var k in temp) {
                ticks.push(temp[k]);
            }
            iparams = {
                xaxis: {
                    ticks: ticks
                },
                tooltipOpts: {
                    content: function (label, x, y, item, fmt) {
                        return label + " - " + getChartDataFormat(fmt, y);
                    }
                }
            }
        } else if (js_pivot_mode == "2R") {
            var d = [];
            if (filt) {
                if (!result.rows[filt] || !result.rows[filt].children) {
                    throw '-3';
                }
                pdata = result.rows[filt].children;
                dkey = true;
            } else {
                pdata = result.rows
            }
            for (var i in pdata) {
                title = (pdata[i].titleText) ? pdata[i].titleText : '';
                value = (pdata[i].values[aggr]) ? pdata[i].values[aggr] : 0;
                if (dkey === true) {
                    title_link = title;
                } else {
                    title_link = '<a href="javascript://" title="' + title + '" aria-chart-id="' + bid + '" aria-chart-row="' + i + '" class="area-chart-child chart-parent-link">' + title + '</a>';
                }
                d.push([i, value])
                ticks.push([i, title_link]);
            }
            data = [{
                    data: d
                }];
            iparams = {
                xaxis: {
                    ticks: ticks
                },
                tooltipOpts: {
                    content: function (label, x, y, item, fmt) {
                        return getChartDataFormat(fmt, y);
                    }
                }
            }
        } else if (js_pivot_mode == "1R1C") {
            if (!result.columns) {
                throw '-3';
            }
            gdata = result.columns;
            var temp = [], rc, dd = 0, cd = 1, c, d;
            for (var i in gdata) {
                d = [];
                c = gdata[i].titleText;
                dd = 0;
                for (var j in result.rows) {
                    rc = result.rows[j].columns;
                    title = (result.rows[j].titleText) ? result.rows[j].titleText : "";
                    value = (rc[c] && rc[c][aggr]) ? rc[c][aggr] : 0;
                    d.push([dd, value]);
                    if (!$.isArray(temp[dd])) {
                        temp[dd] = [j, title];
                    }
                    dd++;
                }
                data.push({
                    label: c,
                    data: d
                });
                cd++;
            }
            for (var k in temp) {
                ticks.push(temp[k]);
            }
            iparams = {
                xaxis: {
                    ticks: ticks
                },
                tooltipOpts: {
                    content: function (label, x, y, item, fmt) {
                        return label + " - " + getChartDataFormat(fmt, y);
                    }
                }
            }
        } else {
            var d = [];
            pdata = result.rows;
            for (var i in pdata) {
                title = (pdata[i].titleText) ? pdata[i].titleText : '';
                value = (pdata[i].values[aggr]) ? pdata[i].values[aggr] : 0;
                d.push([i, value])
                ticks.push([i, title]);
            }
            data = [{
                    data: d
                }];

            iparams = {
                xaxis: {
                    ticks: ticks
                },
                tooltipOpts: {
                    content: function (label, x, y, item, fmt) {
                        return getChartDataFormat(fmt, y);
                    }
                }
            }
        }

        settings['params'] = $.extend(true, oparams, iparams);
        settings['colors'] = getDSChartColors(bdata);
        settings['data'] = data;
        settings['id'] = bid;

        return settings;
    } catch (e) {
        $('#chart_preview_' + bid).html('<div class="errormsg" align="center">' + js_lang_label.GENERIC_NO_DATA_FOUND + '</div>')
        return false;
    }
}
function getLineChartOptions(bid, aggr, filt) {
    try {
        if (!DB_pivot_data_JSON[bid]) {
            throw '-1';
        }
        var bdata = DB_pivot_data_JSON[bid];
        var js_grid_id = bdata['gridID'];
        var result = $("#" + js_grid_id).jqGrid("getGridParam", "dataSet");
        if (!result) {
            throw '-2';
        }
        if (!result.rows) {
            throw '-3';
        }
        aggr = (aggr == 1) ? aggr : 0;
        var js_pivot_mode = bdata['pivotMode'];
        var js_aggr_mode = bdata['aggrMode'];
        var js_x_dimension = bdata['xDimension'];
        var js_aggregates = bdata['aggregates'];
        var rsums = result.sums;
        var settings = {}, oparams = {}, iparams = {}, data = [], ticks = [], pdata, gdata, title, title_link, value, dkey = false;
        var xaixs_label, yaxis_label, show_legend = true;

        if (!chartCtrlActivity("line", "legend")) {
            show_legend = false;
        }
        if (chartCtrlActivity("line", "xaxis")) {
            xaixs_label = js_x_dimension[0]['label'];
        }
        if (chartCtrlActivity("line", "yaxis")) {
            yaxis_label = js_aggregates[aggr]['rowTotalsText'];
        }
        oparams = {
            xaxis: {
                axisLabel: xaixs_label
            },
            yaxis: {
                axisLabel: yaxis_label,
                fmatter: rsums[aggr]['formatter'],
                tickFormatter: function (item, y) {
                    if (y.options.fmatter) {
                        return getChartDataFormat(y.options.fmatter, item);
                    } else {
                        return item;
                    }
                }
            },
            tooltipOpts: {
                fmatter: rsums[aggr]['formatter']
            },
            legend: {
                position: chartCtrlActivity("line", "position"),
                show: show_legend
            }
        }

        if (js_pivot_mode == "2R1C") {
            if (!result.columns) {
                throw '-3';
            }
            gdata = result.columns;
            var temp = [], rc, dd = 0, cd = 1, c, d;
            for (var i in gdata) {
                d = [];
                c = gdata[i].titleText;
                dd = 0;
                if (filt) {
                    if (!result.rows[filt] || !result.rows[filt].children) {
                        continue;
                    }
                    dkey = true;
                    pdata = result.rows[filt].children;
                } else {
                    pdata = result.rows;
                }
                for (var j in pdata) {
                    var rc = pdata[j].columns;
                    value = (rc[c] && rc[c][aggr]) ? rc[c][aggr] : 0;
                    d.push([dd, value]);
                    if (!$.isArray(temp[dd])) {
                        title = (pdata[j].titleText) ? pdata[j].titleText : "";
                        if (dkey === true) {
                            title_link = title;
                        } else {
                            title_link = '<a href="javascript://" title="' + title + '" aria-chart-id="' + bid + '" aria-chart-row="' + j + '" class="line-chart-child chart-parent-link">' + title + '</a>';
                        }
                        temp[dd] = [j, title_link];
                    }
                    dd++;
                }
                data.push({
                    label: c,
                    data: d
                });
                cd++;
            }
            for (var k in temp) {
                ticks.push(temp[k]);
            }
            iparams = {
                xaxis: {
                    ticks: ticks
                },
                tooltipOpts: {
                    content: function (label, x, y, item, fmt) {
                        return label + " - " + getChartDataFormat(fmt, y);
                    }
                }
            }
        } else if (js_pivot_mode == "2R") {
            var d = [];
            if (filt) {
                if (!result.rows[filt] || !result.rows[filt].children) {
                    throw '-3';
                }
                pdata = result.rows[filt].children;
                dkey = true;
            } else {
                pdata = result.rows
            }
            for (var i in pdata) {
                title = (pdata[i].titleText) ? pdata[i].titleText : '';
                value = (pdata[i].values[aggr]) ? pdata[i].values[aggr] : 0;
                if (dkey === true) {
                    title_link = title;
                } else {
                    title_link = '<a href="javascript://" title="' + title + '" aria-chart-id="' + bid + '" aria-chart-row="' + i + '" class="line-chart-child chart-parent-link">' + title + '</a>';
                }
                d.push([i, value])
                ticks.push([i, title_link]);
            }
            data = [{
                    data: d
                }];
            iparams = {
                xaxis: {
                    ticks: ticks
                },
                tooltipOpts: {
                    content: function (label, x, y, item, fmt) {
                        return getChartDataFormat(fmt, y);
                    }
                }
            }
        } else if (js_pivot_mode == "1R1C") {
            if (!result.columns) {
                throw '-3';
            }
            gdata = result.columns;
            var temp = [], rc, dd = 0, cd = 1, c, d;
            for (var i in gdata) {
                d = [];
                c = gdata[i].titleText;
                dd = 0;
                for (var j in result.rows) {
                    rc = result.rows[j].columns;
                    title = (result.rows[j].titleText) ? result.rows[j].titleText : "";
                    value = (rc[c] && rc[c][aggr]) ? rc[c][aggr] : 0;
                    d.push([dd, value]);
                    if (!$.isArray(temp[dd])) {
                        temp[dd] = [j, title];
                    }
                    dd++;
                }
                data.push({
                    label: c,
                    data: d
                });
                cd++;
            }
            for (var k in temp) {
                ticks.push(temp[k]);
            }
            iparams = {
                xaxis: {
                    ticks: ticks
                },
                tooltipOpts: {
                    content: function (label, x, y, item, fmt) {
                        return label + " - " + getChartDataFormat(fmt, y);
                    }
                }
            }
        } else {
            var d = [];
            pdata = result.rows;
            for (var i in pdata) {
                title = (pdata[i].titleText) ? pdata[i].titleText : '';
                value = (pdata[i].values[aggr]) ? pdata[i].values[aggr] : 0;
                d.push([i, value])
                ticks.push([i, title]);
            }
            data = [{
                    data: d
                }];

            iparams = {
                xaxis: {
                    ticks: ticks
                },
                tooltipOpts: {
                    content: function (label, x, y, item, fmt) {
                        return getChartDataFormat(fmt, y);
                    }
                }
            }
        }

        settings['params'] = $.extend(true, oparams, iparams);
        settings['colors'] = getDSChartColors(bdata);
        settings['data'] = data;
        settings['id'] = bid;

        return settings;
    } catch (e) {
        $('#chart_preview_' + bid).html('<div class="errormsg" align="center">' + js_lang_label.GENERIC_NO_DATA_FOUND + '</div>')
        return false;
    }
}
function getHorizontalBarChartOptions(bid, aggr, filt) {
    try {
        if (!DB_pivot_data_JSON[bid]) {
            throw '-1';
        }
        var bdata = DB_pivot_data_JSON[bid];
        var js_grid_id = bdata['gridID'];
        var result = $("#" + js_grid_id).jqGrid("getGridParam", "dataSet");
        if (!result) {
            throw '-2';
        }
        if (!result.rows) {
            throw '-3';
        }
        aggr = (aggr == 1) ? aggr : 0;
        var js_pivot_mode = bdata['pivotMode'];
        var js_aggr_mode = bdata['aggrMode'];
        var js_x_dimension = bdata['xDimension'];
        var js_aggregates = bdata['aggregates'];
        var rsums = result.sums;
        var settings = {}, oparams = {}, iparams = {}, data = [], ticks = [], pdata, gdata, title, title_link, value, dkey = false;
        var xaixs_label, yaxis_label, show_legend = true;

        if (!chartCtrlActivity("horizbar", "legend")) {
            show_legend = false;
        }
        if (chartCtrlActivity("horizbar", "xaxis")) {
            xaixs_label = js_aggregates[aggr]['rowTotalsText'];
        }
        if (chartCtrlActivity("horizbar", "yaxis")) {
            yaxis_label = js_x_dimension[0]['label'];
        }
        oparams = {
            xaxis: {
                axisLabel: xaixs_label,
                fmatter: rsums[aggr]['formatter'],
                tickFormatter: function (item, x) {
                    if (x.options.fmatter) {
                        return getChartDataFormat(x.options.fmatter, item);
                    } else {
                        return item;
                    }
                }
            },
            yaxis: {
                axisLabel: yaxis_label,
                tickLength: 0
            },
            tooltipOpts: {
                fmatter: rsums[aggr]['formatter']
            },
            legend: {
                position: chartCtrlActivity("horizbar", "position"),
                show: show_legend
            }
        }

        if (js_pivot_mode == "2R1C") {
            if (!result.columns) {
                throw '-3';
            }
            gdata = result.columns;
            var ticks = [], temp = [], rc, dd = 0, cd = 1, c, d;
            for (var i in gdata) {
                d = [];
                c = gdata[i].titleText;
                dd = 0;
                if (filt) {
                    if (!result.rows[filt] || !result.rows[filt].children) {
                        continue;
                    }
                    dkey = true;
                    pdata = result.rows[filt].children;
                } else {
                    pdata = result.rows;
                }
                for (var j in pdata) {
                    var rc = pdata[j].columns;
                    value = (rc[c] && rc[c][aggr]) ? rc[c][aggr] : 0;
                    d.push([value, dd]);
                    if (!$.isArray(temp[dd])) {
                        title = (pdata[j].titleText) ? pdata[j].titleText : "";
                        if (dkey === true) {
                            title_link = title;
                        } else {
                            title_link = '<a href="javascript://" title="' + title + '" aria-chart-id="' + bid + '" aria-chart-row="' + j + '" class="horizbar-chart-child chart-parent-link">' + title + '</a>';
                        }
                        temp[dd] = [j, title_link];
                    }
                    dd++;
                }
                data.push({
                    label: c,
                    data: d,
                    bars: {order: cd}
                });
                cd++;
            }
            for (var k in temp) {
                ticks.push(temp[k]);
            }
            iparams = {
                bars: {
                    barWidth: 0.2
                },
                yaxis: {
                    ticks: ticks
                },
                tooltipOpts: {
                    content: function (label, x, y, item, fmt) {
                        return label + " - " + getChartDataFormat(fmt, x);
                    }
                }
            }
        } else if (js_pivot_mode == "2R") {
            if (filt) {
                if (!result.rows[filt] || !result.rows[filt].children) {
                    throw '-3';
                }
                pdata = result.rows[filt].children;
                dkey = true;
            } else {
                pdata = result.rows
            }
            for (var i in pdata) {
                title = (pdata[i].titleText) ? pdata[i].titleText : '';
                value = (pdata[i].values[aggr]) ? pdata[i].values[aggr] : 0;
                if (dkey === true) {
                    title_link = title;
                } else {
                    title_link = '<a href="javascript://" title="' + title + '" aria-chart-id="' + bid + '" aria-chart-row="' + i + '" class="horizbar-chart-child chart-parent-link">' + title + '</a>';
                }
                //data.push([value, i])
                data.push({
                    "data": [[value, i]]
                });
                ticks.push([i, title_link]);
            }
            //data = [data];
            iparams = {
                bars: {
                    barWidth: 0.5
                },
                yaxis: {
                    ticks: ticks
                },
                tooltipOpts: {
                    content: function (label, x, y, item, fmt) {
                        return getChartDataFormat(fmt, x);
                    }
                }
            }
        } else if (js_pivot_mode == "1R1C") {
            if (!result.columns) {
                throw '-3';
            }
            gdata = result.columns;
            var ticks = [], temp = [], rc, dd = 0, cd = 1, c, d;
            for (var i in gdata) {
                d = [];
                c = gdata[i].titleText;
                dd = 0;
                for (var j in result.rows) {
                    rc = result.rows[j].columns;
                    title = (result.rows[j].titleText) ? result.rows[j].titleText : "";
                    value = (rc[c] && rc[c][aggr]) ? rc[c][aggr] : 0;
                    d.push([value, dd]);
                    if (!$.isArray(temp[dd])) {
                        temp[dd] = [j, title];
                    }
                    dd++;
                }
                data.push({
                    label: c,
                    data: d,
                    bars: {order: cd}
                });
                cd++;
            }
            for (var k in temp) {
                ticks.push(temp[k]);
            }
            iparams = {
                bars: {
                    barWidth: 0.2
                },
                yaxis: {
                    ticks: ticks
                },
                tooltipOpts: {
                    content: function (label, x, y, item, fmt) {
                        return label + " - " + getChartDataFormat(fmt, x);
                    }
                }
            }
        } else {
            pdata = result.rows;
            for (var i in pdata) {
                title = (pdata[i].titleText) ? pdata[i].titleText : '';
                value = (pdata[i].values[aggr]) ? pdata[i].values[aggr] : 0;
                //data.push([value, i])
                data.push({
                    "data": [[value, i]]
                });
                ticks.push([i, title]);
            }
            //data = [data];
            iparams = {
                bars: {
                    barWidth: 0.5
                },
                yaxis: {
                    ticks: ticks
                },
                tooltipOpts: {
                    content: function (label, x, y, item, fmt) {
                        return getChartDataFormat(fmt, x);
                    }
                }
            }
        }

        settings['params'] = $.extend(true, oparams, iparams);
        settings['colors'] = getDSChartColors(bdata);
        settings['data'] = data;
        settings['id'] = bid;

        return settings;
    } catch (e) {
        $('#chart_preview_' + bid).html('<div class="errormsg" align="center">' + js_lang_label.GENERIC_NO_DATA_FOUND + '</div>')
        return false;
    }
}
function getStackedBarChartOptions(bid, aggr, filt) {
    try {
        if (!DB_pivot_data_JSON[bid]) {
            throw '-1';
        }
        var bdata = DB_pivot_data_JSON[bid];
        var js_grid_id = bdata['gridID'];
        var result = $("#" + js_grid_id).jqGrid("getGridParam", "dataSet");
        if (!result) {
            throw '-2';
        }
        if (!result.rows) {
            throw '-3';
        }
        aggr = (aggr == 1) ? aggr : 0;
        var js_pivot_mode = bdata['pivotMode'];
        var js_aggr_mode = bdata['aggrMode'];
        var js_x_dimension = bdata['xDimension'];
        var js_aggregates = bdata['aggregates'];
        var rsums = result.sums;
        var settings = {}, oparams = {}, iparams = {}, data = [], pdata, gdata, title, title_link, value, dkey = false;
        var xaixs_label, yaxis_label, show_legend = true, xaxis_ticks = [];

        if (!chartCtrlActivity("stackbar", "legend")) {
            show_legend = false;
        }
        if (chartCtrlActivity("stackbar", "xaxis")) {
            xaixs_label = js_x_dimension[0]['label'];
        }
        if (chartCtrlActivity("stackbar", "yaxis")) {
            yaxis_label = js_aggregates[aggr]['rowTotalsText'];
        }
        oparams = {
            xaxis: {
                axisLabel: xaixs_label,
                tickLength: 0
            },
            yaxis: {
                axisLabel: yaxis_label,
                fmatter: rsums[aggr]['formatter'],
                tickFormatter: function (item, y) {
                    if (y.options.fmatter) {
                        return getChartDataFormat(y.options.fmatter, item);
                    } else {
                        return item;
                    }
                }
            },
            tooltipOpts: {
                fmatter: rsums[aggr]['formatter']
            },
            legend: {
                position: chartCtrlActivity("stackbar", "position"),
                show: show_legend
            }
        }

        if (bdata['chartOptions'] && bdata['chartOptions']['barChart']) {
            if ("xaxisAngle" in bdata['chartOptions']['barChart']) {
                oparams.xaxis.rotateTicks = parseInt(bdata['chartOptions']['barChart']['xaxisAngle']);
            }
        }

        if (js_pivot_mode == "2R1C") {
            if (!result.columns) {
                throw '-3';
            }
            gdata = result.columns;
            var ticks = [], temp = [], rc, dd = 0, cd = 1, c, d;
            for (var i in gdata) {
                d = [];
                c = gdata[i].titleText;
                dd = 0;
                if (filt) {
                    if (!result.rows[filt] || !result.rows[filt].children) {
                        continue;
                    }
                    dkey = true;
                    pdata = result.rows[filt].children;
                } else {
                    pdata = result.rows;
                }
                for (var j in pdata) {
                    var rc = pdata[j].columns;
                    value = (rc[c] && rc[c][aggr]) ? rc[c][aggr] : 0;
                    d.push([dd, value]);
                    if (!$.isArray(temp[dd])) {
                        title = (pdata[j].titleText) ? pdata[j].titleText : "";
                        if (dkey === true) {
                            title_link = title;
                        } else {
                            title_link = '<a href="javascript://" title="' + title + '" aria-chart-id="' + bid + '" aria-chart-row="' + j + '" class="stackbar-chart-child chart-parent-link">' + title + '</a>';
                        }
                        temp[dd] = [j, title_link];
                    }
                    dd++;
                }
                data.push({
                    label: c,
                    data: d
                });
                cd++;
            }
            for (var k in temp) {
                ticks.push(temp[k]);
            }
            iparams = {
                bars: {
                    barWidth: 0.4
                },
                xaxis: {
                    ticks: ticks
                },
                tooltipOpts: {
                    content: function (label, x, y, item, fmt) {
                        return label + " - " + getChartDataFormat(fmt, y);
                    }
                }
            }
        } else if (js_pivot_mode == "2R") {
            if (filt) {
                if (!result.rows[filt] || !result.rows[filt].children) {
                    throw '-3';
                }
                pdata = result.rows[filt].children;
                dkey = true;
            } else {
                pdata = result.rows
            }
            for (var i in pdata) {
                title = (pdata[i].titleText) ? pdata[i].titleText : '';
                value = (pdata[i].values[aggr]) ? pdata[i].values[aggr] : 0;
                if (dkey === true) {
                    title_link = title;
                } else {
                    title_link = '<a href="javascript://" title="' + title + '" aria-chart-id="' + bid + '" aria-chart-row="' + i + '" class="stackbar-chart-child chart-parent-link">' + title + '</a>';
                }
                //data.push([title_link, value]);
                data.push({
                    "data": [[i, value]]
                });
                xaxis_ticks.push([i, title_link]);
            }
            //data = [data];
            iparams = {
                bars: {
                    barWidth: 0.4
                },
                xaxis: {
                    mode: "categories",
                    ticks: xaxis_ticks
                },
                tooltipOpts: {
                    content: function (label, x, y, item, fmt) {
                        return  getChartDataFormat(fmt, y);
                    }
                }
            }
        } else if (js_pivot_mode == "1R1C") {
            if (!result.columns) {
                throw '-3';
            }
            gdata = result.columns;
            var ticks = [], temp = [], rc, dd = 0, cd = 1, c, d;
            for (var i in gdata) {
                d = [];
                c = gdata[i].titleText;
                dd = 0;
                for (var j in result.rows) {
                    rc = result.rows[j].columns;
                    title = (result.rows[j].titleText) ? result.rows[j].titleText : "";
                    value = (rc[c] && rc[c][aggr]) ? rc[c][aggr] : 0;
                    d.push([dd, value]);
                    if (!$.isArray(temp[dd])) {
                        temp[dd] = [j, title];
                    }
                    dd++;
                }
                data.push({
                    label: c,
                    data: d
                });
                cd++;
            }
            for (var k in temp) {
                ticks.push(temp[k]);
            }
            iparams = {
                bars: {
                    barWidth: 0.4
                },
                xaxis: {
                    ticks: ticks
                },
                tooltipOpts: {
                    content: function (label, x, y, item, fmt) {
                        return label + " - " + getChartDataFormat(fmt, y);
                    }
                }
            }
        } else {
            pdata = result.rows;
            for (var i in pdata) {
                title = (pdata[i].titleText) ? pdata[i].titleText : '';
                value = (pdata[i].values[aggr]) ? pdata[i].values[aggr] : 0;
                //data.push([title, value]);
                data.push({
                    "data": [[i, value]]
                });
                xaxis_ticks.push([i, title]);
            }
            //data = [data];
            iparams = {
                bars: {
                    barWidth: 0.4
                },
                xaxis: {
                    mode: "categories",
                    ticks: xaxis_ticks
                },
                tooltipOpts: {
                    content: function (label, x, y, item, fmt) {
                        return getChartDataFormat(fmt, y);
                    }
                }
            }
        }

        settings['params'] = $.extend(true, oparams, iparams);
        settings['colors'] = getDSChartColors(bdata);
        settings['data'] = data;
        settings['id'] = bid;

        return settings;
    } catch (e) {
        $('#chart_preview_' + bid).html('<div class="errormsg" align="center">' + js_lang_label.GENERIC_NO_DATA_FOUND + '</div>')
        return false;
    }
}
function getStackedHorizBarChartOptions(bid, aggr, filt) {
    try {
        if (!DB_pivot_data_JSON[bid]) {
            throw '-1';
        }
        var bdata = DB_pivot_data_JSON[bid];
        var js_grid_id = bdata['gridID'];
        var result = $("#" + js_grid_id).jqGrid("getGridParam", "dataSet");
        if (!result) {
            throw '-2';
        }
        if (!result.rows) {
            throw '-3';
        }
        aggr = (aggr == 1) ? aggr : 0;
        var js_pivot_mode = bdata['pivotMode'];
        var js_aggr_mode = bdata['aggrMode'];
        var js_x_dimension = bdata['xDimension'];
        var js_aggregates = bdata['aggregates'];
        var rsums = result.sums;
        var settings = {}, oparams = {}, iparams = {}, data = [], ticks = [], pdata, gdata, title, title_link, value, dkey = false;
        var xaixs_label, yaxis_label, show_legend = true;

        if (!chartCtrlActivity("stackhorizbar", "legend")) {
            show_legend = false;
        }
        if (chartCtrlActivity("stackhorizbar", "xaxis")) {
            xaixs_label = js_aggregates[aggr]['rowTotalsText'];
        }
        if (chartCtrlActivity("stackhorizbar", "yaxis")) {
            yaxis_label = js_x_dimension[0]['label'];
        }
        oparams = {
            xaxis: {
                axisLabel: xaixs_label,
                fmatter: rsums[aggr]['formatter'],
                tickFormatter: function (item, x) {
                    if (x.options.fmatter) {
                        return getChartDataFormat(x.options.fmatter, item);
                    } else {
                        return item;
                    }
                }
            },
            yaxis: {
                axisLabel: yaxis_label,
                tickLength: 0
            },
            tooltipOpts: {
                fmatter: rsums[aggr]['formatter']
            },
            legend: {
                position: chartCtrlActivity("stackhorizbar", "position"),
                show: show_legend
            }
        }

        if (js_pivot_mode == "2R1C") {
            if (!result.columns) {
                throw '-3';
            }
            gdata = result.columns;
            var ticks = [], temp = [], rc, dd = 0, cd = 1, c, d;
            for (var i in gdata) {
                d = [];
                c = gdata[i].titleText;
                dd = 0;
                if (filt) {
                    if (!result.rows[filt] || !result.rows[filt].children) {
                        continue;
                    }
                    dkey = true;
                    pdata = result.rows[filt].children;
                } else {
                    pdata = result.rows;
                }
                for (var j in pdata) {
                    var rc = pdata[j].columns;
                    value = (rc[c] && rc[c][aggr]) ? rc[c][aggr] : 0;
                    d.push([value, dd]);
                    if (!$.isArray(temp[dd])) {
                        title = (pdata[j].titleText) ? pdata[j].titleText : "";
                        if (dkey === true) {
                            title_link = title;
                        } else {
                            title_link = '<a href="javascript://" title="' + title + '" aria-chart-id="' + bid + '" aria-chart-row="' + j + '" class="stackhorizbar-chart-child chart-parent-link">' + title + '</a>';
                        }
                        temp[dd] = [j, title_link];
                    }
                    dd++;
                }
                data.push({
                    label: c,
                    data: d
                });
                cd++;
            }
            for (var k in temp) {
                ticks.push(temp[k]);
            }
            iparams = {
                bars: {
                    barWidth: 0.5
                },
                yaxis: {
                    ticks: ticks
                },
                tooltipOpts: {
                    content: function (label, x, y, item, fmt) {
                        return label + " - " + getChartDataFormat(fmt, x);
                    }
                }
            }
        } else if (js_pivot_mode == "2R") {
            if (filt) {
                if (!result.rows[filt] || !result.rows[filt].children) {
                    throw '-3';
                }
                pdata = result.rows[filt].children;
                dkey = true;
            } else {
                pdata = result.rows
            }
            for (var i in pdata) {
                title = (pdata[i].titleText) ? pdata[i].titleText : '';
                value = (pdata[i].values[aggr]) ? pdata[i].values[aggr] : 0;
                if (dkey === true) {
                    title_link = title;
                } else {
                    title_link = '<a href="javascript://" title="' + title + '" aria-chart-id="' + bid + '" aria-chart-row="' + i + '" class="stackhorizbar-chart-child chart-parent-link">' + title + '</a>';
                }
                //data.push([value, i])
                data.push({
                    "data": [[value, i]]
                });
                ticks.push([i, title_link]);
            }
            //data = [data];
            iparams = {
                bars: {
                    barWidth: 0.5
                },
                yaxis: {
                    ticks: ticks
                },
                tooltipOpts: {
                    content: function (label, x, y, item, fmt) {
                        return getChartDataFormat(fmt, x);
                    }
                }
            }
        } else if (js_pivot_mode == "1R1C") {
            if (!result.columns) {
                throw '-3';
            }
            gdata = result.columns;
            var ticks = [], temp = [], rc, dd = 0, cd = 1, c, d;
            for (var i in gdata) {
                d = [];
                c = gdata[i].titleText;
                dd = 0;
                for (var j in result.rows) {
                    rc = result.rows[j].columns;
                    title = (result.rows[j].titleText) ? result.rows[j].titleText : "";
                    value = (rc[c] && rc[c][aggr]) ? rc[c][aggr] : 0;
                    d.push([value, dd]);
                    if (!$.isArray(temp[dd])) {
                        temp[dd] = [j, title];
                    }
                    dd++;
                }
                data.push({
                    label: c,
                    data: d
                });
                cd++;
            }
            for (var k in temp) {
                ticks.push(temp[k]);
            }
            iparams = {
                bars: {
                    barWidth: 0.5
                },
                yaxis: {
                    ticks: ticks
                },
                tooltipOpts: {
                    content: function (label, x, y, item, fmt) {
                        return label + " - " + getChartDataFormat(fmt, x);
                    }
                }
            }
        } else {
            pdata = result.rows;
            for (var i in pdata) {
                title = (pdata[i].titleText) ? pdata[i].titleText : '';
                value = (pdata[i].values[aggr]) ? pdata[i].values[aggr] : 0;
                //data.push([value, i])
                data.push({
                    "data": [[value, i]]
                });
                ticks.push([i, title]);
            }
            //data = [data];
            iparams = {
                bars: {
                    barWidth: 0.5
                },
                yaxis: {
                    ticks: ticks
                },
                tooltipOpts: {
                    content: function (label, x, y, item, fmt) {
                        return getChartDataFormat(fmt, x);
                    }
                }
            }
        }

        settings['params'] = $.extend(true, oparams, iparams);
        settings['colors'] = getDSChartColors(bdata);
        settings['data'] = data;
        settings['id'] = bid;

        return settings;
    } catch (e) {
        $('#chart_preview_' + bid).html('<div class="errormsg" align="center">' + js_lang_label.GENERIC_NO_DATA_FOUND + '</div>')
        return false;
    }
}
function getAutoUpdatingChartOptions(bid, aggr, filt) {
    try {
        if (!DB_pivot_data_JSON[bid]) {
            throw '-1';
        }
        var bdata = DB_pivot_data_JSON[bid];
        var js_grid_id = bdata['gridID'];
        var result = $("#" + js_grid_id).jqGrid("getGridParam", "dataSet");
        if (!result) {
            throw '-2';
        }
        if (!result.rows) {
            throw '-3';
        }
        aggr = (aggr == 1) ? aggr : 0;
        var js_pivot_mode = bdata['pivotMode'];
        var js_aggr_mode = bdata['aggrMode'];
        var js_x_dimension = bdata['xDimension'];
        var js_aggregates = bdata['aggregates'];
        var rsums = result.sums;
        var settings = {}, oparams = {}, iparams = {}, data = [], ticks = [], pdata, gdata, title, title_link, value, dkey = false;
        var xaixs_label, yaxis_label, show_legend = true;

        if (!chartCtrlActivity("autoupdating", "legend")) {
            show_legend = false;
        }
        if (chartCtrlActivity("autoupdating", "xaxis")) {
            xaixs_label = js_x_dimension[0]['label'];
        }
        if (chartCtrlActivity("autoupdating", "yaxis")) {
            yaxis_label = js_aggregates[aggr]['rowTotalsText'];
        }
        oparams = {
            xaxis: {
                axisLabel: xaixs_label
            },
            yaxis: {
                axisLabel: yaxis_label
            },
            tooltipOpts: {
                fmatter: rsums[aggr]['formatter']
            },
            legend: {
                position: chartCtrlActivity("autoupdating", "position"),
                show: show_legend
            }
        }

        if (js_pivot_mode == "2R1C") {
            if (!result.columns) {
                throw '-3';
            }
            gdata = result.columns;
            var temp = [], rc, dd = 0, cd = 1, c, d;
            for (var i in gdata) {
                d = [];
                c = gdata[i].titleText;
                dd = 0;
                if (filt) {
                    if (!result.rows[filt] || !result.rows[filt].children) {
                        continue;
                    }
                    dkey = true;
                    pdata = result.rows[filt].children;
                } else {
                    pdata = result.rows;
                }
                for (var j in pdata) {
                    var rc = pdata[j].columns;
                    value = (rc[c] && rc[c][aggr]) ? rc[c][aggr] : 0;
                    d.push([dd, value]);
                    if (!$.isArray(temp[dd])) {
                        title = (pdata[j].titleText) ? pdata[j].titleText : "";
                        if (dkey === true) {
                            title_link = title;
                        } else {
                            title_link = '<a href="javascript://" title="' + title + '" aria-chart-id="' + bid + '" aria-chart-row="' + j + '" class="autoupdating-chart-child chart-parent-link">' + title + '</a>';
                        }
                        temp[dd] = [j, title_link];
                    }
                    dd++;
                }
                data.push({
                    label: c,
                    data: d
                });
                cd++;
            }
            for (var k in temp) {
                ticks.push(temp[k]);
            }
            iparams = {
                xaxis: {
                    ticks: ticks
                },
                tooltipOpts: {
                    content: function (label, x, y, item, fmt) {
                        return label + " - " + getChartDataFormat(fmt, y);
                    }
                }
            }
        } else if (js_pivot_mode == "2R") {
            var d = [];
            if (filt) {
                if (!result.rows[filt] || !result.rows[filt].children) {
                    throw '-3';
                }
                pdata = result.rows[filt].children;
                dkey = true;
            } else {
                pdata = result.rows
            }
            for (var i in pdata) {
                title = (pdata[i].titleText) ? pdata[i].titleText : '';
                value = (pdata[i].values[aggr]) ? pdata[i].values[aggr] : 0;
                if (dkey === true) {
                    title_link = title;
                } else {
                    title_link = '<a href="javascript://" title="' + title + '" aria-chart-id="' + bid + '" aria-chart-row="' + i + '" class="autoupdating-chart-child chart-parent-link">' + title + '</a>';
                }
                d.push([i, value])
                ticks.push([i, title_link]);
            }
            data = [{
                    data: d
                }];
            iparams = {
                xaxis: {
                    ticks: ticks
                },
                tooltipOpts: {
                    content: function (label, x, y, item, fmt) {
                        return getChartDataFormat(fmt, y);
                    }
                }
            }
        } else if (js_pivot_mode == "1R1C") {
            if (!result.columns) {
                throw '-3';
            }
            gdata = result.columns;
            var temp = [], rc, dd = 0, cd = 1, c, d;
            for (var i in gdata) {
                d = [];
                c = gdata[i].titleText;
                dd = 0;
                for (var j in result.rows) {
                    rc = result.rows[j].columns;
                    title = (result.rows[j].titleText) ? result.rows[j].titleText : "";
                    value = (rc[c] && rc[c][aggr]) ? rc[c][aggr] : 0;
                    d.push([dd, value]);
                    if (!$.isArray(temp[dd])) {
                        temp[dd] = [j, title];
                    }
                    dd++;
                }
                data.push({
                    label: c,
                    data: d
                });
                cd++;
            }
            for (var k in temp) {
                ticks.push(temp[k]);
            }
            iparams = {
                xaxis: {
                    ticks: ticks
                },
                tooltipOpts: {
                    content: function (label, x, y, item, fmt) {
                        return label + " - " + getChartDataFormat(fmt, y);
                    }
                }
            }
        } else {
            var d = [];
            pdata = result.rows;
            for (var i in pdata) {
                title = (pdata[i].titleText) ? pdata[i].titleText : '';
                value = (pdata[i].values[aggr]) ? pdata[i].values[aggr] : 0;
                d.push([i, value])
                ticks.push([i, title]);
            }
            data = [{
                    data: d
                }];

            iparams = {
                xaxis: {
                    ticks: ticks
                },
                tooltipOpts: {
                    content: function (label, x, y, item, fmt) {
                        return getChartDataFormat(fmt, y);
                    }
                }
            }
        }

        settings['params'] = $.extend(true, oparams, iparams);
        settings['colors'] = getDSChartColors(bdata);
        settings['data'] = data;
        settings['id'] = bid;

        return settings;
    } catch (e) {
        $('#chart_preview_' + bid).html('<div class="errormsg" align="center">' + js_lang_label.GENERIC_NO_DATA_FOUND + '</div>')
        return false;
    }
}

function plotBarChartDiagram(settings) {
    if (!settings) {
        return false;
    }
    var bid = settings.id;
    var dataset = settings.data;
    var custom_params = settings.params;

    var basic_params = {
        grid: {
            show: true,
            aboveData: false,
            color: "#3f3f3f",
            labelMargin: 5,
            axisMargin: 0,
            borderWidth: 1,
            borderColor: "#ccc",
            minBorderMargin: 5,
            clickable: true,
            hoverable: true,
            autoHighlight: false,
            mouseActiveRadius: 20
        },
        bars: {
            show: true,
            //barWidth: 0.4,
            fill: true,
            //order: true,
            lineWidth: 0,
            align: "center",
            fillColor: {
                colors: [{opacity: 1}, {opacity: 1}]
            }
        },
        legend: {
            position: "ne"
        },
        xaxis: {
            //axisLabel: "Category",
            axisLabelUseCanvas: true,
            axisLabelFontSizePixels: 12,
            axisLabelFontFamily: "'Droid Sans',Helvetica,Arial,sans-serif",
            axisLabelPadding: 5,
            //mode: "categories",
            //tickLength: 0,
            rotateTicks: 180
        },
        yaxis: {
            //axisLabel: "Sum of Prices",
            axisLabelUseCanvas: true,
            axisLabelFontSizePixels: 12,
            axisLabelFontFamily: "'Droid Sans',Helvetica,Arial,sans-serif",
            axisLabelPadding: 0
        },
        colors: settings.colors,
        tooltip: true,
        tooltipOpts: {
            content: '%y'
        }
    }
    var final_params = $.extend(true, basic_params, custom_params);
    var holder = $("#chart_preview_" + bid);
    if (holder.length) {
        $.plot(holder, dataset, final_params);
    }
}
function plotPieChartDiagram(settings) {
    if (!settings) {
        return false;
    }
    var bid = settings.id;
    var dataset = settings.data;
    var custom_params = settings.params;
    var basic_params = {
        grid: {
            show: true,
            clickable: true,
            hoverable: true
        },
        series: {
            pie: {
                show: true,
                radius: 1,
                stroke: {
                    width: 2
                },
                label: {
                    show: true,
                    radius: 1,
                    formatter: function (label, series) {
                        if (chartCtrlActivity("pie", "value") == "value") {
                            return '<div class="pie-chart-label">' + label + '&nbsp;' + getChartDataFormat(series.fmatter, series.data[0][1]) + '</div>';
                        } else {
                            return '<div class="pie-chart-label">' + label + '&nbsp;' + Math.round(series.percent) + '%</div>';
                        }
                    }
                }
            }
        },
        legend: {
            show: false
        },
        colors: settings.colors,
        tooltip: true,
        tooltipOpts: {
            content: function (label, x, y, item, fmt) {
                return label + " - " + getChartDataFormat(fmt, y);
            }
        }
    }
    var final_params = $.extend(true, basic_params, custom_params);
    var holder = $("#chart_preview_" + bid);
    if (holder.length) {
        $.plot(holder, dataset, final_params);
    }
}
function plotDonutChartDiagram(settings) {
    if (!settings) {
        return false;
    }
    var bid = settings.id;
    var dataset = settings.data;
    var custom_params = settings.params;
    var basic_params = {
        grid: {
            show: true,
            clickable: true,
            hoverable: true
        },
        series: {
            pie: {
                show: true,
                radius: 1,
                innerRadius: 0.5,
                stroke: {
                    width: 4
                },
                label: {
                    show: true,
                    radius: 1,
                    formatter: function (label, series) {
                        if (chartCtrlActivity("pie", "value") == "value") {
                            return '<div class="pie-chart-label">' + label + '&nbsp;' + getChartDataFormat(series.fmatter, series.data[0][1]) + '</div>';
                        } else {
                            return '<div class="pie-chart-label">' + label + '&nbsp;' + Math.round(series.percent) + '%</div>';
                        }
                    }
                }
            }
        },
        legend: {
            show: false
        },
        colors: settings.colors,
        tooltip: true,
        tooltipOpts: {
            content: function (label, x, y, item, fmt) {
                return label + " - " + getChartDataFormat(fmt, y);
            }
        }
    }
    var final_params = $.extend(true, basic_params, custom_params);
    var holder = $("#chart_preview_" + bid);
    if (holder.length) {
        $.plot(holder, dataset, final_params);
    }
}
function plotAreaChartDiagram(settings) {
    if (!settings) {
        return false;
    }
    var bid = settings.id;
    var dataset = settings.data;
    var custom_params = settings.params;
    var basic_params = {
        grid: {
            show: true,
            aboveData: false,
            color: "#3f3f3f",
            labelMargin: 5,
            axisMargin: 0,
            borderWidth: 1,
            borderColor: "#ccc",
            minBorderMargin: 5,
            clickable: true,
            hoverable: true,
            autoHighlight: false,
            mouseActiveRadius: 20
        },
        series: {
            lines: {
                show: true,
                fill: true,
                lineWidth: 2
            },
            points: {
                show: true,
                radius: 4.5,
                fill: true,
                fillColor: "#ffffff",
                lineWidth: 2.75
            }
        },
        legend: {
            position: "ne"
        },
        xaxis: {
            //axisLabel: "Category",
            axisLabelUseCanvas: true,
            axisLabelFontSizePixels: 12,
            axisLabelFontFamily: "'Droid Sans',Helvetica,Arial,sans-serif",
            axisLabelPadding: 5,
            //ticks: ticks,
            //tickLength:1,
            rotateTicks: 180
        },
        yaxis: {
            //axisLabel: "Sum of Prices",
            axisLabelUseCanvas: true,
            axisLabelFontSizePixels: 12,
            axisLabelFontFamily: "'Droid Sans',Helvetica,Arial,sans-serif",
            axisLabelPadding: 0
        },
        colors: settings.colors,
        tooltip: true,
        tooltipOpts: {
            content: '%y'
        }
    }
    var final_params = $.extend(true, basic_params, custom_params);
    var holder = $("#chart_preview_" + bid);
    if (holder.length) {
        $.plot(holder, dataset, final_params);
    }
}
function plotLineChartDiagram(settings) {
    if (!settings) {
        return false;
    }
    var bid = settings.id;
    var dataset = settings.data;
    var custom_params = settings.params;
    var basic_params = {
        grid: {
            show: true,
            aboveData: false,
            color: "#3f3f3f",
            labelMargin: 5,
            axisMargin: 0,
            borderWidth: 1,
            borderColor: "#ccc",
            minBorderMargin: 5,
            clickable: true,
            hoverable: true,
            autoHighlight: false,
            mouseActiveRadius: 20
        },
        series: {
            lines: {
                show: true,
                fill: false,
                lineWidth: 2
            },
            points: {
                show: true,
                radius: 4.5,
                fill: true,
                fillColor: "#ffffff",
                lineWidth: 2.75
            }
        },
        legend: {
            position: "ne"
        },
        xaxis: {
            //axisLabel: "Category",
            axisLabelUseCanvas: true,
            axisLabelFontSizePixels: 12,
            axisLabelFontFamily: "'Droid Sans',Helvetica,Arial,sans-serif",
            axisLabelPadding: 5,
            //ticks: ticks,
            //tickLength:1,
            rotateTicks: 180
        },
        yaxis: {
            //axisLabel: "Sum of Prices",
            axisLabelUseCanvas: true,
            axisLabelFontSizePixels: 12,
            axisLabelFontFamily: "'Droid Sans',Helvetica,Arial,sans-serif",
            axisLabelPadding: 0
        },
        colors: settings.colors,
        tooltip: true,
        tooltipOpts: {
            content: '%y'
        }
    }
    var final_params = $.extend(true, basic_params, custom_params);
    var holder = $("#chart_preview_" + bid);
    if (holder.length) {
        $.plot(holder, dataset, final_params);
    }
}
function plotHorizontalBarChartDiagram(settings) {
    if (!settings) {
        return false;
    }
    var bid = settings.id;
    var dataset = settings.data;
    var custom_params = settings.params;
    var basic_params = {
        grid: {
            show: true,
            aboveData: false,
            color: "#3f3f3f",
            labelMargin: 5,
            axisMargin: 0,
            borderWidth: 1,
            borderColor: "#ccc",
            minBorderMargin: 5,
            clickable: true,
            hoverable: true,
            autoHighlight: false,
            mouseActiveRadius: 20
        },
        bars: {
            horizontal: true,
            show: true,
            //barWidth: 0.5,
            fill: true,
            //order: true,
            lineWidth: 0,
            align: "center",
            fillColor: {
                colors: [{opacity: 1}, {opacity: 1}]
            }
        },
        legend: {
            position: "ne"
        },
        xaxis: {
            //axisLabel: "Sum of Prices",
            axisLabelUseCanvas: true,
            axisLabelFontSizePixels: 12,
            axisLabelFontFamily: "'Droid Sans',Helvetica,Arial,sans-serif",
            axisLabelPadding: 5
        },
        yaxis: {
            //axisLabel: "Category",
            axisLabelUseCanvas: true,
            axisLabelFontSizePixels: 12,
            axisLabelFontFamily: "'Droid Sans',Helvetica,Arial,sans-serif",
            //tickLength: 0,
            //ticks: ticks
            axisLabelPadding: 0
        },
        colors: settings.colors,
        tooltip: true,
        tooltipOpts: {
            content: '%x'
        }
    }
    var final_params = $.extend(true, basic_params, custom_params);
    var holder = $("#chart_preview_" + bid);
    if (holder.length) {
        $.plot(holder, dataset, final_params);
    }
}
function plotStackedBarChartDiagram(settings) {
    if (!settings) {
        return false;
    }
    var bid = settings.id;
    var dataset = settings.data;
    var custom_params = settings.params;
    var basic_params = {
        grid: {
            show: true,
            aboveData: false,
            color: "#3f3f3f",
            labelMargin: 5,
            axisMargin: 0,
            borderWidth: 1,
            borderColor: "#ccc",
            minBorderMargin: 5,
            clickable: true,
            hoverable: true,
            autoHighlight: false,
            mouseActiveRadius: 20
        },
        series: {
            stack: true
        },
        bars: {
            show: true,
            //barWidth: 0.4,
            fill: true,
            lineWidth: 0,
            align: "center",
            fillColor: {
                colors: [{opacity: 1}, {opacity: 1}]
            }
        },
        legend: {
            position: "ne"
        },
        xaxis: {
            //axisLabel: "Category",
            axisLabelUseCanvas: true,
            axisLabelFontSizePixels: 12,
            axisLabelFontFamily: "'Droid Sans',Helvetica,Arial,sans-serif",
            axisLabelPadding: 5,
            //mode: "categories",
            //tickLength: 0,
            rotateTicks: 180
        },
        yaxis: {
            //axisLabel: "Sum of Prices",
            axisLabelUseCanvas: true,
            axisLabelFontSizePixels: 12,
            axisLabelFontFamily: "'Droid Sans',Helvetica,Arial,sans-serif",
            axisLabelPadding: 0
        },
        colors: settings.colors,
        tooltip: true,
        tooltipOpts: {
            content: '%y'
        }
    }
    var final_params = $.extend(true, basic_params, custom_params);
    var holder = $("#chart_preview_" + bid);
    if (holder.length) {
        $.plot(holder, dataset, final_params);
    }
}
function plotStackedHorizBarChartDiagram(settings) {
    if (!settings) {
        return false;
    }
    var bid = settings.id;
    var dataset = settings.data;
    var custom_params = settings.params;
    var basic_params = {
        grid: {
            show: true,
            aboveData: false,
            color: "#3f3f3f",
            labelMargin: 5,
            axisMargin: 0,
            borderWidth: 1,
            borderColor: "#ccc",
            minBorderMargin: 5,
            clickable: true,
            hoverable: true,
            autoHighlight: false,
            mouseActiveRadius: 20
        },
        series: {
            stack: true
        },
        bars: {
            horizontal: true,
            show: true,
            //barWidth: 0.5,
            fill: true,
            lineWidth: 0,
            align: "center",
            fillColor: {
                colors: [{opacity: 1}, {opacity: 1}]
            }
        },
        legend: {
            position: "ne"
        },
        xaxis: {
            //axisLabel: "Sum of Prices",
            axisLabelUseCanvas: true,
            axisLabelFontSizePixels: 12,
            axisLabelFontFamily: "'Droid Sans',Helvetica,Arial,sans-serif",
            axisLabelPadding: 5
        },
        yaxis: {
            //axisLabel: "Category",
            axisLabelUseCanvas: true,
            axisLabelFontSizePixels: 12,
            axisLabelFontFamily: "'Droid Sans',Helvetica,Arial,sans-serif",
            //tickLength: 0,
            //ticks: ticks,
            axisLabelPadding: 0
        },
        colors: settings.colors,
        tooltip: true,
        tooltipOpts: {
            content: '%x'
        }
    }
    var final_params = $.extend(true, basic_params, custom_params);
    var holder = $("#chart_preview_" + bid);
    if (holder.length) {
        $.plot(holder, dataset, final_params);
    }
}
function plotAutoUpdatingChartDiagram(settings) {
    if (!settings) {
        return false;
    }
    var bid = settings.id;
    var dataset = settings.data;
    var custom_params = settings.params;
    var update_interval = 100;
    var basic_params = {
        grid: {
            show: true,
            aboveData: false,
            color: "#3f3f3f",
            labelMargin: 5,
            axisMargin: 0,
            borderWidth: 1,
            borderColor: "#ccc",
            minBorderMargin: 5,
            clickable: true,
            hoverable: true,
            autoHighlight: false,
            mouseActiveRadius: 20
        },
        series: {
            shadowSize: 0,
            lines: {
                show: true,
                fill: true,
                lineWidth: 2
            },
            points: {
                show: true,
                radius: 4.5,
                fill: true,
                fillColor: "#ffffff",
                lineWidth: 2.75
            }
        },
        legend: {
            position: "ne"
        },
        xaxis: {
            //axisLabel: "Category",
            axisLabelUseCanvas: true,
            axisLabelFontSizePixels: 12,
            axisLabelFontFamily: "'Droid Sans',Helvetica,Arial,sans-serif",
            axisLabelPadding: 5,
            //ticks: ticks,
            //tickLength:1,
            rotateTicks: 180
        },
        yaxis: {
            //axisLabel: "Sum of Prices",
            axisLabelUseCanvas: true,
            axisLabelFontSizePixels: 12,
            axisLabelFontFamily: "'Droid Sans',Helvetica,Arial,sans-serif",
            axisLabelPadding: 0
        },
        colors: settings.colors,
        tooltip: true,
        tooltipOpts: {
            content: '%y'
        }
    }
    var final_params = $.extend(true, basic_params, custom_params);
    var holder = $("#chart_preview_" + bid);
    if (holder.length) {
        $.plot(holder, dataset, final_params);
    }
}

function callDashBoardPivotListing(dataArr) {
    var gdel_width = 0, g_height = 185;
    var bid = dataArr['dbID'];
    var js_x_dimension = dataArr['xDimension'];
    var js_y_dimension = dataArr['yDimension'];
    var js_aggregates = dataArr['aggregates'];
    var js_filters = dataArr['filters'];
    var js_data_json = dataArr['dataModel'];
    var js_link_json = dataArr['linkModel'];
    var js_pivot_mode = dataArr['pivotMode'];
    var js_aggr_mode = dataArr['aggrMode'];
    var js_hide_paging = dataArr['hidePaging'];
    var js_row_number = parseInt(dataArr['rowNumber']);
    var js_frozen_cols = dataArr['frozenCols'];
    var js_search_mode = dataArr['searchMode'];
    var js_default_chart = dataArr['defaultChart'];
    var js_grid_id = dataArr['gridID'];
    var js_pager_id = dataArr['pagerID'];
    var pager_active = (js_hide_paging == "Yes") ? false : true;
    var frozen_active = (js_frozen_cols == "Yes") ? true : false;
    var bwidth = $("#content_block_" + bid).width();
    var js_before_req = true;
    var row_num = ($.inArray(js_row_number, pager_row_list) != "-1") ? js_row_number : parseInt(el_theme_settings.pivot_number_of_record);
    row_num = ($.inArray(row_num, pager_row_list) != "-1") ? row_num : 20;

    jQuery("#" + js_grid_id).jqGrid('jqPivot', js_data_json, {
        xDimension: js_x_dimension,
        yDimension: js_y_dimension,
        aggregates: js_aggregates,
        rowTotals: true,
        colTotals: true,
        rowTotalsText: js_aggregates[0]['rowTotalsText'],
        frozenStaticCols: (frozen_active == true) ? true : false,
        frozenShrinkToFit: true
    },
    // grid options
            {
                linkModel: js_link_json,
                pgbuttons: pager_active,
                pginput: pager_active,
                pgnumbers: (el_theme_settings.grid_pgnumbers) ? true : false,
                pgnumlimit: 1, //parseInt(el_theme_settings.grid_pgnumlimit),
                pagingpos: el_theme_settings.grid_pagingpos,
                rowNum: (!pager_active) ? 1000000 : parseInt(row_num),
                rowList: (pager_active) ? pager_row_list : [],
                viewrecords: true,
                altRows: true,
                altclass: 'evenRow',
                norecmsg: js_lang_label.GENERIC_GRID_NO_RECORDS_FOUND,
                hidegrid: false,
                pager: "",
                toppager: pager_active,
                toppaging: pager_active,
                showpaging: pager_active,
                height: 200,
                width: (frozen_active == true) ? bwidth - gdel_width : 650,
                autowidth: (frozen_active == true) ? false : true,
                shrinkToFit: (frozen_active == true) ? false : true,
                fixed: true,
                loadComplete: function (data) {
                    noDashboardRecordsMessage(js_grid_id, data, "pivot");
                    if (js_before_req === true) {
                        if (frozen_active !== true) {
                            resizeDashboardGrid(bid);
                            generateBoardContent(bid, js_default_chart, true);
                        }
                        js_before_req = false;
                    } else {
                        resizeDashboardGrid(bid);
                    }

                },
                gridComplete: function (data) {
                    if (js_search_mode == "Yes") {
                        $("#dsearch_" + bid).show();
                        $("#drefresh_" + bid).show();
                    }
                    //resizeDashboardGrid(bid);
                },
                frozenComplete: function (data) {
                    if (frozen_active == true) {
                        resizeDashboardGrid(bid);
                        generateBoardContent(bid, js_default_chart, true);
                    }
                    if ($("#gview_" + js_grid_id).find(".frozen-div").length) {
                        var tobj = $("#gview_" + js_grid_id).find(".frozen-div").find(".ui-jqgrid-htable")
                        if ($(tobj).find("tr.jqg-third-row-header").length && $(tobj).find("tr.jqg-first-row-header").find("th[role='gridcell']").length > 1) {
                            if ($(tobj).find("tr.jqg-second-row-header").find("th[role='columnheader']").length < 2) {
                                $(tobj).find("tr.jqg-second-row-header").find("th[role='columnheader']").attr("colspan", "2");
                            }
                        }
                    }
                }
            });
//    jQuery("#" + js_grid_id).jqGrid('jqPivot', "http://192.168.30.37/CIBase_Master/branches/V2/2.0.7/data.json", {
//        xDimension: [
//            {
//                dataName: 'CategoryName',
//                label: 'Category Name',
//                labelClass: "header-align-right",
//                width: 200,
//                align: 'right'
//            },
////            {
////                dataName: 'ProductName',
////                label: 'Product Name',
////                labelClass: "header-align-right",
////                width: 200,
////                align: 'right'
////            }
//        ],
//        yDimension: [
//            {
//                dataName: 'Country',
//                label: 'Country',
//                labelClass: "header-align-right",
//                width: 200,
//                align: 'right'
//            }
//        ],
//        aggregates: [
//            {
//                member: 'Quantity',
//                aggregator: 'sum',
//                summaryType: 'sum',
//                rowTotalsText: "Total Qty",
//                label: 'Qty',
//                labelClass: "header-align-right",
//                width: 100,
//                formatter: 'integer',
//                align: 'right',
//            },
//            {
//                member: 'Price',
//                aggregator: 'sum',
//                width: 100,
//                formatter: 'number',
//                label: 'Price',
//                labelClass: "header-align-right",
//                align: 'right',
//                summaryType: 'sum',
//                rowTotalsText: "Total Price",
//            }
//        ],
//        rowTotals: true,
//        colTotals: true,
//        rowTotalsText: "Sum of Price",
//        //frozenStaticCols: true
//    },
//            {
//                // grid options
//                width: 750,
//                height: 400,
//                rowNum: 50,
//                //shrinkToFit: false,
//                pager: "#" + js_pager_id,
//                //caption: "Amounts of each product category"
//            });
}
function callDashBoardGridListing(dataArr) {
    var js_col_name_arr = [], gdel_width = 0;
    var bid = dataArr['dbID'];
    var js_col_name_json = dataArr['colNames'];
    var js_col_model_json = dataArr['colModel'];
    var js_data_json = dataArr['dataModel'];
    var js_link_json = dataArr['linkModel'];
    var js_hide_paging = dataArr['hidePaging'];
    var js_row_number = parseInt(dataArr['rowNumber']);
    var js_frozen_cols = dataArr['frozenCols'];
    var js_search_mode = dataArr['searchMode'];
    var js_grid_id = dataArr['gridID'];
    var js_pager_id = dataArr['pagerID'];
    var pager_active = (js_hide_paging == "Yes") ? false : true;
    var frozen_active = (js_frozen_cols == "Yes") ? true : false;
    var bwidth = $("#content_block_" + bid).width();
    var calc_width = 0, shrink_to_fit = true;
    var row_num = ($.inArray(js_row_number, pager_row_list) != "-1") ? js_row_number : parseInt(el_theme_settings.pivot_number_of_record);
    row_num = ($.inArray(row_num, pager_row_list) != "-1") ? row_num : 20;
    for (var i in js_col_name_json) {
        js_col_name_arr.push(js_col_name_json[i]['label']);
        calc_width += parseInt(js_col_model_json[i]['width'] || 0);
    }
    if (frozen_active == true && calc_width > (bwidth - gdel_width)) {
        shrink_to_fit = false;
    }

    jQuery("#" + js_grid_id).jqGrid({
        data: js_data_json,
        datatype: "local",
        colNames: js_col_name_arr,
        colModel: js_col_model_json,
        linkModel: js_link_json,
        //cellLayout: 31,
        pgbuttons: pager_active,
        pginput: pager_active,
        pgnumbers: (el_theme_settings.grid_pgnumbers) ? true : false,
        pgnumlimit: 1, //parseInt(el_theme_settings.grid_pgnumlimit),
        pagingpos: el_theme_settings.grid_pagingpos,
        rowNum: (!pager_active) ? 1000000 : parseInt(row_num),
        rowList: (pager_active) ? pager_row_list : [],
        viewrecords: true,
        altRows: true,
        altclass: 'evenRow',
        norecmsg: js_lang_label.GENERIC_GRID_NO_RECORDS_FOUND,
        hidegrid: false,
        pager: "",
        toppager: pager_active,
        toppaging: pager_active,
        showpaging: pager_active,
        height: 200,
        width: (shrink_to_fit == false) ? bwidth - gdel_width : 650,
        autowidth: (shrink_to_fit == false) ? false : true,
        shrinkToFit: (shrink_to_fit == false) ? false : true,
        fixed: true,
        loadComplete: function (data) {
            noDashboardRecordsMessage(js_grid_id, data, "grid");
            resizeDashboardGrid(bid);
        },
        gridComplete: function () {
            if (js_search_mode == "Yes") {
                $("#dsearch_" + bid).show();
                $("#drefresh_" + bid).show();
            }
            //resizeDashboardGrid(bid);
        }
    });
    jQuery("#" + js_grid_id).jqGrid('navGrid', '#' + js_pager_id, {
        cloneToTop: true,
        add: false,
        edit: false,
        del: false,
        search: false,
        refresh: false
    }, {
        // edit options 
    }, {
        // add options
    }, {
        //del options
    }, {
        // search options
    });
//    for (var i in js_col_name_json) {
//        jQuery("#" + js_grid_id).jqGrid('setLabel', js_col_name_json[i]['vAliasName'], js_col_name_json[i]['vDisplayName'], js_col_name_json[i]['eAlignment']);
//    }
    if (shrink_to_fit == false) {
        jQuery("#" + js_grid_id).jqGrid('setFrozenColumns');
    }
}
function resizeDashboardGrid(bid) {
    var gdel_width = -1, gdel_height = 1, bdata, js_grid_id, type;
    if (!DB_pivot_data_JSON[bid]) {
        if (!DB_data_list_JSON[bid]) {
            return false;
        } else {
            bdata = DB_data_list_JSON[bid];
            type = "grid";
        }
    } else {
        type = "pivot";
        bdata = DB_pivot_data_JSON[bid];
    }
    js_grid_id = bdata['gridID'];
    if ($("#" + js_grid_id).jqGrid("getGridParam", "autowidth") == true) {
        $("#" + js_grid_id).jqGrid('setGridWidth', $("#content_block_" + bid).width() - gdel_width, true);
    }
    if ($("#dblist2_" + bid).find(".grid-norec-msg").length) {
        $("#dblist2_" + bid).css("width", "inherit");
    }
    var ctop = $("#content_block_" + bid).offset().top;
    var cheight = $("#content_block_" + bid).height();
    var gtop = $("#" + js_grid_id).offset().top;
    var gheight = parseInt(ctop) + parseInt(cheight) - parseInt(gtop) + parseInt(gdel_height);
    $("#" + js_grid_id).jqGrid('setGridHeight', gheight, true);
}
function formatDashBoardEditLink(cval, opt, rowObj) {
    var link_model = $("#" + opt.gid).jqGrid('getGridParam', 'linkModel');
    var $editId = opt.rowId;
    var $editName = opt.colModel.name;
    if (link_model && link_model[$editId] && link_model[$editId][$editName]) {
        return link_model[$editId][$editName];
    } else {
        return cval;
    }

}
function unformatDashBoardEditLink(cval, opt, cl) {
    return cval;
}
function noDashboardRecordsMessage(grid_id, data, type) {
    var temp = false;
    if (type == "grid") {
        temp = (!data || !data.records || data.records == '0') ? true : false;
    } else if (type == "pivot") {
        if ($.isArray(data)) {
            temp = (!data || !data.length) ? true : false;
        } else {
            temp = (!data || !data.records || data.records == '0') ? true : false;
        }
    }

    if (temp) {
        var nrm = $("#" + grid_id);
        var message = $(nrm).jqGrid("getGridParam", "norecmsg");
        var noc = $(nrm).find("tr.jqgfirstrow").find("td").length;
        var nrr = $("<tr />").html("<td colspan='" + noc + "' align='center'><div class='grid-norec-msg'>" + message + "</div></td>");
        $(nrm).append(nrr);
    }
}

function getChartDataFormat(fmt, val) {
    switch (fmt) {
        case 'number':
            val = $.fn.fmatter.number(val, $.jgrid.formatter);
            break;
        case 'integer':
            val = $.fn.fmatter.integer(val, $.jgrid.formatter);
            break;
        case 'currency':
            val = $.fn.fmatter.currency(val, $.jgrid.formatter);
            break;
        default:
            if (fmt != "" && $.isFunction($.fn.fmatter[fmt])) {
                val = $.fn.fmatter[fmt](val, $.jgrid.formatter);
            }
            break;
    }
    return val;
}
function chartCtrlActivity(chart, type) {
    var ret;
    switch (chart) {
        case 'bar':
            if (type == "legend") {
                ret = el_theme_settings.bar_chart_show_legend;
            } else if (type == "position") {
                ret = el_theme_settings.bar_chart_legend_position;
            } else if (type == "xaxis") {
                ret = el_theme_settings.bar_chart_show_xaxis_label;
            } else if (type == "yaxis") {
                ret = el_theme_settings.bar_chart_show_yaxis_label;
            }
            break;
        case 'pie':
            if (type == "legend") {
                ret = el_theme_settings.pie_chart_show_legend;
            } else if (type == "position") {
                ret = el_theme_settings.pie_chart_legend_position;
            } else if (type == "label") {
                ret = el_theme_settings.pie_chart_show_label;
            } else if (type == "style") {
                ret = el_theme_settings.pie_chart_label_style;
            } else if (type == "value") {
                ret = el_theme_settings.pie_chart_label_value;
            }
            break;
        case 'donut':
            if (type == "legend") {
                ret = el_theme_settings.donut_chart_show_legend;
            } else if (type == "position") {
                ret = el_theme_settings.donut_chart_legend_position;
            } else if (type == "label") {
                ret = el_theme_settings.donut_chart_show_label;
            } else if (type == "style") {
                ret = el_theme_settings.donut_chart_label_style;
            } else if (type == "value") {
                ret = el_theme_settings.donut_chart_label_value;
            }
            break;
        case 'area':
            if (type == "legend") {
                ret = el_theme_settings.area_chart_show_legend;
            } else if (type == "position") {
                ret = el_theme_settings.area_chart_legend_position;
            } else if (type == "xaxis") {
                ret = el_theme_settings.area_chart_show_xaxis_label;
            } else if (type == "yaxis") {
                ret = el_theme_settings.area_chart_show_yaxis_label;
            }
            break;
        case 'line':
            if (type == "legend") {
                ret = el_theme_settings.line_chart_show_legend;
            } else if (type == "position") {
                ret = el_theme_settings.line_chart_legend_position;
            } else if (type == "xaxis") {
                ret = el_theme_settings.line_chart_show_xaxis_label;
            } else if (type == "yaxis") {
                ret = el_theme_settings.line_chart_show_yaxis_label;
            }
            break;
        case 'horizbar':
            if (type == "legend") {
                ret = el_theme_settings.horizontal_chart_show_legend;
            } else if (type == "position") {
                ret = el_theme_settings.horizontal_chart_legend_position;
            } else if (type == "xaxis") {
                ret = el_theme_settings.horizontal_chart_show_xaxis_label;
            } else if (type == "yaxis") {
                ret = el_theme_settings.horizontal_chart_show_yaxis_label;
            }
            break;
        case 'stackbar':
            if (type == "legend") {
                ret = el_theme_settings.stacked_bar_chart_show_legend;
            } else if (type == "position") {
                ret = el_theme_settings.stacked_bar_chart_legend_position;
            } else if (type == "xaxis") {
                ret = el_theme_settings.stacked_bar_chart_show_xaxis_label;
            } else if (type == "yaxis") {
                ret = el_theme_settings.stacked_bar_chart_show_yaxis_label;
            }
            break;
        case 'stackhorizbar':
            if (type == "legend") {
                ret = el_theme_settings.stacked_horizontal_bar_chart_show_legend;
            } else if (type == "position") {
                ret = el_theme_settings.stacked_horizontal_bar_chart_legend_position;
            } else if (type == "xaxis") {
                ret = el_theme_settings.stacked_horizontal_bar_chart_show_xaxis_label;
            } else if (type == "yaxis") {
                ret = el_theme_settings.stacked_horizontal_bar_chart_show_yaxis_label;
            }
            break;
        case 'autoupdating':
            if (type == "legend") {
                ret = el_theme_settings.auto_updating_chart_show_legend;
            } else if (type == "position") {
                ret = el_theme_settings.auto_updating_chart_legend_position;
            } else if (type == "xaxis") {
                ret = el_theme_settings.auto_updating_chart_show_xaxis_label;
            } else if (type == "yaxis") {
                ret = el_theme_settings.auto_updating_chart_show_yaxis_label;
            }
            break;

    }
    return ret;
}
function resizeDSGridWidth() {
    if (!$("#dash_board_list").length || !$("#dash_board_container").length) {
        return true;
    }
    var gridster, hmrg, vmrg, twd, gwd;
    hmrg = 5, vmrg = 5;
    twd = $("#dash_board_container").width();
    twd = Math.floor(twd / 6);
    gwd = twd - hmrg - vmrg;

    gridster = $("#dash_board_list").data("gridster");
    gridster.resize_widget_dimensions({
        widget_base_dimensions: [gwd, 50]
    });
    setTimeout(function () {
        $("[id^=iDashBoardId]").each(function () {
            var bid = $(this).val();
            if ($("#dbgrid2_" + bid)) {
                resizeDashboardGrid(bid);
            }
        });
    }, 250);
}
function getDSChartColors(data) {
    if (!('chartOptions' in data)) {
        return chartColours;
    }
    if (!('colorCodes' in data['chartOptions'])) {
        return chartColours;
    }
    var color_codes = $.trim(data['chartOptions']['colorCodes']);
    if (!color_codes) {
        return chartColours;
    }
    if (!$.isArray(color_codes) && typeof color_codes == "string") {
        color_codes = color_codes.split(",");
    }
    if (color_codes.length < 2) {
        return chartColours;
    }
    return color_codes;
};
/*** Version 1.0.0 | Full source at https://github.com/harvesthq/chosen */
(function() {
    var $, AbstractChosen, Chosen, SelectParser, _ref,
            __hasProp = {}.hasOwnProperty,
            __extends = function(child, parent) {
                for (var key in parent) {
                    if (__hasProp.call(parent, key))
                        child[key] = parent[key];
                }
                function ctor() {
                    this.constructor = child;
                }
                ctor.prototype = parent.prototype;
                child.prototype = new ctor();
                child.__super__ = parent.prototype;
                return child;
            };

    SelectParser = (function() {
        function SelectParser() {
            this.options_index = 0;
            this.parsed = [];
        }

        SelectParser.prototype.add_node = function(child) {
            if (child.nodeName.toUpperCase() === "OPTGROUP") {
                return this.add_group(child);
            } else {
                return this.add_option(child);
            }
        };

        SelectParser.prototype.add_group = function(group) {
            var group_position, option, _i, _len, _ref, _results;

            group_position = this.parsed.length;
            this.parsed.push({
                array_index: group_position,
                group: true,
                label: this.escapeExpression(group.label),
                children: 0,
                disabled: group.disabled
            });
            _ref = group.childNodes;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                option = _ref[_i];
                _results.push(this.add_option(option, group_position, group.disabled));
            }
            return _results;
        };

        SelectParser.prototype.get_template_data = function(option) {
          var attribute_name, i, k, template_data, v, word, _i, _len, _ref;
          template_data = {};
          _ref = option.attributes;
          for (k in _ref) {
            v = _ref[k];
            if (typeof v.nodeName === "string") {
              attribute_name = v.nodeName.split("-");
              if (attribute_name[0] === "data" && (attribute_name = attribute_name.slice(1))) {
                for (i = _i = 0, _len = attribute_name.length; _i < _len; i = ++_i) {
                  word = attribute_name[i];
                  if (i !== 0) {
                    attribute_name[i] = word.charAt(0).toUpperCase() + word.slice(1);
                  }
                }
                template_data[attribute_name.join("")] = v.nodeValue;
              }
            }
          }
          return template_data;
        };

        SelectParser.prototype.add_option = function(option, group_position, group_disabled) {
            if (option.nodeName.toUpperCase() === "OPTION") {
                if (option.text !== "") {
                    if (group_position != null) {
                        this.parsed[group_position].children += 1;
                    }
                    this.parsed.push({
                        array_index: this.parsed.length,
                        options_index: this.options_index,
                        value: option.value,
                        text: option.text,
                        html: option.innerHTML,
                        selected: option.selected,
                        disabled: group_disabled === true ? group_disabled : option.disabled,
                        group_array_index: group_position,
                        classes: option.className,
                        style: option.style.cssText,
                        template_data: this.get_template_data(option)
                    });
                } else {
                    this.parsed.push({
                        array_index: this.parsed.length,
                        options_index: this.options_index,
                        empty: true
                    });
                }
                return this.options_index += 1;
            }
        };

        SelectParser.prototype.escapeExpression = function(text) {
            var map, unsafe_chars;

            if ((text == null) || text === false) {
                return "";
            }
            if (!/[\&\<\>\"\'\`]/.test(text)) {
                return text;
            }
            map = {
                "<": "&lt;",
                ">": "&gt;",
                '"': "&quot;",
                "'": "&#x27;",
                "`": "&#x60;"
            };
            unsafe_chars = /&(?!\w+;)|[\<\>\"\'\`]/g;
            return text.replace(unsafe_chars, function(chr) {
                return map[chr] || "&amp;";
            });
        };

        return SelectParser;

    })();

    SelectParser.select_to_array = function(select) {
        var child, parser, _i, _len, _ref;

        parser = new SelectParser();
        _ref = select.childNodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            parser.add_node(child);
        }
        return parser.parsed;
    };

    AbstractChosen = (function() {
        function AbstractChosen(form_field, options) {
            this.form_field = form_field;
            this.options = options != null ? options : {};
            if (!AbstractChosen.browser_is_supported()) {
                return;
            }
            this.is_multiple = this.form_field.multiple;
            this.set_default_text();
            this.set_default_values();
            this.setup();
            this.set_up_html();
            this.register_observers();
        }

        AbstractChosen.prototype.set_default_values = function() {
            var _this = this;

            this.click_test_action = function(evt) {
                return _this.test_active_click(evt);
            };
            this.activate_action = function(evt) {
                return _this.activate_field(evt);
            };
            this.left_index = -9999;
            this.active_field = false;
            this.mouse_on_container = false;
            this.results_showing = false;
            this.result_highlighted = null;
            this.result_single_selected = null;
            this.allow_single_deselect = (this.options.allow_single_deselect != null) && (this.form_field.options[0] != null) && this.form_field.options[0].text === "" ? this.options.allow_single_deselect : false;
            this.disable_search_threshold = this.options.disable_search_threshold || 0;
            this.disable_search = this.options.disable_search || false;
            this.enable_split_word_search = this.options.enable_split_word_search != null ? this.options.enable_split_word_search : true;
            this.group_search = this.options.group_search != null ? this.options.group_search : true;
            this.search_contains = this.options.search_contains || false;
            this.single_backstroke_delete = this.options.single_backstroke_delete != null ? this.options.single_backstroke_delete : true;
            this.max_selected_options = this.options.max_selected_options || Infinity;
            this.inherit_select_classes = this.options.inherit_select_classes || false;
            this.external_chosen_classes = this.options.external_chosen_classes || 'notranslate';
            this.display_selected_options = this.options.display_selected_options != null ? this.options.display_selected_options : true;
            return this.display_disabled_options = this.options.display_disabled_options != null ? this.options.display_disabled_options : true;
        };

        AbstractChosen.prototype.set_default_text = function() {
            if (this.form_field.getAttribute("data-placeholder")) {
                this.default_text = this.form_field.getAttribute("data-placeholder");
            } else if (this.is_multiple) {
                this.default_text = this.options.placeholder_text_multiple || this.options.placeholder_text || AbstractChosen.default_multiple_text;
            } else {
                this.default_text = this.options.placeholder_text_single || this.options.placeholder_text || AbstractChosen.default_single_text;
            }
            return this.results_none_found = this.form_field.getAttribute("data-no_results_text") || this.options.no_results_text || AbstractChosen.default_no_result_text;
        };

        AbstractChosen.prototype.mouse_enter = function() {
            return this.mouse_on_container = true;
        };

        AbstractChosen.prototype.mouse_leave = function() {
            return this.mouse_on_container = false;
        };

        AbstractChosen.prototype.input_focus = function(evt) {
            var _this = this;

            if (this.is_multiple) {
                if (!this.active_field) {
                    return setTimeout((function() {
                        return _this.container_mousedown();
                    }), 50);
                }
            } else {
                if (!this.active_field) {
                    return this.activate_field();
                }
            }
        };

        AbstractChosen.prototype.input_blur = function(evt) {
            var _this = this;

            if (!this.mouse_on_container) {
                this.active_field = false;
                return setTimeout((function() {
                    return _this.blur_test();
                }), 100);
            }
        };

        AbstractChosen.prototype.results_option_build = function(options) {
            var content, data, _i, _len, _ref;

            content = '';
            _ref = this.results_data;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                data = _ref[_i];
                if (data.group) {
                    content += this.result_add_group(data);
                } else {
                    content += this.result_add_option(data);
                }
                if (options != null ? options.first : void 0) {
                    if (data.selected && this.is_multiple) {
                        this.choice_build(data);
                    } else if (data.selected && !this.is_multiple) {
                        this.single_set_selected_text(data.text);
                    }
                }
            }
            return content;
        };

        AbstractChosen.prototype.result_add_option = function(option) {
            var classes, style, html;

            if (!option.search_match) {
                return '';
            }
            if (!this.include_option_in_results(option)) {
                return '';
            }
            classes = [];
            if (!option.disabled && !(option.selected && this.is_multiple)) {
                classes.push("active-result");
            }
            if (option.disabled && !(option.selected && this.is_multiple)) {
                classes.push("disabled-result");
            }
            if (option.selected) {
                classes.push("result-selected");
            }
            if (option.group_array_index != null) {
                classes.push("group-option");
            }
            if (option.classes !== "") {
                classes.push(option.classes);
            }
            html = this.options.template ? this.options.template(option.search_text, option.value, option.template_data, this.form_field) : option.search_text;
            style = option.style.cssText !== "" ? " style=\"" + option.style + "\"" : "";
            return "<li class=\"" + (classes.join(' ')) + "\"" + style + " data-option-array-index=\"" + option.array_index + "\">" + option.search_text + "</li>";
        };

        AbstractChosen.prototype.result_add_group = function(group) {
            if (!(group.search_match || group.group_match)) {
                return '';
            }
            if (!(group.active_options > 0)) {
                return '';
            }
            return "<li class=\"group-result\">" + group.search_text + "</li>";
        };

        AbstractChosen.prototype.results_update_field = function() {
            this.set_default_text();
            if (!this.is_multiple) {
                this.results_reset_cleanup();
            }
            this.result_clear_highlight();
            this.result_single_selected = null;
            this.results_build();
            if (this.results_showing) {
                return this.winnow_results();
            }
        };

        AbstractChosen.prototype.results_toggle = function() {
            if (this.results_showing) {
                return this.results_hide();
            } else {
                return this.results_show();
            }
        };

        AbstractChosen.prototype.results_search = function(evt) {
            if (this.results_showing) {
                return this.winnow_results();
            } else {
                return this.results_show();
            }
        };

        AbstractChosen.prototype.winnow_results = function() {
            var escapedSearchText, option, regex, regexAnchor, results, results_group, searchText, startpos, text, zregex, _i, _len, _ref;

            this.no_results_clear();
            results = 0;
            searchText = this.get_search_text();
            escapedSearchText = searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
            regexAnchor = this.search_contains ? "" : "^";
            regex = new RegExp(regexAnchor + escapedSearchText, 'i');
            zregex = new RegExp(escapedSearchText, 'i');
            _ref = this.results_data;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                option = _ref[_i];
                option.search_match = false;
                results_group = null;
                if (this.include_option_in_results(option)) {
                    if (option.group) {
                        option.group_match = false;
                        option.active_options = 0;
                    }
                    if ((option.group_array_index != null) && this.results_data[option.group_array_index]) {
                        results_group = this.results_data[option.group_array_index];
                        if (results_group.active_options === 0 && results_group.search_match) {
                            results += 1;
                        }
                        results_group.active_options += 1;
                    }
                    if (!(option.group && !this.group_search)) {
                        option.search_text = option.group ? option.label : option.html;
                        option.search_match = this.search_string_match(option.search_text, regex);
                        if (option.search_match && !option.group) {
                            results += 1;
                        }
                        if (option.search_match) {
                            if (searchText.length) {
                                startpos = option.search_text.search(zregex);
                                text = option.search_text.substr(0, startpos + searchText.length) + '</em>' + option.search_text.substr(startpos + searchText.length);
                                option.search_text = text.substr(0, startpos) + '<em>' + text.substr(startpos);
                            }
                            if (results_group != null) {
                                results_group.group_match = true;
                            }
                        } else if ((option.group_array_index != null) && this.results_data[option.group_array_index].search_match) {
                            option.search_match = true;
                        }
                        option.search_text = this.options.template ? this.options.template(option.search_text, option.value, option.template_data, this.form_field) : option.search_text;
                    }
                }
            }
            this.result_clear_highlight();
            if (results < 1 && searchText.length) {
                this.update_results_content("", true);
                this.calc_container_left();
                return this.no_results(searchText);
            } else {
                this.update_results_content(this.results_option_build(), true);
                this.calc_container_left();
                return this.winnow_results_set_highlight();
            }
        };

        AbstractChosen.prototype.search_string_match = function(search_string, regex) {
            var part, parts, _i, _len;

            if (regex.test(search_string)) {
                return true;
            } else if (this.enable_split_word_search && (search_string.indexOf(" ") >= 0 || search_string.indexOf("[") === 0)) {
                parts = search_string.replace(/\[|\]/g, "").split(" ");
                if (parts.length) {
                    for (_i = 0, _len = parts.length; _i < _len; _i++) {
                        part = parts[_i];
                        if (regex.test(part)) {
                            return true;
                        }
                    }
                }
            }
        };

        AbstractChosen.prototype.choices_count = function() {
            var option, _i, _len, _ref;

            if (this.selected_option_count != null) {
                return this.selected_option_count;
            }
            this.selected_option_count = 0;
            _ref = this.form_field.options;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                option = _ref[_i];
                if (option.selected) {
                    this.selected_option_count += 1;
                }
            }
            return this.selected_option_count;
        };

        AbstractChosen.prototype.choices_click = function(evt) {
            evt.preventDefault();
            if (!(this.results_showing || this.is_disabled)) {
                return this.results_show();
            }
        };

        AbstractChosen.prototype.keyup_checker = function(evt) {
            var stroke, _ref;

            stroke = (_ref = evt.which) != null ? _ref : evt.keyCode;
            this.search_field_scale();
            switch (stroke) {
                case 8:
                    if (this.is_multiple && this.backstroke_length < 1 && this.choices_count() > 0) {
                        return this.keydown_backstroke();
                    } else if (!this.pending_backstroke) {
                        this.result_clear_highlight();
                        return this.results_search();
                    }
                    break;
                case 13:
                    evt.preventDefault();
                    if (this.results_showing) {
                        return this.result_select(evt);
                    }
                    break;
                case 27:
                    if (this.results_showing) {
                        this.results_hide();
                    }
                    return true;
                case 9:
                case 38:
                case 40:
                case 16:
                case 91:
                case 17:
                    break;
                default:
                    return this.results_search();
            }
        };

        AbstractChosen.prototype.container_width = function() {
            if (this.options.width != null) {
                return this.options.width;
            } else {
                if ($(this.form_field).is(":hidden")) {
                    return "" + getComputedStyle(this.form_field).width;
                } else {
                    return "" + this.form_field.offsetWidth + "px";
                }
            }
        };

        AbstractChosen.prototype.include_option_in_results = function(option) {
            if (this.is_multiple && (!this.display_selected_options && option.selected)) {
                return false;
            }
            if (!this.display_disabled_options && option.disabled) {
                return false;
            }
            if (option.empty) {
                return false;
            }
            return true;
        };

        AbstractChosen.browser_is_supported = function() {
            if (window.navigator.appName === "Microsoft Internet Explorer") {
                return document.documentMode >= 8;
            }
            if (/iP(od|hone)/i.test(window.navigator.userAgent)) {
                return false;
            }
            if (/Android/i.test(window.navigator.userAgent)) {
                if (/Mobile/i.test(window.navigator.userAgent)) {
                    return false;
                }
            }
            return true;
        };

        AbstractChosen.default_multiple_text = "Select Some Options";

        AbstractChosen.default_single_text = "Select an Option";

        AbstractChosen.default_no_result_text = "No results match";

        return AbstractChosen;

    })();

    $ = jQuery;

    $.fn.extend({
        chosen: function(options) {
            if (!AbstractChosen.browser_is_supported()) {
                return this;
            }
            return this.each(function(input_field) {
                var $this, chosen;

                $this = $(this);
                chosen = $this.data('chosen');
                if (options === 'destroy' && chosen) {
                    chosen.destroy();
                } else if (!chosen) {
                    $this.data('chosen', new Chosen(this, options));
                }
            });
        }
    });

    Chosen = (function(_super) {
        __extends(Chosen, _super);

        function Chosen() {
            _ref = Chosen.__super__.constructor.apply(this, arguments);
            return _ref;
        }

        Chosen.prototype.setup = function() {
            this.form_field_jq = $(this.form_field);
            this.current_selectedIndex = this.form_field.selectedIndex;
            return this.is_rtl = this.form_field_jq.hasClass("chosen-rtl");
        };

        Chosen.prototype.set_up_html = function() {
            var container_classes, container_props;

            container_classes = ["chosen-container"];
            container_classes.push("chosen-container-" + (this.is_multiple ? "multi" : "single"));
            if (this.inherit_select_classes && this.form_field.className) {
                container_classes.push(this.form_field.className);
            }
            if (this.external_chosen_classes) {
                container_classes.push(this.external_chosen_classes);
            }
            if (this.is_rtl) {
                container_classes.push("chosen-rtl");
            }
            container_props = {
                'class': container_classes.join(' '),
                'style': "width: " + (this.container_width()) + ";",
                'title': this.form_field.title
            };
            if (this.form_field.id.length) {
                container_props.id = this.form_field.id.replace(/[^\w]/g, '_') + "_chosen";
            }
            this.container = $("<div />", container_props);
            if (this.is_multiple) {
                this.container.html('<ul class="chosen-choices"><li class="search-field"><input type="text" value="' + this.default_text + '" class="default multi-container-search" autocomplete="off" style="width:25px;" /></li></ul><div class="chosen-drop"><ul class="chosen-results"></ul></div>');
            } else {
                this.container.html('<a class="chosen-single chosen-default" tabindex="-1"><span>' + this.default_text + '</span><div><b></b></div></a><div class="chosen-drop"><div class="chosen-search"><input type="text" autocomplete="off" /></div><ul class="chosen-results"></ul></div>');
            }
            this.form_field_jq.hide().after(this.container);
            this.dropdown = this.container.find('div.chosen-drop').first();
            this.search_field = this.container.find('input').first();
            this.search_results = this.container.find('ul.chosen-results').first();
            this.search_field_scale();
            this.search_no_results = this.container.find('li.no-results').first();
            if (this.is_multiple) {
                this.search_choices = this.container.find('ul.chosen-choices').first();
                this.search_container = this.container.find('li.search-field').first();
            } else {
                this.search_container = this.container.find('div.chosen-search').first();
                this.selected_item = this.container.find('.chosen-single').first();
            }
            this.results_build();
            this.set_tab_index();
            this.set_label_behavior();
            return this.form_field_jq.trigger("chosen:ready", {
                chosen: this
            });
        };

        Chosen.prototype.register_observers = function() {
            var _this = this;

            this.container.bind('mousedown.chosen', function(evt) {
                _this.container_mousedown(evt);
            });
            this.container.bind('mouseup.chosen', function(evt) {
                _this.container_mouseup(evt);
            });
            this.container.bind('mouseenter.chosen', function(evt) {
                _this.mouse_enter(evt);
            });
            this.container.bind('mouseleave.chosen', function(evt) {
                _this.mouse_leave(evt);
            });
            this.search_results.bind('mouseup.chosen', function(evt) {
                _this.search_results_mouseup(evt);
            });
            this.search_results.bind('mouseover.chosen', function(evt) {
                _this.search_results_mouseover(evt);
            });
            this.search_results.bind('mouseout.chosen', function(evt) {
                _this.search_results_mouseout(evt);
            });
            this.search_results.bind('mousewheel.chosen DOMMouseScroll.chosen', function(evt) {
                _this.search_results_mousewheel(evt);
            });
            this.form_field_jq.bind("chosen:updated.chosen", function(evt) {
                _this.results_update_field(evt);
            });
            this.form_field_jq.bind("chosen:activate.chosen", function(evt) {
                _this.activate_field(evt);
            });
            this.form_field_jq.bind("chosen:open.chosen", function(evt) {
                _this.container_mousedown(evt);
            });
            this.search_field.bind('blur.chosen', function(evt) {
                _this.input_blur(evt);
            });
            this.search_field.bind('keyup.chosen', function(evt) {
                _this.keyup_checker(evt);
            });
            this.search_field.bind('keydown.chosen', function(evt) {
                _this.keydown_checker(evt);
            });
            this.search_field.bind('focus.chosen', function(evt) {
                _this.input_focus(evt);
            });
            if (this.is_multiple) {
                return this.search_choices.bind('click.chosen', function(evt) {
                    _this.choices_click(evt);
                });
            } else {
                return this.container.bind('click.chosen', function(evt) {
                    evt.preventDefault();
                });
            }
        };

        Chosen.prototype.destroy = function() {
            $(document).unbind("click.chosen", this.click_test_action);
            if (this.search_field[0].tabIndex) {
                this.form_field_jq[0].tabIndex = this.search_field[0].tabIndex;
            }
            this.container.remove();
            this.form_field_jq.removeData('chosen');
            return this.form_field_jq.show();
        };

        Chosen.prototype.search_field_disabled = function() {
            this.is_disabled = this.form_field_jq[0].disabled;
            if (this.is_disabled) {
                this.container.addClass('chosen-disabled');
                this.search_field[0].disabled = true;
                if (!this.is_multiple) {
                    this.selected_item.unbind("focus.chosen", this.activate_action);
                }
                return this.close_field();
            } else {
                this.container.removeClass('chosen-disabled');
                this.search_field[0].disabled = false;
                if (!this.is_multiple) {
                    return this.selected_item.bind("focus.chosen", this.activate_action);
                }
            }
        };

        Chosen.prototype.container_mousedown = function(evt) {
            if (!this.is_disabled) {
                if (evt && evt.type === "mousedown" && !this.results_showing) {
                    evt.preventDefault();
                }
                if (!((evt != null) && ($(evt.target)).hasClass("search-choice-close"))) {
                    if (!this.active_field) {
                        if (this.is_multiple) {
                            this.search_field.val("");
                        }
                        $(document).bind('click.chosen', this.click_test_action);
                        this.results_show();
                    } else if (!this.is_multiple && evt && (($(evt.target)[0] === this.selected_item[0]) || $(evt.target).parents("a.chosen-single").length)) {
                        evt.preventDefault();
                        this.results_toggle();
                    }
                    return this.activate_field();
                }
            }
        };

        Chosen.prototype.container_mouseup = function(evt) {
            if (evt.target.nodeName === "ABBR" && !this.is_disabled) {
                return this.results_reset(evt);
            }
        };

        Chosen.prototype.search_results_mousewheel = function(evt) {
            var delta, _ref1, _ref2;

            delta = -((_ref1 = evt.originalEvent) != null ? _ref1.wheelDelta : void 0) || ((_ref2 = evt.originialEvent) != null ? _ref2.detail : void 0);
            if (delta != null) {
                evt.preventDefault();
                if (evt.type === 'DOMMouseScroll') {
                    delta = delta * 40;
                }
                return this.search_results.scrollTop(delta + this.search_results.scrollTop());
            }
        };

        Chosen.prototype.blur_test = function(evt) {
            if (!this.active_field && this.container.hasClass("chosen-container-active")) {
                return this.close_field();
            }
        };

        Chosen.prototype.close_field = function() {
            $(document).unbind("click.chosen", this.click_test_action);
            this.active_field = false;
            this.results_hide();
            this.container.removeClass("chosen-container-active");
            this.dropdown.css({"left": this.left_index + "px"});
            this.clear_backstroke();
            this.show_search_field_default();
            return this.search_field_scale();
        };

        Chosen.prototype.activate_field = function() {
            this.container.addClass("chosen-container-active");
            this.active_field = true;
            this.search_field.val(this.search_field.val());
            return this.search_field.focus();
        };

        Chosen.prototype.test_active_click = function(evt) {
            if (this.container.is($(evt.target).closest('.chosen-container'))) {
                return this.active_field = true;
            } else {
                return this.close_field();
            }
        };

        Chosen.prototype.results_build = function() {
            this.parsing = true;
            this.selected_option_count = null;
            this.results_data = SelectParser.select_to_array(this.form_field);
            if (this.is_multiple) {
                this.search_choices.find("li.search-choice").remove();
            } else if (!this.is_multiple) {
                this.single_set_selected_text();
                if (this.disable_search || this.form_field.options.length <= this.disable_search_threshold) {
                    this.search_field[0].readOnly = true;
                    this.container.addClass("chosen-container-single-nosearch");
                } else {
                    this.search_field[0].readOnly = false;
                    this.container.removeClass("chosen-container-single-nosearch");
                }
            }
            this.update_results_content(this.results_option_build({
                first: true
            }));
            this.search_field_disabled();
            this.show_search_field_default();
            this.search_field_scale();
            return this.parsing = false;
        };

        Chosen.prototype.result_do_highlight = function(el) {
            var high_bottom, high_top, maxHeight, visible_bottom, visible_top;

            if (el.length) {
                this.result_clear_highlight();
                this.result_highlight = el;
                this.result_highlight.addClass("highlighted");
                maxHeight = parseInt(this.search_results.css("maxHeight"), 10);
                visible_top = this.search_results.scrollTop();
                visible_bottom = maxHeight + visible_top;
                high_top = this.result_highlight.position().top + this.search_results.scrollTop();
                high_bottom = high_top + this.result_highlight.outerHeight();
                if (high_bottom >= visible_bottom) {
                    return this.search_results.scrollTop((high_bottom - maxHeight) > 0 ? high_bottom - maxHeight : 0);
                } else if (high_top < visible_top) {
                    return this.search_results.scrollTop(high_top);
                }
            }
        };

        Chosen.prototype.result_clear_highlight = function() {
            if (this.result_highlight) {
                this.result_highlight.removeClass("highlighted");
            }
            return this.result_highlight = null;
        };

        Chosen.prototype.results_show = function() {
            if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
                this.form_field_jq.trigger("chosen:maxselected", {
                    chosen: this
                });
                return false;
            }
            this.container.addClass("chosen-with-drop");
            this.form_field_jq.trigger("chosen:showing_dropdown", {
                chosen: this
            });
            this.results_showing = true;
            this.search_field.focus();
            this.search_field.val(this.search_field.val());
            return this.winnow_results();
        };

        Chosen.prototype.update_results_content = function(content, hide) {
            if (hide === true) {
                this.search_results.css({"visibility": "hidden"});
            }
            return this.search_results.html(content);
        };

        Chosen.prototype.results_hide = function() {
            if (this.results_showing) {
                this.result_clear_highlight();
                this.container.removeClass("chosen-with-drop");
                this.dropdown.css({"left": this.left_index + "px"});
                this.form_field_jq.trigger("chosen:hiding_dropdown", {
                    chosen: this
                });
            }
            return this.results_showing = false;
        };

        Chosen.prototype.set_tab_index = function(el) {
            var ti;

            if (this.form_field.tabIndex) {
                ti = this.form_field.tabIndex;
                this.form_field.tabIndex = -1;
                return this.search_field[0].tabIndex = ti;
            }
        };

        Chosen.prototype.set_label_behavior = function() {
            var _this = this;

            this.form_field_label = this.form_field_jq.parents("label");
            if (!this.form_field_label.length && this.form_field.id.length) {
                this.form_field_label = $("label[for='" + this.form_field.id + "']");
            }
            if (this.form_field_label.length > 0) {
                return this.form_field_label.bind('click.chosen', function(evt) {
                    if (_this.is_multiple) {
                        return _this.container_mousedown(evt);
                    } else {
                        return _this.activate_field();
                    }
                });
            }
        };

        Chosen.prototype.show_search_field_default = function() {
            if (this.is_multiple && this.choices_count() < 1 && !this.active_field) {
                this.search_field.val(this.default_text);
                return this.search_field.addClass("default");
            } else {
                this.search_field.val("");
                return this.search_field.removeClass("default");
            }
        };

        Chosen.prototype.search_results_mouseup = function(evt) {
            var target;

            target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
            if (target.length) {
                this.result_highlight = target;
                this.result_select(evt);
                return this.search_field.focus();
            }
        };

        Chosen.prototype.search_results_mouseover = function(evt) {
            var target;

            target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
            if (target) {
                return this.result_do_highlight(target);
            }
        };

        Chosen.prototype.search_results_mouseout = function(evt) {
            if ($(evt.target).hasClass("active-result" || $(evt.target).parents('.active-result').first())) {
                return this.result_clear_highlight();
            }
        };

        Chosen.prototype.choice_build = function(item) {
            var choice, close_link, _this = this;

            choice = $('<li />', {
                "class": "search-choice"
            }).html("<span>" + item.html + "</span>");
            if (item.disabled) {
                choice.addClass('search-choice-disabled');
            } else {
                close_link = $('<a />', {
                    "class": 'search-choice-close',
                    'data-option-array-index': item.array_index
                });
                close_link.bind('click.chosen', function(evt) {
                    return _this.choice_destroy_link_click(evt);
                });
                choice.append(close_link);
            }
            return this.search_container.before(choice);
        };

        Chosen.prototype.choice_destroy_link_click = function(evt) {
            evt.preventDefault();
            evt.stopPropagation();
            if (!this.is_disabled) {
                return this.choice_destroy($(evt.target));
            }
        };

        Chosen.prototype.choice_destroy = function(link) {
            if (this.result_deselect(link[0].getAttribute("data-option-array-index"))) {
                this.show_search_field_default();
                if (this.is_multiple && this.choices_count() > 0 && this.search_field.val().length < 1) {
                    this.results_hide();
                }
                link.parents('li').first().remove();
                return this.search_field_scale();
            }
        };

        Chosen.prototype.results_reset = function() {
            this.form_field.options[0].selected = true;
            this.selected_option_count = null;
            this.single_set_selected_text();
            this.show_search_field_default();
            this.results_reset_cleanup();
            this.form_field_jq.trigger("change");
            if (this.active_field) {
                return this.results_hide();
            }
        };

        Chosen.prototype.results_reset_cleanup = function() {
            this.current_selectedIndex = this.form_field.selectedIndex;
            return this.selected_item.find("abbr").remove();
        };

        Chosen.prototype.result_select = function(evt) {
            var high, item, selected_index;

            if (this.result_highlight) {
                high = this.result_highlight;
                this.result_clear_highlight();
                if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
                    this.form_field_jq.trigger("chosen:maxselected", {
                        chosen: this
                    });
                    return false;
                }
                if (this.is_multiple) {
                    high.removeClass("active-result");
                } else {
                    if (this.result_single_selected) {
                        this.result_single_selected.removeClass("result-selected");
                        selected_index = this.result_single_selected[0].getAttribute('data-option-array-index');
                        this.results_data[selected_index].selected = false;
                    }
                    this.result_single_selected = high;
                }
                high.addClass("result-selected");
                item = this.results_data[high[0].getAttribute("data-option-array-index")];
                item.selected = true;
                this.form_field.options[item.options_index].selected = true;
                this.selected_option_count = null;
                if (this.is_multiple) {
                    this.choice_build(item);
                } else {
                    this.single_set_selected_text(item.text);
                }
                if (!((evt.metaKey || evt.ctrlKey) && this.is_multiple)) {
                    this.results_hide();
                }
                this.search_field.val("");
                if (this.is_multiple || this.form_field.selectedIndex !== this.current_selectedIndex) {
                    this.form_field_jq.trigger("change", {
                        'selected': this.form_field.options[item.options_index].value
                    });
                }
                this.current_selectedIndex = this.form_field.selectedIndex;
                return this.search_field_scale();
            }
        };

        Chosen.prototype.single_set_selected_text = function(text) {
            if (text == null) {
                text = this.default_text;
            }
            if (text === this.default_text) {
                this.selected_item.addClass("chosen-default");
            } else {
                this.single_deselect_control_build();
                this.selected_item.removeClass("chosen-default");
            }
            return this.selected_item.find("span").text(text);
        };

        Chosen.prototype.result_deselect = function(pos) {
            var result_data;

            result_data = this.results_data[pos];
            if (!this.form_field.options[result_data.options_index].disabled) {
                result_data.selected = false;
                this.form_field.options[result_data.options_index].selected = false;
                this.selected_option_count = null;
                this.result_clear_highlight();
                if (this.results_showing) {
                    this.winnow_results();
                }
                this.form_field_jq.trigger("change", {
                    deselected: this.form_field.options[result_data.options_index].value
                });
                this.search_field_scale();
                return true;
            } else {
                return false;
            }
        };

        Chosen.prototype.single_deselect_control_build = function() {
            if (!this.allow_single_deselect) {
                return;
            }
            if (!this.selected_item.find("abbr").length) {
                this.selected_item.find("span").first().after("<abbr class=\"search-choice-close\"></abbr>");
            }
            return this.selected_item.addClass("chosen-single-with-deselect");
        };

        Chosen.prototype.get_search_text = function() {
            if (this.search_field.val() === this.default_text) {
                return "";
            } else {
                return $('<div/>').text($.trim(this.search_field.val())).html();
            }
        };

        Chosen.prototype.winnow_results_set_highlight = function() {
            var do_high, selected_results;

            selected_results = !this.is_multiple ? this.search_results.find(".result-selected.active-result") : [];
            do_high = selected_results.length ? selected_results.first() : this.search_results.find(".active-result").first();
            if (do_high != null) {
                return this.result_do_highlight(do_high);
            }
        };

        Chosen.prototype.no_results = function(terms) {
            var no_results_html;

            no_results_html = $('<li class="no-results">' + this.results_none_found + ' "<span></span>"</li>');
            no_results_html.find("span").first().html(terms);
            return this.search_results.append(no_results_html);
        };

        Chosen.prototype.no_results_clear = function() {
            return this.search_results.find(".no-results").remove();
        };

        Chosen.prototype.keydown_arrow = function() {
            var next_sib;

            if (this.results_showing && this.result_highlight) {
                next_sib = this.result_highlight.nextAll("li.active-result").first();
                if (next_sib) {
                    return this.result_do_highlight(next_sib);
                }
            } else {
                return this.results_show();
            }
        };

        Chosen.prototype.keyup_arrow = function() {
            var prev_sibs;

            if (!this.results_showing && !this.is_multiple) {
                return this.results_show();
            } else if (this.result_highlight) {
                prev_sibs = this.result_highlight.prevAll("li.active-result");
                if (prev_sibs.length) {
                    return this.result_do_highlight(prev_sibs.first());
                } else {
                    if (this.choices_count() > 0) {
                        this.results_hide();
                    }
                    return this.result_clear_highlight();
                }
            }
        };

        Chosen.prototype.keydown_backstroke = function() {
            var next_available_destroy;

            if (this.pending_backstroke) {
                this.choice_destroy(this.pending_backstroke.find("a").first());
                return this.clear_backstroke();
            } else {
                next_available_destroy = this.search_container.siblings("li.search-choice").last();
                if (next_available_destroy.length && !next_available_destroy.hasClass("search-choice-disabled")) {
                    this.pending_backstroke = next_available_destroy;
                    if (this.single_backstroke_delete) {
                        return this.keydown_backstroke();
                    } else {
                        return this.pending_backstroke.addClass("search-choice-focus");
                    }
                }
            }
        };

        Chosen.prototype.clear_backstroke = function() {
            if (this.pending_backstroke) {
                this.pending_backstroke.removeClass("search-choice-focus");
            }
            return this.pending_backstroke = null;
        };

        Chosen.prototype.keydown_checker = function(evt) {
            var stroke, _ref1;

            stroke = (_ref1 = evt.which) != null ? _ref1 : evt.keyCode;
            this.search_field_scale();
            if (stroke !== 8 && this.pending_backstroke) {
                this.clear_backstroke();
            }
            switch (stroke) {
                case 8:
                    this.backstroke_length = this.search_field.val().length;
                    break;
                case 9:
                    if (this.results_showing && !this.is_multiple) {
                        this.result_select(evt);
                    }
                    this.mouse_on_container = false;
                    break;
                case 13:
                    evt.preventDefault();
                    break;
                case 38:
                    evt.preventDefault();
                    this.keyup_arrow();
                    break;
                case 40:
                    evt.preventDefault();
                    this.keydown_arrow();
                    break;
            }
        };

        Chosen.prototype.search_field_scale = function() {
            var div, f_width, h, style, style_block, styles, w, _i, _len;

            if (this.is_multiple) {
                h = 0;
                w = 0;
                style_block = "position:absolute; left: -1000px; top: -1000px; display:none;";
                styles = ['font-size', 'font-style', 'font-weight', 'font-family', 'line-height', 'text-transform', 'letter-spacing'];
                for (_i = 0, _len = styles.length; _i < _len; _i++) {
                    style = styles[_i];
                    style_block += style + ":" + this.search_field.css(style) + ";";
                }
                div = $('<div />', {
                    'style': style_block
                });
                div.text(this.search_field.val());
                $('body').append(div[0]);
                w = div.width() + 25;
                div.remove();
                f_width = this.container.outerWidth();
                if (w > f_width - 10) {
                    w = f_width - 10;
                }
                this.search_field.css({
                    'width': w + 'px'
                });
                if (this.search_container) {
                    $(this.search_container).css({'width': "auto"});
                    if ($(this.container).is(":hidden")) {
                        if (!$(this.search_choices).find("li.search-choice").length) {
                            $(this.search_container).css({'width': "100%"});
                            $(this.search_field).css({'width': "100%"});
                        }
                    }
                }
                return this.search_field;
            }
        };

        Chosen.prototype.calc_container_left = function() {
            var cont_left = $(this.container).offset().left;
            var cont_width = $(this.container).width();
            var drop_width = $(this.dropdown).width();
            var calc_left = cont_left + drop_width;
            var wind_width = $(window).width();
            this.search_results.css({"visibility": "visible"});
            if (calc_left > wind_width) {
                var cont_port = wind_width - (cont_left + cont_width);
                var app_left = (calc_left + cont_port) - wind_width;
                this.dropdown.css({"left": "-" + app_left + "px"});
            } else {
                this.dropdown.css({"left": "0px"});
            }
            if (!this.container.attr("aria-width-calc")) {
                if (this.search_results[0].scrollHeight > 240) {
                    var scr_width = $(this.search_results).outerWidth() - $(this.search_results)[0].scrollWidth;
                    var extra_width = $(this.dropdown).width() - ($(this.search_results).textWidth() + scr_width);
                    if (extra_width <= 2) {
                        drop_width += scr_width + 2;
                    }
                }
                this.dropdown.css({"width": drop_width + "px"});
                this.container.attr("aria-width-calc", "1");
            }
            if ($(this.form_field).attr('aria-parent-overflow') == "true") {
                var $hhs_left = this.container.offset().left;
                var $hhs_top = this.container.offset().top;
                var $hhs_top = parseFloat($hhs_top) + parseFloat(this.container.outerHeight()) - $(window).scrollTop();
                var $hhs_width = parseFloat(this.container.outerWidth());
                this.container.find('.chosen-drop').css({"left": $hhs_left + "px", "top": $hhs_top + "px", "position": "fixed","width": $hhs_width + "px !important","min-width":"inherit"});
                this.container.find('.chosen-drop').width($hhs_width);
            }
        };

        return Chosen;

    })(AbstractChosen);

}).call(this);
;
(function(a){var w=function(a,d){var k=this.slice((d||a)+1||this.length);this.length=0>a?this.length+a:a;return this.push.apply(this,k)};a.fn.ajaxChosen=function(c,d,k){var e=a(this),h,q,n,u,r,m=!1,l=[],t=!1,p="loading.gif";0===a("option",e).length&&e.append('<option value=""></option>');k?e.chosen(k):e.chosen();h=e.next();n=a("input",h);u=n.get(0)?n.get(0).style.background:"";"success"in c&&a.isFunction(c.success)&&(r=c.success);c.success=function(b,c,g){var f=b,k,m=l.length,p=!1,v=!1;if(t)return l.shift(),
!1;if(1<m){if(a.each(l,function(a,c){if(b.q===c)return a!==m-1?(p=!0,w.call(l,a)):(v=!0,l.length=0),!1}),p||!v)return!1}else if("undefined"===typeof l.shift())return!1;if("processItems"in d&&a.isFunction(d.processItems))f=d.processItems(b);else if("results"in f)f=f.results;else return console.log("Expected results key in data, but was not found. Options could not be built"),!1;k=a("option:selected",e).not(":empty").clone().attr("selected",!0);a("option",e).remove();a('<option value=""/>').appendTo(e);
h.hasClass("chosen-container-multi")&&k.appendTo(e);a.isArray(f)?a.each(f,function(b,c){var d;if(c.group)return d=e.find("optgroup[label='"+c.text+"']"),d.size()||(d=a("<optgroup />")),d.attr("label",c.text).appendTo(e),a.each(c.items,function(b,c){a('<option value="'+c.id+'">'+c.text+"</option>").appendTo(d)});a('<option value="'+c.id+'">'+c.text+"</option>").appendTo(e)}):a.each(f,function(b,c){a('<option value="'+b+'">'+c+"</option>").appendTo(e)});e.trigger("chosen:updated");q=a.Event("keyup");
q.which=39;n.val(b.q).trigger(q).get(0).style.background=u;a("> a span",h).text(e.attr("placeholder")||e.attr("data-placeholder")||"");0<f.length?a(".no-results",h).hide():a(".no-results",h).show();r&&r(b,c,g)};d||(d={});"loadingImg"in d&&(p=d.loadingImg);a(".chosen-search > input, .chosen-choices .search-field input",h).bind("keyup",function(b){var e=a(this),g=e.val(),f=e.attr("prevVal");if(9===b.which||13===b.which||16===b.which||17===b.which||18===b.which||19===b.which||20===b.which||27===b.which||
33===b.which||34===b.which||35===b.which||36===b.which||37===b.which||38===b.which||39===b.which||40===b.which||44===b.which||45===b.which||144===b.which||145===b.which||91===b.which||93===b.which||224===b.which||112<=b.which&&123>=b.which||g==f)return!1;e.attr("prevVal",g);if("useAjax"in d&&a.isFunction(d.useAjax)&&!d.useAjax(b)||0===a.trim(g).length)return!1;t=!0;a(".no-results",h).hide();a.isArray(c.data)?("q"===c.data[c.data.length-1].name&&c.data.pop(),c.data=c.data.concat({name:"q",value:g})):
("data"in c||(c.data={}),a.extend(c.data,{data:{q:g}}));"generateUrl"in d&&a.isFunction(d.generateUrl)&&(c.url=d.generateUrl(g));n.get(0).style.background='transparent url("'+p+'") no-repeat right 3px';m&&clearTimeout(m);m=setTimeout(function(){l.push(g);t=!1;a.ajax(c)},700)});return e}})(jQuery);;
(function(a){typeof define==="function"&&define.amd?define(["jquery"],a):a(jQuery)})(function(a){function P(b){var c=this,d=b.elements,e=d.tooltip,f=".bgiframe-"+b.id;a.extend(c,{init:function(){d.bgiframe=a('<iframe class="ui-tooltip-bgiframe" frameborder="0" tabindex="-1" src="javascript:\'\';"  style="display:block; position:absolute; z-index:-1; filter:alpha(opacity=0); -ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";"></iframe>'),d.bgiframe.appendTo(e),e.bind("tooltipmove"+f,c.adjust)},adjust:function(){var a=b.get("dimensions"),c=b.plugins.tip,f=d.tip,g,h;h=parseInt(e.css("border-left-width"),10)||0,h={left:-h,top:-h},c&&f&&(g=c.corner.precedance==="x"?["width","left"]:["height","top"],h[g[1]]-=f[g[0]]()),d.bgiframe.css(h).css(a)},destroy:function(){d.bgiframe.remove(),e.unbind(f)}}),c.init()}function O(o,p){function I(a){var b=a.precedance===g,c=x[b?h:i],d=x[b?i:h],e=a.string().indexOf(n)>-1,f=c*(e?.5:1),j=Math.pow,k=Math.round,l,m,o,p=Math.sqrt(j(f,2)+j(d,2)),q=[z/f*p,z/d*p];q[2]=Math.sqrt(j(q[0],2)-j(z,2)),q[3]=Math.sqrt(j(q[1],2)-j(z,2)),l=p+q[2]+q[3]+(e?0:q[0]),m=l/p,o=[k(m*d),k(m*c)];return{height:o[b?0:1],width:o[b?1:0]}}function H(b){var c=u.titlebar&&b.y===j,d=c?u.titlebar:u.content,e=a.browser.mozilla,f=e?"-moz-":a.browser.webkit?"-webkit-":"",g=b.y+(e?"":"-")+b.x,h=f+(e?"border-radius-"+g:"border-"+g+"-radius");return parseInt(d.css(h),10)||parseInt(v.css(h),10)||0}function G(a,b,c){b=b?b:a[a.precedance];var d=v.hasClass(C),e=u.titlebar&&a.y===j,f=e?u.titlebar:u.tooltip,g="border-"+b+"-width",h;v.addClass(C),h=parseInt(f.css(g),10),h=(c?h||parseInt(v.css(g),10):h)||0,v.toggleClass(C,d);return h}function F(a,d,h,i){if(u.tip){var p=r.corner.clone(),s=h.adjusted,v=o.options.position.adjust.method.split(" "),x=v[0],y=v[1]||v[0],z={left:c,top:c,x:0,y:0},A,B={},C;r.corner.fixed!==b&&(x===q&&p.precedance===f&&s.left&&p.y!==n?p.precedance=p.precedance===f?g:f:x!==q&&s.left&&(p.x=p.x===n?s.left>0?k:m:p.x===k?m:k),y===q&&p.precedance===g&&s.top&&p.x!==n?p.precedance=p.precedance===g?f:g:y!==q&&s.top&&(p.y=p.y===n?s.top>0?j:l:p.y===j?l:j),p.string()!==w.corner.string()&&(w.top!==s.top||w.left!==s.left)&&r.update(p,c)),A=r.position(p,s),A[p.x]+=G(p,p.x,b),A[p.y]+=G(p,p.y,b),A.right!==e&&(A.left=-A.right),A.bottom!==e&&(A.top=-A.bottom),A.user=Math.max(0,t.offset);if(z.left=x===q&&!!s.left)p.x===n?B["margin-left"]=z.x=A["margin-left"]-s.left:(C=A.right!==e?[s.left,-A.left]:[-s.left,A.left],(z.x=Math.max(C[0],C[1]))>C[0]&&(h.left-=s.left,z.left=c),B[A.right!==e?m:k]=z.x);if(z.top=y===q&&!!s.top)p.y===n?B["margin-top"]=z.y=A["margin-top"]-s.top:(C=A.bottom!==e?[s.top,-A.top]:[-s.top,A.top],(z.y=Math.max(C[0],C[1]))>C[0]&&(h.top-=s.top,z.top=c),B[A.bottom!==e?l:j]=z.y);u.tip.css(B).toggle(!(z.x&&z.y||p.x===n&&z.y||p.y===n&&z.x)),h.left-=A.left.charAt?A.user:x!==q||z.top||!z.left&&!z.top?A.left:0,h.top-=A.top.charAt?A.user:y!==q||z.left||!z.left&&!z.top?A.top:0,w.left=s.left,w.top=s.top,w.corner=p.clone()}}function E(){x.width=t.width,x.height=t.height}function D(){x.width=t.height,x.height=t.width}var r=this,t=o.options.style.tip,u=o.elements,v=u.tooltip,w={top:0,left:0},x={width:t.width,height:t.height},y={},z=t.border||0,A=".qtip-tip",B=!!(a("<canvas />")[0]||{}).getContext;r.mimic=r.corner=d,r.border=z,r.offset=t.offset,r.size=x,o.checks.tip={"^position.my|style.tip.(corner|mimic|border)$":function(){r.init()||r.destroy(),o.reposition()},"^style.tip.(height|width)$":function(){x={width:t.width,height:t.height},r.create(),r.update(),o.reposition()},"^content.title.text|style.(classes|widget)$":function(){u.tip&&u.tip.length&&r.update()}},a.extend(r,{init:function(){var b=r.detectCorner()&&(B||a.browser.msie);b&&(r.create(),r.update(),v.unbind(A).bind("tooltipmove"+A,F));return b},detectCorner:function(){var a=t.corner,d=o.options.position,e=d.at,f=d.my.string?d.my.string():d.my;if(a===c||f===c&&e===c)return c;a===b?r.corner=new s.Corner(f):a.string||(r.corner=new s.Corner(a),r.corner.fixed=b),w.corner=new s.Corner(r.corner.string());return r.corner.string()!=="centercenter"},detectColours:function(b){var c,d,e,f=u.tip.css("cssText",""),g=b||r.corner,h=g[g.precedance],i="border-"+h+"-color",k="border"+h.charAt(0)+h.substr(1)+"Color",l=/rgba?\(0, 0, 0(, 0)?\)|transparent|#123456/i,m="background-color",o="transparent",p=" !important",q=u.titlebar&&(g.y===j||g.y===n&&f.position().top+x.height/2+t.offset<u.titlebar.outerHeight(1)),s=q?u.titlebar:u.tooltip;v.addClass(C),y.fill=d=f.css(m),y.border=e=f[0].style[k]||f.css(i)||v.css(i);if(!d||l.test(d))y.fill=s.css(m)||o,l.test(y.fill)&&(y.fill=v.css(m)||d);if(!e||l.test(e)||e===a(document.body).css("color")){y.border=s.css(i)||o;if(l.test(y.border)||y.border===s.css("color"))y.border=v.css(i)||v.css(k)||e}a("*",f).add(f).css("cssText",m+":"+o+p+";border:0"+p+";"),v.removeClass(C)},create:function(){var b=x.width,c=x.height,d;u.tip&&u.tip.remove(),u.tip=a("<div />",{"class":"ui-tooltip-tip"}).css({width:b,height:c}).prependTo(v),B?a("<canvas />").appendTo(u.tip)[0].getContext("2d").save():(d='<vml:shape coordorigin="0,0" style="display:inline-block; position:absolute; behavior:url(#default#VML);"></vml:shape>',u.tip.html(d+d),a("*",u.tip).bind("click mousedown",function(a){a.stopPropagation()}))},update:function(e,h){var i=u.tip,o=i.children(),p=x.width,q=x.height,A="px solid ",C="px dashed transparent",F=t.mimic,H=Math.round,J,K,L,M,O;e||(e=w.corner||r.corner),F===c?F=e:(F=new s.Corner(F),F.precedance=e.precedance,F.x==="inherit"?F.x=e.x:F.y==="inherit"?F.y=e.y:F.x===F.y&&(F[e.precedance]=e[e.precedance])),J=F.precedance,e.precedance===f?D():E(),u.tip.css({width:p=x.width,height:q=x.height}),r.detectColours(e),y.border!=="transparent"?(z=G(e,d,b),t.border===0&&z>0&&(y.fill=y.border),r.border=z=t.border!==b?t.border:z):r.border=z=0,L=N(F,p,q),r.size=O=I(e),i.css(O),e.precedance===g?M=[H(F.x===k?z:F.x===m?O.width-p-z:(O.width-p)/2),H(F.y===j?O.height-q:0)]:M=[H(F.x===k?O.width-p:0),H(F.y===j?z:F.y===l?O.height-q-z:(O.height-q)/2)],B?(o.attr(O),K=o[0].getContext("2d"),K.restore(),K.save(),K.clearRect(0,0,3e3,3e3),K.fillStyle=y.fill,K.strokeStyle=y.border,K.lineWidth=z*2,K.lineJoin="miter",K.miterLimit=100,K.translate(M[0],M[1]),K.beginPath(),K.moveTo(L[0][0],L[0][1]),K.lineTo(L[1][0],L[1][1]),K.lineTo(L[2][0],L[2][1]),K.closePath(),z&&(v.css("background-clip")==="border-box"&&(K.strokeStyle=y.fill,K.stroke()),K.strokeStyle=y.border,K.stroke()),K.fill()):(L="m"+L[0][0]+","+L[0][1]+" l"+L[1][0]+","+L[1][1]+" "+L[2][0]+","+L[2][1]+" xe",M[2]=z&&/^(r|b)/i.test(e.string())?parseFloat(a.browser.version,10)===8?2:1:0,o.css({antialias:""+(F.string().indexOf(n)>-1),left:M[0]-M[2]*Number(J===f),top:M[1]-M[2]*Number(J===g),width:p+z,height:q+z}).each(function(b){var c=a(this);c[c.prop?"prop":"attr"]({coordsize:p+z+" "+(q+z),path:L,fillcolor:y.fill,filled:!!b,stroked:!b}).css({display:z||b?"block":"none"}),!b&&c.html()===""&&c.html('<vml:stroke weight="'+z*2+'px" color="'+y.border+'" miterlimit="1000" joinstyle="miter"  style="behavior:url(#default#VML); display:inline-block;" />')})),h!==c&&r.position(e)},position:function(b){var d=u.tip,e={},l=Math.max(0,t.offset),m,o,p;if(t.corner===c||!d)return c;b=b||r.corner,m=b.precedance,o=I(b),p=[b.x,b.y],m===f&&p.reverse(),a.each(p,function(a,c){var d,f;c===n?(d=m===g?k:j,e[d]="50%",e["margin-"+d]=-Math.round(o[m===g?h:i]/2)+l):(d=G(b,c),f=H(b),e[c]=a?0:l+(f>d?f:-d))}),e[b[m]]-=o[m===f?h:i],d.css({top:"",bottom:"",left:"",right:"",margin:""}).css(e);return e},destroy:function(){u.tip&&u.tip.remove(),u.tip=!1,v.unbind(A)}}),r.init()}function N(a,b,c){var d=Math.ceil(b/2),e=Math.ceil(c/2),f={bottomright:[[0,0],[b,c],[b,0]],bottomleft:[[0,0],[b,0],[0,c]],topright:[[0,c],[b,0],[b,c]],topleft:[[0,0],[0,c],[b,c]],topcenter:[[0,c],[d,0],[b,c]],bottomcenter:[[0,0],[b,0],[d,c]],rightcenter:[[0,0],[b,e],[0,c]],leftcenter:[[b,0],[b,c],[0,e]]};f.lefttop=f.bottomright,f.righttop=f.bottomleft,f.leftbottom=f.topright,f.rightbottom=f.topleft;return f[a.string()]}function M(d){function t(b){var d=a(b.target),e=d.closest(".qtip"),f;f=e.length<1?c:parseInt(e[0].style.zIndex,10)>parseInt(h[0].style.zIndex,10),!f&&a(b.target).closest(y)[0]!==h[0]&&r(d)}function r(a){o.length<1&&a.length?a.not("body").blur():o.first().focus()}function q(){o=a(n,h).not("[disabled]").map(function(){return typeof this.focus==="function"?this:null})}var e=this,f=d.options.show.modal,g=d.elements,h=g.tooltip,i="#qtip-overlay",j=".qtipmodal",k=j+d.id,l="is-modal-qtip",m=a(document.body),n=s.modal.focusable.join(","),o={},p;d.checks.modal={"^show.modal.(on|blur)$":function(){e.init(),g.overlay.toggle(h.is(":visible"))},"^content.text$":q},a.extend(e,{init:function(){if(!f.on)return e;p=e.create(),h.attr(l,b).css("z-index",s.modal.zindex+a(y+"["+l+"]").length).unbind(j).unbind(k).bind("tooltipshow"+j+" tooltiphide"+j,function(b,c,d){var f=b.originalEvent;if(b.target===h[0])if(f&&b.type==="tooltiphide"&&/mouse(leave|enter)/.test(f.type)&&a(f.relatedTarget).closest(p[0]).length)try{b.preventDefault()}catch(g){}else(!f||f&&!f.solo)&&e[b.type.replace("tooltip","")](b,d)}).bind("tooltipfocus"+j,function(b){if(!b.isDefaultPrevented()&&b.target===h[0]){var c=a(y).filter("["+l+"]"),d=s.modal.zindex+c.length,e=parseInt(h[0].style.zIndex,10);p[0].style.zIndex=d-2,c.each(function(){this.style.zIndex>e&&(this.style.zIndex-=1)}),c.end().filter("."+A).qtip("blur",b.originalEvent),h.addClass(A)[0].style.zIndex=d;try{b.preventDefault()}catch(f){}}}).bind("tooltiphide"+j,function(b){b.target===h[0]&&a("["+l+"]").filter(":visible").not(h).last().qtip("focus",b)}),f.escape&&a(document).unbind(k).bind("keydown"+k,function(a){a.keyCode===27&&h.hasClass(A)&&d.hide(a)}),f.blur&&g.overlay.unbind(k).bind("click"+k,function(a){h.hasClass(A)&&d.hide(a)}),q();return e},create:function(){function d(){p.css({height:a(window).height(),width:a(window).width()})}var b=a(i);if(b.length)return g.overlay=b.insertAfter(a(y).last());p=g.overlay=a("<div />",{id:i.substr(1),html:"<div></div>",mousedown:function(){return c}}).hide().insertAfter(a(y).last()),a(window).unbind(j).bind("resize"+j,d),d();return p},toggle:function(d,g,i){if(d&&d.isDefaultPrevented())return e;var j=f.effect,n=g?"show":"hide",o=p.is(":visible"),q=a("["+l+"]").filter(":visible").not(h),s;p||(p=e.create());if(p.is(":animated")&&o===g||!g&&q.length)return e;g?(p.css({left:0,top:0}),p.toggleClass("blurs",f.blur),f.stealfocus!==c&&(m.bind("focusin"+k,t),r(a("body *")))):m.unbind("focusin"+k),p.stop(b,c),a.isFunction(j)?j.call(p,g):j===c?p[n]():p.fadeTo(parseInt(i,10)||90,g?1:0,function(){g||a(this).hide()}),g||p.queue(function(a){p.css({left:"",top:""}),a()});return e},show:function(a,c){return e.toggle(a,b,c)},hide:function(a,b){return e.toggle(a,c,b)},destroy:function(){var b=p;b&&(b=a("["+l+"]").not(h).length<1,b?(g.overlay.remove(),a(document).unbind(j)):g.overlay.unbind(j+d.id),m.undelegate("*","focusin"+k));return h.removeAttr(l).unbind(j)}}),e.init()}function L(d){var e=this,f=d.elements.tooltip,g=d.options.content.ajax,h=r.defaults.content.ajax,i=".qtip-ajax",j=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,k=b,l=c,m;d.checks.ajax={"^content.ajax":function(a,b,c){b==="ajax"&&(g=c),b==="once"?e.init():g&&g.url?e.load():f.unbind(i)}},a.extend(e,{init:function(){g&&g.url&&f.unbind(i)[g.once?"one":"bind"]("tooltipshow"+i,e.load);return e},load:function(f){function t(a,b,c){!d.destroyed&&a.status!==0&&d.set("content.text",b+": "+c)}function s(b,c,e){var f;d.destroyed||(o&&(b=a("<div/>").append(b.replace(j,"")).find(o)),(f=h.success||g.success)&&a.isFunction(f)?f.call(g.context||d,b,c,e):d.set("content.text",b))}function r(){var e;d.destroyed||(k=c,p&&(l=b,d.show(f.originalEvent)),(e=h.complete||g.complete)&&a.isFunction(e)&&e.apply(g.context||d,arguments))}if(l)l=c;else{var i=g.url.indexOf(" "),n=g.url,o,p=!g.loading&&k;if(p)try{f.preventDefault()}catch(q){}else if(f&&f.isDefaultPrevented())return e;m&&m.abort&&m.abort(),i>-1&&(o=n.substr(i),n=n.substr(0,i)),m=a.ajax(a.extend({error:h.error||t,context:d},g,{url:n,success:s,complete:r}))}},destroy:function(){m&&m.abort&&m.abort(),d.destroyed=b}}),e.init()}function K(e,f){var g,h,i,j,k,l=a(this),m=a(document.body),n=this===document?m:l,o=l.metadata?l.metadata(f.metadata):d,p=f.metadata.type==="html5"&&o?o[f.metadata.name]:d,q=l.data(f.metadata.name||"qtipopts");try{q=typeof q==="string"?(new Function("return "+q))():q}catch(t){H("Unable to parse HTML5 attribute data: "+q)}j=a.extend(b,{},r.defaults,f,typeof q==="object"?I(q):d,I(p||o)),h=j.position,j.id=e;if("boolean"===typeof j.content.text){i=l.attr(j.content.attr);if(j.content.attr!==c&&i)j.content.text=i;else{H("Unable to locate content for tooltip! Aborting render of tooltip on element: ",l);return c}}h.container.length||(h.container=m),h.target===c&&(h.target=n),j.show.target===c&&(j.show.target=n),j.show.solo===b&&(j.show.solo=h.container.closest("body")),j.hide.target===c&&(j.hide.target=n),j.position.viewport===b&&(j.position.viewport=h.container),h.container=h.container.eq(0),h.at=new s.Corner(h.at),h.my=new s.Corner(h.my);if(a.data(this,"qtip"))if(j.overwrite)l.qtip("destroy");else if(j.overwrite===c)return c;j.suppress&&(k=a.attr(this,"title"))&&a(this).removeAttr("title").attr(F,k).attr("title",""),g=new J(l,j,e,!!i),a.data(this,"qtip",g),l.bind("remove.qtip-"+e+" removeqtip.qtip-"+e,function(){g.destroy()});return g}function J(f,g,o,p){function X(){var b=[g.show.target[0],g.hide.target[0],q.rendered&&M.tooltip[0],g.position.container[0],g.position.viewport[0],window,document];q.rendered?a([]).pushStack(a.grep(b,function(a){return typeof a==="object"})).unbind(L):g.show.target.unbind(L+"-create")}function W(){function m(a){q.rendered&&K[0].offsetWidth>0&&q.reposition(a)}function l(a){if(K.hasClass(x))return c;clearTimeout(q.timers.inactive),q.timers.inactive=setTimeout(function(){q.hide(a)},g.hide.inactive)}function k(b){if(K.hasClass(x)||H||J)return c;var f=a(b.relatedTarget||b.target),h=f.closest(y)[0]===K[0],i=f[0]===e.show[0];clearTimeout(q.timers.show),clearTimeout(q.timers.hide);if(d.target==="mouse"&&h||g.hide.fixed&&(/mouse(out|leave|move)/.test(b.type)&&(h||i)))try{b.preventDefault(),b.stopImmediatePropagation()}catch(j){}else g.hide.delay>0?q.timers.hide=setTimeout(function(){q.hide(b)},g.hide.delay):q.hide(b)}function j(a){if(K.hasClass(x))return c;clearTimeout(q.timers.show),clearTimeout(q.timers.hide);var d=function(){q.toggle(b,a)};g.show.delay>0?q.timers.show=setTimeout(d,g.show.delay):d()}var d=g.position,e={show:g.show.target,hide:g.hide.target,viewport:a(d.viewport),document:a(document),body:a(document.body),window:a(window)},h={show:a.trim(""+g.show.event).split(" "),hide:a.trim(""+g.hide.event).split(" ")},i=a.browser.msie&&parseInt(a.browser.version,10)===6;K.bind("mouseenter"+L+" mouseleave"+L,function(a){var b=a.type==="mouseenter";b&&q.focus(a),K.toggleClass(B,b)}),/mouse(out|leave)/i.test(g.hide.event)&&(g.hide.leave==="window"&&e.window.bind("mouseleave"+L+" blur"+L,function(a){!/select|option/.test(a.target.nodeName)&&!a.relatedTarget&&q.hide(a)})),g.hide.fixed?(e.hide=e.hide.add(K),K.bind("mouseover"+L,function(){K.hasClass(x)||clearTimeout(q.timers.hide)})):/mouse(over|enter)/i.test(g.show.event)&&e.hide.bind("mouseleave"+L,function(a){clearTimeout(q.timers.show)}),(""+g.hide.event).indexOf("unfocus")>-1&&d.container.closest("html").bind("mousedown"+L,function(b){var c=a(b.target),d=q.rendered&&!K.hasClass(x)&&K[0].offsetWidth>0,e=c.parents(y).filter(K[0]).length>0;c[0]!==f[0]&&c[0]!==K[0]&&!e&&!f.has(c[0]).length&&!c.attr("disabled")&&q.hide(b)}),"number"===typeof g.hide.inactive&&(e.show.bind("qtip-"+o+"-inactive",l),a.each(r.inactiveEvents,function(a,b){e.hide.add(M.tooltip).bind(b+L+"-inactive",l)})),a.each(h.hide,function(b,c){var d=a.inArray(c,h.show),f=a(e.hide);d>-1&&f.add(e.show).length===f.length||c==="unfocus"?(e.show.bind(c+L,function(a){K[0].offsetWidth>0?k(a):j(a)}),delete h.show[d]):e.hide.bind(c+L,k)}),a.each(h.show,function(a,b){e.show.bind(b+L,j)}),"number"===typeof g.hide.distance&&e.show.add(K).bind("mousemove"+L,function(a){var b=N.origin||{},c=g.hide.distance,d=Math.abs;(d(a.pageX-b.pageX)>=c||d(a.pageY-b.pageY)>=c)&&q.hide(a)}),d.target==="mouse"&&(e.show.bind("mousemove"+L,function(a){t={pageX:a.pageX,pageY:a.pageY,type:"mousemove"}}),d.adjust.mouse&&(g.hide.event&&(K.bind("mouseleave"+L,function(a){(a.relatedTarget||a.target)!==e.show[0]&&q.hide(a)}),M.target.bind("mouseenter"+L+" mouseleave"+L,function(a){N.onTarget=a.type==="mouseenter"})),e.document.bind("mousemove"+L,function(a){q.rendered&&N.onTarget&&!K.hasClass(x)&&K[0].offsetWidth>0&&q.reposition(a||t)}))),(d.adjust.resize||e.viewport.length)&&(a.event.special.resize?e.viewport:e.window).bind("resize"+L,m),(e.viewport.length||i&&K.css("position")==="fixed")&&e.viewport.bind("scroll"+L,m)}function V(b,d){function h(b){function i(e){e&&(delete h[e.src],clearTimeout(q.timers.img[e.src]),a(e).unbind(L)),a.isEmptyObject(h)&&(q.redraw(),d!==c&&q.reposition(N.event),b())}var f,h={};if((f=g.find("img[src]:not([height]):not([width])")).length===0)return i();f.each(function(b,c){if(h[c.src]===e){var d=0,f=3;(function g(){if(c.height||c.width||d>f)return i(c);d+=1,q.timers.img[c.src]=setTimeout(g,700)})(),a(c).bind("error"+L+" load"+L,function(){i(this)}),h[c.src]=c}})}var g=M.content;if(!q.rendered||!b)return c;a.isFunction(b)&&(b=b.call(f,N.event,q)||""),b.jquery&&b.length>0?g.empty().append(b.css({display:"block"})):g.html(b),q.rendered<0?K.queue("fx",h):(J=0,h(a.noop));return q}function U(b,d){var e=M.title;if(!q.rendered||!b)return c;a.isFunction(b)&&(b=b.call(f,N.event,q));if(b===c||!b&&b!=="")return Q(c);b.jquery&&b.length>0?e.empty().append(b.css({display:"block"})):e.html(b),q.redraw(),d!==c&&q.rendered&&K[0].offsetWidth>0&&q.reposition(N.event)}function T(a){var b=M.button,d=M.title;if(!q.rendered)return c;a?(d||S(),R()):b.remove()}function S(){var c=E+"-title";M.titlebar&&Q(),M.titlebar=a("<div />",{"class":v+"-titlebar "+(g.style.widget?"ui-widget-header":"")}).append(M.title=a("<div />",{id:c,"class":v+"-title","aria-atomic":b})).insertBefore(M.content).delegate(".ui-tooltip-close","mousedown keydown mouseup keyup mouseout",function(b){a(this).toggleClass("ui-state-active ui-state-focus",b.type.substr(-4)==="down")}).delegate(".ui-tooltip-close","mouseover mouseout",function(b){a(this).toggleClass("ui-state-hover",b.type==="mouseover")}),g.content.title.button?R():q.rendered&&q.redraw()}function R(){var b=g.content.title.button,d=typeof b==="string",e=d?b:"Close tooltip";M.button&&M.button.remove(),b.jquery?M.button=b:M.button=a("<a />",{"class":"ui-state-default ui-tooltip-close "+(g.style.widget?"":v+"-icon"),title:e,"aria-label":e}).prepend(a("<span />",{"class":"ui-icon ui-icon-close",html:"&times;"})),M.button.appendTo(M.titlebar).attr("role","button").click(function(a){K.hasClass(x)||q.hide(a);return c}),q.redraw()}function Q(a){M.title&&(M.titlebar.remove(),M.titlebar=M.title=M.button=d,a!==c&&q.reposition())}function P(){var a=g.style.widget;K.toggleClass(w,a).toggleClass(z,g.style.def&&!a),M.content.toggleClass(w+"-content",a),M.titlebar&&M.titlebar.toggleClass(w+"-header",a),M.button&&M.button.toggleClass(v+"-icon",!a)}function O(a){var b=0,c,d=g,e=a.split(".");while(d=d[e[b++]])b<e.length&&(c=d);return[c||g,e.pop()]}var q=this,D=document.body,E=v+"-"+o,H=0,J=0,K=a(),L=".qtip-"+o,M,N;q.id=o,q.destroyed=q.rendered=c,q.elements=M={target:f},q.timers={img:{}},q.options=g,q.checks={},q.plugins={},q.cache=N={event:{},target:a(),disabled:c,attr:p,onTarget:c,lastClass:""},q.checks.builtin={"^id$":function(d,e,f){var g=f===b?r.nextid:f,h=v+"-"+g;g!==c&&g.length>0&&!a("#"+h).length&&(K[0].id=h,M.content[0].id=h+"-content",M.title[0].id=h+"-title")},"^content.text$":function(a,b,c){V(c)},"^content.title.text$":function(a,b,c){if(!c)return Q();!M.title&&c&&S(),U(c)},"^content.title.button$":function(a,b,c){T(c)},"^position.(my|at)$":function(a,b,c){"string"===typeof c&&(a[b]=new s.Corner(c))},"^position.container$":function(a,b,c){q.rendered&&K.appendTo(c)},"^show.ready$":function(){q.rendered?q.toggle(b):q.render(1)},"^style.classes$":function(a,b,c){K.attr("class",v+" qtip ui-helper-reset "+c)},"^style.widget|content.title":P,"^events.(render|show|move|hide|focus|blur)$":function(b,c,d){K[(a.isFunction(d)?"":"un")+"bind"]("tooltip"+c,d)},"^(show|hide|position).(event|target|fixed|inactive|leave|distance|viewport|adjust)":function(){var a=g.position;K.attr("tracking",a.target==="mouse"&&a.adjust.mouse),X(),W()}},a.extend(q,{render:function(d){if(q.rendered)return q;var e=g.content.text,h=g.content.title.text,i=g.position,j=a.Event("tooltiprender");a.attr(f[0],"aria-describedby",E),K=M.tooltip=a("<div/>",{id:E,"class":v+" qtip ui-helper-reset "+z+" "+g.style.classes+" "+v+"-pos-"+g.position.my.abbrev(),width:g.style.width||"",height:g.style.height||"",tracking:i.target==="mouse"&&i.adjust.mouse,role:"alert","aria-live":"polite","aria-atomic":c,"aria-describedby":E+"-content","aria-hidden":b}).toggleClass(x,N.disabled).data("qtip",q).appendTo(g.position.container).append(M.content=a("<div />",{"class":v+"-content",id:E+"-content","aria-atomic":b})),q.rendered=-1,H=J=1,h&&(S(),a.isFunction(h)||U(h,c)),a.isFunction(e)||V(e,c),q.rendered=b,P(),a.each(g.events,function(b,c){a.isFunction(c)&&K.bind(b==="toggle"?"tooltipshow tooltiphide":"tooltip"+b,c)}),a.each(s,function(){this.initialize==="render"&&this(q)}),W(),K.queue("fx",function(a){j.originalEvent=N.event,K.trigger(j,[q]),H=J=0,q.redraw(),(g.show.ready||d)&&q.toggle(b,N.event,c),a()});return q},get:function(a){var b,c;switch(a.toLowerCase()){case"dimensions":b={height:K.outerHeight(),width:K.outerWidth()};break;case"offset":b=s.offset(K,g.position.container);break;default:c=O(a.toLowerCase()),b=c[0][c[1]],b=b.precedance?b.string():b}return b},set:function(e,f){function n(a,b){var c,d,e;for(c in l)for(d in l[c])if(e=(new RegExp(d,"i")).exec(a))b.push(e),l[c][d].apply(q,b)}var h=/^position\.(my|at|adjust|target|container)|style|content|show\.ready/i,i=/^content\.(title|attr)|style/i,j=c,k=c,l=q.checks,m;"string"===typeof e?(m=e,e={},e[m]=f):e=a.extend(b,{},e),a.each(e,function(b,c){var d=O(b.toLowerCase()),f;f=d[0][d[1]],d[0][d[1]]="object"===typeof c&&c.nodeType?a(c):c,e[b]=[d[0],d[1],c,f],j=h.test(b)||j,k=i.test(b)||k}),I(g),H=J=1,a.each(e,n),H=J=0,q.rendered&&K[0].offsetWidth>0&&(j&&q.reposition(g.position.target==="mouse"?d:N.event),k&&q.redraw());return q},toggle:function(e,f){function u(){e?(a.browser.msie&&K[0].style.removeAttribute("filter"),K.css("overflow",""),"string"===typeof i.autofocus&&a(i.autofocus,K).focus(),i.target.trigger("qtip-"+o+"-inactive")):K.css({display:"",visibility:"",opacity:"",left:"",top:""}),s=a.Event("tooltip"+(e?"visible":"hidden")),s.originalEvent=f?N.event:d,K.trigger(s,[q])}if(!q.rendered)return e?q.render(1):q;var h=e?"show":"hide",i=g[h],j=g[e?"hide":"show"],k=g.position,l=g.content,m=K[0].offsetWidth>0,n=e||i.target.length===1,p=!f||i.target.length<2||N.target[0]===f.target,r,s;(typeof e).search("boolean|number")&&(e=!m);if(!K.is(":animated")&&m===e&&p)return q;if(f){if(/over|enter/.test(f.type)&&/out|leave/.test(N.event.type)&&g.show.target.add(f.target).length===g.show.target.length&&K.has(f.relatedTarget).length)return q;N.event=a.extend({},f)}s=a.Event("tooltip"+h),s.originalEvent=f?N.event:d,K.trigger(s,[q,90]);if(s.isDefaultPrevented())return q;a.attr(K[0],"aria-hidden",!e),e?(N.origin=a.extend({},t),q.focus(f),a.isFunction(l.text)&&V(l.text,c),a.isFunction(l.title.text)&&U(l.title.text,c),!G&&k.target==="mouse"&&k.adjust.mouse&&(a(document).bind("mousemove.qtip",function(a){t={pageX:a.pageX,pageY:a.pageY,type:"mousemove"}}),G=b),q.reposition(f,arguments[2]),(s.solo=!!i.solo)&&a(y,i.solo).not(K).qtip("hide",s)):(clearTimeout(q.timers.show),delete N.origin,G&&!a(y+'[tracking="true"]:visible',i.solo).not(K).length&&(a(document).unbind("mousemove.qtip"),G=c),q.blur(f)),i.effect===c||n===c?(K[h](),u.call(K)):a.isFunction(i.effect)?(K.stop(1,1),i.effect.call(K,q),K.queue("fx",function(a){u(),a()})):K.fadeTo(90,e?1:0,u),e&&i.target.trigger("qtip-"+o+"-inactive");return q},show:function(a){return q.toggle(b,a)},hide:function(a){return q.toggle(c,a)},focus:function(b){if(!q.rendered)return q;var c=a(y),d=parseInt(K[0].style.zIndex,10),e=r.zindex+c.length,f=a.extend({},b),g,h;K.hasClass(A)||(h=a.Event("tooltipfocus"),h.originalEvent=f,K.trigger(h,[q,e]),h.isDefaultPrevented()||(d!==e&&(c.each(function(){this.style.zIndex>d&&(this.style.zIndex=this.style.zIndex-1)}),c.filter("."+A).qtip("blur",f)),K.addClass(A)[0].style.zIndex=e));if(navigator.userAgent.match(/Mobile/g)){a(b.currentTarget).trigger("click");}return q},blur:function(b){var c=a.extend({},b),d;K.removeClass(A),d=a.Event("tooltipblur"),d.originalEvent=c,K.trigger(d,[q]);return q},reposition:function(b,d){if(!q.rendered||H)return q;H=1;var e=g.position.target,f=g.position,h=f.my,i=f.at,o=f.adjust,p=o.method.split(" "),r=K.outerWidth(),u=K.outerHeight(),v=0,w=0,x=a.Event("tooltipmove"),y=K.css("position")==="fixed",z=f.viewport,A={left:0,top:0},B=f.container,C=K[0].offsetWidth>0,D,E,F;if(a.isArray(e)&&e.length===2)i={x:k,y:j},A={left:e[0],top:e[1]};else if(e==="mouse"&&(b&&b.pageX||N.event.pageX))i={x:k,y:j},b=(b&&(b.type==="resize"||b.type==="scroll")?N.event:b&&b.pageX&&b.type==="mousemove"?b:t&&t.pageX&&(o.mouse||!b||!b.pageX)?{pageX:t.pageX,pageY:t.pageY}:!o.mouse&&N.origin&&N.origin.pageX&&g.show.distance?N.origin:b)||b||N.event||t||{},A={top:b.pageY,left:b.pageX};else{e==="event"&&b&&b.target&&b.type!=="scroll"&&b.type!=="resize"?N.target=a(b.target):e!=="event"&&(N.target=a(e.jquery?e:M.target)),e=N.target,e=a(e).eq(0);if(e.length===0)return q;e[0]===document||e[0]===window?(v=s.iOS?window.innerWidth:e.width(),w=s.iOS?window.innerHeight:e.height(),e[0]===window&&(A={top:(z||e).scrollTop(),left:(z||e).scrollLeft()})):s.imagemap&&e.is("area")?D=s.imagemap(q,e,i,s.viewport?p:c):s.svg&&typeof e[0].xmlbase==="string"?D=s.svg(q,e,i,s.viewport?p:c):(v=e.outerWidth(),w=e.outerHeight(),A=s.offset(e,B)),D&&(v=D.width,w=D.height,E=D.offset,A=D.position);if(s.iOS>3.1&&s.iOS<4.1||s.iOS>=4.3&&s.iOS<4.33||!s.iOS&&y)F=a(window),A.left-=F.scrollLeft(),A.top-=F.scrollTop();A.left+=i.x===m?v:i.x===n?v/2:0,A.top+=i.y===l?w:i.y===n?w/2:0}A.left+=o.x+(h.x===m?-r:h.x===n?-r/2:0),A.top+=o.y+(h.y===l?-u:h.y===n?-u/2:0),s.viewport?(A.adjusted=s.viewport(q,A,f,v,w,r,u),E&&A.adjusted.left&&(A.left+=E.left),E&&A.adjusted.top&&(A.top+=E.top)):A.adjusted={left:0,top:0},x.originalEvent=a.extend({},b),K.trigger(x,[q,A,z.elem||z]);if(x.isDefaultPrevented())return q;delete A.adjusted,d===c||!C||isNaN(A.left)||isNaN(A.top)||e==="mouse"||!a.isFunction(f.effect)?K.css(A):a.isFunction(f.effect)&&(f.effect.call(K,q,a.extend({},A)),K.queue(function(b){a(this).css({opacity:"",height:""}),a.browser.msie&&this.style.removeAttribute("filter"),b()})),H=0;return q},redraw:function(){if(q.rendered<1||J)return q;var a=g.position.container,b,c,d,e;J=1,g.style.height&&K.css(i,g.style.height),g.style.width?K.css(h,g.style.width):(K.css(h,"").addClass(C),c=K.width()+1,d=K.css("max-width")||"",e=K.css("min-width")||"",b=(d+e).indexOf("%")>-1?a.width()/100:0,d=(d.indexOf("%")>-1?b:1)*parseInt(d,10)||c,e=(e.indexOf("%")>-1?b:1)*parseInt(e,10)||0,c=d+e?Math.min(Math.max(c,e),d):c,K.css(h,Math.round(c)).removeClass(C)),J=0;return q},disable:function(b){"boolean"!==typeof b&&(b=!K.hasClass(x)&&!N.disabled),q.rendered?(K.toggleClass(x,b),a.attr(K[0],"aria-disabled",b)):N.disabled=!!b;return q},enable:function(){return q.disable(c)},destroy:function(){var c=f[0],d=a.attr(c,F),e=f.data("qtip");q.destroyed=b,q.rendered&&(K.stop(1,0).remove(),a.each(q.plugins,function(){this.destroy&&this.destroy()})),clearTimeout(q.timers.show),clearTimeout(q.timers.hide),X();if(!e||q===e)a.removeData(c,"qtip"),g.suppress&&d&&(a.attr(c,"title",d),f.removeAttr(F)),f.removeAttr("aria-describedby");f.unbind(".qtip-"+o),delete u[q.id];return f}})}function I(b){var e;if(!b||"object"!==typeof b)return c;if(b.metadata===d||"object"!==typeof b.metadata)b.metadata={type:b.metadata};if("content"in b){if(b.content===d||"object"!==typeof b.content||b.content.jquery)b.content={text:b.content};e=b.content.text||c,!a.isFunction(e)&&(!e&&!e.attr||e.length<1||"object"===typeof e&&!e.jquery)&&(b.content.text=c);if("title"in b.content){if(b.content.title===d||"object"!==typeof b.content.title)b.content.title={text:b.content.title};e=b.content.title.text||c,!a.isFunction(e)&&(!e&&!e.attr||e.length<1||"object"===typeof e&&!e.jquery)&&(b.content.title.text=c)}}if("position"in b)if(b.position===d||"object"!==typeof b.position)b.position={my:b.position,at:b.position};if("show"in b)if(b.show===d||"object"!==typeof b.show)b.show.jquery?b.show={target:b.show}:b.show={event:b.show};if("hide"in b)if(b.hide===d||"object"!==typeof b.hide)b.hide.jquery?b.hide={target:b.hide}:b.hide={event:b.hide};if("style"in b)if(b.style===d||"object"!==typeof b.style)b.style={classes:b.style};a.each(s,function(){this.sanitize&&this.sanitize(b)});return b}function H(){H.history=H.history||[],H.history.push(arguments);if("object"===typeof console){var a=console[console.warn?"warn":"log"],b=Array.prototype.slice.call(arguments),c;typeof arguments[0]==="string"&&(b[0]="qTip2: "+b[0]),c=a.apply?a.apply(console,b):a(b)}}"use strict";var b=!0,c=!1,d=null,e,f="x",g="y",h="width",i="height",j="top",k="left",l="bottom",m="right",n="center",o="flip",p="flipinvert",q="shift",r,s,t,u={},v="ui-tooltip",w="ui-widget",x="ui-state-disabled",y="div.qtip."+v,z=v+"-default",A=v+"-focus",B=v+"-hover",C=v+"-fluid",D="-31000px",E="_replacedByqTip",F="oldtitle",G;r=a.fn.qtip=function(f,g,h){var i=(""+f).toLowerCase(),j=d,k=a.makeArray(arguments).slice(1),l=k[k.length-1],m=this[0]?a.data(this[0],"qtip"):d;if(!arguments.length&&m||i==="api")return m;if("string"===typeof f){this.each(function(){var d=a.data(this,"qtip");if(!d)return b;l&&l.timeStamp&&(d.cache.event=l);if(i!=="option"&&i!=="options"||!g)d[i]&&d[i].apply(d[i],k);else if(a.isPlainObject(g)||h!==e)d.set(g,h);else{j=d.get(g);return c}});return j!==d?j:this}if("object"===typeof f||!arguments.length){m=I(a.extend(b,{},f));return r.bind.call(this,m,l)}},r.bind=function(d,f){return this.each(function(g){function n(b){function d(){l.render(typeof b==="object"||h.show.ready),i.show.add(i.hide).unbind(k)}if(l.cache.disabled)return c;l.cache.event=a.extend({},b),l.cache.target=b?a(b.target):[e],h.show.delay>0?(clearTimeout(l.timers.show),l.timers.show=setTimeout(d,h.show.delay),j.show!==j.hide&&i.hide.bind(j.hide,function(){clearTimeout(l.timers.show)})):d()}var h,i,j,k,l,m;m=a.isArray(d.id)?d.id[g]:d.id,m=!m||m===c||m.length<1||u[m]?r.nextid++:u[m]=m,k=".qtip-"+m+"-create",l=K.call(this,m,d);if(l===c)return b;h=l.options,a.each(s,function(){this.initialize==="initialize"&&this(l)}),i={show:h.show.target,hide:h.hide.target},j={show:a.trim(""+h.show.event).replace(/ /g,k+" ")+k,hide:a.trim(""+h.hide.event).replace(/ /g,k+" ")+k},/mouse(over|enter)/i.test(j.show)&&!/mouse(out|leave)/i.test(j.hide)&&(j.hide+=" mouseleave"+k),i.show.bind("mousemove"+k,function(a){t={pageX:a.pageX,pageY:a.pageY,type:"mousemove"},l.cache.onTarget=b}),i.show.bind(j.show,n),(h.show.ready||h.prerender)&&n(f)})},s=r.plugins={Corner:function(a){a=(""+a).replace(/([A-Z])/," $1").replace(/middle/gi,n).toLowerCase(),this.x=(a.match(/left|right/i)||a.match(/center/)||["inherit"])[0].toLowerCase(),this.y=(a.match(/top|bottom|center/i)||["inherit"])[0].toLowerCase();var b=a.charAt(0);this.precedance=b==="t"||b==="b"?g:f,this.string=function(){return this.precedance===g?this.y+this.x:this.x+this.y},this.abbrev=function(){var a=this.x.substr(0,1),b=this.y.substr(0,1);return a===b?a:this.precedance===g?b+a:a+b},this.invertx=function(a){this.x=this.x===k?m:this.x===m?k:a||this.x},this.inverty=function(a){this.y=this.y===j?l:this.y===l?j:a||this.y},this.clone=function(){return{x:this.x,y:this.y,precedance:this.precedance,string:this.string,abbrev:this.abbrev,clone:this.clone,invertx:this.invertx,inverty:this.inverty}}},offset:function(b,c){function j(a,b){d.left+=b*a.scrollLeft(),d.top+=b*a.scrollTop()}var d=b.offset(),e=b.closest("body")[0],f=c,g,h,i;if(f){do f.css("position")!=="static"&&(h=f.position(),d.left-=h.left+(parseInt(f.css("borderLeftWidth"),10)||0)+(parseInt(f.css("marginLeft"),10)||0),d.top-=h.top+(parseInt(f.css("borderTopWidth"),10)||0)+(parseInt(f.css("marginTop"),10)||0),!g&&(i=f.css("overflow"))!=="hidden"&&i!=="visible"&&(g=f));while((f=a(f[0].offsetParent)).length);g&&g[0]!==e&&j(g,1)}return d},iOS:parseFloat((""+(/CPU.*OS ([0-9_]{1,5})|(CPU like).*AppleWebKit.*Mobile/i.exec(navigator.userAgent)||[0,""])[1]).replace("undefined","3_2").replace("_",".").replace("_",""))||c,fn:{attr:function(b,c){if(this.length){var d=this[0],e="title",f=a.data(d,"qtip");if(b===e&&f&&"object"===typeof f&&f.options.suppress){if(arguments.length<2)return a.attr(d,F);f&&f.options.content.attr===e&&f.cache.attr&&f.set("content.text",c);return this.attr(F,c)}}return a.fn["attr"+E].apply(this,arguments)},clone:function(b){var c=a([]),d="title",e=a.fn["clone"+E].apply(this,arguments);b||e.filter("["+F+"]").attr("title",function(){return a.attr(this,F)}).removeAttr(F);return e}}},a.each(s.fn,function(c,d){if(!d||a.fn[c+E])return b;var e=a.fn[c+E]=a.fn[c];a.fn[c]=function(){return d.apply(this,arguments)||e.apply(this,arguments)}}),a.ui||(a["cleanData"+E]=a.cleanData,a.cleanData=function(b){for(var c=0,d;(d=b[c])!==e;c++)try{a(d).triggerHandler("removeqtip")}catch(f){}a["cleanData"+E](b)}),r.version="nightly",r.nextid=0,r.inactiveEvents="click dblclick mousedown mouseup mousemove mouseleave mouseenter".split(" "),r.zindex=15e3,r.defaults={prerender:c,id:c,overwrite:b,suppress:b,content:{text:b,attr:"title",title:{text:c,button:c}},position:{my:"top left",at:"bottom right",target:c,container:c,viewport:c,adjust:{x:0,y:0,mouse:b,resize:b,method:"flip flip"},effect:function(b,d,e){a(this).animate(d,{duration:200,queue:c})}},show:{target:c,event:"mouseenter",effect:b,delay:90,solo:c,ready:c,autofocus:c},hide:{target:c,event:"mouseleave",effect:b,delay:0,fixed:c,inactive:c,leave:"window",distance:c},style:{classes:"",widget:c,width:c,height:c,def:b},events:{render:d,move:d,show:d,hide:d,toggle:d,visible:d,hidden:d,focus:d,blur:d}},s.ajax=function(a){var b=a.plugins.ajax;return"object"===typeof b?b:a.plugins.ajax=new L(a)},s.ajax.initialize="render",s.ajax.sanitize=function(a){var b=a.content,c;b&&"ajax"in b&&(c=b.ajax,typeof c!=="object"&&(c=a.content.ajax={url:c}),"boolean"!==typeof c.once&&c.once&&(c.once=!!c.once))},a.extend(b,r.defaults,{content:{ajax:{loading:b,once:b}}}),s.viewport=function(a,b,c,d,o,r,s){function K(a,c,d,f,g,h,i,j,k){var l=b[g],m=w[a],o=x[a],r=d===q,s=-D.offset[g]+C.offset[g]+C["scroll"+g],t=m===g?k:m===h?-k:-k/2,u=o===g?j:o===h?-j:-j/2,v=F&&F.size?F.size[i]||0:0,y=F&&F.corner&&F.corner.precedance===a&&!r?v:0,z=s-l+y,A=l+k-C[i]-s+y,B=t-(w.precedance===a||m===w[c]?u:0)-(o===n?j/2:0);r?(y=F&&F.corner&&F.corner.precedance===c?v:0,B=(m===g?1:-1)*t-y,b[g]+=z>0?z:A>0?-A:0,b[g]=Math.max(-D.offset[g]+C.offset[g]+(y&&F.corner[a]===n?F.offset:0),l-B,Math.min(Math.max(-D.offset[g]+C.offset[g]+C[i],l+B),b[g]))):(f*=d===p?2:0,z>0&&(m!==g||A>0)?(b[g]-=B+f,I["invert"+a](g)):A>0&&(m!==h||z>0)&&(b[g]-=(m===n?-B:B)+f,I["invert"+a](h)),b[g]<s&&-b[g]>A&&(b[g]=l,I=e));return b[g]-l}var t=c.target,u=a.elements.tooltip,w=c.my,x=c.at,y=c.adjust,z=y.method.split(" "),A=z[0],B=z[1]||z[0],C=c.viewport,D=c.container,E=a.cache,F=a.plugins.tip,G={left:0,top:0},H,I,J;if(!C.jquery||t[0]===window||t[0]===document.body||y.method==="none")return G;H=u.css("position")==="fixed",C={elem:C,height:C[(C[0]===window?"h":"outerH")+"eight"](),width:C[(C[0]===window?"w":"outerW")+"idth"](),scrollleft:H?0:C.scrollLeft(),scrolltop:H?0:C.scrollTop(),offset:C.offset()||{left:0,top:0}},D={elem:D,scrollLeft:D.scrollLeft(),scrollTop:D.scrollTop(),offset:D.offset()||{left:0,top:0}};if(A!=="shift"||B!=="shift")I=w.clone();G={left:A!=="none"?K(f,g,A,y.x,k,m,h,d,r):0,top:B!=="none"?K(g,f,B,y.y,j,l,i,o,s):0},I&&E.lastClass!==(J=v+"-pos-"+I.abbrev())&&u.removeClass(a.cache.lastClass).addClass(a.cache.lastClass=J);return G},s.modal=function(a){var b=a.plugins.modal;return"object"===typeof b?b:a.plugins.modal=new M(a)},s.modal.initialize="render",s.modal.sanitize=function(a){a.show&&(typeof a.show.modal!=="object"?a.show.modal={on:!!a.show.modal}:typeof a.show.modal.on==="undefined"&&(a.show.modal.on=b))},s.modal.zindex=r.zindex+1e3,s.modal.focusable=["a[href]","area[href]","input","select","textarea","button","iframe","object","embed","[tabindex]","[contenteditable]"],a.extend(b,r.defaults,{show:{modal:{on:c,effect:b,blur:b,stealfocus:b,escape:b}}}),s.imagemap=function(b,c,d,e){function v(a,b,c){var d=0,e=1,f=1,g=0,h=0,i=a.width,o=a.height;while(i>0&&o>0&&e>0&&f>0){i=Math.floor(i/2),o=Math.floor(o/2),c.x===k?e=i:c.x===m?e=a.width-i:e+=Math.floor(i/2),c.y===j?f=o:c.y===l?f=a.height-o:f+=Math.floor(o/2),d=b.length;while(d--){if(b.length<2)break;g=b[d][0]-a.position.left,h=b[d][1]-a.position.top,(c.x===k&&g>=e||c.x===m&&g<=e||c.x===n&&(g<e||g>a.width-e)||c.y===j&&h>=f||c.y===l&&h<=f||c.y===n&&(h<f||h>a.height-f))&&b.splice(d,1)}}return{left:b[0][0],top:b[0][1]}}c.jquery||(c=a(c));var f=b.cache.areas={},g=(c[0].shape||c.attr("shape")).toLowerCase(),h=c[0].coords||c.attr("coords"),i=h.split(","),o=[],p=a('img[usemap="#'+c.parent("map").attr("name")+'"]'),q=p.offset(),r={width:0,height:0,position:{top:1e10,right:0,bottom:0,left:1e10}},s=0,t=0,u;q.left+=Math.ceil((p.outerWidth()-p.width())/2),q.top+=Math.ceil((p.outerHeight()-p.height())/2);if(g==="poly"){s=i.length;while(s--)t=[parseInt(i[--s],10),parseInt(i[s+1],10)],t[0]>r.position.right&&(r.position.right=t[0]),t[0]<r.position.left&&(r.position.left=t[0]),t[1]>r.position.bottom&&(r.position.bottom=t[1]),t[1]<r.position.top&&(r.position.top=t[1]),o.push(t)}else{s=-1;while(s++<i)o.push(parseInt(i[s],10))}switch(g){case"rect":r={width:Math.abs(o[2]-o[0]),height:Math.abs(o[3]-o[1]),position:{left:Math.min(o[0],o[2]),top:Math.min(o[1],o[3])}};break;case"circle":r={width:o[2]+2,height:o[2]+2,position:{left:o[0],top:o[1]}};break;case"poly":r.width=Math.abs(r.position.right-r.position.left),r.height=Math.abs(r.position.bottom-r.position.top),d.abbrev()==="c"?r.position={left:r.position.left+r.width/2,top:r.position.top+r.height/2}:(f[d+h]||(r.position=v(r,o.slice(),d),e&&(e[0]==="flip"||e[1]==="flip")&&(r.offset=v(r,o.slice(),{x:d.x===k?m:d.x===m?k:n,y:d.y===j?l:d.y===l?j:n}),r.offset.left-=r.position.left,r.offset.top-=r.position.top),f[d+h]=r),r=f[d+h]),r.width=r.height=0}r.position.left+=q.left,r.position.top+=q.top;return r},s.tip=function(a){var b=a.plugins.tip;return"object"===typeof b?b:a.plugins.tip=new O(a)},s.tip.initialize="render",s.tip.sanitize=function(a){var c=a.style,d;c&&"tip"in c&&(d=a.style.tip,typeof d!=="object"&&(a.style.tip={corner:d}),/string|boolean/i.test(typeof d.corner)||(d.corner=b),typeof d.width!=="number"&&delete d.width,typeof d.height!=="number"&&delete d.height,typeof d.border!=="number"&&d.border!==b&&delete d.border,typeof d.offset!=="number"&&delete d.offset)},a.extend(b,r.defaults,{style:{tip:{corner:b,mimic:c,width:6,height:6,border:b,offset:0}}}),s.svg=function(b,c,d,e){var f=a(document),g=c[0],h={width:0,height:0,position:{top:1e10,left:1e10}},i,j,k,l,m;while(!g.getBBox)g=g.parentNode;if(g.getBBox&&g.parentNode){i=g.getBBox(),j=g.getScreenCTM(),k=g.farthestViewportElement||g;if(!k.createSVGPoint)return h;l=k.createSVGPoint(),l.x=i.x,l.y=i.y,m=l.matrixTransform(j),h.position.left=m.x,h.position.top=m.y,l.x+=i.width,l.y+=i.height,m=l.matrixTransform(j),h.width=m.x-h.position.left,h.height=m.y-h.position.top,h.position.left+=f.scrollLeft(),h.position.top+=f.scrollTop()}return h},s.bgiframe=function(b){var d=a.browser,e=b.plugins.bgiframe;if(a("select, object").length<1||(!d.msie||(""+d.version).charAt(0)!=="6"))return c;return"object"===typeof e?e:b.plugins.bgiframe=new P(b)},s.bgiframe.initialize="render"});
(function($){$.fn.UItoTop=function(options){var defaults={text:'To Top',min:200,inDelay:600,outDelay:400,containerID:'toTop',containerHoverID:'toTopHover',scrollSpeed:1200,easingType:'linear'},settings=$.extend(defaults,options),containerIDhash='#'+settings.containerID,containerHoverIDHash='#'+settings.containerHoverID;$('body').append('<a href="#" id="'+settings.containerID+'">'+settings.text+'</a>');$(containerIDhash).hide().on('click.UItoTop',function(){$('html, body').animate({scrollTop:0},settings.scrollSpeed,settings.easingType);$('#'+settings.containerHoverID,this).stop().animate({'opacity':0},settings.inDelay,settings.easingType);return false;}).prepend('<span id="'+settings.containerHoverID+'"></span>').hover(function(){$(containerHoverIDHash,this).stop().animate({'opacity':1},600,'linear');},function(){$(containerHoverIDHash,this).stop().animate({'opacity':0},700,'linear');});$(window).scroll(function(){var sd=$(window).scrollTop();if(typeof document.body.style.maxHeight==="undefined"){$(containerIDhash).css({'position':'absolute','top':sd+$(window).height()-50});}if(sd>settings.min){$(containerIDhash).fadeIn(settings.inDelay);}else{$(containerIDhash).fadeOut(settings.Outdelay);}});};})(jQuery);;
(function(e){"function"===typeof define&&define.amd?define(["jquery"],e):e(jQuery)})(function(e){var z=!1,D=!1,K=5E3,L=2E3,y=0,G=["ms","moz","webkit","o"],t=window.requestAnimationFrame||!1,w=window.cancelAnimationFrame||!1;if(!t)for(var M in G){var E=G[M];t||(t=window[E+"RequestAnimationFrame"]);w||(w=window[E+"CancelAnimationFrame"]||window[E+"CancelRequestAnimationFrame"])}var A=window.MutationObserver||window.WebKitMutationObserver||!1,H={zindex:"auto",cursoropacitymin:0,cursoropacitymax:1,cursorcolor:"#424242",
cursorwidth:"5px",cursorborder:"1px solid #fff",cursorborderradius:"5px",scrollspeed:60,mousescrollstep:24,touchbehavior:!1,hwacceleration:!0,usetransition:!0,boxzoom:!1,dblclickzoom:!0,gesturezoom:!0,grabcursorenabled:!0,autohidemode:!0,background:"",iframeautoresize:!0,cursorminheight:32,preservenativescrolling:!0,railoffset:!1,bouncescroll:!0,spacebarenabled:!0,railpadding:{top:0,right:0,left:0,bottom:0},disableoutline:!0,horizrailenabled:!0,railalign:"right",railvalign:"bottom",enabletranslate3d:!0,
enablemousewheel:!0,enablekeyboard:!0,smoothscroll:!0,sensitiverail:!0,enablemouselockapi:!0,cursorfixedheight:!1,directionlockdeadzone:6,hidecursordelay:400,nativeparentscrolling:!0,enablescrollonselection:!0,overflowx:!0,overflowy:!0,cursordragspeed:.3,rtlmode:"auto",cursordragontouch:!1,oneaxismousemode:"auto",scriptpath:function(){var e=document.getElementsByTagName("script"),e=e[e.length-1].src.split("?")[0];return 0<e.split("/").length?e.split("/").slice(0,-1).join("/")+"/":""}()},F=!1,N=function(){if(F)return F;
var e=document.createElement("DIV"),b={haspointerlock:"pointerLockElement"in document||"mozPointerLockElement"in document||"webkitPointerLockElement"in document};b.isopera="opera"in window;b.isopera12=b.isopera&&"getUserMedia"in navigator;b.isoperamini="[object OperaMini]"===Object.prototype.toString.call(window.operamini);b.isie="all"in document&&"attachEvent"in e&&!b.isopera;b.isieold=b.isie&&!("msInterpolationMode"in e.style);b.isie7=b.isie&&!b.isieold&&(!("documentMode"in document)||7==document.documentMode);
b.isie8=b.isie&&"documentMode"in document&&8==document.documentMode;b.isie9=b.isie&&"performance"in window&&9<=document.documentMode;b.isie10=b.isie&&"performance"in window&&10<=document.documentMode;b.isie9mobile=/iemobile.9/i.test(navigator.userAgent);b.isie9mobile&&(b.isie9=!1);b.isie7mobile=!b.isie9mobile&&b.isie7&&/iemobile/i.test(navigator.userAgent);b.ismozilla="MozAppearance"in e.style;b.iswebkit="WebkitAppearance"in e.style;b.ischrome="chrome"in window;b.ischrome22=b.ischrome&&b.haspointerlock;
b.ischrome26=b.ischrome&&"transition"in e.style;b.cantouch="ontouchstart"in document.documentElement||"ontouchstart"in window;b.hasmstouch=window.navigator.msPointerEnabled||!1;b.ismac=/^mac$/i.test(navigator.platform);b.isios=b.cantouch&&/iphone|ipad|ipod/i.test(navigator.platform);b.isios4=b.isios&&!("seal"in Object);b.isandroid=/android/i.test(navigator.userAgent);b.trstyle=!1;b.hastransform=!1;b.hastranslate3d=!1;b.transitionstyle=!1;b.hastransition=!1;b.transitionend=!1;for(var h=["transform",
"msTransform","webkitTransform","MozTransform","OTransform"],k=0;k<h.length;k++)if("undefined"!=typeof e.style[h[k]]){b.trstyle=h[k];break}b.hastransform=0!=b.trstyle;b.hastransform&&(e.style[b.trstyle]="translate3d(1px,2px,3px)",b.hastranslate3d=/translate3d/.test(e.style[b.trstyle]));b.transitionstyle=!1;b.prefixstyle="";b.transitionend=!1;for(var h="transition webkitTransition MozTransition OTransition OTransition msTransition KhtmlTransition".split(" "),l=" -webkit- -moz- -o- -o -ms- -khtml-".split(" "),
q="transitionend webkitTransitionEnd transitionend otransitionend oTransitionEnd msTransitionEnd KhtmlTransitionEnd".split(" "),k=0;k<h.length;k++)if(h[k]in e.style){b.transitionstyle=h[k];b.prefixstyle=l[k];b.transitionend=q[k];break}b.ischrome26&&(b.prefixstyle=l[1]);b.hastransition=b.transitionstyle;a:{h=["-moz-grab","-webkit-grab","grab"];if(b.ischrome&&!b.ischrome22||b.isie)h=[];for(k=0;k<h.length;k++)if(l=h[k],e.style.cursor=l,e.style.cursor==l){h=l;break a}h="url(http://www.google.com/intl/en_ALL/mapfiles/openhand.cur),n-resize"}b.cursorgrabvalue=
h;b.hasmousecapture="setCapture"in e;b.hasMutationObserver=!1!==A;return F=b},O=function(g,b){function h(){var c=a.win;if("zIndex"in c)return c.zIndex();for(;0<c.length&&9!=c[0].nodeType;){var b=c.css("zIndex");if(!isNaN(b)&&0!=b)return parseInt(b);c=c.parent()}return!1}function k(c,b,f){b=c.css(b);c=parseFloat(b);return isNaN(c)?(c=x[b]||0,f=3==c?f?a.win.outerHeight()-a.win.innerHeight():a.win.outerWidth()-a.win.innerWidth():1,a.isie8&&c&&(c+=1),f?c:0):c}function l(c,b,f,e){a._bind(c,b,function(a){a=
a?a:window.event;var e={original:a,target:a.target||a.srcElement,type:"wheel",deltaMode:"MozMousePixelScroll"==a.type?0:1,deltaX:0,deltaZ:0,preventDefault:function(){a.preventDefault?a.preventDefault():a.returnValue=!1;return!1},stopImmediatePropagation:function(){a.stopImmediatePropagation?a.stopImmediatePropagation():a.cancelBubble=!0}};"mousewheel"==b?(e.deltaY=-.025*a.wheelDelta,a.wheelDeltaX&&(e.deltaX=-.025*a.wheelDeltaX)):e.deltaY=a.detail;return f.call(c,e)},e)}function q(c,b,f){var e,d;0==
c.deltaMode?(e=-Math.floor(a.opt.mousescrollstep/54*c.deltaX),d=-Math.floor(a.opt.mousescrollstep/54*c.deltaY)):1==c.deltaMode&&(e=-Math.floor(c.deltaX*a.opt.mousescrollstep),d=-Math.floor(c.deltaY*a.opt.mousescrollstep));b&&a.opt.oneaxismousemode&&0==e&&d&&(e=d,d=0);e&&(a.scrollmom&&a.scrollmom.stop(),a.lastdeltax+=e,a.debounced("mousewheelx",function(){var c=a.lastdeltax;a.lastdeltax=0;a.rail.drag||a.doScrollLeftBy(c)},15));if(d){if(a.opt.nativeparentscrolling&&f&&!a.ispage&&!a.zoomactive)if(0>
d){if(a.getScrollTop()>=a.page.maxh)return!0}else if(0>=a.getScrollTop())return!0;a.scrollmom&&a.scrollmom.stop();a.lastdeltay+=d;a.debounced("mousewheely",function(){var c=a.lastdeltay;a.lastdeltay=0;a.rail.drag||a.doScrollBy(c)},15)}c.stopImmediatePropagation();return c.preventDefault()}var a=this;this.version="3.5.4";this.name="nicescroll";this.me=b;this.opt={doc:e("body"),win:!1};e.extend(this.opt,H);this.opt.snapbackspeed=80;if(g)for(var p in a.opt)"undefined"!=typeof g[p]&&(a.opt[p]=g[p]);this.iddoc=
(this.doc=a.opt.doc)&&this.doc[0]?this.doc[0].id||"":"";this.ispage=/^BODY|HTML/.test(a.opt.win?a.opt.win[0].nodeName:this.doc[0].nodeName);this.haswrapper=!1!==a.opt.win;this.win=a.opt.win||(this.ispage?e(window):this.doc);this.docscroll=this.ispage&&!this.haswrapper?e(window):this.win;this.body=e("body");this.iframe=this.isfixed=this.viewport=!1;this.isiframe="IFRAME"==this.doc[0].nodeName&&"IFRAME"==this.win[0].nodeName;this.istextarea="TEXTAREA"==this.win[0].nodeName;this.forcescreen=!1;this.canshowonmouseevent=
"scroll"!=a.opt.autohidemode;this.page=this.view=this.onzoomout=this.onzoomin=this.onscrollcancel=this.onscrollend=this.onscrollstart=this.onclick=this.ongesturezoom=this.onkeypress=this.onmousewheel=this.onmousemove=this.onmouseup=this.onmousedown=!1;this.scroll={x:0,y:0};this.scrollratio={x:0,y:0};this.cursorheight=20;this.scrollvaluemax=0;this.observerremover=this.observer=this.scrollmom=this.scrollrunning=this.isrtlmode=!1;do this.id="ascrail"+L++;while(document.getElementById(this.id));this.hasmousefocus=
this.hasfocus=this.zoomactive=this.zoom=this.selectiondrag=this.cursorfreezed=this.cursor=this.rail=!1;this.visibility=!0;this.hidden=this.locked=!1;this.cursoractive=!0;this.wheelprevented=!1;this.overflowx=a.opt.overflowx;this.overflowy=a.opt.overflowy;this.nativescrollingarea=!1;this.checkarea=0;this.events=[];this.saved={};this.delaylist={};this.synclist={};this.lastdeltay=this.lastdeltax=0;this.detected=N();var d=e.extend({},this.detected);this.ishwscroll=(this.canhwscroll=d.hastransform&&a.opt.hwacceleration)&&
a.haswrapper;this.istouchcapable=!1;d.cantouch&&d.iswebkit&&!d.isios&&!d.isandroid&&(this.istouchcapable=!0,d.cantouch=!1);d.cantouch&&d.ismozilla&&!d.isios&&!d.isandroid&&(this.istouchcapable=!0,d.cantouch=!1);a.opt.enablemouselockapi||(d.hasmousecapture=!1,d.haspointerlock=!1);this.delayed=function(c,b,f,e){var d=a.delaylist[c],h=(new Date).getTime();if(!e&&d&&d.tt)return!1;d&&d.tt&&clearTimeout(d.tt);d&&d.last+f>h&&!d.tt?a.delaylist[c]={last:h+f,tt:setTimeout(function(){a&&(a.delaylist[c].tt=0,
b.call())},f)}:d&&d.tt||(a.delaylist[c]={last:h,tt:0},setTimeout(function(){b.call()},0))};this.debounced=function(c,b,f){var d=a.delaylist[c];(new Date).getTime();a.delaylist[c]=b;d||setTimeout(function(){var b=a.delaylist[c];a.delaylist[c]=!1;b.call()},f)};var r=!1;this.synched=function(c,b){a.synclist[c]=b;(function(){r||(t(function(){r=!1;if(a)for(c in a.synclist){var b=a.synclist[c];b&&b.call(a);a.synclist[c]=!1}}),r=!0)})();return c};this.unsynched=function(c){a.synclist[c]&&(a.synclist[c]=
!1)};this.css=function(c,b){for(var f in b)a.saved.css.push([c,f,c.css(f)]),c.css(f,b[f])};this.scrollTop=function(c){return"undefined"==typeof c?a.getScrollTop():a.setScrollTop(c)};this.scrollLeft=function(c){return"undefined"==typeof c?a.getScrollLeft():a.setScrollLeft(c)};BezierClass=function(a,b,f,d,e,h,k){this.st=a;this.ed=b;this.spd=f;this.p1=d||0;this.p2=e||1;this.p3=h||0;this.p4=k||1;this.ts=(new Date).getTime();this.df=this.ed-this.st};BezierClass.prototype={B2:function(a){return 3*a*a*(1-
a)},B3:function(a){return 3*a*(1-a)*(1-a)},B4:function(a){return(1-a)*(1-a)*(1-a)},getNow:function(){var a=1-((new Date).getTime()-this.ts)/this.spd,b=this.B2(a)+this.B3(a)+this.B4(a);return 0>a?this.ed:this.st+Math.round(this.df*b)},update:function(a,b){this.st=this.getNow();this.ed=a;this.spd=b;this.ts=(new Date).getTime();this.df=this.ed-this.st;return this}};if(this.ishwscroll){var u=function(){var c=a.doc.css(d.trstyle);return c&&"matrix"==c.substr(0,6)?c.replace(/^.*\((.*)\)$/g,"$1").replace(/px/g,
"").split(/, +/):!1};this.doc.translate={x:0,y:0,tx:"0px",ty:"0px"};d.hastranslate3d&&d.isios&&this.doc.css("-webkit-backface-visibility","hidden");this.getScrollTop=function(c){if(!c){if(c=u())return 16==c.length?-c[13]:-c[5];if(a.timerscroll&&a.timerscroll.bz)return a.timerscroll.bz.getNow()}return a.doc.translate.y};this.getScrollLeft=function(c){if(!c){if(c=u())return 16==c.length?-c[12]:-c[4];if(a.timerscroll&&a.timerscroll.bh)return a.timerscroll.bh.getNow()}return a.doc.translate.x};this.notifyScrollEvent=
document.createEvent?function(a){var b=document.createEvent("UIEvents");b.initUIEvent("scroll",!1,!0,window,1);a.dispatchEvent(b)}:document.fireEvent?function(a){var b=document.createEventObject();a.fireEvent("onscroll");b.cancelBubble=!0}:function(a,b){};d.hastranslate3d&&a.opt.enabletranslate3d?(this.setScrollTop=function(c,b){a.doc.translate.y=c;a.doc.translate.ty=-1*c+"px";a.doc.css(d.trstyle,"translate3d("+a.doc.translate.tx+","+a.doc.translate.ty+",0px)");b||a.notifyScrollEvent(a.win[0])},this.setScrollLeft=
function(c,b){a.doc.translate.x=c;a.doc.translate.tx=-1*c+"px";a.doc.css(d.trstyle,"translate3d("+a.doc.translate.tx+","+a.doc.translate.ty+",0px)");b||a.notifyScrollEvent(a.win[0])}):(this.setScrollTop=function(c,b){a.doc.translate.y=c;a.doc.translate.ty=-1*c+"px";a.doc.css(d.trstyle,"translate("+a.doc.translate.tx+","+a.doc.translate.ty+")");b||a.notifyScrollEvent(a.win[0])},this.setScrollLeft=function(c,b){a.doc.translate.x=c;a.doc.translate.tx=-1*c+"px";a.doc.css(d.trstyle,"translate("+a.doc.translate.tx+
","+a.doc.translate.ty+")");b||a.notifyScrollEvent(a.win[0])})}else this.getScrollTop=function(){return a.docscroll.scrollTop()},this.setScrollTop=function(c){return a.docscroll.scrollTop(c)},this.getScrollLeft=function(){return a.docscroll.scrollLeft()},this.setScrollLeft=function(c){return a.docscroll.scrollLeft(c)};this.getTarget=function(a){return a?a.target?a.target:a.srcElement?a.srcElement:!1:!1};this.hasParent=function(a,b){if(!a)return!1;for(var f=a.target||a.srcElement||a||!1;f&&f.id!=b;)f=
f.parentNode||!1;return!1!==f};var x={thin:1,medium:3,thick:5};this.getOffset=function(){if(a.isfixed)return{top:parseFloat(a.win.css("top")),left:parseFloat(a.win.css("left"))};if(!a.viewport)return a.win.offset();var c=a.win.offset(),b=a.viewport.offset();return{top:c.top-b.top+a.viewport.scrollTop(),left:c.left-b.left+a.viewport.scrollLeft()}};this.updateScrollBar=function(c){if(a.ishwscroll)a.rail.css({height:a.win.innerHeight()}),a.railh&&a.railh.css({width:a.win.innerWidth()});else{var b=a.getOffset(),
f=b.top,d=b.left,f=f+k(a.win,"border-top-width",!0);a.win.outerWidth();a.win.innerWidth();var d=d+(a.rail.align?a.win.outerWidth()-k(a.win,"border-right-width")-a.rail.width:k(a.win,"border-left-width")),e=a.opt.railoffset;e&&(e.top&&(f+=e.top),a.rail.align&&e.left&&(d+=e.left));a.locked||a.rail.css({top:f,left:d,height:c?c.h:a.win.innerHeight()});a.zoom&&a.zoom.css({top:f+1,left:1==a.rail.align?d-20:d+a.rail.width+4});a.railh&&!a.locked&&(f=b.top,d=b.left,c=a.railh.align?f+k(a.win,"border-top-width",
!0)+a.win.innerHeight()-a.railh.height:f+k(a.win,"border-top-width",!0),d+=k(a.win,"border-left-width"),a.railh.css({top:c,left:d,width:a.railh.width}))}};this.doRailClick=function(c,b,f){var d;a.locked||(a.cancelEvent(c),b?(b=f?a.doScrollLeft:a.doScrollTop,d=f?(c.pageX-a.railh.offset().left-a.cursorwidth/2)*a.scrollratio.x:(c.pageY-a.rail.offset().top-a.cursorheight/2)*a.scrollratio.y,b(d)):(b=f?a.doScrollLeftBy:a.doScrollBy,d=f?a.scroll.x:a.scroll.y,c=f?c.pageX-a.railh.offset().left:c.pageY-a.rail.offset().top,
f=f?a.view.w:a.view.h,d>=c?b(f):b(-f)))};a.hasanimationframe=t;a.hascancelanimationframe=w;a.hasanimationframe?a.hascancelanimationframe||(w=function(){a.cancelAnimationFrame=!0}):(t=function(a){return setTimeout(a,15-Math.floor(+new Date/1E3)%16)},w=clearInterval);this.init=function(){a.saved.css=[];if(d.isie7mobile||d.isoperamini)return!0;d.hasmstouch&&a.css(a.ispage?e("html"):a.win,{"-ms-touch-action":"none"});a.zindex="auto";a.zindex=a.ispage||"auto"!=a.opt.zindex?a.opt.zindex:h()||"auto";!a.ispage&&
"auto"!=a.zindex&&a.zindex>y&&(y=a.zindex);a.isie&&0==a.zindex&&"auto"==a.opt.zindex&&(a.zindex="auto");if(!a.ispage||!d.cantouch&&!d.isieold&&!d.isie9mobile){var c=a.docscroll;a.ispage&&(c=a.haswrapper?a.win:a.doc);d.isie9mobile||a.css(c,{"overflow-y":"hidden"});a.ispage&&d.isie7&&("BODY"==a.doc[0].nodeName?a.css(e("html"),{"overflow-y":"hidden"}):"HTML"==a.doc[0].nodeName&&a.css(e("body"),{"overflow-y":"hidden"}));!d.isios||a.ispage||a.haswrapper||a.css(e("body"),{"-webkit-overflow-scrolling":"touch"});
var b=e(document.createElement("div"));b.css({position:"relative",top:0,"float":"right",width:a.opt.cursorwidth,height:"0px","background-color":a.opt.cursorcolor,border:a.opt.cursorborder,"background-clip":"padding-box","-webkit-border-radius":a.opt.cursorborderradius,"-moz-border-radius":a.opt.cursorborderradius,"border-radius":a.opt.cursorborderradius});b.hborder=parseFloat(b.outerHeight()-b.innerHeight());a.cursor=b;var f=e(document.createElement("div"));f.attr("id",a.id);f.addClass("nicescroll-rails");
var v,k,g=["left","right"],l;for(l in g)k=g[l],(v=a.opt.railpadding[k])?f.css("padding-"+k,v+"px"):a.opt.railpadding[k]=0;f.append(b);f.width=Math.max(parseFloat(a.opt.cursorwidth),b.outerWidth())+a.opt.railpadding.left+a.opt.railpadding.right;f.css({width:f.width+"px",zIndex:a.zindex,background:a.opt.background,cursor:"default"});f.visibility=!0;f.scrollable=!0;f.align="left"==a.opt.railalign?0:1;a.rail=f;b=a.rail.drag=!1;!a.opt.boxzoom||a.ispage||d.isieold||(b=document.createElement("div"),a.bind(b,
"click",a.doZoom),a.zoom=e(b),a.zoom.css({cursor:"pointer","z-index":a.zindex,backgroundImage:"url("+a.opt.scriptpath+"zoomico.png)",height:18,width:18,backgroundPosition:"0px 0px"}),a.opt.dblclickzoom&&a.bind(a.win,"dblclick",a.doZoom),d.cantouch&&a.opt.gesturezoom&&(a.ongesturezoom=function(c){1.5<c.scale&&a.doZoomIn(c);.8>c.scale&&a.doZoomOut(c);return a.cancelEvent(c)},a.bind(a.win,"gestureend",a.ongesturezoom)));a.railh=!1;if(a.opt.horizrailenabled){a.css(c,{"overflow-x":"hidden"});b=e(document.createElement("div"));
b.css({position:"relative",top:0,height:a.opt.cursorwidth,width:"0px","background-color":a.opt.cursorcolor,border:a.opt.cursorborder,"background-clip":"padding-box","-webkit-border-radius":a.opt.cursorborderradius,"-moz-border-radius":a.opt.cursorborderradius,"border-radius":a.opt.cursorborderradius});b.wborder=parseFloat(b.outerWidth()-b.innerWidth());a.cursorh=b;var m=e(document.createElement("div"));m.attr("id",a.id+"-hr");m.addClass("nicescroll-rails");m.height=Math.max(parseFloat(a.opt.cursorwidth),
b.outerHeight());m.css({height:m.height+"px",zIndex:a.zindex,background:a.opt.background});m.append(b);m.visibility=!0;m.scrollable=!0;m.align="top"==a.opt.railvalign?0:1;a.railh=m;a.railh.drag=!1}a.ispage?(f.css({position:"fixed",top:"0px",height:"100%"}),f.align?f.css({right:"0px"}):f.css({left:"0px"}),a.body.append(f),a.railh&&(m.css({position:"fixed",left:"0px",width:"100%"}),m.align?m.css({bottom:"0px"}):m.css({top:"0px"}),a.body.append(m))):(a.ishwscroll?("static"==a.win.css("position")&&a.css(a.win,
{position:"relative"}),c="HTML"==a.win[0].nodeName?a.body:a.win,a.zoom&&(a.zoom.css({position:"absolute",top:1,right:0,"margin-right":f.width+4}),c.append(a.zoom)),f.css({position:"absolute",top:0}),f.align?f.css({right:0}):f.css({left:0}),c.append(f),m&&(m.css({position:"absolute",left:0,bottom:0}),m.align?m.css({bottom:0}):m.css({top:0}),c.append(m))):(a.isfixed="fixed"==a.win.css("position"),c=a.isfixed?"fixed":"absolute",a.isfixed||(a.viewport=a.getViewport(a.win[0])),a.viewport&&(a.body=a.viewport,
0==/fixed|relative|absolute/.test(a.viewport.css("position"))&&a.css(a.viewport,{position:"relative"})),f.css({position:c}),a.zoom&&a.zoom.css({position:c}),a.updateScrollBar(),a.body.append(f),a.zoom&&a.body.append(a.zoom),a.railh&&(m.css({position:c}),a.body.append(m))),d.isios&&a.css(a.win,{"-webkit-tap-highlight-color":"rgba(0,0,0,0)","-webkit-touch-callout":"none"}),d.isie&&a.opt.disableoutline&&a.win.attr("hideFocus","true"),d.iswebkit&&a.opt.disableoutline&&a.win.css({outline:"none"}));!1===
a.opt.autohidemode?(a.autohidedom=!1,a.rail.css({opacity:a.opt.cursoropacitymax}),a.railh&&a.railh.css({opacity:a.opt.cursoropacitymax})):!0===a.opt.autohidemode||"leave"===a.opt.autohidemode?(a.autohidedom=e().add(a.rail),d.isie8&&(a.autohidedom=a.autohidedom.add(a.cursor)),a.railh&&(a.autohidedom=a.autohidedom.add(a.railh)),a.railh&&d.isie8&&(a.autohidedom=a.autohidedom.add(a.cursorh))):"scroll"==a.opt.autohidemode?(a.autohidedom=e().add(a.rail),a.railh&&(a.autohidedom=a.autohidedom.add(a.railh))):
"cursor"==a.opt.autohidemode?(a.autohidedom=e().add(a.cursor),a.railh&&(a.autohidedom=a.autohidedom.add(a.cursorh))):"hidden"==a.opt.autohidemode&&(a.autohidedom=!1,a.hide(),a.locked=!1);if(d.isie9mobile)a.scrollmom=new I(a),a.onmangotouch=function(c){c=a.getScrollTop();var b=a.getScrollLeft();if(c==a.scrollmom.lastscrolly&&b==a.scrollmom.lastscrollx)return!0;var f=c-a.mangotouch.sy,d=b-a.mangotouch.sx;if(0!=Math.round(Math.sqrt(Math.pow(d,2)+Math.pow(f,2)))){var n=0>f?-1:1,e=0>d?-1:1,h=+new Date;
a.mangotouch.lazy&&clearTimeout(a.mangotouch.lazy);80<h-a.mangotouch.tm||a.mangotouch.dry!=n||a.mangotouch.drx!=e?(a.scrollmom.stop(),a.scrollmom.reset(b,c),a.mangotouch.sy=c,a.mangotouch.ly=c,a.mangotouch.sx=b,a.mangotouch.lx=b,a.mangotouch.dry=n,a.mangotouch.drx=e,a.mangotouch.tm=h):(a.scrollmom.stop(),a.scrollmom.update(a.mangotouch.sx-d,a.mangotouch.sy-f),a.mangotouch.tm=h,f=Math.max(Math.abs(a.mangotouch.ly-c),Math.abs(a.mangotouch.lx-b)),a.mangotouch.ly=c,a.mangotouch.lx=b,2<f&&(a.mangotouch.lazy=
setTimeout(function(){a.mangotouch.lazy=!1;a.mangotouch.dry=0;a.mangotouch.drx=0;a.mangotouch.tm=0;a.scrollmom.doMomentum(30)},100)))}},f=a.getScrollTop(),m=a.getScrollLeft(),a.mangotouch={sy:f,ly:f,dry:0,sx:m,lx:m,drx:0,lazy:!1,tm:0},a.bind(a.docscroll,"scroll",a.onmangotouch);else{if(d.cantouch||a.istouchcapable||a.opt.touchbehavior||d.hasmstouch){a.scrollmom=new I(a);a.ontouchstart=function(c){if(c.pointerType&&2!=c.pointerType)return!1;a.hasmoving=!1;if(!a.locked){if(d.hasmstouch)for(var b=c.target?
c.target:!1;b;){var f=e(b).getNiceScroll();if(0<f.length&&f[0].me==a.me)break;if(0<f.length)return!1;if("DIV"==b.nodeName&&b.id==a.id)break;b=b.parentNode?b.parentNode:!1}a.cancelScroll();if((b=a.getTarget(c))&&/INPUT/i.test(b.nodeName)&&/range/i.test(b.type))return a.stopPropagation(c);!("clientX"in c)&&"changedTouches"in c&&(c.clientX=c.changedTouches[0].clientX,c.clientY=c.changedTouches[0].clientY);a.forcescreen&&(f=c,c={original:c.original?c.original:c},c.clientX=f.screenX,c.clientY=f.screenY);
a.rail.drag={x:c.clientX,y:c.clientY,sx:a.scroll.x,sy:a.scroll.y,st:a.getScrollTop(),sl:a.getScrollLeft(),pt:2,dl:!1};if(a.ispage||!a.opt.directionlockdeadzone)a.rail.drag.dl="f";else{var f=e(window).width(),n=e(window).height(),h=Math.max(document.body.scrollWidth,document.documentElement.scrollWidth),k=Math.max(document.body.scrollHeight,document.documentElement.scrollHeight),n=Math.max(0,k-n),f=Math.max(0,h-f);a.rail.drag.ck=!a.rail.scrollable&&a.railh.scrollable?0<n?"v":!1:a.rail.scrollable&&
!a.railh.scrollable?0<f?"h":!1:!1;a.rail.drag.ck||(a.rail.drag.dl="f")}a.opt.touchbehavior&&a.isiframe&&d.isie&&(f=a.win.position(),a.rail.drag.x+=f.left,a.rail.drag.y+=f.top);a.hasmoving=!1;a.lastmouseup=!1;a.scrollmom.reset(c.clientX,c.clientY);if(!d.cantouch&&!this.istouchcapable&&!d.hasmstouch){if(!b||!/INPUT|SELECT|TEXTAREA/i.test(b.nodeName))return!a.ispage&&d.hasmousecapture&&b.setCapture(),a.opt.touchbehavior?(b.onclick&&!b._onclick&&(b._onclick=b.onclick,b.onclick=function(c){if(a.hasmoving)return!1;
b._onclick.call(this,c)}),a.cancelEvent(c)):a.stopPropagation(c);/SUBMIT|CANCEL|BUTTON/i.test(e(b).attr("type"))&&(pc={tg:b,click:!1},a.preventclick=pc)}}};a.ontouchend=function(c){if(c.pointerType&&2!=c.pointerType)return!1;if(a.rail.drag&&2==a.rail.drag.pt&&(a.scrollmom.doMomentum(),a.rail.drag=!1,a.hasmoving&&(a.lastmouseup=!0,a.hideCursor(),d.hasmousecapture&&document.releaseCapture(),!d.cantouch)))return a.cancelEvent(c)};var q=a.opt.touchbehavior&&a.isiframe&&!d.hasmousecapture;a.ontouchmove=
function(c,b){if(c.pointerType&&2!=c.pointerType)return!1;if(a.rail.drag&&2==a.rail.drag.pt){if(d.cantouch&&"undefined"==typeof c.original)return!0;a.hasmoving=!0;a.preventclick&&!a.preventclick.click&&(a.preventclick.click=a.preventclick.tg.onclick||!1,a.preventclick.tg.onclick=a.onpreventclick);c=e.extend({original:c},c);"changedTouches"in c&&(c.clientX=c.changedTouches[0].clientX,c.clientY=c.changedTouches[0].clientY);if(a.forcescreen){var f=c;c={original:c.original?c.original:c};c.clientX=f.screenX;
c.clientY=f.screenY}f=ofy=0;if(q&&!b){var n=a.win.position(),f=-n.left;ofy=-n.top}var h=c.clientY+ofy,n=h-a.rail.drag.y,k=c.clientX+f,v=k-a.rail.drag.x,g=a.rail.drag.st-n;a.ishwscroll&&a.opt.bouncescroll?0>g?g=Math.round(g/2):g>a.page.maxh&&(g=a.page.maxh+Math.round((g-a.page.maxh)/2)):(0>g&&(h=g=0),g>a.page.maxh&&(g=a.page.maxh,h=0));if(a.railh&&a.railh.scrollable){var l=a.rail.drag.sl-v;a.ishwscroll&&a.opt.bouncescroll?0>l?l=Math.round(l/2):l>a.page.maxw&&(l=a.page.maxw+Math.round((l-a.page.maxw)/
2)):(0>l&&(k=l=0),l>a.page.maxw&&(l=a.page.maxw,k=0))}f=!1;if(a.rail.drag.dl)f=!0,"v"==a.rail.drag.dl?l=a.rail.drag.sl:"h"==a.rail.drag.dl&&(g=a.rail.drag.st);else{var n=Math.abs(n),v=Math.abs(v),m=a.opt.directionlockdeadzone;if("v"==a.rail.drag.ck){if(n>m&&v<=.3*n)return a.rail.drag=!1,!0;v>m&&(a.rail.drag.dl="f",e("body").scrollTop(e("body").scrollTop()))}else if("h"==a.rail.drag.ck){if(v>m&&n<=.3*v)return a.rail.drag=!1,!0;n>m&&(a.rail.drag.dl="f",e("body").scrollLeft(e("body").scrollLeft()))}}a.synched("touchmove",
function(){a.rail.drag&&2==a.rail.drag.pt&&(a.prepareTransition&&a.prepareTransition(0),a.rail.scrollable&&a.setScrollTop(g),a.scrollmom.update(k,h),a.railh&&a.railh.scrollable?(a.setScrollLeft(l),a.showCursor(g,l)):a.showCursor(g),d.isie10&&document.selection.clear())});d.ischrome&&a.istouchcapable&&(f=!1);if(f)return a.cancelEvent(c)}}}a.onmousedown=function(c,b){if(!a.rail.drag||1==a.rail.drag.pt){if(a.locked)return a.cancelEvent(c);a.cancelScroll();a.rail.drag={x:c.clientX,y:c.clientY,sx:a.scroll.x,
sy:a.scroll.y,pt:1,hr:!!b};var f=a.getTarget(c);!a.ispage&&d.hasmousecapture&&f.setCapture();a.isiframe&&!d.hasmousecapture&&(a.saved.csspointerevents=a.doc.css("pointer-events"),a.css(a.doc,{"pointer-events":"none"}));a.hasmoving=!1;return a.cancelEvent(c)}};a.onmouseup=function(c){if(a.rail.drag&&(d.hasmousecapture&&document.releaseCapture(),a.isiframe&&!d.hasmousecapture&&a.doc.css("pointer-events",a.saved.csspointerevents),1==a.rail.drag.pt))return a.rail.drag=!1,a.hasmoving&&a.triggerScrollEnd(),
a.cancelEvent(c)};a.onmousemove=function(c){if(a.rail.drag&&1==a.rail.drag.pt){if(d.ischrome&&0==c.which)return a.onmouseup(c);a.cursorfreezed=!0;a.hasmoving=!0;if(a.rail.drag.hr){a.scroll.x=a.rail.drag.sx+(c.clientX-a.rail.drag.x);0>a.scroll.x&&(a.scroll.x=0);var b=a.scrollvaluemaxw;a.scroll.x>b&&(a.scroll.x=b)}else a.scroll.y=a.rail.drag.sy+(c.clientY-a.rail.drag.y),0>a.scroll.y&&(a.scroll.y=0),b=a.scrollvaluemax,a.scroll.y>b&&(a.scroll.y=b);a.synched("mousemove",function(){a.rail.drag&&1==a.rail.drag.pt&&
(a.showCursor(),a.rail.drag.hr?a.doScrollLeft(Math.round(a.scroll.x*a.scrollratio.x),a.opt.cursordragspeed):a.doScrollTop(Math.round(a.scroll.y*a.scrollratio.y),a.opt.cursordragspeed))});return a.cancelEvent(c)}};if(d.cantouch||a.opt.touchbehavior)a.onpreventclick=function(c){if(a.preventclick)return a.preventclick.tg.onclick=a.preventclick.click,a.preventclick=!1,a.cancelEvent(c)},a.bind(a.win,"mousedown",a.ontouchstart),a.onclick=d.isios?!1:function(c){return a.lastmouseup?(a.lastmouseup=!1,a.cancelEvent(c)):
!0},a.opt.grabcursorenabled&&d.cursorgrabvalue&&(a.css(a.ispage?a.doc:a.win,{cursor:d.cursorgrabvalue}),a.css(a.rail,{cursor:d.cursorgrabvalue}));else{var p=function(c){if(a.selectiondrag){if(c){var b=a.win.outerHeight();c=c.pageY-a.selectiondrag.top;0<c&&c<b&&(c=0);c>=b&&(c-=b);a.selectiondrag.df=c}0!=a.selectiondrag.df&&(a.doScrollBy(2*-Math.floor(a.selectiondrag.df/6)),a.debounced("doselectionscroll",function(){p()},50))}};a.hasTextSelected="getSelection"in document?function(){return 0<document.getSelection().rangeCount}:
"selection"in document?function(){return"None"!=document.selection.type}:function(){return!1};a.onselectionstart=function(c){a.ispage||(a.selectiondrag=a.win.offset())};a.onselectionend=function(c){a.selectiondrag=!1};a.onselectiondrag=function(c){a.selectiondrag&&a.hasTextSelected()&&a.debounced("selectionscroll",function(){p(c)},250)}}d.hasmstouch&&(a.css(a.rail,{"-ms-touch-action":"none"}),a.css(a.cursor,{"-ms-touch-action":"none"}),a.bind(a.win,"MSPointerDown",a.ontouchstart),a.bind(document,
"MSPointerUp",a.ontouchend),a.bind(document,"MSPointerMove",a.ontouchmove),a.bind(a.cursor,"MSGestureHold",function(a){a.preventDefault()}),a.bind(a.cursor,"contextmenu",function(a){a.preventDefault()}));this.istouchcapable&&(a.bind(a.win,"touchstart",a.ontouchstart),a.bind(document,"touchend",a.ontouchend),a.bind(document,"touchcancel",a.ontouchend),a.bind(document,"touchmove",a.ontouchmove));a.bind(a.cursor,"mousedown",a.onmousedown);a.bind(a.cursor,"mouseup",a.onmouseup);a.railh&&(a.bind(a.cursorh,
"mousedown",function(c){a.onmousedown(c,!0)}),a.bind(a.cursorh,"mouseup",a.onmouseup));if(a.opt.cursordragontouch||!d.cantouch&&!a.opt.touchbehavior)a.rail.css({cursor:"default"}),a.railh&&a.railh.css({cursor:"default"}),a.jqbind(a.rail,"mouseenter",function(){if(!a.win.is(":visible"))return!1;a.canshowonmouseevent&&a.showCursor();a.rail.active=!0}),a.jqbind(a.rail,"mouseleave",function(){a.rail.active=!1;a.rail.drag||a.hideCursor()}),a.opt.sensitiverail&&(a.bind(a.rail,"click",function(c){a.doRailClick(c,
!1,!1)}),a.bind(a.rail,"dblclick",function(c){a.doRailClick(c,!0,!1)}),a.bind(a.cursor,"click",function(c){a.cancelEvent(c)}),a.bind(a.cursor,"dblclick",function(c){a.cancelEvent(c)})),a.railh&&(a.jqbind(a.railh,"mouseenter",function(){if(!a.win.is(":visible"))return!1;a.canshowonmouseevent&&a.showCursor();a.rail.active=!0}),a.jqbind(a.railh,"mouseleave",function(){a.rail.active=!1;a.rail.drag||a.hideCursor()}),a.opt.sensitiverail&&(a.bind(a.railh,"click",function(c){a.doRailClick(c,!1,!0)}),a.bind(a.railh,
"dblclick",function(c){a.doRailClick(c,!0,!0)}),a.bind(a.cursorh,"click",function(c){a.cancelEvent(c)}),a.bind(a.cursorh,"dblclick",function(c){a.cancelEvent(c)})));d.cantouch||a.opt.touchbehavior?(a.bind(d.hasmousecapture?a.win:document,"mouseup",a.ontouchend),a.bind(document,"mousemove",a.ontouchmove),a.onclick&&a.bind(document,"click",a.onclick),a.opt.cursordragontouch&&(a.bind(a.cursor,"mousedown",a.onmousedown),a.bind(a.cursor,"mousemove",a.onmousemove),a.cursorh&&a.bind(a.cursorh,"mousedown",
function(c){a.onmousedown(c,!0)}),a.cursorh&&a.bind(a.cursorh,"mousemove",a.onmousemove))):(a.bind(d.hasmousecapture?a.win:document,"mouseup",a.onmouseup),a.bind(document,"mousemove",a.onmousemove),a.onclick&&a.bind(document,"click",a.onclick),!a.ispage&&a.opt.enablescrollonselection&&(a.bind(a.win[0],"mousedown",a.onselectionstart),a.bind(document,"mouseup",a.onselectionend),a.bind(a.cursor,"mouseup",a.onselectionend),a.cursorh&&a.bind(a.cursorh,"mouseup",a.onselectionend),a.bind(document,"mousemove",
a.onselectiondrag)),a.zoom&&(a.jqbind(a.zoom,"mouseenter",function(){a.canshowonmouseevent&&a.showCursor();a.rail.active=!0}),a.jqbind(a.zoom,"mouseleave",function(){a.rail.active=!1;a.rail.drag||a.hideCursor()})));a.opt.enablemousewheel&&(a.isiframe||a.bind(d.isie&&a.ispage?document:a.win,"mousewheel",a.onmousewheel),a.bind(a.rail,"mousewheel",a.onmousewheel),a.railh&&a.bind(a.railh,"mousewheel",a.onmousewheelhr));a.ispage||d.cantouch||/HTML|^BODY/.test(a.win[0].nodeName)||(a.win.attr("tabindex")||
a.win.attr({tabindex:K++}),a.jqbind(a.win,"focus",function(c){z=a.getTarget(c).id||!0;a.hasfocus=!0;a.canshowonmouseevent&&a.noticeCursor()}),a.jqbind(a.win,"blur",function(c){z=!1;a.hasfocus=!1}),a.jqbind(a.win,"mouseenter",function(c){D=a.getTarget(c).id||!0;a.hasmousefocus=!0;a.canshowonmouseevent&&a.noticeCursor()}),a.jqbind(a.win,"mouseleave",function(){D=!1;a.hasmousefocus=!1;a.rail.drag||a.hideCursor()}))}a.onkeypress=function(c){if(a.locked&&0==a.page.maxh)return!0;c=c?c:window.e;var b=a.getTarget(c);
if(b&&/INPUT|TEXTAREA|SELECT|OPTION/.test(b.nodeName)&&(!b.getAttribute("type")&&!b.type||!/submit|button|cancel/i.tp)||e(b).attr("contenteditable"))return!0;if(a.hasfocus||a.hasmousefocus&&!z||a.ispage&&!z&&!D){b=c.keyCode;if(a.locked&&27!=b)return a.cancelEvent(c);var f=c.ctrlKey||!1,n=c.shiftKey||!1,d=!1;switch(b){case 38:case 63233:a.doScrollBy(72);d=!0;break;case 40:case 63235:a.doScrollBy(-72);d=!0;break;case 37:case 63232:a.railh&&(f?a.doScrollLeft(0):a.doScrollLeftBy(72),d=!0);break;case 39:case 63234:a.railh&&
(f?a.doScrollLeft(a.page.maxw):a.doScrollLeftBy(-72),d=!0);break;case 33:case 63276:a.doScrollBy(a.view.h);d=!0;break;case 34:case 63277:a.doScrollBy(-a.view.h);d=!0;break;case 36:case 63273:a.railh&&f?a.doScrollPos(0,0):a.doScrollTo(0);d=!0;break;case 35:case 63275:a.railh&&f?a.doScrollPos(a.page.maxw,a.page.maxh):a.doScrollTo(a.page.maxh);d=!0;break;case 32:a.opt.spacebarenabled&&(n?a.doScrollBy(a.view.h):a.doScrollBy(-a.view.h),d=!0);break;case 27:a.zoomactive&&(a.doZoom(),d=!0)}if(d)return a.cancelEvent(c)}};
a.opt.enablekeyboard&&a.bind(document,d.isopera&&!d.isopera12?"keypress":"keydown",a.onkeypress);a.bind(document,"keydown",function(c){c.ctrlKey&&(a.wheelprevented=!0)});a.bind(document,"keyup",function(c){c.ctrlKey||(a.wheelprevented=!1)});a.bind(window,"resize",a.lazyResize);a.bind(window,"orientationchange",a.lazyResize);a.bind(window,"load",a.lazyResize);if(d.ischrome&&!a.ispage&&!a.haswrapper){var r=a.win.attr("style"),f=parseFloat(a.win.css("width"))+1;a.win.css("width",f);a.synched("chromefix",
function(){a.win.attr("style",r)})}a.onAttributeChange=function(c){a.lazyResize(250)};a.ispage||a.haswrapper||(!1!==A?(a.observer=new A(function(c){c.forEach(a.onAttributeChange)}),a.observer.observe(a.win[0],{childList:!0,characterData:!1,attributes:!0,subtree:!1}),a.observerremover=new A(function(c){c.forEach(function(c){if(0<c.removedNodes.length)for(var b in c.removedNodes)if(c.removedNodes[b]==a.win[0])return a.remove()})}),a.observerremover.observe(a.win[0].parentNode,{childList:!0,characterData:!1,
attributes:!1,subtree:!1})):(a.bind(a.win,d.isie&&!d.isie9?"propertychange":"DOMAttrModified",a.onAttributeChange),d.isie9&&a.win[0].attachEvent("onpropertychange",a.onAttributeChange),a.bind(a.win,"DOMNodeRemoved",function(c){c.target==a.win[0]&&a.remove()})));!a.ispage&&a.opt.boxzoom&&a.bind(window,"resize",a.resizeZoom);a.istextarea&&a.bind(a.win,"mouseup",a.lazyResize);a.lazyResize(30)}if("IFRAME"==this.doc[0].nodeName){var J=function(c){a.iframexd=!1;try{var b="contentDocument"in this?this.contentDocument:
this.contentWindow.document}catch(f){a.iframexd=!0,b=!1}if(a.iframexd)return"console"in window&&console.log("NiceScroll error: policy restriced iframe"),!0;a.forcescreen=!0;a.isiframe&&(a.iframe={doc:e(b),html:a.doc.contents().find("html")[0],body:a.doc.contents().find("body")[0]},a.getContentSize=function(){return{w:Math.max(a.iframe.html.scrollWidth,a.iframe.body.scrollWidth),h:Math.max(a.iframe.html.scrollHeight,a.iframe.body.scrollHeight)}},a.docscroll=e(a.iframe.body));d.isios||!a.opt.iframeautoresize||
a.isiframe||(a.win.scrollTop(0),a.doc.height(""),c=Math.max(b.getElementsByTagName("html")[0].scrollHeight,b.body.scrollHeight),a.doc.height(c));a.lazyResize(30);d.isie7&&a.css(e(a.iframe.html),{"overflow-y":"hidden"});a.css(e(a.iframe.body),{"overflow-y":"hidden"});d.isios&&a.haswrapper&&a.css(e(b.body),{"-webkit-transform":"translate3d(0,0,0)"});"contentWindow"in this?a.bind(this.contentWindow,"scroll",a.onscroll):a.bind(b,"scroll",a.onscroll);a.opt.enablemousewheel&&a.bind(b,"mousewheel",a.onmousewheel);
a.opt.enablekeyboard&&a.bind(b,d.isopera?"keypress":"keydown",a.onkeypress);if(d.cantouch||a.opt.touchbehavior)a.bind(b,"mousedown",a.ontouchstart),a.bind(b,"mousemove",function(c){a.ontouchmove(c,!0)}),a.opt.grabcursorenabled&&d.cursorgrabvalue&&a.css(e(b.body),{cursor:d.cursorgrabvalue});a.bind(b,"mouseup",a.ontouchend);a.zoom&&(a.opt.dblclickzoom&&a.bind(b,"dblclick",a.doZoom),a.ongesturezoom&&a.bind(b,"gestureend",a.ongesturezoom))};this.doc[0].readyState&&"complete"==this.doc[0].readyState&&
setTimeout(function(){J.call(a.doc[0],!1)},500);a.bind(this.doc,"load",J)}};this.showCursor=function(c,b){a.cursortimeout&&(clearTimeout(a.cursortimeout),a.cursortimeout=0);a.rail&&(a.autohidedom&&(a.autohidedom.stop().css({opacity:a.opt.cursoropacitymax}),a.cursoractive=!0),a.rail.drag&&1==a.rail.drag.pt||("undefined"!=typeof c&&!1!==c&&(a.scroll.y=Math.round(1*c/a.scrollratio.y)),"undefined"!=typeof b&&(a.scroll.x=Math.round(1*b/a.scrollratio.x))),a.cursor.css({height:a.cursorheight,top:a.scroll.y}),
a.cursorh&&(!a.rail.align&&a.rail.visibility?a.cursorh.css({width:a.cursorwidth,left:a.scroll.x+a.rail.width}):a.cursorh.css({width:a.cursorwidth,left:a.scroll.x}),a.cursoractive=!0),a.zoom&&a.zoom.stop().css({opacity:a.opt.cursoropacitymax}))};this.hideCursor=function(c){a.cursortimeout||!a.rail||!a.autohidedom||a.hasmousefocus&&"leave"==a.opt.autohidemode||(a.cursortimeout=setTimeout(function(){a.rail.active&&a.showonmouseevent||(a.autohidedom.stop().animate({opacity:a.opt.cursoropacitymin}),a.zoom&&
a.zoom.stop().animate({opacity:a.opt.cursoropacitymin}),a.cursoractive=!1);a.cursortimeout=0},c||a.opt.hidecursordelay))};this.noticeCursor=function(c,b,f){a.showCursor(b,f);a.rail.active||a.hideCursor(c)};this.getContentSize=a.ispage?function(){return{w:Math.max(document.body.scrollWidth,document.documentElement.scrollWidth),h:Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)}}:a.haswrapper?function(){return{w:a.doc.outerWidth()+parseInt(a.win.css("paddingLeft"))+parseInt(a.win.css("paddingRight")),
h:a.doc.outerHeight()+parseInt(a.win.css("paddingTop"))+parseInt(a.win.css("paddingBottom"))}}:function(){return{w:a.docscroll[0].scrollWidth,h:a.docscroll[0].scrollHeight}};this.onResize=function(c,b){if(!a||!a.win)return!1;if(!a.haswrapper&&!a.ispage){if("none"==a.win.css("display"))return a.visibility&&a.hideRail().hideRailHr(),!1;a.hidden||a.visibility||a.showRail().showRailHr()}var f=a.page.maxh,d=a.page.maxw,e=a.view.w;a.view={w:a.ispage?a.win.width():parseInt(a.win[0].clientWidth),h:a.ispage?
a.win.height():parseInt(a.win[0].clientHeight)};a.page=b?b:a.getContentSize();a.page.maxh=Math.max(0,a.page.h-a.view.h);a.page.maxw=Math.max(0,a.page.w-a.view.w);if(a.page.maxh==f&&a.page.maxw==d&&a.view.w==e){if(a.ispage)return a;f=a.win.offset();if(a.lastposition&&(d=a.lastposition,d.top==f.top&&d.left==f.left))return a;a.lastposition=f}0==a.page.maxh?(a.hideRail(),a.scrollvaluemax=0,a.scroll.y=0,a.scrollratio.y=0,a.cursorheight=0,a.setScrollTop(0),a.rail.scrollable=!1):a.rail.scrollable=!0;0==
a.page.maxw?(a.hideRailHr(),a.scrollvaluemaxw=0,a.scroll.x=0,a.scrollratio.x=0,a.cursorwidth=0,a.setScrollLeft(0),a.railh.scrollable=!1):a.railh.scrollable=!0;a.locked=0==a.page.maxh&&0==a.page.maxw;if(a.locked)return a.ispage||a.updateScrollBar(a.view),!1;a.hidden||a.visibility?a.hidden||a.railh.visibility||a.showRailHr():a.showRail().showRailHr();a.istextarea&&a.win.css("resize")&&"none"!=a.win.css("resize")&&(a.view.h-=20);a.cursorheight=Math.min(a.view.h,Math.round(a.view.h/a.page.h*a.view.h));
a.cursorheight=a.opt.cursorfixedheight?a.opt.cursorfixedheight:Math.max(a.opt.cursorminheight,a.cursorheight);a.cursorwidth=Math.min(a.view.w,Math.round(a.view.w/a.page.w*a.view.w));a.cursorwidth=a.opt.cursorfixedheight?a.opt.cursorfixedheight:Math.max(a.opt.cursorminheight,a.cursorwidth);a.scrollvaluemax=a.view.h-a.cursorheight-a.cursor.hborder;a.railh&&(a.railh.width=0<a.page.maxh?a.view.w-a.rail.width:a.view.w,a.scrollvaluemaxw=a.railh.width-a.cursorwidth-a.cursorh.wborder);a.ispage||a.updateScrollBar(a.view);
a.scrollratio={x:a.page.maxw/a.scrollvaluemaxw,y:a.page.maxh/a.scrollvaluemax};a.getScrollTop()>a.page.maxh?a.doScrollTop(a.page.maxh):(a.scroll.y=Math.round(a.getScrollTop()*(1/a.scrollratio.y)),a.scroll.x=Math.round(a.getScrollLeft()*(1/a.scrollratio.x)),a.cursoractive&&a.noticeCursor());a.scroll.y&&0==a.getScrollTop()&&a.doScrollTo(Math.floor(a.scroll.y*a.scrollratio.y));return a};this.resize=a.onResize;this.lazyResize=function(c){c=isNaN(c)?30:c;a.delayed("resize",a.resize,c);return a};this._bind=
function(c,b,f,d){a.events.push({e:c,n:b,f:f,b:d,q:!1});c.addEventListener?c.addEventListener(b,f,d||!1):c.attachEvent?c.attachEvent("on"+b,f):c["on"+b]=f};this.jqbind=function(c,b,f){a.events.push({e:c,n:b,f:f,q:!0});e(c).bind(b,f)};this.bind=function(c,b,f,e){var h="jquery"in c?c[0]:c;"mousewheel"==b?"onwheel"in a.win?a._bind(h,"wheel",f,e||!1):(c="undefined"!=typeof document.onmousewheel?"mousewheel":"DOMMouseScroll",l(h,c,f,e||!1),"DOMMouseScroll"==c&&l(h,"MozMousePixelScroll",f,e||!1)):h.addEventListener?
(d.cantouch&&/mouseup|mousedown|mousemove/.test(b)&&a._bind(h,"mousedown"==b?"touchstart":"mouseup"==b?"touchend":"touchmove",function(a){if(a.touches){if(2>a.touches.length){var c=a.touches.length?a.touches[0]:a;c.original=a;f.call(this,c)}}else a.changedTouches&&(c=a.changedTouches[0],c.original=a,f.call(this,c))},e||!1),a._bind(h,b,f,e||!1),d.cantouch&&"mouseup"==b&&a._bind(h,"touchcancel",f,e||!1)):a._bind(h,b,function(c){(c=c||window.event||!1)&&c.srcElement&&(c.target=c.srcElement);"pageY"in
c||(c.pageX=c.clientX+document.documentElement.scrollLeft,c.pageY=c.clientY+document.documentElement.scrollTop);return!1===f.call(h,c)||!1===e?a.cancelEvent(c):!0})};this._unbind=function(a,b,f,d){a.removeEventListener?a.removeEventListener(b,f,d):a.detachEvent?a.detachEvent("on"+b,f):a["on"+b]=!1};this.unbindAll=function(){for(var c=0;c<a.events.length;c++){var b=a.events[c];b.q?b.e.unbind(b.n,b.f):a._unbind(b.e,b.n,b.f,b.b)}};this.cancelEvent=function(a){a=a.original?a.original:a?a:window.event||
!1;if(!a)return!1;a.preventDefault&&a.preventDefault();a.stopPropagation&&a.stopPropagation();a.preventManipulation&&a.preventManipulation();a.cancelBubble=!0;a.cancel=!0;return a.returnValue=!1};this.stopPropagation=function(a){a=a.original?a.original:a?a:window.event||!1;if(!a)return!1;if(a.stopPropagation)return a.stopPropagation();a.cancelBubble&&(a.cancelBubble=!0);return!1};this.showRail=function(){0==a.page.maxh||!a.ispage&&"none"==a.win.css("display")||(a.visibility=!0,a.rail.visibility=!0,
a.rail.css("display","block"));return a};this.showRailHr=function(){if(!a.railh)return a;0==a.page.maxw||!a.ispage&&"none"==a.win.css("display")||(a.railh.visibility=!0,a.railh.css("display","block"));return a};this.hideRail=function(){a.visibility=!1;a.rail.visibility=!1;a.rail.css("display","none");return a};this.hideRailHr=function(){if(!a.railh)return a;a.railh.visibility=!1;a.railh.css("display","none");return a};this.show=function(){a.hidden=!1;a.locked=!1;return a.showRail().showRailHr()};
this.hide=function(){a.hidden=!0;a.locked=!0;return a.hideRail().hideRailHr()};this.toggle=function(){return a.hidden?a.show():a.hide()};this.remove=function(){a.stop();a.cursortimeout&&clearTimeout(a.cursortimeout);a.doZoomOut();a.unbindAll();d.isie9&&a.win[0].detachEvent("onpropertychange",a.onAttributeChange);!1!==a.observer&&a.observer.disconnect();!1!==a.observerremover&&a.observerremover.disconnect();a.events=null;a.cursor&&a.cursor.remove();a.cursorh&&a.cursorh.remove();a.rail&&a.rail.remove();
a.railh&&a.railh.remove();a.zoom&&a.zoom.remove();for(var c=0;c<a.saved.css.length;c++){var b=a.saved.css[c];b[0].css(b[1],"undefined"==typeof b[2]?"":b[2])}a.saved=!1;a.me.data("__nicescroll","");var f=e.nicescroll;f.each(function(c){if(this&&this.id===a.id){delete f[c];for(var b=++c;b<f.length;b++,c++)f[c]=f[b];f.length--;f.length&&delete f[f.length]}});for(var h in a)a[h]=null,delete a[h];a=null};this.scrollstart=function(c){this.onscrollstart=c;return a};this.scrollend=function(c){this.onscrollend=
c;return a};this.scrollcancel=function(c){this.onscrollcancel=c;return a};this.zoomin=function(c){this.onzoomin=c;return a};this.zoomout=function(c){this.onzoomout=c;return a};this.isScrollable=function(a){a=a.target?a.target:a;if("OPTION"==a.nodeName)return!0;for(;a&&1==a.nodeType&&!/^BODY|HTML/.test(a.nodeName);){var b=e(a),b=b.css("overflowY")||b.css("overflowX")||b.css("overflow")||"";if(/scroll|auto/.test(b))return a.clientHeight!=a.scrollHeight;a=a.parentNode?a.parentNode:!1}return!1};this.getViewport=
function(a){for(a=a&&a.parentNode?a.parentNode:!1;a&&1==a.nodeType&&!/^BODY|HTML/.test(a.nodeName);){var b=e(a);if(/fixed|absolute/.test(b.css("position")))return b;var f=b.css("overflowY")||b.css("overflowX")||b.css("overflow")||"";if(/scroll|auto/.test(f)&&a.clientHeight!=a.scrollHeight||0<b.getNiceScroll().length)return b;a=a.parentNode?a.parentNode:!1}return a?e(a):!1};this.triggerScrollEnd=function(){if(a.onscrollend){var c=a.getScrollLeft(),b=a.getScrollTop();a.onscrollend.call(a,{type:"scrollend",
current:{x:c,y:b},end:{x:c,y:b}})}};this.onmousewheel=function(c){if(!a.wheelprevented){if(a.locked)return a.debounced("checkunlock",a.resize,250),!0;if(a.rail.drag)return a.cancelEvent(c);"auto"==a.opt.oneaxismousemode&&0!=c.deltaX&&(a.opt.oneaxismousemode=!1);if(a.opt.oneaxismousemode&&0==c.deltaX&&!a.rail.scrollable)return a.railh&&a.railh.scrollable?a.onmousewheelhr(c):!0;var b=+new Date,f=!1;a.opt.preservenativescrolling&&a.checkarea+600<b&&(a.nativescrollingarea=a.isScrollable(c),f=!0);a.checkarea=
b;if(a.nativescrollingarea)return!0;if(c=q(c,!1,f))a.checkarea=0;return c}};this.onmousewheelhr=function(c){if(!a.wheelprevented){if(a.locked||!a.railh.scrollable)return!0;if(a.rail.drag)return a.cancelEvent(c);var b=+new Date,f=!1;a.opt.preservenativescrolling&&a.checkarea+600<b&&(a.nativescrollingarea=a.isScrollable(c),f=!0);a.checkarea=b;return a.nativescrollingarea?!0:a.locked?a.cancelEvent(c):q(c,!0,f)}};this.stop=function(){a.cancelScroll();a.scrollmon&&a.scrollmon.stop();a.cursorfreezed=!1;
a.scroll.y=Math.round(a.getScrollTop()*(1/a.scrollratio.y));a.noticeCursor();return a};this.getTransitionSpeed=function(b){var d=Math.round(10*a.opt.scrollspeed);b=Math.min(d,Math.round(b/20*a.opt.scrollspeed));return 20<b?b:0};a.opt.smoothscroll?a.ishwscroll&&d.hastransition&&a.opt.usetransition?(this.prepareTransition=function(b,e){var f=e?20<b?b:0:a.getTransitionSpeed(b),h=f?d.prefixstyle+"transform "+f+"ms ease-out":"";a.lasttransitionstyle&&a.lasttransitionstyle==h||(a.lasttransitionstyle=h,
a.doc.css(d.transitionstyle,h));return f},this.doScrollLeft=function(b,d){var f=a.scrollrunning?a.newscrolly:a.getScrollTop();a.doScrollPos(b,f,d)},this.doScrollTop=function(b,d){var f=a.scrollrunning?a.newscrollx:a.getScrollLeft();a.doScrollPos(f,b,d)},this.doScrollPos=function(b,e,f){var h=a.getScrollTop(),g=a.getScrollLeft();(0>(a.newscrolly-h)*(e-h)||0>(a.newscrollx-g)*(b-g))&&a.cancelScroll();0==a.opt.bouncescroll&&(0>e?e=0:e>a.page.maxh&&(e=a.page.maxh),0>b?b=0:b>a.page.maxw&&(b=a.page.maxw));
if(a.scrollrunning&&b==a.newscrollx&&e==a.newscrolly)return!1;a.newscrolly=e;a.newscrollx=b;a.newscrollspeed=f||!1;if(a.timer)return!1;a.timer=setTimeout(function(){var f=a.getScrollTop(),h=a.getScrollLeft(),g,k;g=b-h;k=e-f;g=Math.round(Math.sqrt(Math.pow(g,2)+Math.pow(k,2)));g=a.newscrollspeed&&1<a.newscrollspeed?a.newscrollspeed:a.getTransitionSpeed(g);a.newscrollspeed&&1>=a.newscrollspeed&&(g*=a.newscrollspeed);a.prepareTransition(g,!0);a.timerscroll&&a.timerscroll.tm&&clearInterval(a.timerscroll.tm);
0<g&&(!a.scrollrunning&&a.onscrollstart&&a.onscrollstart.call(a,{type:"scrollstart",current:{x:h,y:f},request:{x:b,y:e},end:{x:a.newscrollx,y:a.newscrolly},speed:g}),d.transitionend?a.scrollendtrapped||(a.scrollendtrapped=!0,a.bind(a.doc,d.transitionend,a.onScrollTransitionEnd,!1)):(a.scrollendtrapped&&clearTimeout(a.scrollendtrapped),a.scrollendtrapped=setTimeout(a.onScrollTransitionEnd,g)),a.timerscroll={bz:new BezierClass(f,a.newscrolly,g,0,0,.58,1),bh:new BezierClass(h,a.newscrollx,g,0,0,.58,
1)},a.cursorfreezed||(a.timerscroll.tm=setInterval(function(){a.showCursor(a.getScrollTop(),a.getScrollLeft())},60)));a.synched("doScroll-set",function(){a.timer=0;a.scrollendtrapped&&(a.scrollrunning=!0);a.setScrollTop(a.newscrolly);a.setScrollLeft(a.newscrollx);if(!a.scrollendtrapped)a.onScrollTransitionEnd()})},50)},this.cancelScroll=function(){if(!a.scrollendtrapped)return!0;var b=a.getScrollTop(),e=a.getScrollLeft();a.scrollrunning=!1;d.transitionend||clearTimeout(d.transitionend);a.scrollendtrapped=
!1;a._unbind(a.doc,d.transitionend,a.onScrollTransitionEnd);a.prepareTransition(0);a.setScrollTop(b);a.railh&&a.setScrollLeft(e);a.timerscroll&&a.timerscroll.tm&&clearInterval(a.timerscroll.tm);a.timerscroll=!1;a.cursorfreezed=!1;a.showCursor(b,e);return a},this.onScrollTransitionEnd=function(){a.scrollendtrapped&&a._unbind(a.doc,d.transitionend,a.onScrollTransitionEnd);a.scrollendtrapped=!1;a.prepareTransition(0);a.timerscroll&&a.timerscroll.tm&&clearInterval(a.timerscroll.tm);a.timerscroll=!1;var b=
a.getScrollTop(),e=a.getScrollLeft();a.setScrollTop(b);a.railh&&a.setScrollLeft(e);a.noticeCursor(!1,b,e);a.cursorfreezed=!1;0>b?b=0:b>a.page.maxh&&(b=a.page.maxh);0>e?e=0:e>a.page.maxw&&(e=a.page.maxw);if(b!=a.newscrolly||e!=a.newscrollx)return a.doScrollPos(e,b,a.opt.snapbackspeed);a.onscrollend&&a.scrollrunning&&a.triggerScrollEnd();a.scrollrunning=!1}):(this.doScrollLeft=function(b,d){var f=a.scrollrunning?a.newscrolly:a.getScrollTop();a.doScrollPos(b,f,d)},this.doScrollTop=function(b,d){var f=
a.scrollrunning?a.newscrollx:a.getScrollLeft();a.doScrollPos(f,b,d)},this.doScrollPos=function(b,d,f){function e(){if(a.cancelAnimationFrame)return!0;a.scrollrunning=!0;if(p=1-p)return a.timer=t(e)||1;var b=0,c=sy=a.getScrollTop();if(a.dst.ay){var c=a.bzscroll?a.dst.py+a.bzscroll.getNow()*a.dst.ay:a.newscrolly,f=c-sy;if(0>f&&c<a.newscrolly||0<f&&c>a.newscrolly)c=a.newscrolly;a.setScrollTop(c);c==a.newscrolly&&(b=1)}else b=1;var d=sx=a.getScrollLeft();if(a.dst.ax){d=a.bzscroll?a.dst.px+a.bzscroll.getNow()*
a.dst.ax:a.newscrollx;f=d-sx;if(0>f&&d<a.newscrollx||0<f&&d>a.newscrollx)d=a.newscrollx;a.setScrollLeft(d);d==a.newscrollx&&(b+=1)}else b+=1;2==b?(a.timer=0,a.cursorfreezed=!1,a.bzscroll=!1,a.scrollrunning=!1,0>c?c=0:c>a.page.maxh&&(c=a.page.maxh),0>d?d=0:d>a.page.maxw&&(d=a.page.maxw),d!=a.newscrollx||c!=a.newscrolly?a.doScrollPos(d,c):a.onscrollend&&a.triggerScrollEnd()):a.timer=t(e)||1}d="undefined"==typeof d||!1===d?a.getScrollTop(!0):d;if(a.timer&&a.newscrolly==d&&a.newscrollx==b)return!0;a.timer&&
w(a.timer);a.timer=0;var h=a.getScrollTop(),g=a.getScrollLeft();(0>(a.newscrolly-h)*(d-h)||0>(a.newscrollx-g)*(b-g))&&a.cancelScroll();a.newscrolly=d;a.newscrollx=b;a.bouncescroll&&a.rail.visibility||(0>a.newscrolly?a.newscrolly=0:a.newscrolly>a.page.maxh&&(a.newscrolly=a.page.maxh));a.bouncescroll&&a.railh.visibility||(0>a.newscrollx?a.newscrollx=0:a.newscrollx>a.page.maxw&&(a.newscrollx=a.page.maxw));a.dst={};a.dst.x=b-g;a.dst.y=d-h;a.dst.px=g;a.dst.py=h;var k=Math.round(Math.sqrt(Math.pow(a.dst.x,
2)+Math.pow(a.dst.y,2)));a.dst.ax=a.dst.x/k;a.dst.ay=a.dst.y/k;var l=0,q=k;0==a.dst.x?(l=h,q=d,a.dst.ay=1,a.dst.py=0):0==a.dst.y&&(l=g,q=b,a.dst.ax=1,a.dst.px=0);k=a.getTransitionSpeed(k);f&&1>=f&&(k*=f);a.bzscroll=0<k?a.bzscroll?a.bzscroll.update(q,k):new BezierClass(l,q,k,0,1,0,1):!1;if(!a.timer){(h==a.page.maxh&&d>=a.page.maxh||g==a.page.maxw&&b>=a.page.maxw)&&a.checkContentSize();var p=1;a.cancelAnimationFrame=!1;a.timer=1;a.onscrollstart&&!a.scrollrunning&&a.onscrollstart.call(a,{type:"scrollstart",
current:{x:g,y:h},request:{x:b,y:d},end:{x:a.newscrollx,y:a.newscrolly},speed:k});e();(h==a.page.maxh&&d>=h||g==a.page.maxw&&b>=g)&&a.checkContentSize();a.noticeCursor()}},this.cancelScroll=function(){a.timer&&w(a.timer);a.timer=0;a.bzscroll=!1;a.scrollrunning=!1;return a}):(this.doScrollLeft=function(b,d){var f=a.getScrollTop();a.doScrollPos(b,f,d)},this.doScrollTop=function(b,d){var f=a.getScrollLeft();a.doScrollPos(f,b,d)},this.doScrollPos=function(b,d,f){var e=b>a.page.maxw?a.page.maxw:b;0>e&&
(e=0);var h=d>a.page.maxh?a.page.maxh:d;0>h&&(h=0);a.synched("scroll",function(){a.setScrollTop(h);a.setScrollLeft(e)})},this.cancelScroll=function(){});this.doScrollBy=function(b,d){var f=0,f=d?Math.floor((a.scroll.y-b)*a.scrollratio.y):(a.timer?a.newscrolly:a.getScrollTop(!0))-b;if(a.bouncescroll){var e=Math.round(a.view.h/2);f<-e?f=-e:f>a.page.maxh+e&&(f=a.page.maxh+e)}a.cursorfreezed=!1;py=a.getScrollTop(!0);if(0>f&&0>=py)return a.noticeCursor();if(f>a.page.maxh&&py>=a.page.maxh)return a.checkContentSize(),
a.noticeCursor();a.doScrollTop(f)};this.doScrollLeftBy=function(b,d){var f=0,f=d?Math.floor((a.scroll.x-b)*a.scrollratio.x):(a.timer?a.newscrollx:a.getScrollLeft(!0))-b;if(a.bouncescroll){var e=Math.round(a.view.w/2);f<-e?f=-e:f>a.page.maxw+e&&(f=a.page.maxw+e)}a.cursorfreezed=!1;px=a.getScrollLeft(!0);if(0>f&&0>=px||f>a.page.maxw&&px>=a.page.maxw)return a.noticeCursor();a.doScrollLeft(f)};this.doScrollTo=function(b,d){d&&Math.round(b*a.scrollratio.y);a.cursorfreezed=!1;a.doScrollTop(b)};this.checkContentSize=
function(){var b=a.getContentSize();b.h==a.page.h&&b.w==a.page.w||a.resize(!1,b)};a.onscroll=function(b){a.rail.drag||a.cursorfreezed||a.synched("scroll",function(){a.scroll.y=Math.round(a.getScrollTop()*(1/a.scrollratio.y));a.railh&&(a.scroll.x=Math.round(a.getScrollLeft()*(1/a.scrollratio.x)));a.noticeCursor()})};a.bind(a.docscroll,"scroll",a.onscroll);this.doZoomIn=function(b){if(!a.zoomactive){a.zoomactive=!0;a.zoomrestore={style:{}};var h="position top left zIndex backgroundColor marginTop marginBottom marginLeft marginRight".split(" "),
f=a.win[0].style,g;for(g in h){var k=h[g];a.zoomrestore.style[k]="undefined"!=typeof f[k]?f[k]:""}a.zoomrestore.style.width=a.win.css("width");a.zoomrestore.style.height=a.win.css("height");a.zoomrestore.padding={w:a.win.outerWidth()-a.win.width(),h:a.win.outerHeight()-a.win.height()};d.isios4&&(a.zoomrestore.scrollTop=e(window).scrollTop(),e(window).scrollTop(0));a.win.css({position:d.isios4?"absolute":"fixed",top:0,left:0,"z-index":y+100,margin:"0px"});h=a.win.css("backgroundColor");(""==h||/transparent|rgba\(0, 0, 0, 0\)|rgba\(0,0,0,0\)/.test(h))&&
a.win.css("backgroundColor","#fff");a.rail.css({"z-index":y+101});a.zoom.css({"z-index":y+102});a.zoom.css("backgroundPosition","0px -18px");a.resizeZoom();a.onzoomin&&a.onzoomin.call(a);return a.cancelEvent(b)}};this.doZoomOut=function(b){if(a.zoomactive)return a.zoomactive=!1,a.win.css("margin",""),a.win.css(a.zoomrestore.style),d.isios4&&e(window).scrollTop(a.zoomrestore.scrollTop),a.rail.css({"z-index":a.zindex}),a.zoom.css({"z-index":a.zindex}),a.zoomrestore=!1,a.zoom.css("backgroundPosition",
"0px 0px"),a.onResize(),a.onzoomout&&a.onzoomout.call(a),a.cancelEvent(b)};this.doZoom=function(b){return a.zoomactive?a.doZoomOut(b):a.doZoomIn(b)};this.resizeZoom=function(){if(a.zoomactive){var b=a.getScrollTop();a.win.css({width:e(window).width()-a.zoomrestore.padding.w+"px",height:e(window).height()-a.zoomrestore.padding.h+"px"});a.onResize();a.setScrollTop(Math.min(a.page.maxh,b))}};this.init();e.nicescroll.push(this)},I=function(e){var b=this;this.nc=e;this.steptime=this.lasttime=this.speedy=
this.speedx=this.lasty=this.lastx=0;this.snapy=this.snapx=!1;this.demuly=this.demulx=0;this.lastscrolly=this.lastscrollx=-1;this.timer=this.chky=this.chkx=0;this.time=function(){return+new Date};this.reset=function(e,g){b.stop();var l=b.time();b.steptime=0;b.lasttime=l;b.speedx=0;b.speedy=0;b.lastx=e;b.lasty=g;b.lastscrollx=-1;b.lastscrolly=-1};this.update=function(e,g){var l=b.time();b.steptime=l-b.lasttime;b.lasttime=l;var l=g-b.lasty,q=e-b.lastx,a=b.nc.getScrollTop(),p=b.nc.getScrollLeft(),a=a+
l,p=p+q;b.snapx=0>p||p>b.nc.page.maxw;b.snapy=0>a||a>b.nc.page.maxh;b.speedx=q;b.speedy=l;b.lastx=e;b.lasty=g};this.stop=function(){b.nc.unsynched("domomentum2d");b.timer&&clearTimeout(b.timer);b.timer=0;b.lastscrollx=-1;b.lastscrolly=-1};this.doSnapy=function(e,g){var l=!1;0>g?(g=0,l=!0):g>b.nc.page.maxh&&(g=b.nc.page.maxh,l=!0);0>e?(e=0,l=!0):e>b.nc.page.maxw&&(e=b.nc.page.maxw,l=!0);l?b.nc.doScrollPos(e,g,b.nc.opt.snapbackspeed):b.nc.triggerScrollEnd()};this.doMomentum=function(e){var g=b.time(),
l=e?g+e:b.lasttime;e=b.nc.getScrollLeft();var q=b.nc.getScrollTop(),a=b.nc.page.maxh,p=b.nc.page.maxw;b.speedx=0<p?Math.min(60,b.speedx):0;b.speedy=0<a?Math.min(60,b.speedy):0;l=l&&60>=g-l;if(0>q||q>a||0>e||e>p)l=!1;e=b.speedx&&l?b.speedx:!1;if(b.speedy&&l&&b.speedy||e){var d=Math.max(16,b.steptime);50<d&&(e=d/50,b.speedx*=e,b.speedy*=e,d=50);b.demulxy=0;b.lastscrollx=b.nc.getScrollLeft();b.chkx=b.lastscrollx;b.lastscrolly=b.nc.getScrollTop();b.chky=b.lastscrolly;var r=b.lastscrollx,u=b.lastscrolly,
t=function(){var c=600<b.time()-g?.04:.02;b.speedx&&(r=Math.floor(b.lastscrollx-b.speedx*(1-b.demulxy)),b.lastscrollx=r,0>r||r>p)&&(c=.1);b.speedy&&(u=Math.floor(b.lastscrolly-b.speedy*(1-b.demulxy)),b.lastscrolly=u,0>u||u>a)&&(c=.1);b.demulxy=Math.min(1,b.demulxy+c);b.nc.synched("domomentum2d",function(){b.speedx&&(b.nc.getScrollLeft()!=b.chkx&&b.stop(),b.chkx=r,b.nc.setScrollLeft(r));b.speedy&&(b.nc.getScrollTop()!=b.chky&&b.stop(),b.chky=u,b.nc.setScrollTop(u));b.timer||(b.nc.hideCursor(),b.doSnapy(r,
u))});1>b.demulxy?b.timer=setTimeout(t,d):(b.stop(),b.nc.hideCursor(),b.doSnapy(r,u))};t()}else b.doSnapy(b.nc.getScrollLeft(),b.nc.getScrollTop())}},x=e.fn.scrollTop;e.cssHooks.pageYOffset={get:function(g,b,h){return(b=e.data(g,"__nicescroll")||!1)&&b.ishwscroll?b.getScrollTop():x.call(g)},set:function(g,b){var h=e.data(g,"__nicescroll")||!1;h&&h.ishwscroll?h.setScrollTop(parseInt(b)):x.call(g,b);return this}};e.fn.scrollTop=function(g){if("undefined"==typeof g){var b=this[0]?e.data(this[0],"__nicescroll")||
!1:!1;return b&&b.ishwscroll?b.getScrollTop():x.call(this)}return this.each(function(){var b=e.data(this,"__nicescroll")||!1;b&&b.ishwscroll?b.setScrollTop(parseInt(g)):x.call(e(this),g)})};var B=e.fn.scrollLeft;e.cssHooks.pageXOffset={get:function(g,b,h){return(b=e.data(g,"__nicescroll")||!1)&&b.ishwscroll?b.getScrollLeft():B.call(g)},set:function(g,b){var h=e.data(g,"__nicescroll")||!1;h&&h.ishwscroll?h.setScrollLeft(parseInt(b)):B.call(g,b);return this}};e.fn.scrollLeft=function(g){if("undefined"==
typeof g){var b=this[0]?e.data(this[0],"__nicescroll")||!1:!1;return b&&b.ishwscroll?b.getScrollLeft():B.call(this)}return this.each(function(){var b=e.data(this,"__nicescroll")||!1;b&&b.ishwscroll?b.setScrollLeft(parseInt(g)):B.call(e(this),g)})};var C=function(g){var b=this;this.length=0;this.name="nicescrollarray";this.each=function(e){for(var g=0,a=0;g<b.length;g++)e.call(b[g],a++);return b};this.push=function(e){b[b.length]=e;b.length++};this.eq=function(e){return b[e]};if(g)for(var h=0;h<g.length;h++){var k=
e.data(g[h],"__nicescroll")||!1;k&&(this[this.length]=k,this.length++)}return this};(function(e,b,h){for(var k=0;k<b.length;k++)h(e,b[k])})(C.prototype,"show hide toggle onResize resize remove stop doScrollPos".split(" "),function(e,b){e[b]=function(){var e=arguments;return this.each(function(){this[b].apply(this,e)})}});e.fn.getNiceScroll=function(g){return"undefined"==typeof g?new C(this):this[g]&&e.data(this[g],"__nicescroll")||!1};e.extend(e.expr[":"],{nicescroll:function(g){return e.data(g,"__nicescroll")?
!0:!1}});e.fn.niceScroll=function(g,b){"undefined"!=typeof b||"object"!=typeof g||"jquery"in g||(b=g,g=!1);var h=new C;"undefined"==typeof b&&(b={});g&&(b.doc=e(g),b.win=e(this));var k=!("doc"in b);k||"win"in b||(b.win=e(this));this.each(function(){var g=e(this).data("__nicescroll")||!1;g||(b.doc=k?e(this):b.doc,g=new O(b,e(this)),e(this).data("__nicescroll",g));h.push(g)});return 1==h.length?h[0]:h};window.NiceScroll={getjQuery:function(){return e}};e.nicescroll||(e.nicescroll=new C,e.nicescroll.options=
H)});;
jQuery.cookie=function(d,c,a){if("undefined"!=typeof c){a=a||{};null===c&&(c="",a.expires=-1);var b="";a.expires&&("number"==typeof a.expires||a.expires.toUTCString)&&("number"==typeof a.expires?(b=new Date,b.setTime(b.getTime()+864E5*a.expires)):b=a.expires,b="; expires="+b.toUTCString());var e=a.path?"; path="+a.path:"",f=a.domain?"; domain="+a.domain:"";a=a.secure?"; secure":"";document.cookie=[d,"=",encodeURIComponent(c),b,e,f,a].join("")}else{c=null;if(document.cookie&&""!=document.cookie)for(a=
document.cookie.split(";"),b=0;b<a.length;b++)if(e=jQuery.trim(a[b]),e.substring(0,d.length+1)==d+"="){c=decodeURIComponent(e.substring(d.length+1));break}return c}};;
(function(d){function e(a){var b=a||window.event,c=[].slice.call(arguments,1),f=0,e=0,g=0;a=d.event.fix(b);a.type="mousewheel";b.wheelDelta&&(f=b.wheelDelta/120);b.detail&&(f=-b.detail/3);g=f;void 0!==b.axis&&b.axis===b.HORIZONTAL_AXIS&&(g=0,e=-1*f);void 0!==b.wheelDeltaY&&(g=b.wheelDeltaY/120);void 0!==b.wheelDeltaX&&(e=-1*b.wheelDeltaX/120);c.unshift(a,f,e,g);return(d.event.dispatch||d.event.handle).apply(this,c)}var c=["DOMMouseScroll","mousewheel"];if(d.event.fixHooks)for(var h=c.length;h;)d.event.fixHooks[c[--h]]=
d.event.mouseHooks;d.event.special.mousewheel={setup:function(){if(this.addEventListener)for(var a=c.length;a;)this.addEventListener(c[--a],e,!1);else this.onmousewheel=e},teardown:function(){if(this.removeEventListener)for(var a=c.length;a;)this.removeEventListener(c[--a],e,!1);else this.onmousewheel=null}};d.fn.extend({mousewheel:function(a){return a?this.bind("mousewheel",a):this.trigger("mousewheel")},unmousewheel:function(a){return this.unbind("mousewheel",a)}})})(jQuery);;
!function(factory) {
    "function" == typeof define && define.amd ? define([ "jquery" ], factory) : factory("object" == typeof exports ? require("jquery") : jQuery);
}(function($) {
    var caretTimeoutId, ua = navigator.userAgent, iPhone = /iphone/i.test(ua), chrome = /chrome/i.test(ua), android = /android/i.test(ua);
    $.mask = {
        definitions: {
            "9": "[0-9]",
            a: "[A-Za-z]",
            "*": "[A-Za-z0-9]"
        },
        autoclear: !0,
        dataName: "rawMaskFn",
        placeholder: "_"
    }, $.fn.extend({
        caret: function(begin, end) {
            var range;
            if (0 !== this.length && !this.is(":hidden")) return "number" == typeof begin ? (end = "number" == typeof end ? end : begin, 
            this.each(function() {
                this.setSelectionRange ? this.setSelectionRange(begin, end) : this.createTextRange && (range = this.createTextRange(), 
                range.collapse(!0), range.moveEnd("character", end), range.moveStart("character", begin), 
                range.select());
            })) : (this[0].setSelectionRange ? (begin = this[0].selectionStart, end = this[0].selectionEnd) : document.selection && document.selection.createRange && (range = document.selection.createRange(), 
            begin = 0 - range.duplicate().moveStart("character", -1e5), end = begin + range.text.length), 
            {
                begin: begin,
                end: end
            });
        },
        unmask: function() {
            return this.trigger("unmask");
        },
        mask: function(mask, settings) {
            var input, defs, tests, partialPosition, firstNonMaskPos, lastRequiredNonMaskPos, len, oldVal;
            if (!mask && this.length > 0) {
                input = $(this[0]);
                var fn = input.data($.mask.dataName);
                return fn ? fn() : void 0;
            }
            return settings = $.extend({
                autoclear: $.mask.autoclear,
                placeholder: $.mask.placeholder,
                completed: null
            }, settings), defs = $.mask.definitions, tests = [], partialPosition = len = mask.length, 
            firstNonMaskPos = null, $.each(mask.split(""), function(i, c) {
                "?" == c ? (len--, partialPosition = i) : defs[c] ? (tests.push(new RegExp(defs[c])), 
                null === firstNonMaskPos && (firstNonMaskPos = tests.length - 1), partialPosition > i && (lastRequiredNonMaskPos = tests.length - 1)) : tests.push(null);
            }), this.trigger("unmask").each(function() {
                function tryFireCompleted() {
                    if (settings.completed) {
                        for (var i = firstNonMaskPos; lastRequiredNonMaskPos >= i; i++) if (tests[i] && buffer[i] === getPlaceholder(i)) return;
                        settings.completed.call(input);
                    }
                }
                function getPlaceholder(i) {
                    return settings.placeholder.charAt(i < settings.placeholder.length ? i : 0);
                }
                function seekNext(pos) {
                    for (;++pos < len && !tests[pos]; ) ;
                    return pos;
                }
                function seekPrev(pos) {
                    for (;--pos >= 0 && !tests[pos]; ) ;
                    return pos;
                }
                function shiftL(begin, end) {
                    var i, j;
                    if (!(0 > begin)) {
                        for (i = begin, j = seekNext(end); len > i; i++) if (tests[i]) {
                            if (!(len > j && tests[i].test(buffer[j]))) break;
                            buffer[i] = buffer[j], buffer[j] = getPlaceholder(j), j = seekNext(j);
                        }
                        writeBuffer(), input.caret(Math.max(firstNonMaskPos, begin));
                    }
                }
                function shiftR(pos) {
                    var i, c, j, t;
                    for (i = pos, c = getPlaceholder(pos); len > i; i++) if (tests[i]) {
                        if (j = seekNext(i), t = buffer[i], buffer[i] = c, !(len > j && tests[j].test(t))) break;
                        c = t;
                    }
                }
                function androidInputEvent() {
                    var curVal = input.val(), pos = input.caret();
                    if (oldVal && oldVal.length && oldVal.length > curVal.length) {
                        for (checkVal(!0); pos.begin > 0 && !tests[pos.begin - 1]; ) pos.begin--;
                        if (0 === pos.begin) for (;pos.begin < firstNonMaskPos && !tests[pos.begin]; ) pos.begin++;
                        input.caret(pos.begin, pos.begin);
                    } else {
                        for (checkVal(!0); pos.begin < len && !tests[pos.begin]; ) pos.begin++;
                        input.caret(pos.begin, pos.begin);
                    }
                    tryFireCompleted();
                }
                function blurEvent() {
                    checkVal(), input.val() != focusText && input.change();
                }
                function keydownEvent(e) {
                    if (!input.prop("readonly")) {
                        var pos, begin, end, k = e.which || e.keyCode;
                        oldVal = input.val(), 8 === k || 46 === k || iPhone && 127 === k ? (pos = input.caret(), 
                        begin = pos.begin, end = pos.end, end - begin === 0 && (begin = 46 !== k ? seekPrev(begin) : end = seekNext(begin - 1), 
                        end = 46 === k ? seekNext(end) : end), clearBuffer(begin, end), shiftL(begin, end - 1), 
                        e.preventDefault()) : 13 === k ? blurEvent.call(this, e) : 27 === k && (input.val(focusText), 
                        input.caret(0, checkVal()), e.preventDefault());
                    }
                }
                function keypressEvent(e) {
                    if (!input.prop("readonly")) {
                        var p, c, next, k = e.which || e.keyCode, pos = input.caret();
                        if (!(e.ctrlKey || e.altKey || e.metaKey || 32 > k) && k && 13 !== k) {
                            if (pos.end - pos.begin !== 0 && (clearBuffer(pos.begin, pos.end), shiftL(pos.begin, pos.end - 1)), 
                            p = seekNext(pos.begin - 1), len > p && (c = String.fromCharCode(k), tests[p].test(c))) {
                                if (shiftR(p), buffer[p] = c, writeBuffer(), next = seekNext(p), android) {
                                    var proxy = function() {
                                        $.proxy($.fn.caret, input, next)();
                                    };
                                    setTimeout(proxy, 0);
                                } else input.caret(next);
                                pos.begin <= lastRequiredNonMaskPos && tryFireCompleted();
                            }
                            e.preventDefault();
                        }
                    }
                }
                function clearBuffer(start, end) {
                    var i;
                    for (i = start; end > i && len > i; i++) tests[i] && (buffer[i] = getPlaceholder(i));
                }
                function writeBuffer() {
                    input.val(buffer.join(""));
                }
                function checkVal(allow) {
                    var i, c, pos, test = input.val(), lastMatch = -1;
                    for (i = 0, pos = 0; len > i; i++) if (tests[i]) {
                        for (buffer[i] = getPlaceholder(i); pos++ < test.length; ) if (c = test.charAt(pos - 1), 
                        tests[i].test(c)) {
                            buffer[i] = c, lastMatch = i;
                            break;
                        }
                        if (pos > test.length) {
                            clearBuffer(i + 1, len);
                            break;
                        }
                    } else buffer[i] === test.charAt(pos) && pos++, partialPosition > i && (lastMatch = i);
                    return allow ? writeBuffer() : partialPosition > lastMatch + 1 ? settings.autoclear || buffer.join("") === defaultBuffer ? (input.val() && input.val(""), 
                    clearBuffer(0, len)) : writeBuffer() : (writeBuffer(), input.val(input.val().substring(0, lastMatch + 1))), 
                    partialPosition ? i : firstNonMaskPos;
                }
                var input = $(this), buffer = $.map(mask.split(""), function(c, i) {
                    return "?" != c ? defs[c] ? getPlaceholder(i) : c : void 0;
                }), defaultBuffer = buffer.join(""), focusText = input.val();
                input.data($.mask.dataName, function() {
                    return $.map(buffer, function(c, i) {
                        return tests[i] && c != getPlaceholder(i) ? c : null;
                    }).join("");
                }), input.one("unmask", function() {
                    input.off(".mask").removeData($.mask.dataName);
                }).on("focus.mask", function() {
                    if (!input.prop("readonly")) {
                        clearTimeout(caretTimeoutId);
                        var pos;
                        focusText = input.val(), pos = checkVal(), caretTimeoutId = setTimeout(function() {
                            input.get(0) === document.activeElement && (writeBuffer(), pos == mask.replace("?", "").length ? input.caret(0, pos) : input.caret(pos));
                        }, 10);
                    }
                }).on("blur.mask", blurEvent).on("keydown.mask", keydownEvent).on("keypress.mask", keypressEvent).on("input.mask paste.mask", function() {
                    input.prop("readonly") || setTimeout(function() {
                        var pos = checkVal(!0);
                        input.caret(pos), tryFireCompleted();
                    }, 0);
                }), chrome && android && input.off("input.mask").on("input.mask", androidInputEvent), 
                checkVal();
            });
        }
    });
});;
!function(a){"function"==typeof define&&define.amd?define(["jquery","jquery-ui"],a):a(jQuery)}(function($){if($.ui.timepicker=$.ui.timepicker||{},!$.ui.timepicker.version){$.extend($.ui,{timepicker:{version:"1.6.3"}});var Timepicker=function(){this.regional=[],this.regional[""]={currentText:"Now",closeText:"Done",amNames:["AM","A"],pmNames:["PM","P"],timeFormat:"HH:mm",timeSuffix:"",timeOnlyTitle:"Choose Time",timeText:"Time",hourText:"Hour",minuteText:"Minute",secondText:"Second",millisecText:"Millisecond",microsecText:"Microsecond",timezoneText:"Time Zone",isRTL:!1},this._defaults={showButtonPanel:!0,timeOnly:!1,timeOnlyShowDate:!1,showHour:null,showMinute:null,showSecond:null,showMillisec:null,showMicrosec:null,showTimezone:null,showTime:!0,stepHour:1,stepMinute:1,stepSecond:1,stepMillisec:1,stepMicrosec:1,hour:0,minute:0,second:0,millisec:0,microsec:0,timezone:null,hourMin:0,minuteMin:0,secondMin:0,millisecMin:0,microsecMin:0,hourMax:23,minuteMax:59,secondMax:59,millisecMax:999,microsecMax:999,minDateTime:null,maxDateTime:null,maxTime:null,minTime:null,onSelect:null,hourGrid:0,minuteGrid:0,secondGrid:0,millisecGrid:0,microsecGrid:0,alwaysSetTime:!0,separator:" ",altFieldTimeOnly:!0,altTimeFormat:null,altSeparator:null,altTimeSuffix:null,altRedirectFocus:!0,pickerTimeFormat:null,pickerTimeSuffix:null,showTimepicker:!0,timezoneList:null,addSliderAccess:!1,sliderAccessArgs:null,controlType:"slider",oneLine:!1,defaultValue:null,parse:"strict",afterInject:null},$.extend(this._defaults,this.regional[""])};$.extend(Timepicker.prototype,{$input:null,$altInput:null,$timeObj:null,inst:null,hour_slider:null,minute_slider:null,second_slider:null,millisec_slider:null,microsec_slider:null,timezone_select:null,maxTime:null,minTime:null,hour:0,minute:0,second:0,millisec:0,microsec:0,timezone:null,hourMinOriginal:null,minuteMinOriginal:null,secondMinOriginal:null,millisecMinOriginal:null,microsecMinOriginal:null,hourMaxOriginal:null,minuteMaxOriginal:null,secondMaxOriginal:null,millisecMaxOriginal:null,microsecMaxOriginal:null,ampm:"",formattedDate:"",formattedTime:"",formattedDateTime:"",timezoneList:null,units:["hour","minute","second","millisec","microsec"],support:{},control:null,setDefaults:function(a){return extendRemove(this._defaults,a||{}),this},_newInst:function($input,opts){var tp_inst=new Timepicker,inlineSettings={},fns={},overrides,i;for(var attrName in this._defaults)if(this._defaults.hasOwnProperty(attrName)){var attrValue=$input.attr("time:"+attrName);if(attrValue)try{inlineSettings[attrName]=eval(attrValue)}catch(err){inlineSettings[attrName]=attrValue}}overrides={beforeShow:function(a,b){return $.isFunction(tp_inst._defaults.evnts.beforeShow)?tp_inst._defaults.evnts.beforeShow.call($input[0],a,b,tp_inst):void 0},onChangeMonthYear:function(a,b,c){$.isFunction(tp_inst._defaults.evnts.onChangeMonthYear)&&tp_inst._defaults.evnts.onChangeMonthYear.call($input[0],a,b,c,tp_inst)},onClose:function(a,b){tp_inst.timeDefined===!0&&""!==$input.val()&&tp_inst._updateDateTime(b),$.isFunction(tp_inst._defaults.evnts.onClose)&&tp_inst._defaults.evnts.onClose.call($input[0],a,b,tp_inst)}};for(i in overrides)overrides.hasOwnProperty(i)&&(fns[i]=opts[i]||this._defaults[i]||null);tp_inst._defaults=$.extend({},this._defaults,inlineSettings,opts,overrides,{evnts:fns,timepicker:tp_inst}),tp_inst.amNames=$.map(tp_inst._defaults.amNames,function(a){return a.toUpperCase()}),tp_inst.pmNames=$.map(tp_inst._defaults.pmNames,function(a){return a.toUpperCase()}),tp_inst.support=detectSupport(tp_inst._defaults.timeFormat+(tp_inst._defaults.pickerTimeFormat?tp_inst._defaults.pickerTimeFormat:"")+(tp_inst._defaults.altTimeFormat?tp_inst._defaults.altTimeFormat:"")),"string"==typeof tp_inst._defaults.controlType?("slider"===tp_inst._defaults.controlType&&"undefined"==typeof $.ui.slider&&(tp_inst._defaults.controlType="select"),tp_inst.control=tp_inst._controls[tp_inst._defaults.controlType]):tp_inst.control=tp_inst._defaults.controlType;var timezoneList=[-720,-660,-600,-570,-540,-480,-420,-360,-300,-270,-240,-210,-180,-120,-60,0,60,120,180,210,240,270,300,330,345,360,390,420,480,525,540,570,600,630,660,690,720,765,780,840];null!==tp_inst._defaults.timezoneList&&(timezoneList=tp_inst._defaults.timezoneList);var tzl=timezoneList.length,tzi=0,tzv=null;if(tzl>0&&"object"!=typeof timezoneList[0])for(;tzl>tzi;tzi++)tzv=timezoneList[tzi],timezoneList[tzi]={value:tzv,label:$.timepicker.timezoneOffsetString(tzv,tp_inst.support.iso8601)};return tp_inst._defaults.timezoneList=timezoneList,tp_inst.timezone=null!==tp_inst._defaults.timezone?$.timepicker.timezoneOffsetNumber(tp_inst._defaults.timezone):-1*(new Date).getTimezoneOffset(),tp_inst.hour=tp_inst._defaults.hour<tp_inst._defaults.hourMin?tp_inst._defaults.hourMin:tp_inst._defaults.hour>tp_inst._defaults.hourMax?tp_inst._defaults.hourMax:tp_inst._defaults.hour,tp_inst.minute=tp_inst._defaults.minute<tp_inst._defaults.minuteMin?tp_inst._defaults.minuteMin:tp_inst._defaults.minute>tp_inst._defaults.minuteMax?tp_inst._defaults.minuteMax:tp_inst._defaults.minute,tp_inst.second=tp_inst._defaults.second<tp_inst._defaults.secondMin?tp_inst._defaults.secondMin:tp_inst._defaults.second>tp_inst._defaults.secondMax?tp_inst._defaults.secondMax:tp_inst._defaults.second,tp_inst.millisec=tp_inst._defaults.millisec<tp_inst._defaults.millisecMin?tp_inst._defaults.millisecMin:tp_inst._defaults.millisec>tp_inst._defaults.millisecMax?tp_inst._defaults.millisecMax:tp_inst._defaults.millisec,tp_inst.microsec=tp_inst._defaults.microsec<tp_inst._defaults.microsecMin?tp_inst._defaults.microsecMin:tp_inst._defaults.microsec>tp_inst._defaults.microsecMax?tp_inst._defaults.microsecMax:tp_inst._defaults.microsec,tp_inst.ampm="",tp_inst.$input=$input,tp_inst._defaults.altField&&(tp_inst.$altInput=$(tp_inst._defaults.altField),tp_inst._defaults.altRedirectFocus===!0&&tp_inst.$altInput.css({cursor:"pointer"}).focus(function(){$input.trigger("focus")})),(0===tp_inst._defaults.minDate||0===tp_inst._defaults.minDateTime)&&(tp_inst._defaults.minDate=new Date),(0===tp_inst._defaults.maxDate||0===tp_inst._defaults.maxDateTime)&&(tp_inst._defaults.maxDate=new Date),void 0!==tp_inst._defaults.minDate&&tp_inst._defaults.minDate instanceof Date&&(tp_inst._defaults.minDateTime=new Date(tp_inst._defaults.minDate.getTime())),void 0!==tp_inst._defaults.minDateTime&&tp_inst._defaults.minDateTime instanceof Date&&(tp_inst._defaults.minDate=new Date(tp_inst._defaults.minDateTime.getTime())),void 0!==tp_inst._defaults.maxDate&&tp_inst._defaults.maxDate instanceof Date&&(tp_inst._defaults.maxDateTime=new Date(tp_inst._defaults.maxDate.getTime())),void 0!==tp_inst._defaults.maxDateTime&&tp_inst._defaults.maxDateTime instanceof Date&&(tp_inst._defaults.maxDate=new Date(tp_inst._defaults.maxDateTime.getTime())),tp_inst.$input.bind("focus",function(){tp_inst._onFocus()}),tp_inst},_addTimePicker:function(a){var b=$.trim(this.$altInput&&this._defaults.altFieldTimeOnly?this.$input.val()+" "+this.$altInput.val():this.$input.val());this.timeDefined=this._parseTime(b),this._limitMinMaxDateTime(a,!1),this._injectTimePicker(),this._afterInject()},_parseTime:function(a,b){if(this.inst||(this.inst=$.datepicker._getInst(this.$input[0])),b||!this._defaults.timeOnly){var c=$.datepicker._get(this.inst,"dateFormat");try{var d=parseDateTimeInternal(c,this._defaults.timeFormat,a,$.datepicker._getFormatConfig(this.inst),this._defaults);if(!d.timeObj)return!1;$.extend(this,d.timeObj)}catch(e){return $.timepicker.log("Error parsing the date/time string: "+e+"\ndate/time string = "+a+"\ntimeFormat = "+this._defaults.timeFormat+"\ndateFormat = "+c),!1}return!0}var f=$.datepicker.parseTime(this._defaults.timeFormat,a,this._defaults);return f?($.extend(this,f),!0):!1},_afterInject:function(){var a=this.inst.settings;$.isFunction(a.afterInject)&&a.afterInject.call(this)},_injectTimePicker:function(){var a=this.inst.dpDiv,b=this.inst.settings,c=this,d="",e="",f=null,g={},h={},i=null,j=0,k=0;if(0===a.find("div.ui-timepicker-div").length&&b.showTimepicker){var l=" ui_tpicker_unit_hide",m='<div class="ui-timepicker-div'+(b.isRTL?" ui-timepicker-rtl":"")+(b.oneLine&&"select"===b.controlType?" ui-timepicker-oneLine":"")+'"><dl><dt class="ui_tpicker_time_label'+(b.showTime?"":l)+'">'+b.timeText+'</dt><dd class="ui_tpicker_time '+(b.showTime?"":l)+'"><input class="ui_tpicker_time_input" '+(b.timeInput?"":"disabled")+"/></dd>";for(j=0,k=this.units.length;k>j;j++){if(d=this.units[j],e=d.substr(0,1).toUpperCase()+d.substr(1),f=null!==b["show"+e]?b["show"+e]:this.support[d],g[d]=parseInt(b[d+"Max"]-(b[d+"Max"]-b[d+"Min"])%b["step"+e],10),h[d]=0,m+='<dt class="ui_tpicker_'+d+"_label"+(f?"":l)+'">'+b[d+"Text"]+'</dt><dd class="ui_tpicker_'+d+(f?"":l)+'"><div class="ui_tpicker_'+d+"_slider"+(f?"":l)+'"></div>',f&&b[d+"Grid"]>0){if(m+='<div style="padding-left: 1px"><table class="ui-tpicker-grid-label"><tr>',"hour"===d)for(var n=b[d+"Min"];n<=g[d];n+=parseInt(b[d+"Grid"],10)){h[d]++;var o=$.datepicker.formatTime(this.support.ampm?"hht":"HH",{hour:n},b);m+='<td data-for="'+d+'">'+o+"</td>"}else for(var p=b[d+"Min"];p<=g[d];p+=parseInt(b[d+"Grid"],10))h[d]++,m+='<td data-for="'+d+'">'+(10>p?"0":"")+p+"</td>";m+="</tr></table></div>"}m+="</dd>"}var q=null!==b.showTimezone?b.showTimezone:this.support.timezone;m+='<dt class="ui_tpicker_timezone_label'+(q?"":l)+'">'+b.timezoneText+"</dt>",m+='<dd class="ui_tpicker_timezone'+(q?"":l)+'"></dd>',m+="</dl></div>";var r=$(m);for(b.timeOnly===!0&&(r.prepend('<div class="ui-widget-header ui-helper-clearfix ui-corner-all"><div class="ui-datepicker-title">'+b.timeOnlyTitle+"</div></div>"),a.find(".ui-datepicker-header, .ui-datepicker-calendar").hide()),j=0,k=c.units.length;k>j;j++)d=c.units[j],e=d.substr(0,1).toUpperCase()+d.substr(1),f=null!==b["show"+e]?b["show"+e]:this.support[d],c[d+"_slider"]=c.control.create(c,r.find(".ui_tpicker_"+d+"_slider"),d,c[d],b[d+"Min"],g[d],b["step"+e]),f&&b[d+"Grid"]>0&&(i=100*h[d]*b[d+"Grid"]/(g[d]-b[d+"Min"]),r.find(".ui_tpicker_"+d+" table").css({width:i+"%",marginLeft:b.isRTL?"0":i/(-2*h[d])+"%",marginRight:b.isRTL?i/(-2*h[d])+"%":"0",borderCollapse:"collapse"}).find("td").click(function(a){var b=$(this),e=b.html(),f=parseInt(e.replace(/[^0-9]/g),10),g=e.replace(/[^apm]/gi),h=b.data("for");"hour"===h&&(-1!==g.indexOf("p")&&12>f?f+=12:-1!==g.indexOf("a")&&12===f&&(f=0)),c.control.value(c,c[h+"_slider"],d,f),c._onTimeChange(),c._onSelectHandler()}).css({cursor:"pointer",width:100/h[d]+"%",textAlign:"center",overflow:"hidden"}));if(this.timezone_select=r.find(".ui_tpicker_timezone").append("<select></select>").find("select"),$.fn.append.apply(this.timezone_select,$.map(b.timezoneList,function(a,b){return $("<option />").val("object"==typeof a?a.value:a).text("object"==typeof a?a.label:a)})),"undefined"!=typeof this.timezone&&null!==this.timezone&&""!==this.timezone){var s=-1*new Date(this.inst.selectedYear,this.inst.selectedMonth,this.inst.selectedDay,12).getTimezoneOffset();s===this.timezone?selectLocalTimezone(c):this.timezone_select.val(this.timezone)}else"undefined"!=typeof this.hour&&null!==this.hour&&""!==this.hour?this.timezone_select.val(b.timezone):selectLocalTimezone(c);this.timezone_select.change(function(){c._onTimeChange(),c._onSelectHandler(),c._afterInject()});var t=a.find(".ui-datepicker-buttonpane");if(t.length?t.before(r):a.append(r),this.$timeObj=r.find(".ui_tpicker_time_input"),this.$timeObj.change(function(){var a=c.inst.settings.timeFormat,b=$.datepicker.parseTime(a,this.value),d=new Date;b?(d.setHours(b.hour),d.setMinutes(b.minute),d.setSeconds(b.second),$.datepicker._setTime(c.inst,d)):(this.value=c.formattedTime,this.blur())}),null!==this.inst){var u=this.timeDefined;this._onTimeChange(),this.timeDefined=u}if(this._defaults.addSliderAccess){var v=this._defaults.sliderAccessArgs,w=this._defaults.isRTL;v.isRTL=w,setTimeout(function(){if(0===r.find(".ui-slider-access").length){r.find(".ui-slider:visible").sliderAccess(v);var a=r.find(".ui-slider-access:eq(0)").outerWidth(!0);a&&r.find("table:visible").each(function(){var b=$(this),c=b.outerWidth(),d=b.css(w?"marginRight":"marginLeft").toString().replace("%",""),e=c-a,f=d*e/c+"%",g={width:e,marginRight:0,marginLeft:0};g[w?"marginRight":"marginLeft"]=f,b.css(g)})}},10)}c._limitMinMaxDateTime(this.inst,!0)}},_limitMinMaxDateTime:function(a,b){var c=this._defaults,d=new Date(a.selectedYear,a.selectedMonth,a.selectedDay);if(this._defaults.showTimepicker){if(null!==$.datepicker._get(a,"minDateTime")&&void 0!==$.datepicker._get(a,"minDateTime")&&d){var e=$.datepicker._get(a,"minDateTime"),f=new Date(e.getFullYear(),e.getMonth(),e.getDate(),0,0,0,0);(null===this.hourMinOriginal||null===this.minuteMinOriginal||null===this.secondMinOriginal||null===this.millisecMinOriginal||null===this.microsecMinOriginal)&&(this.hourMinOriginal=c.hourMin,this.minuteMinOriginal=c.minuteMin,this.secondMinOriginal=c.secondMin,this.millisecMinOriginal=c.millisecMin,this.microsecMinOriginal=c.microsecMin),a.settings.timeOnly||f.getTime()===d.getTime()?(this._defaults.hourMin=e.getHours(),this.hour<=this._defaults.hourMin?(this.hour=this._defaults.hourMin,this._defaults.minuteMin=e.getMinutes(),this.minute<=this._defaults.minuteMin?(this.minute=this._defaults.minuteMin,this._defaults.secondMin=e.getSeconds(),this.second<=this._defaults.secondMin?(this.second=this._defaults.secondMin,this._defaults.millisecMin=e.getMilliseconds(),this.millisec<=this._defaults.millisecMin?(this.millisec=this._defaults.millisecMin,this._defaults.microsecMin=e.getMicroseconds()):(this.microsec<this._defaults.microsecMin&&(this.microsec=this._defaults.microsecMin),this._defaults.microsecMin=this.microsecMinOriginal)):(this._defaults.millisecMin=this.millisecMinOriginal,this._defaults.microsecMin=this.microsecMinOriginal)):(this._defaults.secondMin=this.secondMinOriginal,this._defaults.millisecMin=this.millisecMinOriginal,this._defaults.microsecMin=this.microsecMinOriginal)):(this._defaults.minuteMin=this.minuteMinOriginal,this._defaults.secondMin=this.secondMinOriginal,this._defaults.millisecMin=this.millisecMinOriginal,this._defaults.microsecMin=this.microsecMinOriginal)):(this._defaults.hourMin=this.hourMinOriginal,this._defaults.minuteMin=this.minuteMinOriginal,this._defaults.secondMin=this.secondMinOriginal,this._defaults.millisecMin=this.millisecMinOriginal,this._defaults.microsecMin=this.microsecMinOriginal)}if(null!==$.datepicker._get(a,"maxDateTime")&&void 0!==$.datepicker._get(a,"maxDateTime")&&d){var g=$.datepicker._get(a,"maxDateTime"),h=new Date(g.getFullYear(),g.getMonth(),g.getDate(),0,0,0,0);(null===this.hourMaxOriginal||null===this.minuteMaxOriginal||null===this.secondMaxOriginal||null===this.millisecMaxOriginal)&&(this.hourMaxOriginal=c.hourMax,this.minuteMaxOriginal=c.minuteMax,this.secondMaxOriginal=c.secondMax,this.millisecMaxOriginal=c.millisecMax,this.microsecMaxOriginal=c.microsecMax),a.settings.timeOnly||h.getTime()===d.getTime()?(this._defaults.hourMax=g.getHours(),this.hour>=this._defaults.hourMax?(this.hour=this._defaults.hourMax,this._defaults.minuteMax=g.getMinutes(),this.minute>=this._defaults.minuteMax?(this.minute=this._defaults.minuteMax,this._defaults.secondMax=g.getSeconds(),this.second>=this._defaults.secondMax?(this.second=this._defaults.secondMax,this._defaults.millisecMax=g.getMilliseconds(),this.millisec>=this._defaults.millisecMax?(this.millisec=this._defaults.millisecMax,this._defaults.microsecMax=g.getMicroseconds()):(this.microsec>this._defaults.microsecMax&&(this.microsec=this._defaults.microsecMax),this._defaults.microsecMax=this.microsecMaxOriginal)):(this._defaults.millisecMax=this.millisecMaxOriginal,this._defaults.microsecMax=this.microsecMaxOriginal)):(this._defaults.secondMax=this.secondMaxOriginal,this._defaults.millisecMax=this.millisecMaxOriginal,this._defaults.microsecMax=this.microsecMaxOriginal)):(this._defaults.minuteMax=this.minuteMaxOriginal,this._defaults.secondMax=this.secondMaxOriginal,this._defaults.millisecMax=this.millisecMaxOriginal,this._defaults.microsecMax=this.microsecMaxOriginal)):(this._defaults.hourMax=this.hourMaxOriginal,this._defaults.minuteMax=this.minuteMaxOriginal,this._defaults.secondMax=this.secondMaxOriginal,this._defaults.millisecMax=this.millisecMaxOriginal,this._defaults.microsecMax=this.microsecMaxOriginal)}if(null!==a.settings.minTime){var i=new Date("01/01/1970 "+a.settings.minTime);this.hour<i.getHours()?(this.hour=this._defaults.hourMin=i.getHours(),this.minute=this._defaults.minuteMin=i.getMinutes()):this.hour===i.getHours()&&this.minute<i.getMinutes()?this.minute=this._defaults.minuteMin=i.getMinutes():this._defaults.hourMin<i.getHours()?(this._defaults.hourMin=i.getHours(),this._defaults.minuteMin=i.getMinutes()):this._defaults.hourMin===i.getHours()===this.hour&&this._defaults.minuteMin<i.getMinutes()?this._defaults.minuteMin=i.getMinutes():this._defaults.minuteMin=0}if(null!==a.settings.maxTime){var j=new Date("01/01/1970 "+a.settings.maxTime);this.hour>j.getHours()?(this.hour=this._defaults.hourMax=j.getHours(),this.minute=this._defaults.minuteMax=j.getMinutes()):this.hour===j.getHours()&&this.minute>j.getMinutes()?this.minute=this._defaults.minuteMax=j.getMinutes():this._defaults.hourMax>j.getHours()?(this._defaults.hourMax=j.getHours(),this._defaults.minuteMax=j.getMinutes()):this._defaults.hourMax===j.getHours()===this.hour&&this._defaults.minuteMax>j.getMinutes()?this._defaults.minuteMax=j.getMinutes():this._defaults.minuteMax=59}if(void 0!==b&&b===!0){var k=parseInt(this._defaults.hourMax-(this._defaults.hourMax-this._defaults.hourMin)%this._defaults.stepHour,10),l=parseInt(this._defaults.minuteMax-(this._defaults.minuteMax-this._defaults.minuteMin)%this._defaults.stepMinute,10),m=parseInt(this._defaults.secondMax-(this._defaults.secondMax-this._defaults.secondMin)%this._defaults.stepSecond,10),n=parseInt(this._defaults.millisecMax-(this._defaults.millisecMax-this._defaults.millisecMin)%this._defaults.stepMillisec,10),o=parseInt(this._defaults.microsecMax-(this._defaults.microsecMax-this._defaults.microsecMin)%this._defaults.stepMicrosec,10);this.hour_slider&&(this.control.options(this,this.hour_slider,"hour",{min:this._defaults.hourMin,max:k,step:this._defaults.stepHour}),this.control.value(this,this.hour_slider,"hour",this.hour-this.hour%this._defaults.stepHour)),this.minute_slider&&(this.control.options(this,this.minute_slider,"minute",{min:this._defaults.minuteMin,max:l,step:this._defaults.stepMinute}),this.control.value(this,this.minute_slider,"minute",this.minute-this.minute%this._defaults.stepMinute)),this.second_slider&&(this.control.options(this,this.second_slider,"second",{min:this._defaults.secondMin,max:m,step:this._defaults.stepSecond}),this.control.value(this,this.second_slider,"second",this.second-this.second%this._defaults.stepSecond)),this.millisec_slider&&(this.control.options(this,this.millisec_slider,"millisec",{min:this._defaults.millisecMin,max:n,step:this._defaults.stepMillisec}),this.control.value(this,this.millisec_slider,"millisec",this.millisec-this.millisec%this._defaults.stepMillisec)),this.microsec_slider&&(this.control.options(this,this.microsec_slider,"microsec",{min:this._defaults.microsecMin,max:o,step:this._defaults.stepMicrosec}),this.control.value(this,this.microsec_slider,"microsec",this.microsec-this.microsec%this._defaults.stepMicrosec))}}},_onTimeChange:function(){if(this._defaults.showTimepicker){var a=this.hour_slider?this.control.value(this,this.hour_slider,"hour"):!1,b=this.minute_slider?this.control.value(this,this.minute_slider,"minute"):!1,c=this.second_slider?this.control.value(this,this.second_slider,"second"):!1,d=this.millisec_slider?this.control.value(this,this.millisec_slider,"millisec"):!1,e=this.microsec_slider?this.control.value(this,this.microsec_slider,"microsec"):!1,f=this.timezone_select?this.timezone_select.val():!1,g=this._defaults,h=g.pickerTimeFormat||g.timeFormat,i=g.pickerTimeSuffix||g.timeSuffix;"object"==typeof a&&(a=!1),"object"==typeof b&&(b=!1),"object"==typeof c&&(c=!1),"object"==typeof d&&(d=!1),"object"==typeof e&&(e=!1),"object"==typeof f&&(f=!1),a!==!1&&(a=parseInt(a,10)),b!==!1&&(b=parseInt(b,10)),c!==!1&&(c=parseInt(c,10)),d!==!1&&(d=parseInt(d,10)),e!==!1&&(e=parseInt(e,10)),f!==!1&&(f=f.toString());var j=g[12>a?"amNames":"pmNames"][0],k=a!==parseInt(this.hour,10)||b!==parseInt(this.minute,10)||c!==parseInt(this.second,10)||d!==parseInt(this.millisec,10)||e!==parseInt(this.microsec,10)||this.ampm.length>0&&12>a!=(-1!==$.inArray(this.ampm.toUpperCase(),this.amNames))||null!==this.timezone&&f!==this.timezone.toString();if(k&&(a!==!1&&(this.hour=a),b!==!1&&(this.minute=b),c!==!1&&(this.second=c),d!==!1&&(this.millisec=d),e!==!1&&(this.microsec=e),f!==!1&&(this.timezone=f),this.inst||(this.inst=$.datepicker._getInst(this.$input[0])),this._limitMinMaxDateTime(this.inst,!0)),this.support.ampm&&(this.ampm=j),this.formattedTime=$.datepicker.formatTime(g.timeFormat,this,g),this.$timeObj&&(this.$timeObj.val(h===g.timeFormat?this.formattedTime+i:$.datepicker.formatTime(h,this,g)+i),this.$timeObj[0].setSelectionRange)){var l=this.$timeObj[0].selectionStart,m=this.$timeObj[0].selectionEnd;this.$timeObj[0].setSelectionRange(l,m)}this.timeDefined=!0,k&&this._updateDateTime()}},_onSelectHandler:function(){var a=this._defaults.onSelect||this.inst.settings.onSelect,b=this.$input?this.$input[0]:null;a&&b&&a.apply(b,[this.formattedDateTime,this])},_updateDateTime:function(a){a=this.inst||a;var b=a.currentYear>0?new Date(a.currentYear,a.currentMonth,a.currentDay):new Date(a.selectedYear,a.selectedMonth,a.selectedDay),c=$.datepicker._daylightSavingAdjust(b),d=$.datepicker._get(a,"dateFormat"),e=$.datepicker._getFormatConfig(a),f=null!==c&&this.timeDefined;this.formattedDate=$.datepicker.formatDate(d,null===c?new Date:c,e);var g=this.formattedDate;if(""===a.lastVal&&(a.currentYear=a.selectedYear,a.currentMonth=a.selectedMonth,a.currentDay=a.selectedDay),this._defaults.timeOnly===!0&&this._defaults.timeOnlyShowDate===!1?g=this.formattedTime:(this._defaults.timeOnly!==!0&&(this._defaults.alwaysSetTime||f)||this._defaults.timeOnly===!0&&this._defaults.timeOnlyShowDate===!0)&&(g+=this._defaults.separator+this.formattedTime+this._defaults.timeSuffix),this.formattedDateTime=g,this._defaults.showTimepicker)if(this.$altInput&&this._defaults.timeOnly===!1&&this._defaults.altFieldTimeOnly===!0)this.$altInput.val(this.formattedTime),this.$input.val(this.formattedDate);else if(this.$altInput){this.$input.val(g);var h="",i=null!==this._defaults.altSeparator?this._defaults.altSeparator:this._defaults.separator,j=null!==this._defaults.altTimeSuffix?this._defaults.altTimeSuffix:this._defaults.timeSuffix;this._defaults.timeOnly||(h=this._defaults.altFormat?$.datepicker.formatDate(this._defaults.altFormat,null===c?new Date:c,e):this.formattedDate,h&&(h+=i)),h+=null!==this._defaults.altTimeFormat?$.datepicker.formatTime(this._defaults.altTimeFormat,this,this._defaults)+j:this.formattedTime+j,this.$altInput.val(h)}else this.$input.val(g);else this.$input.val(this.formattedDate);this.$input.trigger("change")},_onFocus:function(){if(!this.$input.val()&&this._defaults.defaultValue){this.$input.val(this._defaults.defaultValue);var a=$.datepicker._getInst(this.$input.get(0)),b=$.datepicker._get(a,"timepicker");if(b&&b._defaults.timeOnly&&a.input.val()!==a.lastVal)try{$.datepicker._updateDatepicker(a)}catch(c){$.timepicker.log(c)}}},_controls:{slider:{create:function(a,b,c,d,e,f,g){var h=a._defaults.isRTL;return b.prop("slide",null).slider({orientation:"horizontal",value:h?-1*d:d,min:h?-1*f:e,max:h?-1*e:f,step:g,slide:function(b,d){a.control.value(a,$(this),c,h?-1*d.value:d.value),a._onTimeChange()},stop:function(b,c){a._onSelectHandler()}})},options:function(a,b,c,d,e){if(a._defaults.isRTL){if("string"==typeof d)return"min"===d||"max"===d?void 0!==e?b.slider(d,-1*e):Math.abs(b.slider(d)):b.slider(d);var f=d.min,g=d.max;return d.min=d.max=null,void 0!==f&&(d.max=-1*f),void 0!==g&&(d.min=-1*g),b.slider(d)}return"string"==typeof d&&void 0!==e?b.slider(d,e):b.slider(d)},value:function(a,b,c,d){return a._defaults.isRTL?void 0!==d?b.slider("value",-1*d):Math.abs(b.slider("value")):void 0!==d?b.slider("value",d):b.slider("value")}},select:{create:function(a,b,c,d,e,f,g){for(var h='<select class="ui-timepicker-select ui-state-default ui-corner-all" data-unit="'+c+'" data-min="'+e+'" data-max="'+f+'" data-step="'+g+'">',i=a._defaults.pickerTimeFormat||a._defaults.timeFormat,j=e;f>=j;j+=g)h+='<option value="'+j+'"'+(j===d?" selected":"")+">",h+="hour"===c?$.datepicker.formatTime($.trim(i.replace(/[^ht ]/gi,"")),{hour:j},a._defaults):"millisec"===c||"microsec"===c||j>=10?j:"0"+j.toString(),h+="</option>";return h+="</select>",b.children("select").remove(),$(h).appendTo(b).change(function(b){a._onTimeChange(),a._onSelectHandler(),a._afterInject()}),b},options:function(a,b,c,d,e){var f={},g=b.children("select");if("string"==typeof d){if(void 0===e)return g.data(d);f[d]=e}else f=d;return a.control.create(a,b,g.data("unit"),g.val(),f.min>=0?f.min:g.data("min"),f.max||g.data("max"),f.step||g.data("step"))},value:function(a,b,c,d){var e=b.children("select");return void 0!==d?e.val(d):e.val()}}}}),$.fn.extend({timepicker:function(a){a=a||{};var b=Array.prototype.slice.call(arguments);return"object"==typeof a&&(b[0]=$.extend(a,{timeOnly:!0})),$(this).each(function(){$.fn.datetimepicker.apply($(this),b)})},datetimepicker:function(a){a=a||{};var b=arguments;return"string"==typeof a?"getDate"===a||"option"===a&&2===b.length&&"string"==typeof b[1]?$.fn.datepicker.apply($(this[0]),b):this.each(function(){var a=$(this);a.datepicker.apply(a,b)}):this.each(function(){var b=$(this);b.datepicker($.timepicker._newInst(b,a)._defaults)})}}),$.datepicker.parseDateTime=function(a,b,c,d,e){var f=parseDateTimeInternal(a,b,c,d,e);if(f.timeObj){var g=f.timeObj;f.date.setHours(g.hour,g.minute,g.second,g.millisec),f.date.setMicroseconds(g.microsec)}return f.date},$.datepicker.parseTime=function(a,b,c){var d=extendRemove(extendRemove({},$.timepicker._defaults),c||{}),e=(-1!==a.replace(/\'.*?\'/g,"").indexOf("Z"),function(a,b,c){var d,e=function(a,b){var c=[];return a&&$.merge(c,a),b&&$.merge(c,b),c=$.map(c,function(a){return a.replace(/[.*+?|()\[\]{}\\]/g,"\\$&")}),"("+c.join("|")+")?"},f=function(a){var b=a.toLowerCase().match(/(h{1,2}|m{1,2}|s{1,2}|l{1}|c{1}|t{1,2}|z|'.*?')/g),c={h:-1,m:-1,s:-1,l:-1,c:-1,t:-1,z:-1};if(b)for(var d=0;d<b.length;d++)-1===c[b[d].toString().charAt(0)]&&(c[b[d].toString().charAt(0)]=d+1);return c},g="^"+a.toString().replace(/([hH]{1,2}|mm?|ss?|[tT]{1,2}|[zZ]|[lc]|'.*?')/g,function(a){var b=a.length;switch(a.charAt(0).toLowerCase()){case"h":return 1===b?"(\\d?\\d)":"(\\d{"+b+"})";case"m":return 1===b?"(\\d?\\d)":"(\\d{"+b+"})";case"s":return 1===b?"(\\d?\\d)":"(\\d{"+b+"})";case"l":return"(\\d?\\d?\\d)";case"c":return"(\\d?\\d?\\d)";case"z":return"(z|[-+]\\d\\d:?\\d\\d|\\S+)?";case"t":return e(c.amNames,c.pmNames);default:return"("+a.replace(/\'/g,"").replace(/(\.|\$|\^|\\|\/|\(|\)|\[|\]|\?|\+|\*)/g,function(a){return"\\"+a})+")?"}}).replace(/\s/g,"\\s?")+c.timeSuffix+"$",h=f(a),i="";d=b.match(new RegExp(g,"i"));var j={hour:0,minute:0,second:0,millisec:0,microsec:0};return d?(-1!==h.t&&(void 0===d[h.t]||0===d[h.t].length?(i="",j.ampm=""):(i=-1!==$.inArray(d[h.t].toUpperCase(),$.map(c.amNames,function(a,b){return a.toUpperCase()}))?"AM":"PM",j.ampm=c["AM"===i?"amNames":"pmNames"][0])),-1!==h.h&&("AM"===i&&"12"===d[h.h]?j.hour=0:"PM"===i&&"12"!==d[h.h]?j.hour=parseInt(d[h.h],10)+12:j.hour=Number(d[h.h])),-1!==h.m&&(j.minute=Number(d[h.m])),-1!==h.s&&(j.second=Number(d[h.s])),-1!==h.l&&(j.millisec=Number(d[h.l])),-1!==h.c&&(j.microsec=Number(d[h.c])),-1!==h.z&&void 0!==d[h.z]&&(j.timezone=$.timepicker.timezoneOffsetNumber(d[h.z])),j):!1}),f=function(a,b,c){try{var d=new Date("2012-01-01 "+b);if(isNaN(d.getTime())&&(d=new Date("2012-01-01T"+b),isNaN(d.getTime())&&(d=new Date("01/01/2012 "+b),isNaN(d.getTime()))))throw"Unable to parse time with native Date: "+b;return{hour:d.getHours(),minute:d.getMinutes(),second:d.getSeconds(),millisec:d.getMilliseconds(),microsec:d.getMicroseconds(),timezone:-1*d.getTimezoneOffset()}}catch(f){try{return e(a,b,c)}catch(g){$.timepicker.log("Unable to parse \ntimeString: "+b+"\ntimeFormat: "+a)}}return!1};return"function"==typeof d.parse?d.parse(a,b,d):"loose"===d.parse?f(a,b,d):e(a,b,d)},$.datepicker.formatTime=function(a,b,c){c=c||{},c=$.extend({},$.timepicker._defaults,c),b=$.extend({hour:0,minute:0,second:0,millisec:0,microsec:0,timezone:null},b);var d=a,e=c.amNames[0],f=parseInt(b.hour,10);return f>11&&(e=c.pmNames[0]),d=d.replace(/(?:HH?|hh?|mm?|ss?|[tT]{1,2}|[zZ]|[lc]|'.*?')/g,function(a){switch(a){case"HH":return("0"+f).slice(-2);case"H":return f;case"hh":return("0"+convert24to12(f)).slice(-2);case"h":return convert24to12(f);case"mm":return("0"+b.minute).slice(-2);case"m":return b.minute;case"ss":return("0"+b.second).slice(-2);case"s":return b.second;case"l":return("00"+b.millisec).slice(-3);case"c":return("00"+b.microsec).slice(-3);case"z":return $.timepicker.timezoneOffsetString(null===b.timezone?c.timezone:b.timezone,!1);case"Z":return $.timepicker.timezoneOffsetString(null===b.timezone?c.timezone:b.timezone,!0);case"T":return e.charAt(0).toUpperCase();case"TT":return e.toUpperCase();case"t":return e.charAt(0).toLowerCase();case"tt":return e.toLowerCase();default:return a.replace(/'/g,"")}})},$.datepicker._base_selectDate=$.datepicker._selectDate,$.datepicker._selectDate=function(a,b){var c,d=this._getInst($(a)[0]),e=this._get(d,"timepicker");e&&d.settings.showTimepicker?(e._limitMinMaxDateTime(d,!0),c=d.inline,d.inline=d.stay_open=!0,this._base_selectDate(a,b),d.inline=c,d.stay_open=!1,this._notifyChange(d),this._updateDatepicker(d)):this._base_selectDate(a,b)},$.datepicker._base_updateDatepicker=$.datepicker._updateDatepicker,$.datepicker._updateDatepicker=function(a){var b=a.input[0];if(!($.datepicker._curInst&&$.datepicker._curInst!==a&&$.datepicker._datepickerShowing&&$.datepicker._lastInput!==b||"boolean"==typeof a.stay_open&&a.stay_open!==!1)){this._base_updateDatepicker(a);var c=this._get(a,"timepicker");c&&c._addTimePicker(a)}},$.datepicker._base_doKeyPress=$.datepicker._doKeyPress,$.datepicker._doKeyPress=function(a){var b=$.datepicker._getInst(a.target),c=$.datepicker._get(b,"timepicker");if(c&&$.datepicker._get(b,"constrainInput")){var d=c.support.ampm,e=null!==c._defaults.showTimezone?c._defaults.showTimezone:c.support.timezone,f=$.datepicker._possibleChars($.datepicker._get(b,"dateFormat")),g=c._defaults.timeFormat.toString().replace(/[hms]/g,"").replace(/TT/g,d?"APM":"").replace(/Tt/g,d?"AaPpMm":"").replace(/tT/g,d?"AaPpMm":"").replace(/T/g,d?"AP":"").replace(/tt/g,d?"apm":"").replace(/t/g,d?"ap":"")+" "+c._defaults.separator+c._defaults.timeSuffix+(e?c._defaults.timezoneList.join(""):"")+c._defaults.amNames.join("")+c._defaults.pmNames.join("")+f,h=String.fromCharCode(void 0===a.charCode?a.keyCode:a.charCode);return a.ctrlKey||" ">h||!f||g.indexOf(h)>-1}return $.datepicker._base_doKeyPress(a)},$.datepicker._base_updateAlternate=$.datepicker._updateAlternate,$.datepicker._updateAlternate=function(a){var b=this._get(a,"timepicker");if(b){var c=b._defaults.altField;if(c){var d=(b._defaults.altFormat||b._defaults.dateFormat,this._getDate(a)),e=$.datepicker._getFormatConfig(a),f="",g=b._defaults.altSeparator?b._defaults.altSeparator:b._defaults.separator,h=b._defaults.altTimeSuffix?b._defaults.altTimeSuffix:b._defaults.timeSuffix,i=null!==b._defaults.altTimeFormat?b._defaults.altTimeFormat:b._defaults.timeFormat;f+=$.datepicker.formatTime(i,b,b._defaults)+h,b._defaults.timeOnly||b._defaults.altFieldTimeOnly||null===d||(f=b._defaults.altFormat?$.datepicker.formatDate(b._defaults.altFormat,d,e)+g+f:b.formattedDate+g+f),$(c).val(a.input.val()?f:"")}}else $.datepicker._base_updateAlternate(a)},$.datepicker._base_doKeyUp=$.datepicker._doKeyUp,$.datepicker._doKeyUp=function(a){var b=$.datepicker._getInst(a.target),c=$.datepicker._get(b,"timepicker");
if(c&&c._defaults.timeOnly&&b.input.val()!==b.lastVal)try{$.datepicker._updateDatepicker(b)}catch(d){$.timepicker.log(d)}return $.datepicker._base_doKeyUp(a)},$.datepicker._base_gotoToday=$.datepicker._gotoToday,$.datepicker._gotoToday=function(a){var b=this._getInst($(a)[0]);this._base_gotoToday(a);var c=this._get(b,"timepicker");if(c){var d=$.timepicker.timezoneOffsetNumber(c.timezone),e=new Date;e.setMinutes(e.getMinutes()+e.getTimezoneOffset()+parseInt(d,10)),this._setTime(b,e),this._setDate(b,e),c._onSelectHandler()}},$.datepicker._disableTimepickerDatepicker=function(a){var b=this._getInst(a);if(b){var c=this._get(b,"timepicker");$(a).datepicker("getDate"),c&&(b.settings.showTimepicker=!1,c._defaults.showTimepicker=!1,c._updateDateTime(b))}},$.datepicker._enableTimepickerDatepicker=function(a){var b=this._getInst(a);if(b){var c=this._get(b,"timepicker");$(a).datepicker("getDate"),c&&(b.settings.showTimepicker=!0,c._defaults.showTimepicker=!0,c._addTimePicker(b),c._updateDateTime(b))}},$.datepicker._setTime=function(a,b){var c=this._get(a,"timepicker");if(c){var d=c._defaults;c.hour=b?b.getHours():d.hour,c.minute=b?b.getMinutes():d.minute,c.second=b?b.getSeconds():d.second,c.millisec=b?b.getMilliseconds():d.millisec,c.microsec=b?b.getMicroseconds():d.microsec,c._limitMinMaxDateTime(a,!0),c._onTimeChange(),c._updateDateTime(a)}},$.datepicker._setTimeDatepicker=function(a,b,c){var d=this._getInst(a);if(d){var e=this._get(d,"timepicker");if(e){this._setDateFromField(d);var f;b&&("string"==typeof b?(e._parseTime(b,c),f=new Date,f.setHours(e.hour,e.minute,e.second,e.millisec),f.setMicroseconds(e.microsec)):(f=new Date(b.getTime()),f.setMicroseconds(b.getMicroseconds())),"Invalid Date"===f.toString()&&(f=void 0),this._setTime(d,f))}}},$.datepicker._base_setDateDatepicker=$.datepicker._setDateDatepicker,$.datepicker._setDateDatepicker=function(a,b){var c=this._getInst(a),d=b;if(c){"string"==typeof b&&(d=new Date(b),d.getTime()||(this._base_setDateDatepicker.apply(this,arguments),d=$(a).datepicker("getDate")));var e,f=this._get(c,"timepicker");d instanceof Date?(e=new Date(d.getTime()),e.setMicroseconds(d.getMicroseconds())):e=d,f&&e&&(f.support.timezone||null!==f._defaults.timezone||(f.timezone=-1*e.getTimezoneOffset()),d=$.timepicker.timezoneAdjust(d,$.timepicker.timezoneOffsetString(-d.getTimezoneOffset()),f.timezone),e=$.timepicker.timezoneAdjust(e,$.timepicker.timezoneOffsetString(-e.getTimezoneOffset()),f.timezone)),this._updateDatepicker(c),this._base_setDateDatepicker.apply(this,arguments),this._setTimeDatepicker(a,e,!0)}},$.datepicker._base_getDateDatepicker=$.datepicker._getDateDatepicker,$.datepicker._getDateDatepicker=function(a,b){var c=this._getInst(a);if(c){var d=this._get(c,"timepicker");if(d){void 0===c.lastVal&&this._setDateFromField(c,b);var e=this._getDate(c),f=null;return f=d.$altInput&&d._defaults.altFieldTimeOnly?d.$input.val()+" "+d.$altInput.val():"INPUT"!==d.$input.get(0).tagName&&d.$altInput?d.$altInput.val():d.$input.val(),e&&d._parseTime(f,!c.settings.timeOnly)&&(e.setHours(d.hour,d.minute,d.second,d.millisec),e.setMicroseconds(d.microsec),null!=d.timezone&&(d.support.timezone||null!==d._defaults.timezone||(d.timezone=-1*e.getTimezoneOffset()),e=$.timepicker.timezoneAdjust(e,d.timezone,$.timepicker.timezoneOffsetString(-e.getTimezoneOffset())))),e}return this._base_getDateDatepicker(a,b)}},$.datepicker._base_parseDate=$.datepicker.parseDate,$.datepicker.parseDate=function(a,b,c){var d;try{d=this._base_parseDate(a,b,c)}catch(e){if(!(e.indexOf(":")>=0))throw e;d=this._base_parseDate(a,b.substring(0,b.length-(e.length-e.indexOf(":")-2)),c),$.timepicker.log("Error parsing the date string: "+e+"\ndate string = "+b+"\ndate format = "+a)}return d},$.datepicker._base_formatDate=$.datepicker._formatDate,$.datepicker._formatDate=function(a,b,c,d){var e=this._get(a,"timepicker");return e?(e._updateDateTime(a),e.$input.val()):this._base_formatDate(a)},$.datepicker._base_optionDatepicker=$.datepicker._optionDatepicker,$.datepicker._optionDatepicker=function(a,b,c){var d,e=this._getInst(a);if(!e)return null;var f=this._get(e,"timepicker");if(f){var g,h,i,j,k=null,l=null,m=null,n=f._defaults.evnts,o={};if("string"==typeof b){if("minDate"===b||"minDateTime"===b)k=c;else if("maxDate"===b||"maxDateTime"===b)l=c;else if("onSelect"===b)m=c;else if(n.hasOwnProperty(b)){if("undefined"==typeof c)return n[b];o[b]=c,d={}}}else if("object"==typeof b){b.minDate?k=b.minDate:b.minDateTime?k=b.minDateTime:b.maxDate?l=b.maxDate:b.maxDateTime&&(l=b.maxDateTime);for(g in n)n.hasOwnProperty(g)&&b[g]&&(o[g]=b[g])}for(g in o)o.hasOwnProperty(g)&&(n[g]=o[g],d||(d=$.extend({},b)),delete d[g]);if(d&&isEmptyObject(d))return;if(k?(k=0===k?new Date:new Date(k),f._defaults.minDate=k,f._defaults.minDateTime=k):l?(l=0===l?new Date:new Date(l),f._defaults.maxDate=l,f._defaults.maxDateTime=l):m&&(f._defaults.onSelect=m),k||l)return j=$(a),i=j.datetimepicker("getDate"),h=this._base_optionDatepicker.call($.datepicker,a,d||b,c),j.datetimepicker("setDate",i),h}return void 0===c?this._base_optionDatepicker.call($.datepicker,a,b):this._base_optionDatepicker.call($.datepicker,a,d||b,c)};var isEmptyObject=function(a){var b;for(b in a)if(a.hasOwnProperty(b))return!1;return!0},extendRemove=function(a,b){$.extend(a,b);for(var c in b)(null===b[c]||void 0===b[c])&&(a[c]=b[c]);return a},detectSupport=function(a){var b=a.replace(/'.*?'/g,"").toLowerCase(),c=function(a,b){return-1!==a.indexOf(b)?!0:!1};return{hour:c(b,"h"),minute:c(b,"m"),second:c(b,"s"),millisec:c(b,"l"),microsec:c(b,"c"),timezone:c(b,"z"),ampm:c(b,"t")&&c(a,"h"),iso8601:c(a,"Z")}},convert24to12=function(a){return a%=12,0===a&&(a=12),String(a)},computeEffectiveSetting=function(a,b){return a&&a[b]?a[b]:$.timepicker._defaults[b]},splitDateTime=function(a,b){var c=computeEffectiveSetting(b,"separator"),d=computeEffectiveSetting(b,"timeFormat"),e=d.split(c),f=e.length,g=a.split(c),h=g.length;return h>1?{dateString:g.splice(0,h-f).join(c),timeString:g.splice(0,f).join(c)}:{dateString:a,timeString:""}},parseDateTimeInternal=function(a,b,c,d,e){var f,g,h;if(g=splitDateTime(c,e),f=$.datepicker._base_parseDate(a,g.dateString,d),""===g.timeString)return{date:f};if(h=$.datepicker.parseTime(b,g.timeString,e),!h)throw"Wrong time format";return{date:f,timeObj:h}},selectLocalTimezone=function(a,b){if(a&&a.timezone_select){var c=b||new Date;a.timezone_select.val(-c.getTimezoneOffset())}};$.timepicker=new Timepicker,$.timepicker.timezoneOffsetString=function(a,b){if(isNaN(a)||a>840||-720>a)return a;var c=a,d=c%60,e=(c-d)/60,f=b?":":"",g=(c>=0?"+":"-")+("0"+Math.abs(e)).slice(-2)+f+("0"+Math.abs(d)).slice(-2);return"+00:00"===g?"Z":g},$.timepicker.timezoneOffsetNumber=function(a){var b=a.toString().replace(":","");return"Z"===b.toUpperCase()?0:/^(\-|\+)\d{4}$/.test(b)?("-"===b.substr(0,1)?-1:1)*(60*parseInt(b.substr(1,2),10)+parseInt(b.substr(3,2),10)):parseInt(a,10)},$.timepicker.timezoneAdjust=function(a,b,c){var d=$.timepicker.timezoneOffsetNumber(b),e=$.timepicker.timezoneOffsetNumber(c);return isNaN(e)||a.setMinutes(a.getMinutes()+-d- -e),a},$.timepicker.timeRange=function(a,b,c){return $.timepicker.handleRange("timepicker",a,b,c)},$.timepicker.datetimeRange=function(a,b,c){$.timepicker.handleRange("datetimepicker",a,b,c)},$.timepicker.dateRange=function(a,b,c){$.timepicker.handleRange("datepicker",a,b,c)},$.timepicker.handleRange=function(a,b,c,d){function e(e,f){var g=b[a]("getDate"),h=c[a]("getDate"),i=e[a]("getDate");if(null!==g){var j=new Date(g.getTime()),k=new Date(g.getTime());j.setMilliseconds(j.getMilliseconds()+d.minInterval),k.setMilliseconds(k.getMilliseconds()+d.maxInterval),d.minInterval>0&&j>h?c[a]("setDate",j):d.maxInterval>0&&h>k?c[a]("setDate",k):g>h&&f[a]("setDate",i)}}function f(b,c,e){if(b.val()){var f=b[a].call(b,"getDate");null!==f&&d.minInterval>0&&("minDate"===e&&f.setMilliseconds(f.getMilliseconds()+d.minInterval),"maxDate"===e&&f.setMilliseconds(f.getMilliseconds()-d.minInterval)),f.getTime&&c[a].call(c,"option",e,f)}}d=$.extend({},{minInterval:0,maxInterval:0,start:{},end:{}},d);var g=!1;return"timepicker"===a&&(g=!0,a="datetimepicker"),$.fn[a].call(b,$.extend({timeOnly:g,onClose:function(a,b){e($(this),c)},onSelect:function(a){f($(this),c,"minDate")}},d,d.start)),$.fn[a].call(c,$.extend({timeOnly:g,onClose:function(a,c){e($(this),b)},onSelect:function(a){f($(this),b,"maxDate")}},d,d.end)),e(b,c),f(b,c,"minDate"),f(c,b,"maxDate"),$([b.get(0),c.get(0)])},$.timepicker.log=function(){window.console&&window.console.log&&window.console.log.apply&&window.console.log.apply(window.console,Array.prototype.slice.call(arguments))},$.timepicker._util={_extendRemove:extendRemove,_isEmptyObject:isEmptyObject,_convert24to12:convert24to12,_detectSupport:detectSupport,_selectLocalTimezone:selectLocalTimezone,_computeEffectiveSetting:computeEffectiveSetting,_splitDateTime:splitDateTime,_parseDateTimeInternal:parseDateTimeInternal},Date.prototype.getMicroseconds||(Date.prototype.microseconds=0,Date.prototype.getMicroseconds=function(){return this.microseconds},Date.prototype.setMicroseconds=function(a){return this.setMilliseconds(this.getMilliseconds()+Math.floor(a/1e3)),this.microseconds=a%1e3,this}),$.timepicker.version="1.6.3"}});;
Date.CultureInfo={name:"en-US",englishName:"English (United States)",nativeName:"English (United States)",dayNames:"Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),abbreviatedDayNames:"Sun Mon Tue Wed Thu Fri Sat".split(" "),shortestDayNames:"Su Mo Tu We Th Fr Sa".split(" "),firstLetterDayNames:"SMTWTFS".split(""),monthNames:"January February March April May June July August September October November December".split(" "),abbreviatedMonthNames:"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),
amDesignator:"AM",pmDesignator:"PM",firstDayOfWeek:0,twoDigitYearMax:2029,dateElementOrder:"mdy",formatPatterns:{shortDate:"M/d/yyyy",longDate:"dddd, MMMM dd, yyyy",shortTime:"h:mm tt",longTime:"h:mm:ss tt",fullDateTime:"dddd, MMMM dd, yyyy h:mm:ss tt",sortableDateTime:"yyyy-MM-ddTHH:mm:ss",universalSortableDateTime:"yyyy-MM-dd HH:mm:ssZ",rfc1123:"ddd, dd MMM yyyy HH:mm:ss GMT",monthDay:"MMMM dd",yearMonth:"MMMM, yyyy"},regexPatterns:{jan:/^jan(uary)?/i,feb:/^feb(ruary)?/i,mar:/^mar(ch)?/i,apr:/^apr(il)?/i,
may:/^may/i,jun:/^jun(e)?/i,jul:/^jul(y)?/i,aug:/^aug(ust)?/i,sep:/^sep(t(ember)?)?/i,oct:/^oct(ober)?/i,nov:/^nov(ember)?/i,dec:/^dec(ember)?/i,sun:/^su(n(day)?)?/i,mon:/^mo(n(day)?)?/i,tue:/^tu(e(s(day)?)?)?/i,wed:/^we(d(nesday)?)?/i,thu:/^th(u(r(s(day)?)?)?)?/i,fri:/^fr(i(day)?)?/i,sat:/^sa(t(urday)?)?/i,future:/^next/i,past:/^last|past|prev(ious)?/i,add:/^(\+|aft(er)?|from|hence)/i,subtract:/^(\-|bef(ore)?|ago)/i,yesterday:/^yes(terday)?/i,today:/^t(od(ay)?)?/i,tomorrow:/^tom(orrow)?/i,now:/^n(ow)?/i,
millisecond:/^ms|milli(second)?s?/i,second:/^sec(ond)?s?/i,minute:/^mn|min(ute)?s?/i,hour:/^h(our)?s?/i,week:/^w(eek)?s?/i,month:/^m(onth)?s?/i,day:/^d(ay)?s?/i,year:/^y(ear)?s?/i,shortMeridian:/^(a|p)/i,longMeridian:/^(a\.?m?\.?|p\.?m?\.?)/i,timezone:/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\s*(\+|\-)\s*\d\d\d\d?)|gmt|utc)/i,ordinalSuffix:/^\s*(st|nd|rd|th)/i,timeContext:/^\s*(\:|a(?!u|p)|p)/i},timezones:[{name:"UTC",offset:"-000"},{name:"GMT",offset:"-000"},{name:"EST",offset:"-0500"},{name:"EDT",
offset:"-0400"},{name:"CST",offset:"-0600"},{name:"CDT",offset:"-0500"},{name:"MST",offset:"-0700"},{name:"MDT",offset:"-0600"},{name:"PST",offset:"-0800"},{name:"PDT",offset:"-0700"}]};
(function(){var e=Date,d=e.prototype,l=e.CultureInfo,c=function(a,k){k||(k=2);return("000"+a).slice(-1*k)};d.clearTime=function(){this.setHours(0);this.setMinutes(0);this.setSeconds(0);this.setMilliseconds(0);return this};d.setTimeToNow=function(){var a=new Date;this.setHours(a.getHours());this.setMinutes(a.getMinutes());this.setSeconds(a.getSeconds());this.setMilliseconds(a.getMilliseconds());return this};e.today=function(){return(new Date).clearTime()};e.compare=function(a,k){if(isNaN(a)||isNaN(k))throw Error(a+
" - "+k);if(a instanceof Date&&k instanceof Date)return a<k?-1:a>k?1:0;throw new TypeError(a+" - "+k);};e.equals=function(a,k){return 0===a.compareTo(k)};e.getDayNumberFromName=function(a){var k=l.dayNames,b=l.abbreviatedDayNames,g=l.shortestDayNames;a=a.toLowerCase();for(var c=0;c<k.length;c++)if(k[c].toLowerCase()==a||b[c].toLowerCase()==a||g[c].toLowerCase()==a)return c;return-1};e.getMonthNumberFromName=function(a){var k=l.monthNames,c=l.abbreviatedMonthNames;a=a.toLowerCase();for(var g=0;g<k.length;g++)if(k[g].toLowerCase()==
a||c[g].toLowerCase()==a)return g;return-1};e.isLeapYear=function(a){return 0===a%4&&0!==a%100||0===a%400};e.getDaysInMonth=function(a,k){return[31,e.isLeapYear(a)?29:28,31,30,31,30,31,31,30,31,30,31][k]};e.getTimezoneAbbreviation=function(a){for(var k=l.timezones,c=0;c<k.length;c++)if(k[c].offset===a)return k[c].name;return null};e.getTimezoneOffset=function(a){for(var c=l.timezones,b=0;b<c.length;b++)if(c[b].name===a.toUpperCase())return c[b].offset;return null};d.clone=function(){return new Date(this.getTime())};
d.compareTo=function(a){return Date.compare(this,a)};d.equals=function(a){return Date.equals(this,a||new Date)};d.between=function(a,c){return this.getTime()>=a.getTime()&&this.getTime()<=c.getTime()};d.isAfter=function(a){return 1===this.compareTo(a||new Date)};d.isBefore=function(a){return-1===this.compareTo(a||new Date)};d.isToday=function(){return this.isSameDay(new Date)};d.isSameDay=function(a){return this.clone().clearTime().equals(a.clone().clearTime())};d.addMilliseconds=function(a){this.setMilliseconds(this.getMilliseconds()+
a);return this};d.addSeconds=function(a){return this.addMilliseconds(1E3*a)};d.addMinutes=function(a){return this.addMilliseconds(6E4*a)};d.addHours=function(a){return this.addMilliseconds(36E5*a)};d.addDays=function(a){this.setDate(this.getDate()+a);return this};d.addWeeks=function(a){return this.addDays(7*a)};d.addMonths=function(a){var c=this.getDate();this.setDate(1);this.setMonth(this.getMonth()+a);this.setDate(Math.min(c,e.getDaysInMonth(this.getFullYear(),this.getMonth())));return this};d.addYears=
function(a){return this.addMonths(12*a)};d.add=function(a){if("number"==typeof a)return this._orient=a,this;a.milliseconds&&this.addMilliseconds(a.milliseconds);a.seconds&&this.addSeconds(a.seconds);a.minutes&&this.addMinutes(a.minutes);a.hours&&this.addHours(a.hours);a.weeks&&this.addWeeks(a.weeks);a.months&&this.addMonths(a.months);a.years&&this.addYears(a.years);a.days&&this.addDays(a.days);return this};var b,f,m;d.getWeek=function(){var a,c,e,g,d;b=b?b:this.getFullYear();f=f?f:this.getMonth()+
1;m=m?m:this.getDate();2>=f?(a=b-1,c=(a/4|0)-(a/100|0)+(a/400|0),d=c-(((a-1)/4|0)-((a-1)/100|0)+((a-1)/400|0)),e=0,g=m-1+31*(f-1)):(a=b,c=(a/4|0)-(a/100|0)+(a/400|0),d=c-(((a-1)/4|0)-((a-1)/100|0)+((a-1)/400|0)),e=d+1,g=m+(153*(f-3)+2)/5+58+d);a=(a+c)%7;e=g+3-(g+a-e)%7|0;b=f=m=null;return 0>e?53-((a-d)/5|0):e>364+d?1:(e/7|0)+1};d.getISOWeek=function(){b=this.getUTCFullYear();f=this.getUTCMonth()+1;m=this.getUTCDate();return c(this.getWeek())};d.setWeek=function(a){return this.moveToDayOfWeek(1).addWeeks(a-
this.getWeek())};e._validate=function(a,c,b,g){if("undefined"==typeof a)return!1;if("number"!=typeof a)throw new TypeError(a+" is not a Number.");if(a<c||a>b)throw new RangeError(a+" is not a valid value for "+g+".");return!0};e.validateMillisecond=function(a){return e._validate(a,0,999,"millisecond")};e.validateSecond=function(a){return e._validate(a,0,59,"second")};e.validateMinute=function(a){return e._validate(a,0,59,"minute")};e.validateHour=function(a){return e._validate(a,0,23,"hour")};e.validateDay=
function(a,c,b){return e._validate(a,1,e.getDaysInMonth(c,b),"day")};e.validateMonth=function(a){return e._validate(a,0,11,"month")};e.validateYear=function(a){return e._validate(a,0,9999,"year")};d.set=function(a){e.validateMillisecond(a.millisecond)&&this.addMilliseconds(a.millisecond-this.getMilliseconds());e.validateSecond(a.second)&&this.addSeconds(a.second-this.getSeconds());e.validateMinute(a.minute)&&this.addMinutes(a.minute-this.getMinutes());e.validateHour(a.hour)&&this.addHours(a.hour-
this.getHours());e.validateMonth(a.month)&&this.addMonths(a.month-this.getMonth());e.validateYear(a.year)&&this.addYears(a.year-this.getFullYear());e.validateDay(a.day,this.getFullYear(),this.getMonth())&&this.addDays(a.day-this.getDate());a.timezone&&this.setTimezone(a.timezone);a.timezoneOffset&&this.setTimezoneOffset(a.timezoneOffset);a.week&&e._validate(a.week,0,53,"week")&&this.setWeek(a.week);return this};d.moveToFirstDayOfMonth=function(){return this.set({day:1})};d.moveToLastDayOfMonth=function(){return this.set({day:e.getDaysInMonth(this.getFullYear(),
this.getMonth())})};d.moveToNthOccurrence=function(a,c){var b=0;if(0<c)b=c-1;else if(-1===c)return this.moveToLastDayOfMonth(),this.getDay()!==a&&this.moveToDayOfWeek(a,-1),this;return this.moveToFirstDayOfMonth().addDays(-1).moveToDayOfWeek(a,1).addWeeks(b)};d.moveToDayOfWeek=function(a,c){var b=(a-this.getDay()+7*(c||1))%7;return this.addDays(0===b?b+7*(c||1):b)};d.moveToMonth=function(a,c){var b=(a-this.getMonth()+12*(c||1))%12;return this.addMonths(0===b?b+12*(c||1):b)};d.getOrdinalNumber=function(){return Math.ceil((this.clone().clearTime()-
new Date(this.getFullYear(),0,1))/864E5)+1};d.getTimezone=function(){return e.getTimezoneAbbreviation(this.getUTCOffset())};d.setTimezoneOffset=function(a){var c=this.getTimezoneOffset();return this.addMinutes(-6*Number(a)/10-c)};d.setTimezone=function(a){return this.setTimezoneOffset(e.getTimezoneOffset(a))};d.hasDaylightSavingTime=function(){return Date.today().set({month:0,day:1}).getTimezoneOffset()!==Date.today().set({month:6,day:1}).getTimezoneOffset()};d.isDaylightSavingTime=function(){return this.hasDaylightSavingTime()&&
(new Date).getTimezoneOffset()===Date.today().set({month:6,day:1}).getTimezoneOffset()};d.getUTCOffset=function(){var a=-10*this.getTimezoneOffset()/6;if(0>a)return a=(a-1E4).toString(),a.charAt(0)+a.substr(2);a=(a+1E4).toString();return"+"+a.substr(1)};d.getElapsed=function(a){return(a||new Date)-this};d.toISOString||(d.toISOString=function(){function a(a){return 10>a?"0"+a:a}return'"'+this.getUTCFullYear()+"-"+a(this.getUTCMonth()+1)+"-"+a(this.getUTCDate())+"T"+a(this.getUTCHours())+":"+a(this.getUTCMinutes())+
":"+a(this.getUTCSeconds())+'Z"'});d._toString=d.toString;d.toString=function(a){var b=this;if(a&&1==a.length){var f=l.formatPatterns;b.t=b.toString;switch(a){case "d":return b.t(f.shortDate);case "D":return b.t(f.longDate);case "F":return b.t(f.fullDateTime);case "m":return b.t(f.monthDay);case "r":return b.t(f.rfc1123);case "s":return b.t(f.sortableDateTime);case "t":return b.t(f.shortTime);case "T":return b.t(f.longTime);case "u":return b.t(f.universalSortableDateTime);case "y":return b.t(f.yearMonth)}}var g=
function(a){switch(1*a){case 1:case 21:case 31:return"st";case 2:case 22:return"nd";case 3:case 23:return"rd";default:return"th"}};return a?a.replace(/(\\)?(dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|S)/g,function(a){if("\\"===a.charAt(0))return a.replace("\\","");b.h=b.getHours;switch(a){case "hh":return c(13>b.h()?0===b.h()?12:b.h():b.h()-12);case "h":return 13>b.h()?0===b.h()?12:b.h():b.h()-12;case "HH":return c(b.h());case "H":return b.h();case "mm":return c(b.getMinutes());case "m":return b.getMinutes();
case "ss":return c(b.getSeconds());case "s":return b.getSeconds();case "yyyy":return c(b.getFullYear(),4);case "yy":return c(b.getFullYear());case "dddd":return l.dayNames[b.getDay()];case "ddd":return l.abbreviatedDayNames[b.getDay()];case "dd":return c(b.getDate());case "d":return b.getDate();case "MMMM":return l.monthNames[b.getMonth()];case "MMM":return l.abbreviatedMonthNames[b.getMonth()];case "MM":return c(b.getMonth()+1);case "M":return b.getMonth()+1;case "t":return 12>b.h()?l.amDesignator.substring(0,
1):l.pmDesignator.substring(0,1);case "tt":return 12>b.h()?l.amDesignator:l.pmDesignator;case "S":return g(b.getDate());default:return a}}):this._toString()}})();
(function(){var e=Date,d=e.prototype,l=e.CultureInfo,c=Number.prototype;d._orient=1;d._nth=null;d._is=!1;d._same=!1;d._isSecond=!1;c._dateElement="day";d.next=function(){this._orient=1;return this};e.next=function(){return e.today().next()};d.last=d.prev=d.previous=function(){this._orient=-1;return this};e.last=e.prev=e.previous=function(){return e.today().last()};d.is=function(){this._is=!0;return this};d.same=function(){this._same=!0;this._isSecond=!1;return this};d.today=function(){return this.same().day()};
d.weekday=function(){return this._is?(this._is=!1,!this.is().sat()&&!this.is().sun()):!1};d.at=function(a){return"string"===typeof a?e.parse(this.toString("d")+" "+a):this.set(a)};c.fromNow=c.after=function(a){var b={};b[this._dateElement]=this;return(a?a.clone():new Date).add(b)};c.ago=c.before=function(a){var b={};b[this._dateElement]=-1*this;return(a?a.clone():new Date).add(b)};var b="sunday monday tuesday wednesday thursday friday saturday".split(/\s/),f="january february march april may june july august september october november december".split(/\s/),
m="Millisecond Second Minute Hour Day Week Month Year".split(/\s/),a="Milliseconds Seconds Minutes Hours Date Week Month FullYear".split(/\s/),k="final first second third fourth fifth".split(/\s/);d.toObject=function(){for(var b={},c=0;c<m.length;c++)b[m[c].toLowerCase()]=this["get"+a[c]]();return b};e.fromObject=function(a){a.week=null;return Date.today().set(a)};for(var h=function(a){return function(){if(this._is)return this._is=!1,this.getDay()==a;if(null!==this._nth){this._isSecond&&this.addSeconds(-1*
this._orient);this._isSecond=!1;var b=this._nth;this._nth=null;var c=this.clone().moveToLastDayOfMonth();this.moveToNthOccurrence(a,b);if(this>c)throw new RangeError(e.getDayName(a)+" does not occur "+b+" times in the month of "+e.getMonthName(c.getMonth())+" "+c.getFullYear()+".");return this}return this.moveToDayOfWeek(a,this._orient)}},g=function(a){return function(){var b=e.today(),c=a-b.getDay();0===a&&1===l.firstDayOfWeek&&0!==b.getDay()&&(c+=7);return b.addDays(c)}},n=0;n<b.length;n++)e[b[n].toUpperCase()]=
e[b[n].toUpperCase().substring(0,3)]=n,e[b[n]]=e[b[n].substring(0,3)]=g(n),d[b[n]]=d[b[n].substring(0,3)]=h(n);b=function(a){return function(){return this._is?(this._is=!1,this.getMonth()===a):this.moveToMonth(a,this._orient)}};h=function(a){return function(){return e.today().set({month:a,day:1})}};for(g=0;g<f.length;g++)e[f[g].toUpperCase()]=e[f[g].toUpperCase().substring(0,3)]=g,e[f[g]]=e[f[g].substring(0,3)]=h(g),d[f[g]]=d[f[g].substring(0,3)]=b(g);b=function(a){return function(b){if(this._isSecond)return this._isSecond=
!1,this;if(this._same){this._same=this._is=!1;var c=this.toObject();b=(b||new Date).toObject();for(var g="",f=a.toLowerCase(),e=m.length-1;-1<e;e--){g=m[e].toLowerCase();if(c[g]!=b[g])return!1;if(f==g)break}return!0}"s"!=a.substring(a.length-1)&&(a+="s");return this["add"+a](this._orient)}};h=function(a){return function(){this._dateElement=a;return this}};for(g=0;g<m.length;g++)f=m[g].toLowerCase(),d[f]=d[f+"s"]=b(m[g]),c[f]=c[f+"s"]=h(f);d._ss=b("Second");c=function(a){return function(b){if(this._same)return this._ss(b);
if(b||0===b)return this.moveToNthOccurrence(b,a);this._nth=a;return 2!==a||void 0!==b&&null!==b?this:(this._isSecond=!0,this.addSeconds(this._orient))}};for(f=0;f<k.length;f++)d[k[f]]=0===f?c(-1):c(f)})();
(function(){Date.Parsing={Exception:function(b){this.message="Parse error at '"+b.substring(0,10)+" ...'"}};for(var e=Date.Parsing,d=e.Operators={rtoken:function(b){return function(c){var a=c.match(b);if(a)return[a[0],c.substring(a[0].length)];throw new e.Exception(c);}},token:function(b){return function(b){return d.rtoken(new RegExp("^s*"+b+"s*"))(b)}},stoken:function(b){return d.rtoken(new RegExp("^"+b))},until:function(b){return function(c){for(var a=[],e=null;c.length;){try{e=b.call(this,c)}catch(d){a.push(e[0]);
c=e[1];continue}break}return[a,c]}},many:function(b){return function(c){for(var a=[],e=null;c.length;){try{e=b.call(this,c)}catch(d){break}a.push(e[0]);c=e[1]}return[a,c]}},optional:function(b){return function(c){var a=null;try{a=b.call(this,c)}catch(e){return[null,c]}return[a[0],a[1]]}},not:function(b){return function(c){try{b.call(this,c)}catch(a){return[null,c]}throw new e.Exception(c);}},ignore:function(b){return b?function(c){var a=null,a=b.call(this,c);return[null,a[1]]}:null},product:function(){for(var b=
arguments[0],c=Array.prototype.slice.call(arguments,1),a=[],e=0;e<b.length;e++)a.push(d.each(b[e],c));return a},cache:function(b){var c={},a=null;return function(d){try{a=c[d]=c[d]||b.call(this,d)}catch(h){a=c[d]=h}if(a instanceof e.Exception)throw a;return a}},any:function(){var b=arguments;return function(c){for(var a=null,d=0;d<b.length;d++)if(null!=b[d]){try{a=b[d].call(this,c)}catch(h){a=null}if(a)return a}throw new e.Exception(c);}},each:function(){var b=arguments;return function(c){for(var a=
[],d=null,h=0;h<b.length;h++)if(null!=b[h]){try{d=b[h].call(this,c)}catch(g){throw new e.Exception(c);}a.push(d[0]);c=d[1]}return[a,c]}},all:function(){var b=b;return b.each(b.optional(arguments))},sequence:function(b,c,a){c=c||d.rtoken(/^\s*/);a=a||null;return 1==b.length?b[0]:function(d){for(var h=null,g=null,n=[],p=0;p<b.length;p++){try{h=b[p].call(this,d)}catch(q){break}n.push(h[0]);try{g=c.call(this,h[1])}catch(l){g=null;break}d=g[1]}if(!h)throw new e.Exception(d);if(g)throw new e.Exception(g[1]);
if(a)try{h=a.call(this,h[1])}catch(t){throw new e.Exception(h[1]);}return[n,h?h[1]:d]}},between:function(b,c,a){a=a||b;var e=d.each(d.ignore(b),c,d.ignore(a));return function(a){a=e.call(this,a);return[[a[0][0],r[0][2]],a[1]]}},list:function(b,c,a){c=c||d.rtoken(/^\s*/);a=a||null;return b instanceof Array?d.each(d.product(b.slice(0,-1),d.ignore(c)),b.slice(-1),d.ignore(a)):d.each(d.many(d.each(b,d.ignore(c))),px,d.ignore(a))},set:function(b,c,a){c=c||d.rtoken(/^\s*/);a=a||null;return function(k){for(var h=
null,g=h=null,n=null,p=[[],k],q=!1,l=0;l<b.length;l++){h=g=null;q=1==b.length;try{h=b[l].call(this,k)}catch(t){continue}n=[[h[0]],h[1]];if(0<h[1].length&&!q)try{g=c.call(this,h[1])}catch(u){q=!0}else q=!0;q||0!==g[1].length||(q=!0);if(!q){h=[];for(q=0;q<b.length;q++)l!=q&&h.push(b[q]);h=d.set(h,c).call(this,g[1]);0<h[0].length&&(n[0]=n[0].concat(h[0]),n[1]=h[1])}n[1].length<p[1].length&&(p=n);if(0===p[1].length)break}if(0===p[0].length)return p;if(a){try{g=a.call(this,p[1])}catch(v){throw new e.Exception(p[1]);
}p[1]=g[1]}return p}},forward:function(b,c){return function(a){return b[c].call(this,a)}},replace:function(b,c){return function(a){a=b.call(this,a);return[c,a[1]]}},process:function(b,c){return function(a){a=b.call(this,a);return[c.call(this,a[0]),a[1]]}},min:function(b,c){return function(a){var d=c.call(this,a);if(d[0].length<b)throw new e.Exception(a);return d}}},l=function(b){return function(){var c=null,a=[];1<arguments.length?c=Array.prototype.slice.call(arguments):arguments[0]instanceof Array&&
(c=arguments[0]);if(c)for(var d=c.shift();0<d.length;)return c.unshift(d[0]),a.push(b.apply(null,c)),c.shift(),a;else return b.apply(null,arguments)}},c="optional not ignore cache".split(/\s/),b=0;b<c.length;b++)d[c[b]]=l(d[c[b]]);l=function(b){return function(){return arguments[0]instanceof Array?b.apply(null,arguments[0]):b.apply(null,arguments)}};c="each any all".split(/\s/);for(b=0;b<c.length;b++)d[c[b]]=l(d[c[b]])})();
(function(){var e=Date,d=e.CultureInfo,l=function(a){for(var b=[],c=0;c<a.length;c++)a[c]instanceof Array?b=b.concat(l(a[c])):a[c]&&b.push(a[c]);return b};e.Grammar={};e.Translator={hour:function(a){return function(){this.hour=Number(a)}},minute:function(a){return function(){this.minute=Number(a)}},second:function(a){return function(){this.second=Number(a)}},meridian:function(a){return function(){this.meridian=a.slice(0,1).toLowerCase()}},timezone:function(a){return function(){var b=a.replace(/[^\d\+\-]/g,
"");b.length?this.timezoneOffset=Number(b):this.timezone=a.toLowerCase()}},day:function(a){var b=a[0];return function(){this.day=Number(b.match(/\d+/)[0])}},month:function(a){return function(){this.month=3==a.length?"jan feb mar apr may jun jul aug sep oct nov dec".indexOf(a)/4:Number(a)-1}},year:function(a){return function(){var b=Number(a);this.year=2<a.length?b:b+(b+2E3<d.twoDigitYearMax?2E3:1900)}},rday:function(a){return function(){switch(a){case "yesterday":this.days=-1;break;case "tomorrow":this.days=
1;break;case "today":this.days=0;break;case "now":this.days=0,this.now=!0}}},finishExact:function(a){a=a instanceof Array?a:[a];for(var b=0;b<a.length;b++)a[b]&&a[b].call(this);a=new Date;!this.hour&&!this.minute||this.month||this.year||this.day||(this.day=a.getDate());this.year||(this.year=a.getFullYear());this.month||0===this.month||(this.month=a.getMonth());this.day||(this.day=1);this.hour||(this.hour=0);this.minute||(this.minute=0);this.second||(this.second=0);this.meridian&&this.hour&&("p"==
this.meridian&&12>this.hour?this.hour+=12:"a"==this.meridian&&12==this.hour&&(this.hour=0));if(this.day>e.getDaysInMonth(this.year,this.month))throw new RangeError(this.day+" is not a valid value for days.");a=new Date(this.year,this.month,this.day,this.hour,this.minute,this.second);this.timezone?a.set({timezone:this.timezone}):this.timezoneOffset&&a.set({timezoneOffset:this.timezoneOffset});return a},finish:function(a){a=a instanceof Array?l(a):[a];if(0===a.length)return null;for(var b=0;b<a.length;b++)"function"==
typeof a[b]&&a[b].call(this);a=e.today();if(!this.now||this.unit||this.operator)this.now&&(a=new Date);else return new Date;var b=!!(this.days&&null!==this.days||this.orient||this.operator),c,d,f;f="past"==this.orient||"subtract"==this.operator?-1:1;this.now||-1=="hour minute second".indexOf(this.unit)||a.setTimeToNow();!this.month&&0!==this.month||-1=="year day hour minute second".indexOf(this.unit)||(this.value=this.month+1,this.month=null,b=!0);b||!this.weekday||this.day||this.days||(c=Date[this.weekday](),
this.day=c.getDate(),this.month||(this.month=c.getMonth()),this.year=c.getFullYear());b&&this.weekday&&"month"!=this.unit&&(this.unit="day",c=e.getDayNumberFromName(this.weekday)-a.getDay(),d=7,this.days=c?(c+f*d)%d:f*d);this.month&&"day"==this.unit&&this.operator&&(this.value=this.month+1,this.month=null);null!=this.value&&null!=this.month&&null!=this.year&&(this.day=1*this.value);this.month&&!this.day&&this.value&&(a.set({day:1*this.value}),b||(this.day=1*this.value));this.month||!this.value||"month"!=
this.unit||this.now||(this.month=this.value,b=!0);b&&(this.month||0===this.month)&&"year"!=this.unit&&(this.unit="month",c=this.month-a.getMonth(),d=12,this.months=c?(c+f*d)%d:f*d,this.month=null);this.unit||(this.unit="day");if(!this.value&&this.operator&&null!==this.operator&&this[this.unit+"s"]&&null!==this[this.unit+"s"])this[this.unit+"s"]=this[this.unit+"s"]+("add"==this.operator?1:-1)+(this.value||0)*f;else if(null==this[this.unit+"s"]||null!=this.operator)this.value||(this.value=1),this[this.unit+
"s"]=this.value*f;this.meridian&&this.hour&&("p"==this.meridian&&12>this.hour?this.hour+=12:"a"==this.meridian&&12==this.hour&&(this.hour=0));!this.weekday||this.day||this.days||(c=Date[this.weekday](),this.day=c.getDate(),c.getMonth()!==a.getMonth()&&(this.month=c.getMonth()));!this.month&&0!==this.month||this.day||(this.day=1);if(!this.orient&&!this.operator&&"week"==this.unit&&this.value&&!this.day&&!this.month)return Date.today().setWeek(this.value);b&&this.timezone&&this.day&&this.days&&(this.day=
this.days);return b?a.add(this):a.set(this)}};var c=e.Parsing.Operators,b=e.Grammar,f=e.Translator,m;b.datePartDelimiter=c.rtoken(/^([\s\-\.\,\/\x27]+)/);b.timePartDelimiter=c.stoken(":");b.whiteSpace=c.rtoken(/^\s*/);b.generalDelimiter=c.rtoken(/^(([\s\,]|at|@|on)+)/);var a={};b.ctoken=function(b){var e=a[b];if(!e){for(var e=d.regexPatterns,f=b.split(/\s+/),h=[],k=0;k<f.length;k++)h.push(c.replace(c.rtoken(e[f[k]]),f[k]));e=a[b]=c.any.apply(null,h)}return e};b.ctoken2=function(a){return c.rtoken(d.regexPatterns[a])};
b.h=c.cache(c.process(c.rtoken(/^(0[0-9]|1[0-2]|[1-9])/),f.hour));b.hh=c.cache(c.process(c.rtoken(/^(0[0-9]|1[0-2])/),f.hour));b.H=c.cache(c.process(c.rtoken(/^([0-1][0-9]|2[0-3]|[0-9])/),f.hour));b.HH=c.cache(c.process(c.rtoken(/^([0-1][0-9]|2[0-3])/),f.hour));b.m=c.cache(c.process(c.rtoken(/^([0-5][0-9]|[0-9])/),f.minute));b.mm=c.cache(c.process(c.rtoken(/^[0-5][0-9]/),f.minute));b.s=c.cache(c.process(c.rtoken(/^([0-5][0-9]|[0-9])/),f.second));b.ss=c.cache(c.process(c.rtoken(/^[0-5][0-9]/),f.second));
b.hms=c.cache(c.sequence([b.H,b.m,b.s],b.timePartDelimiter));b.t=c.cache(c.process(b.ctoken2("shortMeridian"),f.meridian));b.tt=c.cache(c.process(b.ctoken2("longMeridian"),f.meridian));b.z=c.cache(c.process(c.rtoken(/^((\+|\-)\s*\d\d\d\d)|((\+|\-)\d\d\:?\d\d)/),f.timezone));b.zz=c.cache(c.process(c.rtoken(/^((\+|\-)\s*\d\d\d\d)|((\+|\-)\d\d\:?\d\d)/),f.timezone));b.zzz=c.cache(c.process(b.ctoken2("timezone"),f.timezone));b.timeSuffix=c.each(c.ignore(b.whiteSpace),c.set([b.tt,b.zzz]));b.time=c.each(c.optional(c.ignore(c.stoken("T"))),
b.hms,b.timeSuffix);b.d=c.cache(c.process(c.each(c.rtoken(/^([0-2]\d|3[0-1]|\d)/),c.optional(b.ctoken2("ordinalSuffix"))),f.day));b.dd=c.cache(c.process(c.each(c.rtoken(/^([0-2]\d|3[0-1])/),c.optional(b.ctoken2("ordinalSuffix"))),f.day));b.ddd=b.dddd=c.cache(c.process(b.ctoken("sun mon tue wed thu fri sat"),function(a){return function(){this.weekday=a}}));b.M=c.cache(c.process(c.rtoken(/^(1[0-2]|0\d|\d)/),f.month));b.MM=c.cache(c.process(c.rtoken(/^(1[0-2]|0\d)/),f.month));b.MMM=b.MMMM=c.cache(c.process(b.ctoken("jan feb mar apr may jun jul aug sep oct nov dec"),
f.month));b.y=c.cache(c.process(c.rtoken(/^(\d\d?)/),f.year));b.yy=c.cache(c.process(c.rtoken(/^(\d\d)/),f.year));b.yyy=c.cache(c.process(c.rtoken(/^(\d\d?\d?\d?)/),f.year));b.yyyy=c.cache(c.process(c.rtoken(/^(\d\d\d\d)/),f.year));m=function(){return c.each(c.any.apply(null,arguments),c.not(b.ctoken2("timeContext")))};b.day=m(b.d,b.dd);b.month=m(b.M,b.MMM);b.year=m(b.yyyy,b.yy);b.orientation=c.process(b.ctoken("past future"),function(a){return function(){this.orient=a}});b.operator=c.process(b.ctoken("add subtract"),
function(a){return function(){this.operator=a}});b.rday=c.process(b.ctoken("yesterday tomorrow today now"),f.rday);b.unit=c.process(b.ctoken("second minute hour day week month year"),function(a){return function(){this.unit=a}});b.value=c.process(c.rtoken(/^\d\d?(st|nd|rd|th)?/),function(a){return function(){this.value=a.replace(/\D/g,"")}});b.expression=c.set([b.rday,b.operator,b.value,b.unit,b.orientation,b.ddd,b.MMM]);m=function(){return c.set(arguments,b.datePartDelimiter)};b.mdy=m(b.ddd,b.month,
b.day,b.year);b.ymd=m(b.ddd,b.year,b.month,b.day);b.dmy=m(b.ddd,b.day,b.month,b.year);b.date=function(a){return(b[d.dateElementOrder]||b.mdy).call(this,a)};b.format=c.process(c.many(c.any(c.process(c.rtoken(/^(dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?)/),function(a){if(b[a])return b[a];throw e.Parsing.Exception(a);}),c.process(c.rtoken(/^[^dMyhHmstz]+/),function(a){return c.ignore(c.stoken(a))}))),function(a){return c.process(c.each.apply(null,a),f.finishExact)});var k={},h=function(a){return k[a]=
k[a]||b.format(a)[0]};b.formats=function(a){if(a instanceof Array){for(var b=[],d=0;d<a.length;d++)b.push(h(a[d]));return c.any.apply(null,b)}return h(a)};b._formats=b.formats('"yyyy-MM-ddTHH:mm:ssZ";yyyy-MM-ddTHH:mm:ssZ;yyyy-MM-ddTHH:mm:ssz;yyyy-MM-ddTHH:mm:ss;yyyy-MM-ddTHH:mmZ;yyyy-MM-ddTHH:mmz;yyyy-MM-ddTHH:mm;ddd, MMM dd, yyyy H:mm:ss tt;ddd MMM d yyyy HH:mm:ss zzz;MMddyyyy;ddMMyyyy;Mddyyyy;ddMyyyy;Mdyyyy;dMyyyy;yyyy;Mdyy;dMyy;d'.split(";"));b._start=c.process(c.set([b.date,b.time,b.expression],
b.generalDelimiter,b.whiteSpace),f.finish);b.start=function(a){try{var c=b._formats.call({},a);if(0===c[1].length)return c}catch(d){}return b._start.call({},a)};e._parse=e.parse;e.parse=function(a){var b=null;if(!a)return null;if(a instanceof Date)return a;try{b=e.Grammar.start.call({},a.replace(/^\s*(\S*(\s+\S+)*)\s*$/,"$1"))}catch(c){return null}return 0===b[1].length?b[0]:null};e.getParseFunction=function(a){var b=e.Grammar.formats(a);return function(a){var c=null;try{c=b.call({},a)}catch(d){return null}return 0===
c[1].length?c[0]:null}};e.parseExact=function(a,b){return e.getParseFunction(b)(a)}})();;
!function(a,b){"object"==typeof exports&&"undefined"!=typeof module?module.exports=b():"function"==typeof define&&define.amd?define(b):a.moment=b()}(this,function(){"use strict";function a(){return sd.apply(null,arguments)}function b(a){sd=a}function c(a){return a instanceof Array||"[object Array]"===Object.prototype.toString.call(a)}function d(a){return null!=a&&"[object Object]"===Object.prototype.toString.call(a)}function e(a){var b;for(b in a)return!1;return!0}function f(a){return void 0===a}function g(a){return"number"==typeof a||"[object Number]"===Object.prototype.toString.call(a)}function h(a){return a instanceof Date||"[object Date]"===Object.prototype.toString.call(a)}function i(a,b){var c,d=[];for(c=0;c<a.length;++c)d.push(b(a[c],c));return d}function j(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function k(a,b){for(var c in b)j(b,c)&&(a[c]=b[c]);return j(b,"toString")&&(a.toString=b.toString),j(b,"valueOf")&&(a.valueOf=b.valueOf),a}function l(a,b,c,d){return sb(a,b,c,d,!0).utc()}function m(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}}function n(a){return null==a._pf&&(a._pf=m()),a._pf}function o(a){if(null==a._isValid){var b=n(a),c=ud.call(b.parsedDateParts,function(a){return null!=a}),d=!isNaN(a._d.getTime())&&b.overflow<0&&!b.empty&&!b.invalidMonth&&!b.invalidWeekday&&!b.nullInput&&!b.invalidFormat&&!b.userInvalidated&&(!b.meridiem||b.meridiem&&c);if(a._strict&&(d=d&&0===b.charsLeftOver&&0===b.unusedTokens.length&&void 0===b.bigHour),null!=Object.isFrozen&&Object.isFrozen(a))return d;a._isValid=d}return a._isValid}function p(a){var b=l(NaN);return null!=a?k(n(b),a):n(b).userInvalidated=!0,b}function q(a,b){var c,d,e;if(f(b._isAMomentObject)||(a._isAMomentObject=b._isAMomentObject),f(b._i)||(a._i=b._i),f(b._f)||(a._f=b._f),f(b._l)||(a._l=b._l),f(b._strict)||(a._strict=b._strict),f(b._tzm)||(a._tzm=b._tzm),f(b._isUTC)||(a._isUTC=b._isUTC),f(b._offset)||(a._offset=b._offset),f(b._pf)||(a._pf=n(b)),f(b._locale)||(a._locale=b._locale),vd.length>0)for(c=0;c<vd.length;c++)d=vd[c],e=b[d],f(e)||(a[d]=e);return a}function r(b){q(this,b),this._d=new Date(null!=b._d?b._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),wd===!1&&(wd=!0,a.updateOffset(this),wd=!1)}function s(a){return a instanceof r||null!=a&&null!=a._isAMomentObject}function t(a){return a<0?Math.ceil(a)||0:Math.floor(a)}function u(a){var b=+a,c=0;return 0!==b&&isFinite(b)&&(c=t(b)),c}function v(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;d<e;d++)(c&&a[d]!==b[d]||!c&&u(a[d])!==u(b[d]))&&g++;return g+f}function w(b){a.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+b)}function x(b,c){var d=!0;return k(function(){if(null!=a.deprecationHandler&&a.deprecationHandler(null,b),d){for(var e,f=[],g=0;g<arguments.length;g++){if(e="","object"==typeof arguments[g]){e+="\n["+g+"] ";for(var h in arguments[0])e+=h+": "+arguments[0][h]+", ";e=e.slice(0,-2)}else e=arguments[g];f.push(e)}w(b+"\nArguments: "+Array.prototype.slice.call(f).join("")+"\n"+(new Error).stack),d=!1}return c.apply(this,arguments)},c)}function y(b,c){null!=a.deprecationHandler&&a.deprecationHandler(b,c),xd[b]||(w(c),xd[b]=!0)}function z(a){return a instanceof Function||"[object Function]"===Object.prototype.toString.call(a)}function A(a){var b,c;for(c in a)b=a[c],z(b)?this[c]=b:this["_"+c]=b;this._config=a,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)}function B(a,b){var c,e=k({},a);for(c in b)j(b,c)&&(d(a[c])&&d(b[c])?(e[c]={},k(e[c],a[c]),k(e[c],b[c])):null!=b[c]?e[c]=b[c]:delete e[c]);for(c in a)j(a,c)&&!j(b,c)&&d(a[c])&&(e[c]=k({},e[c]));return e}function C(a){null!=a&&this.set(a)}function D(a,b,c){var d=this._calendar[a]||this._calendar.sameElse;return z(d)?d.call(b,c):d}function E(a){var b=this._longDateFormat[a],c=this._longDateFormat[a.toUpperCase()];return b||!c?b:(this._longDateFormat[a]=c.replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a])}function F(){return this._invalidDate}function G(a){return this._ordinal.replace("%d",a)}function H(a,b,c,d){var e=this._relativeTime[c];return z(e)?e(a,b,c,d):e.replace(/%d/i,a)}function I(a,b){var c=this._relativeTime[a>0?"future":"past"];return z(c)?c(b):c.replace(/%s/i,b)}function J(a,b){var c=a.toLowerCase();Hd[c]=Hd[c+"s"]=Hd[b]=a}function K(a){return"string"==typeof a?Hd[a]||Hd[a.toLowerCase()]:void 0}function L(a){var b,c,d={};for(c in a)j(a,c)&&(b=K(c),b&&(d[b]=a[c]));return d}function M(a,b){Id[a]=b}function N(a){var b=[];for(var c in a)b.push({unit:c,priority:Id[c]});return b.sort(function(a,b){return a.priority-b.priority}),b}function O(b,c){return function(d){return null!=d?(Q(this,b,d),a.updateOffset(this,c),this):P(this,b)}}function P(a,b){return a.isValid()?a._d["get"+(a._isUTC?"UTC":"")+b]():NaN}function Q(a,b,c){a.isValid()&&a._d["set"+(a._isUTC?"UTC":"")+b](c)}function R(a){return a=K(a),z(this[a])?this[a]():this}function S(a,b){if("object"==typeof a){a=L(a);for(var c=N(a),d=0;d<c.length;d++)this[c[d].unit](a[c[d].unit])}else if(a=K(a),z(this[a]))return this[a](b);return this}function T(a,b,c){var d=""+Math.abs(a),e=b-d.length,f=a>=0;return(f?c?"+":"":"-")+Math.pow(10,Math.max(0,e)).toString().substr(1)+d}function U(a,b,c,d){var e=d;"string"==typeof d&&(e=function(){return this[d]()}),a&&(Md[a]=e),b&&(Md[b[0]]=function(){return T(e.apply(this,arguments),b[1],b[2])}),c&&(Md[c]=function(){return this.localeData().ordinal(e.apply(this,arguments),a)})}function V(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,""):a.replace(/\\/g,"")}function W(a){var b,c,d=a.match(Jd);for(b=0,c=d.length;b<c;b++)Md[d[b]]?d[b]=Md[d[b]]:d[b]=V(d[b]);return function(b){var e,f="";for(e=0;e<c;e++)f+=z(d[e])?d[e].call(b,a):d[e];return f}}function X(a,b){return a.isValid()?(b=Y(b,a.localeData()),Ld[b]=Ld[b]||W(b),Ld[b](a)):a.localeData().invalidDate()}function Y(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Kd.lastIndex=0;d>=0&&Kd.test(a);)a=a.replace(Kd,c),Kd.lastIndex=0,d-=1;return a}function Z(a,b,c){ce[a]=z(b)?b:function(a,d){return a&&c?c:b}}function $(a,b){return j(ce,a)?ce[a](b._strict,b._locale):new RegExp(_(a))}function _(a){return aa(a.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e}))}function aa(a){return a.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function ba(a,b){var c,d=b;for("string"==typeof a&&(a=[a]),g(b)&&(d=function(a,c){c[b]=u(a)}),c=0;c<a.length;c++)de[a[c]]=d}function ca(a,b){ba(a,function(a,c,d,e){d._w=d._w||{},b(a,d._w,d,e)})}function da(a,b,c){null!=b&&j(de,a)&&de[a](b,c._a,c,a)}function ea(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function fa(a,b){return a?c(this._months)?this._months[a.month()]:this._months[(this._months.isFormat||oe).test(b)?"format":"standalone"][a.month()]:c(this._months)?this._months:this._months.standalone}function ga(a,b){return a?c(this._monthsShort)?this._monthsShort[a.month()]:this._monthsShort[oe.test(b)?"format":"standalone"][a.month()]:c(this._monthsShort)?this._monthsShort:this._monthsShort.standalone}function ha(a,b,c){var d,e,f,g=a.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],d=0;d<12;++d)f=l([2e3,d]),this._shortMonthsParse[d]=this.monthsShort(f,"").toLocaleLowerCase(),this._longMonthsParse[d]=this.months(f,"").toLocaleLowerCase();return c?"MMM"===b?(e=ne.call(this._shortMonthsParse,g),e!==-1?e:null):(e=ne.call(this._longMonthsParse,g),e!==-1?e:null):"MMM"===b?(e=ne.call(this._shortMonthsParse,g),e!==-1?e:(e=ne.call(this._longMonthsParse,g),e!==-1?e:null)):(e=ne.call(this._longMonthsParse,g),e!==-1?e:(e=ne.call(this._shortMonthsParse,g),e!==-1?e:null))}function ia(a,b,c){var d,e,f;if(this._monthsParseExact)return ha.call(this,a,b,c);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),d=0;d<12;d++){if(e=l([2e3,d]),c&&!this._longMonthsParse[d]&&(this._longMonthsParse[d]=new RegExp("^"+this.months(e,"").replace(".","")+"$","i"),this._shortMonthsParse[d]=new RegExp("^"+this.monthsShort(e,"").replace(".","")+"$","i")),c||this._monthsParse[d]||(f="^"+this.months(e,"")+"|^"+this.monthsShort(e,""),this._monthsParse[d]=new RegExp(f.replace(".",""),"i")),c&&"MMMM"===b&&this._longMonthsParse[d].test(a))return d;if(c&&"MMM"===b&&this._shortMonthsParse[d].test(a))return d;if(!c&&this._monthsParse[d].test(a))return d}}function ja(a,b){var c;if(!a.isValid())return a;if("string"==typeof b)if(/^\d+$/.test(b))b=u(b);else if(b=a.localeData().monthsParse(b),!g(b))return a;return c=Math.min(a.date(),ea(a.year(),b)),a._d["set"+(a._isUTC?"UTC":"")+"Month"](b,c),a}function ka(b){return null!=b?(ja(this,b),a.updateOffset(this,!0),this):P(this,"Month")}function la(){return ea(this.year(),this.month())}function ma(a){return this._monthsParseExact?(j(this,"_monthsRegex")||oa.call(this),a?this._monthsShortStrictRegex:this._monthsShortRegex):(j(this,"_monthsShortRegex")||(this._monthsShortRegex=re),this._monthsShortStrictRegex&&a?this._monthsShortStrictRegex:this._monthsShortRegex)}function na(a){return this._monthsParseExact?(j(this,"_monthsRegex")||oa.call(this),a?this._monthsStrictRegex:this._monthsRegex):(j(this,"_monthsRegex")||(this._monthsRegex=se),this._monthsStrictRegex&&a?this._monthsStrictRegex:this._monthsRegex)}function oa(){function a(a,b){return b.length-a.length}var b,c,d=[],e=[],f=[];for(b=0;b<12;b++)c=l([2e3,b]),d.push(this.monthsShort(c,"")),e.push(this.months(c,"")),f.push(this.months(c,"")),f.push(this.monthsShort(c,""));for(d.sort(a),e.sort(a),f.sort(a),b=0;b<12;b++)d[b]=aa(d[b]),e[b]=aa(e[b]);for(b=0;b<24;b++)f[b]=aa(f[b]);this._monthsRegex=new RegExp("^("+f.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+e.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+d.join("|")+")","i")}function pa(a){return qa(a)?366:365}function qa(a){return a%4===0&&a%100!==0||a%400===0}function ra(){return qa(this.year())}function sa(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return a<100&&a>=0&&isFinite(h.getFullYear())&&h.setFullYear(a),h}function ta(a){var b=new Date(Date.UTC.apply(null,arguments));return a<100&&a>=0&&isFinite(b.getUTCFullYear())&&b.setUTCFullYear(a),b}function ua(a,b,c){var d=7+b-c,e=(7+ta(a,0,d).getUTCDay()-b)%7;return-e+d-1}function va(a,b,c,d,e){var f,g,h=(7+c-d)%7,i=ua(a,d,e),j=1+7*(b-1)+h+i;return j<=0?(f=a-1,g=pa(f)+j):j>pa(a)?(f=a+1,g=j-pa(a)):(f=a,g=j),{year:f,dayOfYear:g}}function wa(a,b,c){var d,e,f=ua(a.year(),b,c),g=Math.floor((a.dayOfYear()-f-1)/7)+1;return g<1?(e=a.year()-1,d=g+xa(e,b,c)):g>xa(a.year(),b,c)?(d=g-xa(a.year(),b,c),e=a.year()+1):(e=a.year(),d=g),{week:d,year:e}}function xa(a,b,c){var d=ua(a,b,c),e=ua(a+1,b,c);return(pa(a)-d+e)/7}function ya(a){return wa(a,this._week.dow,this._week.doy).week}function za(){return this._week.dow}function Aa(){return this._week.doy}function Ba(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),"d")}function Ca(a){var b=wa(this,1,4).week;return null==a?b:this.add(7*(a-b),"d")}function Da(a,b){return"string"!=typeof a?a:isNaN(a)?(a=b.weekdaysParse(a),"number"==typeof a?a:null):parseInt(a,10)}function Ea(a,b){return"string"==typeof a?b.weekdaysParse(a)%7||7:isNaN(a)?null:a}function Fa(a,b){return a?c(this._weekdays)?this._weekdays[a.day()]:this._weekdays[this._weekdays.isFormat.test(b)?"format":"standalone"][a.day()]:c(this._weekdays)?this._weekdays:this._weekdays.standalone}function Ga(a){return a?this._weekdaysShort[a.day()]:this._weekdaysShort}function Ha(a){return a?this._weekdaysMin[a.day()]:this._weekdaysMin}function Ia(a,b,c){var d,e,f,g=a.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],d=0;d<7;++d)f=l([2e3,1]).day(d),this._minWeekdaysParse[d]=this.weekdaysMin(f,"").toLocaleLowerCase(),this._shortWeekdaysParse[d]=this.weekdaysShort(f,"").toLocaleLowerCase(),this._weekdaysParse[d]=this.weekdays(f,"").toLocaleLowerCase();return c?"dddd"===b?(e=ne.call(this._weekdaysParse,g),e!==-1?e:null):"ddd"===b?(e=ne.call(this._shortWeekdaysParse,g),e!==-1?e:null):(e=ne.call(this._minWeekdaysParse,g),e!==-1?e:null):"dddd"===b?(e=ne.call(this._weekdaysParse,g),e!==-1?e:(e=ne.call(this._shortWeekdaysParse,g),e!==-1?e:(e=ne.call(this._minWeekdaysParse,g),e!==-1?e:null))):"ddd"===b?(e=ne.call(this._shortWeekdaysParse,g),e!==-1?e:(e=ne.call(this._weekdaysParse,g),e!==-1?e:(e=ne.call(this._minWeekdaysParse,g),e!==-1?e:null))):(e=ne.call(this._minWeekdaysParse,g),e!==-1?e:(e=ne.call(this._weekdaysParse,g),e!==-1?e:(e=ne.call(this._shortWeekdaysParse,g),e!==-1?e:null)))}function Ja(a,b,c){var d,e,f;if(this._weekdaysParseExact)return Ia.call(this,a,b,c);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),d=0;d<7;d++){if(e=l([2e3,1]).day(d),c&&!this._fullWeekdaysParse[d]&&(this._fullWeekdaysParse[d]=new RegExp("^"+this.weekdays(e,"").replace(".",".?")+"$","i"),this._shortWeekdaysParse[d]=new RegExp("^"+this.weekdaysShort(e,"").replace(".",".?")+"$","i"),this._minWeekdaysParse[d]=new RegExp("^"+this.weekdaysMin(e,"").replace(".",".?")+"$","i")),this._weekdaysParse[d]||(f="^"+this.weekdays(e,"")+"|^"+this.weekdaysShort(e,"")+"|^"+this.weekdaysMin(e,""),this._weekdaysParse[d]=new RegExp(f.replace(".",""),"i")),c&&"dddd"===b&&this._fullWeekdaysParse[d].test(a))return d;if(c&&"ddd"===b&&this._shortWeekdaysParse[d].test(a))return d;if(c&&"dd"===b&&this._minWeekdaysParse[d].test(a))return d;if(!c&&this._weekdaysParse[d].test(a))return d}}function Ka(a){if(!this.isValid())return null!=a?this:NaN;var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=Da(a,this.localeData()),this.add(a-b,"d")):b}function La(a){if(!this.isValid())return null!=a?this:NaN;var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,"d")}function Ma(a){if(!this.isValid())return null!=a?this:NaN;if(null!=a){var b=Ea(a,this.localeData());return this.day(this.day()%7?b:b-7)}return this.day()||7}function Na(a){return this._weekdaysParseExact?(j(this,"_weekdaysRegex")||Qa.call(this),a?this._weekdaysStrictRegex:this._weekdaysRegex):(j(this,"_weekdaysRegex")||(this._weekdaysRegex=ye),this._weekdaysStrictRegex&&a?this._weekdaysStrictRegex:this._weekdaysRegex)}function Oa(a){return this._weekdaysParseExact?(j(this,"_weekdaysRegex")||Qa.call(this),a?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(j(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=ze),this._weekdaysShortStrictRegex&&a?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)}function Pa(a){return this._weekdaysParseExact?(j(this,"_weekdaysRegex")||Qa.call(this),a?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(j(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Ae),this._weekdaysMinStrictRegex&&a?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)}function Qa(){function a(a,b){return b.length-a.length}var b,c,d,e,f,g=[],h=[],i=[],j=[];for(b=0;b<7;b++)c=l([2e3,1]).day(b),d=this.weekdaysMin(c,""),e=this.weekdaysShort(c,""),f=this.weekdays(c,""),g.push(d),h.push(e),i.push(f),j.push(d),j.push(e),j.push(f);for(g.sort(a),h.sort(a),i.sort(a),j.sort(a),b=0;b<7;b++)h[b]=aa(h[b]),i[b]=aa(i[b]),j[b]=aa(j[b]);this._weekdaysRegex=new RegExp("^("+j.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+i.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+h.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+g.join("|")+")","i")}function Ra(){return this.hours()%12||12}function Sa(){return this.hours()||24}function Ta(a,b){U(a,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),b)})}function Ua(a,b){return b._meridiemParse}function Va(a){return"p"===(a+"").toLowerCase().charAt(0)}function Wa(a,b,c){return a>11?c?"pm":"PM":c?"am":"AM"}function Xa(a){return a?a.toLowerCase().replace("_","-"):a}function Ya(a){for(var b,c,d,e,f=0;f<a.length;){for(e=Xa(a[f]).split("-"),b=e.length,c=Xa(a[f+1]),c=c?c.split("-"):null;b>0;){if(d=Za(e.slice(0,b).join("-")))return d;if(c&&c.length>=b&&v(e,c,!0)>=b-1)break;b--}f++}return null}function Za(a){var b=null;if(!Fe[a]&&"undefined"!=typeof module&&module&&module.exports)try{b=Be._abbr,require("./locale/"+a),$a(b)}catch(a){}return Fe[a]}function $a(a,b){var c;return a&&(c=f(b)?bb(a):_a(a,b),c&&(Be=c)),Be._abbr}function _a(a,b){if(null!==b){var c=Ee;if(b.abbr=a,null!=Fe[a])y("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),c=Fe[a]._config;else if(null!=b.parentLocale){if(null==Fe[b.parentLocale])return Ge[b.parentLocale]||(Ge[b.parentLocale]=[]),Ge[b.parentLocale].push({name:a,config:b}),null;c=Fe[b.parentLocale]._config}return Fe[a]=new C(B(c,b)),Ge[a]&&Ge[a].forEach(function(a){_a(a.name,a.config)}),$a(a),Fe[a]}return delete Fe[a],null}function ab(a,b){if(null!=b){var c,d=Ee;null!=Fe[a]&&(d=Fe[a]._config),b=B(d,b),c=new C(b),c.parentLocale=Fe[a],Fe[a]=c,$a(a)}else null!=Fe[a]&&(null!=Fe[a].parentLocale?Fe[a]=Fe[a].parentLocale:null!=Fe[a]&&delete Fe[a]);return Fe[a]}function bb(a){var b;if(a&&a._locale&&a._locale._abbr&&(a=a._locale._abbr),!a)return Be;if(!c(a)){if(b=Za(a))return b;a=[a]}return Ya(a)}function cb(){return Ad(Fe)}function db(a){var b,c=a._a;return c&&n(a).overflow===-2&&(b=c[fe]<0||c[fe]>11?fe:c[ge]<1||c[ge]>ea(c[ee],c[fe])?ge:c[he]<0||c[he]>24||24===c[he]&&(0!==c[ie]||0!==c[je]||0!==c[ke])?he:c[ie]<0||c[ie]>59?ie:c[je]<0||c[je]>59?je:c[ke]<0||c[ke]>999?ke:-1,n(a)._overflowDayOfYear&&(b<ee||b>ge)&&(b=ge),n(a)._overflowWeeks&&b===-1&&(b=le),n(a)._overflowWeekday&&b===-1&&(b=me),n(a).overflow=b),a}function eb(a){var b,c,d,e,f,g,h=a._i,i=He.exec(h)||Ie.exec(h);if(i){for(n(a).iso=!0,b=0,c=Ke.length;b<c;b++)if(Ke[b][1].exec(i[1])){e=Ke[b][0],d=Ke[b][2]!==!1;break}if(null==e)return void(a._isValid=!1);if(i[3]){for(b=0,c=Le.length;b<c;b++)if(Le[b][1].exec(i[3])){f=(i[2]||" ")+Le[b][0];break}if(null==f)return void(a._isValid=!1)}if(!d&&null!=f)return void(a._isValid=!1);if(i[4]){if(!Je.exec(i[4]))return void(a._isValid=!1);g="Z"}a._f=e+(f||"")+(g||""),lb(a)}else a._isValid=!1}function fb(a){var b,c,d,e,f,g,h,i,j={" GMT":" +0000"," EDT":" -0400"," EST":" -0500"," CDT":" -0500"," CST":" -0600"," MDT":" -0600"," MST":" -0700"," PDT":" -0700"," PST":" -0800"},k="YXWVUTSRQPONZABCDEFGHIKLM";if(b=a._i.replace(/\([^\)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s|\s$/g,""),c=Ne.exec(b)){if(d=c[1]?"ddd"+(5===c[1].length?", ":" "):"",e="D MMM "+(c[2].length>10?"YYYY ":"YY "),f="HH:mm"+(c[4]?":ss":""),c[1]){var l=new Date(c[2]),m=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"][l.getDay()];if(c[1].substr(0,3)!==m)return n(a).weekdayMismatch=!0,void(a._isValid=!1)}switch(c[5].length){case 2:0===i?h=" +0000":(i=k.indexOf(c[5][1].toUpperCase())-12,h=(i<0?" -":" +")+(""+i).replace(/^-?/,"0").match(/..$/)[0]+"00");break;case 4:h=j[c[5]];break;default:h=j[" GMT"]}c[5]=h,a._i=c.splice(1).join(""),g=" ZZ",a._f=d+e+f+g,lb(a),n(a).rfc2822=!0}else a._isValid=!1}function gb(b){var c=Me.exec(b._i);return null!==c?void(b._d=new Date(+c[1])):(eb(b),void(b._isValid===!1&&(delete b._isValid,fb(b),b._isValid===!1&&(delete b._isValid,a.createFromInputFallback(b)))))}function hb(a,b,c){return null!=a?a:null!=b?b:c}function ib(b){var c=new Date(a.now());return b._useUTC?[c.getUTCFullYear(),c.getUTCMonth(),c.getUTCDate()]:[c.getFullYear(),c.getMonth(),c.getDate()]}function jb(a){var b,c,d,e,f=[];if(!a._d){for(d=ib(a),a._w&&null==a._a[ge]&&null==a._a[fe]&&kb(a),null!=a._dayOfYear&&(e=hb(a._a[ee],d[ee]),(a._dayOfYear>pa(e)||0===a._dayOfYear)&&(n(a)._overflowDayOfYear=!0),c=ta(e,0,a._dayOfYear),a._a[fe]=c.getUTCMonth(),a._a[ge]=c.getUTCDate()),b=0;b<3&&null==a._a[b];++b)a._a[b]=f[b]=d[b];for(;b<7;b++)a._a[b]=f[b]=null==a._a[b]?2===b?1:0:a._a[b];24===a._a[he]&&0===a._a[ie]&&0===a._a[je]&&0===a._a[ke]&&(a._nextDay=!0,a._a[he]=0),a._d=(a._useUTC?ta:sa).apply(null,f),null!=a._tzm&&a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm),a._nextDay&&(a._a[he]=24)}}function kb(a){var b,c,d,e,f,g,h,i;if(b=a._w,null!=b.GG||null!=b.W||null!=b.E)f=1,g=4,c=hb(b.GG,a._a[ee],wa(tb(),1,4).year),d=hb(b.W,1),e=hb(b.E,1),(e<1||e>7)&&(i=!0);else{f=a._locale._week.dow,g=a._locale._week.doy;var j=wa(tb(),f,g);c=hb(b.gg,a._a[ee],j.year),d=hb(b.w,j.week),null!=b.d?(e=b.d,(e<0||e>6)&&(i=!0)):null!=b.e?(e=b.e+f,(b.e<0||b.e>6)&&(i=!0)):e=f}d<1||d>xa(c,f,g)?n(a)._overflowWeeks=!0:null!=i?n(a)._overflowWeekday=!0:(h=va(c,d,e,f,g),a._a[ee]=h.year,a._dayOfYear=h.dayOfYear)}function lb(b){if(b._f===a.ISO_8601)return void eb(b);if(b._f===a.RFC_2822)return void fb(b);b._a=[],n(b).empty=!0;var c,d,e,f,g,h=""+b._i,i=h.length,j=0;for(e=Y(b._f,b._locale).match(Jd)||[],c=0;c<e.length;c++)f=e[c],d=(h.match($(f,b))||[])[0],d&&(g=h.substr(0,h.indexOf(d)),g.length>0&&n(b).unusedInput.push(g),h=h.slice(h.indexOf(d)+d.length),j+=d.length),Md[f]?(d?n(b).empty=!1:n(b).unusedTokens.push(f),da(f,d,b)):b._strict&&!d&&n(b).unusedTokens.push(f);n(b).charsLeftOver=i-j,h.length>0&&n(b).unusedInput.push(h),b._a[he]<=12&&n(b).bigHour===!0&&b._a[he]>0&&(n(b).bigHour=void 0),n(b).parsedDateParts=b._a.slice(0),n(b).meridiem=b._meridiem,b._a[he]=mb(b._locale,b._a[he],b._meridiem),jb(b),db(b)}function mb(a,b,c){var d;return null==c?b:null!=a.meridiemHour?a.meridiemHour(b,c):null!=a.isPM?(d=a.isPM(c),d&&b<12&&(b+=12),d||12!==b||(b=0),b):b}function nb(a){var b,c,d,e,f;if(0===a._f.length)return n(a).invalidFormat=!0,void(a._d=new Date(NaN));for(e=0;e<a._f.length;e++)f=0,b=q({},a),null!=a._useUTC&&(b._useUTC=a._useUTC),b._f=a._f[e],lb(b),o(b)&&(f+=n(b).charsLeftOver,f+=10*n(b).unusedTokens.length,n(b).score=f,(null==d||f<d)&&(d=f,c=b));k(a,c||b)}function ob(a){if(!a._d){var b=L(a._i);a._a=i([b.year,b.month,b.day||b.date,b.hour,b.minute,b.second,b.millisecond],function(a){return a&&parseInt(a,10)}),jb(a)}}function pb(a){var b=new r(db(qb(a)));return b._nextDay&&(b.add(1,"d"),b._nextDay=void 0),b}function qb(a){var b=a._i,d=a._f;return a._locale=a._locale||bb(a._l),null===b||void 0===d&&""===b?p({nullInput:!0}):("string"==typeof b&&(a._i=b=a._locale.preparse(b)),s(b)?new r(db(b)):(h(b)?a._d=b:c(d)?nb(a):d?lb(a):rb(a),o(a)||(a._d=null),a))}function rb(b){var e=b._i;f(e)?b._d=new Date(a.now()):h(e)?b._d=new Date(e.valueOf()):"string"==typeof e?gb(b):c(e)?(b._a=i(e.slice(0),function(a){return parseInt(a,10)}),jb(b)):d(e)?ob(b):g(e)?b._d=new Date(e):a.createFromInputFallback(b)}function sb(a,b,f,g,h){var i={};return f!==!0&&f!==!1||(g=f,f=void 0),(d(a)&&e(a)||c(a)&&0===a.length)&&(a=void 0),i._isAMomentObject=!0,i._useUTC=i._isUTC=h,i._l=f,i._i=a,i._f=b,i._strict=g,pb(i)}function tb(a,b,c,d){return sb(a,b,c,d,!1)}function ub(a,b){var d,e;if(1===b.length&&c(b[0])&&(b=b[0]),!b.length)return tb();for(d=b[0],e=1;e<b.length;++e)b[e].isValid()&&!b[e][a](d)||(d=b[e]);return d}function vb(){var a=[].slice.call(arguments,0);return ub("isBefore",a)}function wb(){var a=[].slice.call(arguments,0);return ub("isAfter",a)}function xb(a){for(var b in a)if(Re.indexOf(b)===-1||null!=a[b]&&isNaN(a[b]))return!1;for(var c=!1,d=0;d<Re.length;++d)if(a[Re[d]]){if(c)return!1;parseFloat(a[Re[d]])!==u(a[Re[d]])&&(c=!0)}return!0}function yb(){return this._isValid}function zb(){return Sb(NaN)}function Ab(a){var b=L(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._isValid=xb(b),this._milliseconds=+k+1e3*j+6e4*i+1e3*h*60*60,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=bb(),this._bubble()}function Bb(a){return a instanceof Ab}function Cb(a){return a<0?Math.round(-1*a)*-1:Math.round(a)}function Db(a,b){U(a,0,0,function(){var a=this.utcOffset(),c="+";return a<0&&(a=-a,c="-"),c+T(~~(a/60),2)+b+T(~~a%60,2)})}function Eb(a,b){var c=(b||"").match(a);if(null===c)return null;var d=c[c.length-1]||[],e=(d+"").match(Se)||["-",0,0],f=+(60*e[1])+u(e[2]);return 0===f?0:"+"===e[0]?f:-f}function Fb(b,c){var d,e;return c._isUTC?(d=c.clone(),e=(s(b)||h(b)?b.valueOf():tb(b).valueOf())-d.valueOf(),d._d.setTime(d._d.valueOf()+e),a.updateOffset(d,!1),d):tb(b).local()}function Gb(a){return 15*-Math.round(a._d.getTimezoneOffset()/15)}function Hb(b,c,d){var e,f=this._offset||0;if(!this.isValid())return null!=b?this:NaN;if(null!=b){if("string"==typeof b){if(b=Eb(_d,b),null===b)return this}else Math.abs(b)<16&&!d&&(b=60*b);return!this._isUTC&&c&&(e=Gb(this)),this._offset=b,this._isUTC=!0,null!=e&&this.add(e,"m"),f!==b&&(!c||this._changeInProgress?Xb(this,Sb(b-f,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?f:Gb(this)}function Ib(a,b){return null!=a?("string"!=typeof a&&(a=-a),this.utcOffset(a,b),this):-this.utcOffset()}function Jb(a){return this.utcOffset(0,a)}function Kb(a){return this._isUTC&&(this.utcOffset(0,a),this._isUTC=!1,a&&this.subtract(Gb(this),"m")),this}function Lb(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var a=Eb($d,this._i);null!=a?this.utcOffset(a):this.utcOffset(0,!0)}return this}function Mb(a){return!!this.isValid()&&(a=a?tb(a).utcOffset():0,(this.utcOffset()-a)%60===0)}function Nb(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function Ob(){if(!f(this._isDSTShifted))return this._isDSTShifted;var a={};if(q(a,this),a=qb(a),a._a){var b=a._isUTC?l(a._a):tb(a._a);this._isDSTShifted=this.isValid()&&v(a._a,b.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}function Pb(){return!!this.isValid()&&!this._isUTC}function Qb(){return!!this.isValid()&&this._isUTC}function Rb(){return!!this.isValid()&&(this._isUTC&&0===this._offset)}function Sb(a,b){var c,d,e,f=a,h=null;return Bb(a)?f={ms:a._milliseconds,d:a._days,M:a._months}:g(a)?(f={},b?f[b]=a:f.milliseconds=a):(h=Te.exec(a))?(c="-"===h[1]?-1:1,f={y:0,d:u(h[ge])*c,h:u(h[he])*c,m:u(h[ie])*c,s:u(h[je])*c,ms:u(Cb(1e3*h[ke]))*c}):(h=Ue.exec(a))?(c="-"===h[1]?-1:1,f={y:Tb(h[2],c),M:Tb(h[3],c),w:Tb(h[4],c),d:Tb(h[5],c),h:Tb(h[6],c),m:Tb(h[7],c),s:Tb(h[8],c)}):null==f?f={}:"object"==typeof f&&("from"in f||"to"in f)&&(e=Vb(tb(f.from),tb(f.to)),f={},f.ms=e.milliseconds,f.M=e.months),d=new Ab(f),Bb(a)&&j(a,"_locale")&&(d._locale=a._locale),d}function Tb(a,b){var c=a&&parseFloat(a.replace(",","."));return(isNaN(c)?0:c)*b}function Ub(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,"M").isAfter(b)&&--c.months,c.milliseconds=+b-+a.clone().add(c.months,"M"),c}function Vb(a,b){var c;return a.isValid()&&b.isValid()?(b=Fb(b,a),a.isBefore(b)?c=Ub(a,b):(c=Ub(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c):{milliseconds:0,months:0}}function Wb(a,b){return function(c,d){var e,f;return null===d||isNaN(+d)||(y(b,"moment()."+b+"(period, number) is deprecated. Please use moment()."+b+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),f=c,c=d,d=f),c="string"==typeof c?+c:c,e=Sb(c,d),Xb(this,e,a),this}}function Xb(b,c,d,e){var f=c._milliseconds,g=Cb(c._days),h=Cb(c._months);b.isValid()&&(e=null==e||e,f&&b._d.setTime(b._d.valueOf()+f*d),g&&Q(b,"Date",P(b,"Date")+g*d),h&&ja(b,P(b,"Month")+h*d),e&&a.updateOffset(b,g||h))}function Yb(a,b){var c=a.diff(b,"days",!0);return c<-6?"sameElse":c<-1?"lastWeek":c<0?"lastDay":c<1?"sameDay":c<2?"nextDay":c<7?"nextWeek":"sameElse"}function Zb(b,c){var d=b||tb(),e=Fb(d,this).startOf("day"),f=a.calendarFormat(this,e)||"sameElse",g=c&&(z(c[f])?c[f].call(this,d):c[f]);return this.format(g||this.localeData().calendar(f,this,tb(d)))}function $b(){return new r(this)}function _b(a,b){var c=s(a)?a:tb(a);return!(!this.isValid()||!c.isValid())&&(b=K(f(b)?"millisecond":b),"millisecond"===b?this.valueOf()>c.valueOf():c.valueOf()<this.clone().startOf(b).valueOf())}function ac(a,b){var c=s(a)?a:tb(a);return!(!this.isValid()||!c.isValid())&&(b=K(f(b)?"millisecond":b),"millisecond"===b?this.valueOf()<c.valueOf():this.clone().endOf(b).valueOf()<c.valueOf())}function bc(a,b,c,d){return d=d||"()",("("===d[0]?this.isAfter(a,c):!this.isBefore(a,c))&&(")"===d[1]?this.isBefore(b,c):!this.isAfter(b,c))}function cc(a,b){var c,d=s(a)?a:tb(a);return!(!this.isValid()||!d.isValid())&&(b=K(b||"millisecond"),"millisecond"===b?this.valueOf()===d.valueOf():(c=d.valueOf(),this.clone().startOf(b).valueOf()<=c&&c<=this.clone().endOf(b).valueOf()))}function dc(a,b){return this.isSame(a,b)||this.isAfter(a,b)}function ec(a,b){return this.isSame(a,b)||this.isBefore(a,b)}function fc(a,b,c){var d,e,f,g;return this.isValid()?(d=Fb(a,this),d.isValid()?(e=6e4*(d.utcOffset()-this.utcOffset()),b=K(b),"year"===b||"month"===b||"quarter"===b?(g=gc(this,d),"quarter"===b?g/=3:"year"===b&&(g/=12)):(f=this-d,g="second"===b?f/1e3:"minute"===b?f/6e4:"hour"===b?f/36e5:"day"===b?(f-e)/864e5:"week"===b?(f-e)/6048e5:f),c?g:t(g)):NaN):NaN}function gc(a,b){var c,d,e=12*(b.year()-a.year())+(b.month()-a.month()),f=a.clone().add(e,"months");return b-f<0?(c=a.clone().add(e-1,"months"),d=(b-f)/(f-c)):(c=a.clone().add(e+1,"months"),d=(b-f)/(c-f)),-(e+d)||0}function hc(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function ic(){if(!this.isValid())return null;var a=this.clone().utc();return a.year()<0||a.year()>9999?X(a,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):z(Date.prototype.toISOString)?this.toDate().toISOString():X(a,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function jc(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var a="moment",b="";this.isLocal()||(a=0===this.utcOffset()?"moment.utc":"moment.parseZone",b="Z");var c="["+a+'("]',d=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",e="-MM-DD[T]HH:mm:ss.SSS",f=b+'[")]';return this.format(c+d+e+f)}function kc(b){b||(b=this.isUtc()?a.defaultFormatUtc:a.defaultFormat);var c=X(this,b);return this.localeData().postformat(c)}function lc(a,b){return this.isValid()&&(s(a)&&a.isValid()||tb(a).isValid())?Sb({to:this,from:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function mc(a){return this.from(tb(),a)}function nc(a,b){return this.isValid()&&(s(a)&&a.isValid()||tb(a).isValid())?Sb({from:this,to:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function oc(a){return this.to(tb(),a)}function pc(a){var b;return void 0===a?this._locale._abbr:(b=bb(a),null!=b&&(this._locale=b),this)}function qc(){return this._locale}function rc(a){switch(a=K(a)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":case"date":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===a&&this.weekday(0),"isoWeek"===a&&this.isoWeekday(1),"quarter"===a&&this.month(3*Math.floor(this.month()/3)),this}function sc(a){return a=K(a),void 0===a||"millisecond"===a?this:("date"===a&&(a="day"),this.startOf(a).add(1,"isoWeek"===a?"week":a).subtract(1,"ms"))}function tc(){return this._d.valueOf()-6e4*(this._offset||0)}function uc(){return Math.floor(this.valueOf()/1e3)}function vc(){return new Date(this.valueOf())}function wc(){var a=this;return[a.year(),a.month(),a.date(),a.hour(),a.minute(),a.second(),a.millisecond()]}function xc(){var a=this;return{years:a.year(),months:a.month(),date:a.date(),hours:a.hours(),minutes:a.minutes(),seconds:a.seconds(),milliseconds:a.milliseconds()}}function yc(){return this.isValid()?this.toISOString():null}function zc(){return o(this)}function Ac(){
return k({},n(this))}function Bc(){return n(this).overflow}function Cc(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}function Dc(a,b){U(0,[a,a.length],0,b)}function Ec(a){return Ic.call(this,a,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)}function Fc(a){return Ic.call(this,a,this.isoWeek(),this.isoWeekday(),1,4)}function Gc(){return xa(this.year(),1,4)}function Hc(){var a=this.localeData()._week;return xa(this.year(),a.dow,a.doy)}function Ic(a,b,c,d,e){var f;return null==a?wa(this,d,e).year:(f=xa(a,d,e),b>f&&(b=f),Jc.call(this,a,b,c,d,e))}function Jc(a,b,c,d,e){var f=va(a,b,c,d,e),g=ta(f.year,0,f.dayOfYear);return this.year(g.getUTCFullYear()),this.month(g.getUTCMonth()),this.date(g.getUTCDate()),this}function Kc(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)}function Lc(a){var b=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==a?b:this.add(a-b,"d")}function Mc(a,b){b[ke]=u(1e3*("0."+a))}function Nc(){return this._isUTC?"UTC":""}function Oc(){return this._isUTC?"Coordinated Universal Time":""}function Pc(a){return tb(1e3*a)}function Qc(){return tb.apply(null,arguments).parseZone()}function Rc(a){return a}function Sc(a,b,c,d){var e=bb(),f=l().set(d,b);return e[c](f,a)}function Tc(a,b,c){if(g(a)&&(b=a,a=void 0),a=a||"",null!=b)return Sc(a,b,c,"month");var d,e=[];for(d=0;d<12;d++)e[d]=Sc(a,d,c,"month");return e}function Uc(a,b,c,d){"boolean"==typeof a?(g(b)&&(c=b,b=void 0),b=b||""):(b=a,c=b,a=!1,g(b)&&(c=b,b=void 0),b=b||"");var e=bb(),f=a?e._week.dow:0;if(null!=c)return Sc(b,(c+f)%7,d,"day");var h,i=[];for(h=0;h<7;h++)i[h]=Sc(b,(h+f)%7,d,"day");return i}function Vc(a,b){return Tc(a,b,"months")}function Wc(a,b){return Tc(a,b,"monthsShort")}function Xc(a,b,c){return Uc(a,b,c,"weekdays")}function Yc(a,b,c){return Uc(a,b,c,"weekdaysShort")}function Zc(a,b,c){return Uc(a,b,c,"weekdaysMin")}function $c(){var a=this._data;return this._milliseconds=df(this._milliseconds),this._days=df(this._days),this._months=df(this._months),a.milliseconds=df(a.milliseconds),a.seconds=df(a.seconds),a.minutes=df(a.minutes),a.hours=df(a.hours),a.months=df(a.months),a.years=df(a.years),this}function _c(a,b,c,d){var e=Sb(b,c);return a._milliseconds+=d*e._milliseconds,a._days+=d*e._days,a._months+=d*e._months,a._bubble()}function ad(a,b){return _c(this,a,b,1)}function bd(a,b){return _c(this,a,b,-1)}function cd(a){return a<0?Math.floor(a):Math.ceil(a)}function dd(){var a,b,c,d,e,f=this._milliseconds,g=this._days,h=this._months,i=this._data;return f>=0&&g>=0&&h>=0||f<=0&&g<=0&&h<=0||(f+=864e5*cd(fd(h)+g),g=0,h=0),i.milliseconds=f%1e3,a=t(f/1e3),i.seconds=a%60,b=t(a/60),i.minutes=b%60,c=t(b/60),i.hours=c%24,g+=t(c/24),e=t(ed(g)),h+=e,g-=cd(fd(e)),d=t(h/12),h%=12,i.days=g,i.months=h,i.years=d,this}function ed(a){return 4800*a/146097}function fd(a){return 146097*a/4800}function gd(a){if(!this.isValid())return NaN;var b,c,d=this._milliseconds;if(a=K(a),"month"===a||"year"===a)return b=this._days+d/864e5,c=this._months+ed(b),"month"===a?c:c/12;switch(b=this._days+Math.round(fd(this._months)),a){case"week":return b/7+d/6048e5;case"day":return b+d/864e5;case"hour":return 24*b+d/36e5;case"minute":return 1440*b+d/6e4;case"second":return 86400*b+d/1e3;case"millisecond":return Math.floor(864e5*b)+d;default:throw new Error("Unknown unit "+a)}}function hd(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*u(this._months/12):NaN}function id(a){return function(){return this.as(a)}}function jd(a){return a=K(a),this.isValid()?this[a+"s"]():NaN}function kd(a){return function(){return this.isValid()?this._data[a]:NaN}}function ld(){return t(this.days()/7)}function md(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function nd(a,b,c){var d=Sb(a).abs(),e=uf(d.as("s")),f=uf(d.as("m")),g=uf(d.as("h")),h=uf(d.as("d")),i=uf(d.as("M")),j=uf(d.as("y")),k=e<=vf.ss&&["s",e]||e<vf.s&&["ss",e]||f<=1&&["m"]||f<vf.m&&["mm",f]||g<=1&&["h"]||g<vf.h&&["hh",g]||h<=1&&["d"]||h<vf.d&&["dd",h]||i<=1&&["M"]||i<vf.M&&["MM",i]||j<=1&&["y"]||["yy",j];return k[2]=b,k[3]=+a>0,k[4]=c,md.apply(null,k)}function od(a){return void 0===a?uf:"function"==typeof a&&(uf=a,!0)}function pd(a,b){return void 0!==vf[a]&&(void 0===b?vf[a]:(vf[a]=b,"s"===a&&(vf.ss=b-1),!0))}function qd(a){if(!this.isValid())return this.localeData().invalidDate();var b=this.localeData(),c=nd(this,!a,b);return a&&(c=b.pastFuture(+this,c)),b.postformat(c)}function rd(){if(!this.isValid())return this.localeData().invalidDate();var a,b,c,d=wf(this._milliseconds)/1e3,e=wf(this._days),f=wf(this._months);a=t(d/60),b=t(a/60),d%=60,a%=60,c=t(f/12),f%=12;var g=c,h=f,i=e,j=b,k=a,l=d,m=this.asSeconds();return m?(m<0?"-":"")+"P"+(g?g+"Y":"")+(h?h+"M":"")+(i?i+"D":"")+(j||k||l?"T":"")+(j?j+"H":"")+(k?k+"M":"")+(l?l+"S":""):"P0D"}var sd,td;td=Array.prototype.some?Array.prototype.some:function(a){for(var b=Object(this),c=b.length>>>0,d=0;d<c;d++)if(d in b&&a.call(this,b[d],d,b))return!0;return!1};var ud=td,vd=a.momentProperties=[],wd=!1,xd={};a.suppressDeprecationWarnings=!1,a.deprecationHandler=null;var yd;yd=Object.keys?Object.keys:function(a){var b,c=[];for(b in a)j(a,b)&&c.push(b);return c};var zd,Ad=yd,Bd={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},Cd={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},Dd="Invalid date",Ed="%d",Fd=/\d{1,2}/,Gd={future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},Hd={},Id={},Jd=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Kd=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Ld={},Md={},Nd=/\d/,Od=/\d\d/,Pd=/\d{3}/,Qd=/\d{4}/,Rd=/[+-]?\d{6}/,Sd=/\d\d?/,Td=/\d\d\d\d?/,Ud=/\d\d\d\d\d\d?/,Vd=/\d{1,3}/,Wd=/\d{1,4}/,Xd=/[+-]?\d{1,6}/,Yd=/\d+/,Zd=/[+-]?\d+/,$d=/Z|[+-]\d\d:?\d\d/gi,_d=/Z|[+-]\d\d(?::?\d\d)?/gi,ae=/[+-]?\d+(\.\d{1,3})?/,be=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,ce={},de={},ee=0,fe=1,ge=2,he=3,ie=4,je=5,ke=6,le=7,me=8;zd=Array.prototype.indexOf?Array.prototype.indexOf:function(a){var b;for(b=0;b<this.length;++b)if(this[b]===a)return b;return-1};var ne=zd;U("M",["MM",2],"Mo",function(){return this.month()+1}),U("MMM",0,0,function(a){return this.localeData().monthsShort(this,a)}),U("MMMM",0,0,function(a){return this.localeData().months(this,a)}),J("month","M"),M("month",8),Z("M",Sd),Z("MM",Sd,Od),Z("MMM",function(a,b){return b.monthsShortRegex(a)}),Z("MMMM",function(a,b){return b.monthsRegex(a)}),ba(["M","MM"],function(a,b){b[fe]=u(a)-1}),ba(["MMM","MMMM"],function(a,b,c,d){var e=c._locale.monthsParse(a,d,c._strict);null!=e?b[fe]=e:n(c).invalidMonth=a});var oe=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,pe="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),qe="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),re=be,se=be;U("Y",0,0,function(){var a=this.year();return a<=9999?""+a:"+"+a}),U(0,["YY",2],0,function(){return this.year()%100}),U(0,["YYYY",4],0,"year"),U(0,["YYYYY",5],0,"year"),U(0,["YYYYYY",6,!0],0,"year"),J("year","y"),M("year",1),Z("Y",Zd),Z("YY",Sd,Od),Z("YYYY",Wd,Qd),Z("YYYYY",Xd,Rd),Z("YYYYYY",Xd,Rd),ba(["YYYYY","YYYYYY"],ee),ba("YYYY",function(b,c){c[ee]=2===b.length?a.parseTwoDigitYear(b):u(b)}),ba("YY",function(b,c){c[ee]=a.parseTwoDigitYear(b)}),ba("Y",function(a,b){b[ee]=parseInt(a,10)}),a.parseTwoDigitYear=function(a){return u(a)+(u(a)>68?1900:2e3)};var te=O("FullYear",!0);U("w",["ww",2],"wo","week"),U("W",["WW",2],"Wo","isoWeek"),J("week","w"),J("isoWeek","W"),M("week",5),M("isoWeek",5),Z("w",Sd),Z("ww",Sd,Od),Z("W",Sd),Z("WW",Sd,Od),ca(["w","ww","W","WW"],function(a,b,c,d){b[d.substr(0,1)]=u(a)});var ue={dow:0,doy:6};U("d",0,"do","day"),U("dd",0,0,function(a){return this.localeData().weekdaysMin(this,a)}),U("ddd",0,0,function(a){return this.localeData().weekdaysShort(this,a)}),U("dddd",0,0,function(a){return this.localeData().weekdays(this,a)}),U("e",0,0,"weekday"),U("E",0,0,"isoWeekday"),J("day","d"),J("weekday","e"),J("isoWeekday","E"),M("day",11),M("weekday",11),M("isoWeekday",11),Z("d",Sd),Z("e",Sd),Z("E",Sd),Z("dd",function(a,b){return b.weekdaysMinRegex(a)}),Z("ddd",function(a,b){return b.weekdaysShortRegex(a)}),Z("dddd",function(a,b){return b.weekdaysRegex(a)}),ca(["dd","ddd","dddd"],function(a,b,c,d){var e=c._locale.weekdaysParse(a,d,c._strict);null!=e?b.d=e:n(c).invalidWeekday=a}),ca(["d","e","E"],function(a,b,c,d){b[d]=u(a)});var ve="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),we="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),xe="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),ye=be,ze=be,Ae=be;U("H",["HH",2],0,"hour"),U("h",["hh",2],0,Ra),U("k",["kk",2],0,Sa),U("hmm",0,0,function(){return""+Ra.apply(this)+T(this.minutes(),2)}),U("hmmss",0,0,function(){return""+Ra.apply(this)+T(this.minutes(),2)+T(this.seconds(),2)}),U("Hmm",0,0,function(){return""+this.hours()+T(this.minutes(),2)}),U("Hmmss",0,0,function(){return""+this.hours()+T(this.minutes(),2)+T(this.seconds(),2)}),Ta("a",!0),Ta("A",!1),J("hour","h"),M("hour",13),Z("a",Ua),Z("A",Ua),Z("H",Sd),Z("h",Sd),Z("k",Sd),Z("HH",Sd,Od),Z("hh",Sd,Od),Z("kk",Sd,Od),Z("hmm",Td),Z("hmmss",Ud),Z("Hmm",Td),Z("Hmmss",Ud),ba(["H","HH"],he),ba(["k","kk"],function(a,b,c){var d=u(a);b[he]=24===d?0:d}),ba(["a","A"],function(a,b,c){c._isPm=c._locale.isPM(a),c._meridiem=a}),ba(["h","hh"],function(a,b,c){b[he]=u(a),n(c).bigHour=!0}),ba("hmm",function(a,b,c){var d=a.length-2;b[he]=u(a.substr(0,d)),b[ie]=u(a.substr(d)),n(c).bigHour=!0}),ba("hmmss",function(a,b,c){var d=a.length-4,e=a.length-2;b[he]=u(a.substr(0,d)),b[ie]=u(a.substr(d,2)),b[je]=u(a.substr(e)),n(c).bigHour=!0}),ba("Hmm",function(a,b,c){var d=a.length-2;b[he]=u(a.substr(0,d)),b[ie]=u(a.substr(d))}),ba("Hmmss",function(a,b,c){var d=a.length-4,e=a.length-2;b[he]=u(a.substr(0,d)),b[ie]=u(a.substr(d,2)),b[je]=u(a.substr(e))});var Be,Ce=/[ap]\.?m?\.?/i,De=O("Hours",!0),Ee={calendar:Bd,longDateFormat:Cd,invalidDate:Dd,ordinal:Ed,dayOfMonthOrdinalParse:Fd,relativeTime:Gd,months:pe,monthsShort:qe,week:ue,weekdays:ve,weekdaysMin:xe,weekdaysShort:we,meridiemParse:Ce},Fe={},Ge={},He=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,Ie=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,Je=/Z|[+-]\d\d(?::?\d\d)?/,Ke=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],Le=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],Me=/^\/?Date\((\-?\d+)/i,Ne=/^((?:Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d?\d\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(?:\d\d)?\d\d\s)(\d\d:\d\d)(\:\d\d)?(\s(?:UT|GMT|[ECMP][SD]T|[A-IK-Za-ik-z]|[+-]\d{4}))$/;a.createFromInputFallback=x("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(a){a._d=new Date(a._i+(a._useUTC?" UTC":""))}),a.ISO_8601=function(){},a.RFC_2822=function(){};var Oe=x("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var a=tb.apply(null,arguments);return this.isValid()&&a.isValid()?a<this?this:a:p()}),Pe=x("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var a=tb.apply(null,arguments);return this.isValid()&&a.isValid()?a>this?this:a:p()}),Qe=function(){return Date.now?Date.now():+new Date},Re=["year","quarter","month","week","day","hour","minute","second","millisecond"];Db("Z",":"),Db("ZZ",""),Z("Z",_d),Z("ZZ",_d),ba(["Z","ZZ"],function(a,b,c){c._useUTC=!0,c._tzm=Eb(_d,a)});var Se=/([\+\-]|\d\d)/gi;a.updateOffset=function(){};var Te=/^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,Ue=/^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;Sb.fn=Ab.prototype,Sb.invalid=zb;var Ve=Wb(1,"add"),We=Wb(-1,"subtract");a.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",a.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var Xe=x("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(a){return void 0===a?this.localeData():this.locale(a)});U(0,["gg",2],0,function(){return this.weekYear()%100}),U(0,["GG",2],0,function(){return this.isoWeekYear()%100}),Dc("gggg","weekYear"),Dc("ggggg","weekYear"),Dc("GGGG","isoWeekYear"),Dc("GGGGG","isoWeekYear"),J("weekYear","gg"),J("isoWeekYear","GG"),M("weekYear",1),M("isoWeekYear",1),Z("G",Zd),Z("g",Zd),Z("GG",Sd,Od),Z("gg",Sd,Od),Z("GGGG",Wd,Qd),Z("gggg",Wd,Qd),Z("GGGGG",Xd,Rd),Z("ggggg",Xd,Rd),ca(["gggg","ggggg","GGGG","GGGGG"],function(a,b,c,d){b[d.substr(0,2)]=u(a)}),ca(["gg","GG"],function(b,c,d,e){c[e]=a.parseTwoDigitYear(b)}),U("Q",0,"Qo","quarter"),J("quarter","Q"),M("quarter",7),Z("Q",Nd),ba("Q",function(a,b){b[fe]=3*(u(a)-1)}),U("D",["DD",2],"Do","date"),J("date","D"),M("date",9),Z("D",Sd),Z("DD",Sd,Od),Z("Do",function(a,b){return a?b._dayOfMonthOrdinalParse||b._ordinalParse:b._dayOfMonthOrdinalParseLenient}),ba(["D","DD"],ge),ba("Do",function(a,b){b[ge]=u(a.match(Sd)[0],10)});var Ye=O("Date",!0);U("DDD",["DDDD",3],"DDDo","dayOfYear"),J("dayOfYear","DDD"),M("dayOfYear",4),Z("DDD",Vd),Z("DDDD",Pd),ba(["DDD","DDDD"],function(a,b,c){c._dayOfYear=u(a)}),U("m",["mm",2],0,"minute"),J("minute","m"),M("minute",14),Z("m",Sd),Z("mm",Sd,Od),ba(["m","mm"],ie);var Ze=O("Minutes",!1);U("s",["ss",2],0,"second"),J("second","s"),M("second",15),Z("s",Sd),Z("ss",Sd,Od),ba(["s","ss"],je);var $e=O("Seconds",!1);U("S",0,0,function(){return~~(this.millisecond()/100)}),U(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),U(0,["SSS",3],0,"millisecond"),U(0,["SSSS",4],0,function(){return 10*this.millisecond()}),U(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),U(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),U(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),U(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),U(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),J("millisecond","ms"),M("millisecond",16),Z("S",Vd,Nd),Z("SS",Vd,Od),Z("SSS",Vd,Pd);var _e;for(_e="SSSS";_e.length<=9;_e+="S")Z(_e,Yd);for(_e="S";_e.length<=9;_e+="S")ba(_e,Mc);var af=O("Milliseconds",!1);U("z",0,0,"zoneAbbr"),U("zz",0,0,"zoneName");var bf=r.prototype;bf.add=Ve,bf.calendar=Zb,bf.clone=$b,bf.diff=fc,bf.endOf=sc,bf.format=kc,bf.from=lc,bf.fromNow=mc,bf.to=nc,bf.toNow=oc,bf.get=R,bf.invalidAt=Bc,bf.isAfter=_b,bf.isBefore=ac,bf.isBetween=bc,bf.isSame=cc,bf.isSameOrAfter=dc,bf.isSameOrBefore=ec,bf.isValid=zc,bf.lang=Xe,bf.locale=pc,bf.localeData=qc,bf.max=Pe,bf.min=Oe,bf.parsingFlags=Ac,bf.set=S,bf.startOf=rc,bf.subtract=We,bf.toArray=wc,bf.toObject=xc,bf.toDate=vc,bf.toISOString=ic,bf.inspect=jc,bf.toJSON=yc,bf.toString=hc,bf.unix=uc,bf.valueOf=tc,bf.creationData=Cc,bf.year=te,bf.isLeapYear=ra,bf.weekYear=Ec,bf.isoWeekYear=Fc,bf.quarter=bf.quarters=Kc,bf.month=ka,bf.daysInMonth=la,bf.week=bf.weeks=Ba,bf.isoWeek=bf.isoWeeks=Ca,bf.weeksInYear=Hc,bf.isoWeeksInYear=Gc,bf.date=Ye,bf.day=bf.days=Ka,bf.weekday=La,bf.isoWeekday=Ma,bf.dayOfYear=Lc,bf.hour=bf.hours=De,bf.minute=bf.minutes=Ze,bf.second=bf.seconds=$e,bf.millisecond=bf.milliseconds=af,bf.utcOffset=Hb,bf.utc=Jb,bf.local=Kb,bf.parseZone=Lb,bf.hasAlignedHourOffset=Mb,bf.isDST=Nb,bf.isLocal=Pb,bf.isUtcOffset=Qb,bf.isUtc=Rb,bf.isUTC=Rb,bf.zoneAbbr=Nc,bf.zoneName=Oc,bf.dates=x("dates accessor is deprecated. Use date instead.",Ye),bf.months=x("months accessor is deprecated. Use month instead",ka),bf.years=x("years accessor is deprecated. Use year instead",te),bf.zone=x("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",Ib),bf.isDSTShifted=x("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",Ob);var cf=C.prototype;cf.calendar=D,cf.longDateFormat=E,cf.invalidDate=F,cf.ordinal=G,cf.preparse=Rc,cf.postformat=Rc,cf.relativeTime=H,cf.pastFuture=I,cf.set=A,cf.months=fa,cf.monthsShort=ga,cf.monthsParse=ia,cf.monthsRegex=na,cf.monthsShortRegex=ma,cf.week=ya,cf.firstDayOfYear=Aa,cf.firstDayOfWeek=za,cf.weekdays=Fa,cf.weekdaysMin=Ha,cf.weekdaysShort=Ga,cf.weekdaysParse=Ja,cf.weekdaysRegex=Na,cf.weekdaysShortRegex=Oa,cf.weekdaysMinRegex=Pa,cf.isPM=Va,cf.meridiem=Wa,$a("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===u(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c}}),a.lang=x("moment.lang is deprecated. Use moment.locale instead.",$a),a.langData=x("moment.langData is deprecated. Use moment.localeData instead.",bb);var df=Math.abs,ef=id("ms"),ff=id("s"),gf=id("m"),hf=id("h"),jf=id("d"),kf=id("w"),lf=id("M"),mf=id("y"),nf=kd("milliseconds"),of=kd("seconds"),pf=kd("minutes"),qf=kd("hours"),rf=kd("days"),sf=kd("months"),tf=kd("years"),uf=Math.round,vf={ss:44,s:45,m:45,h:22,d:26,M:11},wf=Math.abs,xf=Ab.prototype;return xf.isValid=yb,xf.abs=$c,xf.add=ad,xf.subtract=bd,xf.as=gd,xf.asMilliseconds=ef,xf.asSeconds=ff,xf.asMinutes=gf,xf.asHours=hf,xf.asDays=jf,xf.asWeeks=kf,xf.asMonths=lf,xf.asYears=mf,xf.valueOf=hd,xf._bubble=dd,xf.get=jd,xf.milliseconds=nf,xf.seconds=of,xf.minutes=pf,xf.hours=qf,xf.days=rf,xf.weeks=ld,xf.months=sf,xf.years=tf,xf.humanize=qd,xf.toISOString=rd,xf.toString=rd,xf.toJSON=rd,xf.locale=pc,xf.localeData=qc,xf.toIsoString=x("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",rd),xf.lang=Xe,U("X",0,0,"unix"),U("x",0,0,"valueOf"),Z("x",Zd),Z("X",ae),ba("X",function(a,b,c){c._d=new Date(1e3*parseFloat(a,10))}),ba("x",function(a,b,c){c._d=new Date(u(a))}),a.version="2.18.1",b(tb),a.fn=bf,a.min=vb,a.max=wb,a.now=Qe,a.utc=l,a.unix=Pc,a.months=Vc,a.isDate=h,a.locale=$a,a.invalid=p,a.duration=Sb,a.isMoment=s,a.weekdays=Xc,a.parseZone=Qc,a.localeData=bb,a.isDuration=Bb,a.monthsShort=Wc,a.weekdaysMin=Zc,a.defineLocale=_a,a.updateLocale=ab,a.locales=cb,a.weekdaysShort=Yc,a.normalizeUnits=K,a.relativeTimeRounding=od,a.relativeTimeThreshold=pd,a.calendarFormat=Yb,a.prototype=bf,a});;
/**
* @version: 2.1.25
* @author: Dan Grossman http://www.dangrossman.info/
* @copyright: Copyright (c) 2012-2017 Dan Grossman. All rights reserved.
* @license: Licensed under the MIT license. See http://www.opensource.org/licenses/mit-license.php
* @website: http://www.daterangepicker.com/
*/
// Follow the UMD template https://github.com/umdjs/umd/blob/master/templates/returnExportsGlobal.js
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Make globaly available as well
        define(['moment', 'jquery'], function (moment, jquery) {
            if (!jquery.fn) jquery.fn = {}; // webpack server rendering
            return (root.daterangepicker = factory(moment, jquery));
        });
    } else if (typeof module === 'object' && module.exports) {
        // Node / Browserify
        //isomorphic issue
        var jQuery = (typeof window != 'undefined') ? window.jQuery : undefined;
        if (!jQuery) {
            jQuery = require('jquery');
            if (!jQuery.fn) jQuery.fn = {};
        }
        var moment = (typeof window != 'undefined' && typeof window.moment != 'undefined') ? window.moment : require('moment');
        module.exports = factory(moment, jQuery);
    } else {
        // Browser globals
        root.daterangepicker = factory(root.moment, root.jQuery);
    }
}(this, function(moment, $) {
    var DateRangePicker = function(element, options, cb) {

        //default settings for options
        this.parentEl = 'body';
        this.element = $(element);
        this.startDate = moment().startOf('day');
        this.endDate = moment().endOf('day');
        this.minDate = false;
        this.maxDate = false;
        this.dateLimit = false;
        this.autoApply = false;
        this.singleDatePicker = false;
        this.showDropdowns = false;
        this.showWeekNumbers = false;
        this.showISOWeekNumbers = false;
        this.showCustomRangeLabel = true;
        this.timePicker = false;
        this.timePicker24Hour = false;
        this.timePickerIncrement = 1;
        this.timePickerSeconds = false;
        this.linkedCalendars = true;
        this.autoUpdateInput = true;
        this.alwaysShowCalendars = false;
        this.ranges = {};

        this.opens = 'right';
        if (this.element.hasClass('pull-right'))
            this.opens = 'left';

        this.drops = 'down';
        if (this.element.hasClass('dropup'))
            this.drops = 'up';

        this.buttonClasses = 'btn btn-sm';
        this.applyClass = 'btn-success';
        this.cancelClass = 'btn-default';

        this.locale = {
            direction: 'ltr',
            format: moment.localeData().longDateFormat('L'),
            separator: ' - ',
            applyLabel: 'Apply',
            cancelLabel: 'Cancel',
            weekLabel: 'W',
            customRangeLabel: 'Custom Range',
            daysOfWeek: moment.weekdaysMin(),
            monthNames: moment.monthsShort(),
            firstDay: moment.localeData().firstDayOfWeek()
        };

        this.callback = function() { };

        //some state information
        this.isShowing = false;
        this.leftCalendar = {};
        this.rightCalendar = {};

        //custom options from user
        if (typeof options !== 'object' || options === null)
            options = {};

        //allow setting options with data attributes
        //data-api options will be overwritten with custom javascript options
        options = $.extend(this.element.data(), options);

        //html template for the picker UI
        if (typeof options.template !== 'string' && !(options.template instanceof $))
            options.template = '<div class="daterangepicker dropdown-menu">' +
                '<div class="calendar left">' +
                    '<div class="daterangepicker_input">' +
                      '<input class="input-mini form-control" type="text" name="daterangepicker_start" value="" />' +
                      '<i class="fa fa-calendar glyphicon glyphicon-calendar"></i>' +
                    '</div>' +
                    '<div class="calendar-table"></div>' +
                    '<div class="calendar-time">' +
                        '<div></div>' +
                        '<i class="fa fa-clock-o glyphicon glyphicon-time"></i>' +
                      '</div>' +
                '</div>' +
                '<div class="calendar right">' +
                    '<div class="daterangepicker_input">' +
                      '<input class="input-mini form-control" type="text" name="daterangepicker_end" value="" />' +
                      '<i class="fa fa-calendar glyphicon glyphicon-calendar"></i>' +
                    '</div>' +
                    '<div class="calendar-table"></div>' +
                    '<div class="calendar-time">' +
                        '<div></div>' +
                        '<i class="fa fa-clock-o glyphicon glyphicon-time"></i>' +
                      '</div>' +
                '</div>' +
                '<div class="ranges">' +
                    '<div class="range_inputs">' +
                        '<button class="applyBtn" disabled="disabled" type="button"></button> ' +
                        '<button class="cancelBtn" type="button"></button>' +
                    '</div>' +
                '</div>' +
            '</div>';

        this.parentEl = (options.parentEl && $(options.parentEl).length) ? $(options.parentEl) : $(this.parentEl);
        this.container = $(options.template).appendTo(this.parentEl);

        //
        // handle all the possible options overriding defaults
        //

        if (typeof options.locale === 'object') {

            if (typeof options.locale.direction === 'string')
                this.locale.direction = options.locale.direction;

            if (typeof options.locale.format === 'string')
                this.locale.format = options.locale.format;

            if (typeof options.locale.separator === 'string')
                this.locale.separator = options.locale.separator;

            if (typeof options.locale.daysOfWeek === 'object')
                this.locale.daysOfWeek = options.locale.daysOfWeek.slice();

            if (typeof options.locale.monthNames === 'object')
              this.locale.monthNames = options.locale.monthNames.slice();

            if (typeof options.locale.firstDay === 'number')
              this.locale.firstDay = options.locale.firstDay;

            if (typeof options.locale.applyLabel === 'string')
              this.locale.applyLabel = options.locale.applyLabel;

            if (typeof options.locale.cancelLabel === 'string')
              this.locale.cancelLabel = options.locale.cancelLabel;

            if (typeof options.locale.weekLabel === 'string')
              this.locale.weekLabel = options.locale.weekLabel;

            if (typeof options.locale.customRangeLabel === 'string'){
                //Support unicode chars in the custom range name.
                var elem = document.createElement('textarea');
                elem.innerHTML = options.locale.customRangeLabel;
                var rangeHtml = elem.value;
                this.locale.customRangeLabel = rangeHtml;
            }
        }
        this.container.addClass(this.locale.direction);

        if (typeof options.startDate === 'string')
            this.startDate = moment(options.startDate, this.locale.format);

        if (typeof options.endDate === 'string')
            this.endDate = moment(options.endDate, this.locale.format);

        if (typeof options.minDate === 'string')
            this.minDate = moment(options.minDate, this.locale.format);

        if (typeof options.maxDate === 'string')
            this.maxDate = moment(options.maxDate, this.locale.format);

        if (typeof options.startDate === 'object')
            this.startDate = moment(options.startDate);

        if (typeof options.endDate === 'object')
            this.endDate = moment(options.endDate);

        if (typeof options.minDate === 'object')
            this.minDate = moment(options.minDate);

        if (typeof options.maxDate === 'object')
            this.maxDate = moment(options.maxDate);

        // sanity check for bad options
        if (this.minDate && this.startDate.isBefore(this.minDate))
            this.startDate = this.minDate.clone();

        // sanity check for bad options
        if (this.maxDate && this.endDate.isAfter(this.maxDate))
            this.endDate = this.maxDate.clone();

        if (typeof options.applyClass === 'string')
            this.applyClass = options.applyClass;

        if (typeof options.cancelClass === 'string')
            this.cancelClass = options.cancelClass;

        if (typeof options.dateLimit === 'object')
            this.dateLimit = options.dateLimit;

        if (typeof options.opens === 'string')
            this.opens = options.opens;

        if (typeof options.drops === 'string')
            this.drops = options.drops;

        if (typeof options.showWeekNumbers === 'boolean')
            this.showWeekNumbers = options.showWeekNumbers;

        if (typeof options.showISOWeekNumbers === 'boolean')
            this.showISOWeekNumbers = options.showISOWeekNumbers;

        if (typeof options.buttonClasses === 'string')
            this.buttonClasses = options.buttonClasses;

        if (typeof options.buttonClasses === 'object')
            this.buttonClasses = options.buttonClasses.join(' ');

        if (typeof options.showDropdowns === 'boolean')
            this.showDropdowns = options.showDropdowns;

        if (typeof options.showCustomRangeLabel === 'boolean')
            this.showCustomRangeLabel = options.showCustomRangeLabel;

        if (typeof options.singleDatePicker === 'boolean') {
            this.singleDatePicker = options.singleDatePicker;
            if (this.singleDatePicker)
                this.endDate = this.startDate.clone();
        }

        if (typeof options.timePicker === 'boolean')
            this.timePicker = options.timePicker;

        if (typeof options.timePickerSeconds === 'boolean')
            this.timePickerSeconds = options.timePickerSeconds;

        if (typeof options.timePickerIncrement === 'number')
            this.timePickerIncrement = options.timePickerIncrement;

        if (typeof options.timePicker24Hour === 'boolean')
            this.timePicker24Hour = options.timePicker24Hour;

        if (typeof options.autoApply === 'boolean')
            this.autoApply = options.autoApply;

        if (typeof options.autoUpdateInput === 'boolean')
            this.autoUpdateInput = options.autoUpdateInput;

        if (typeof options.linkedCalendars === 'boolean')
            this.linkedCalendars = options.linkedCalendars;

        if (typeof options.isInvalidDate === 'function')
            this.isInvalidDate = options.isInvalidDate;

        if (typeof options.isCustomDate === 'function')
            this.isCustomDate = options.isCustomDate;

        if (typeof options.alwaysShowCalendars === 'boolean')
            this.alwaysShowCalendars = options.alwaysShowCalendars;

        // update day names order to firstDay
        if (this.locale.firstDay != 0) {
            var iterator = this.locale.firstDay;
            while (iterator > 0) {
                this.locale.daysOfWeek.push(this.locale.daysOfWeek.shift());
                iterator--;
            }
        }

        var start, end, range;

        //if no start/end dates set, check if an input element contains initial values
        if (typeof options.startDate === 'undefined' && typeof options.endDate === 'undefined') {
            if ($(this.element).is('input[type=text]')) {
                var val = $(this.element).val(),
                    split = val.split(this.locale.separator);

                start = end = null;

                if (split.length == 2) {
                    start = moment(split[0], this.locale.format);
                    end = moment(split[1], this.locale.format);
                } else if (this.singleDatePicker && val !== "") {
                    start = moment(val, this.locale.format);
                    end = moment(val, this.locale.format);
                }
                if (start !== null && end !== null) {
                    this.setStartDate(start);
                    this.setEndDate(end);
                }
            }
        }

        if (typeof options.ranges === 'object') {
            for (range in options.ranges) {

                if (typeof options.ranges[range][0] === 'string')
                    start = moment(options.ranges[range][0], this.locale.format);
                else
                    start = moment(options.ranges[range][0]);

                if (typeof options.ranges[range][1] === 'string')
                    end = moment(options.ranges[range][1], this.locale.format);
                else
                    end = moment(options.ranges[range][1]);

                // If the start or end date exceed those allowed by the minDate or dateLimit
                // options, shorten the range to the allowable period.
                if (this.minDate && start.isBefore(this.minDate))
                    start = this.minDate.clone();

                var maxDate = this.maxDate;
                if (this.dateLimit && maxDate && start.clone().add(this.dateLimit).isAfter(maxDate))
                    maxDate = start.clone().add(this.dateLimit);
                if (maxDate && end.isAfter(maxDate))
                    end = maxDate.clone();

                // If the end of the range is before the minimum or the start of the range is
                // after the maximum, don't display this range option at all.
                if ((this.minDate && end.isBefore(this.minDate, this.timepicker ? 'minute' : 'day')) 
                  || (maxDate && start.isAfter(maxDate, this.timepicker ? 'minute' : 'day')))
                    continue;

                //Support unicode chars in the range names.
                var elem = document.createElement('textarea');
                elem.innerHTML = range;
                var rangeHtml = elem.value;

                this.ranges[rangeHtml] = [start, end];
            }

            var list = '<ul>';
            for (range in this.ranges) {
                list += '<li data-range-key="' + range + '">' + range + '</li>';
            }
            if (this.showCustomRangeLabel) {
                list += '<li data-range-key="' + this.locale.customRangeLabel + '">' + this.locale.customRangeLabel + '</li>';
            }
            list += '</ul>';
            this.container.find('.ranges').prepend(list);
        }

        if (typeof cb === 'function') {
            this.callback = cb;
        }

        if (!this.timePicker) {
            this.startDate = this.startDate.startOf('day');
            this.endDate = this.endDate.endOf('day');
            this.container.find('.calendar-time').hide();
        }

        //can't be used together for now
        if (this.timePicker && this.autoApply)
            this.autoApply = false;

        if (this.autoApply && typeof options.ranges !== 'object') {
            this.container.find('.ranges').hide();
        } else if (this.autoApply) {
            this.container.find('.applyBtn, .cancelBtn').addClass('hide');
        }

        if (this.singleDatePicker) {
            this.container.addClass('single');
            this.container.find('.calendar.left').addClass('single');
            this.container.find('.calendar.left').show();
            this.container.find('.calendar.right').hide();
            this.container.find('.daterangepicker_input input, .daterangepicker_input > i').hide();
            if (this.timePicker) {
                this.container.find('.ranges ul').hide();
            } else {
                this.container.find('.ranges').hide();
            }
        }

        if ((typeof options.ranges === 'undefined' && !this.singleDatePicker) || this.alwaysShowCalendars) {
            this.container.addClass('show-calendar');
        }

        this.container.addClass('opens' + this.opens);

        //swap the position of the predefined ranges if opens right
        if (typeof options.ranges !== 'undefined' && this.opens == 'right') {
            this.container.find('.ranges').prependTo( this.container.find('.calendar.left').parent() );
        }

        //apply CSS classes and labels to buttons
        this.container.find('.applyBtn, .cancelBtn').addClass(this.buttonClasses);
        if (this.applyClass.length)
            this.container.find('.applyBtn').addClass(this.applyClass);
        if (this.cancelClass.length)
            this.container.find('.cancelBtn').addClass(this.cancelClass);
        this.container.find('.applyBtn').html(this.locale.applyLabel);
        this.container.find('.cancelBtn').html(this.locale.cancelLabel);

        //
        // event listeners
        //

        this.container.find('.calendar')
            .on('click.daterangepicker', '.prev', $.proxy(this.clickPrev, this))
            .on('click.daterangepicker', '.next', $.proxy(this.clickNext, this))
            .on('mousedown.daterangepicker', 'td.available', $.proxy(this.clickDate, this))
            .on('mouseenter.daterangepicker', 'td.available', $.proxy(this.hoverDate, this))
            .on('mouseleave.daterangepicker', 'td.available', $.proxy(this.updateFormInputs, this))
            .on('change.daterangepicker', 'select.yearselect', $.proxy(this.monthOrYearChanged, this))
            .on('change.daterangepicker', 'select.monthselect', $.proxy(this.monthOrYearChanged, this))
            .on('change.daterangepicker', 'select.hourselect,select.minuteselect,select.secondselect,select.ampmselect', $.proxy(this.timeChanged, this))
            .on('click.daterangepicker', '.daterangepicker_input input', $.proxy(this.showCalendars, this))
            .on('focus.daterangepicker', '.daterangepicker_input input', $.proxy(this.formInputsFocused, this))
            .on('blur.daterangepicker', '.daterangepicker_input input', $.proxy(this.formInputsBlurred, this))
            .on('change.daterangepicker', '.daterangepicker_input input', $.proxy(this.formInputsChanged, this));

        this.container.find('.ranges')
            .on('click.daterangepicker', 'button.applyBtn', $.proxy(this.clickApply, this))
            .on('click.daterangepicker', 'button.cancelBtn', $.proxy(this.clickCancel, this))
            .on('click.daterangepicker', 'li', $.proxy(this.clickRange, this))
            .on('mouseenter.daterangepicker', 'li', $.proxy(this.hoverRange, this))
            .on('mouseleave.daterangepicker', 'li', $.proxy(this.updateFormInputs, this));

        if (this.element.is('input') || this.element.is('button')) {
            this.element.on({
                'click.daterangepicker': $.proxy(this.show, this),
                'focus.daterangepicker': $.proxy(this.show, this),
                'keyup.daterangepicker': $.proxy(this.elementChanged, this),
                'keydown.daterangepicker': $.proxy(this.keydown, this)
            });
        } else {
            this.element.on('click.daterangepicker', $.proxy(this.toggle, this));
        }

        //
        // if attached to a text input, set the initial value
        //

        if (this.element.is('input') && !this.singleDatePicker && this.autoUpdateInput) {
            this.element.val(this.startDate.format(this.locale.format) + this.locale.separator + this.endDate.format(this.locale.format));
            this.element.trigger('change');
        } else if (this.element.is('input') && this.autoUpdateInput) {
            this.element.val(this.startDate.format(this.locale.format));
            this.element.trigger('change');
        }

    };

    DateRangePicker.prototype = {

        constructor: DateRangePicker,

        setStartDate: function(startDate) {
            if (typeof startDate === 'string')
                this.startDate = moment(startDate, this.locale.format);

            if (typeof startDate === 'object')
                this.startDate = moment(startDate);

            if (!this.timePicker)
                this.startDate = this.startDate.startOf('day');

            if (this.timePicker && this.timePickerIncrement)
                this.startDate.minute(Math.round(this.startDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);

            if (this.minDate && this.startDate.isBefore(this.minDate)) {
                this.startDate = this.minDate.clone();
                if (this.timePicker && this.timePickerIncrement)
                    this.startDate.minute(Math.round(this.startDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);
            }

            if (this.maxDate && this.startDate.isAfter(this.maxDate)) {
                this.startDate = this.maxDate.clone();
                if (this.timePicker && this.timePickerIncrement)
                    this.startDate.minute(Math.floor(this.startDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);
            }

            if (!this.isShowing)
                this.updateElement();

            this.updateMonthsInView();
        },

        setEndDate: function(endDate) {
            if (typeof endDate === 'string')
                this.endDate = moment(endDate, this.locale.format);

            if (typeof endDate === 'object')
                this.endDate = moment(endDate);

            if (!this.timePicker)
                this.endDate = this.endDate.endOf('day');

            if (this.timePicker && this.timePickerIncrement)
                this.endDate.minute(Math.round(this.endDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);

            if (this.endDate.isBefore(this.startDate))
                this.endDate = this.startDate.clone();

            if (this.maxDate && this.endDate.isAfter(this.maxDate))
                this.endDate = this.maxDate.clone();

            if (this.dateLimit && this.startDate.clone().add(this.dateLimit).isBefore(this.endDate))
                this.endDate = this.startDate.clone().add(this.dateLimit);

            this.previousRightTime = this.endDate.clone();

            if (!this.isShowing)
                this.updateElement();

            this.updateMonthsInView();
        },

        isInvalidDate: function() {
            return false;
        },

        isCustomDate: function() {
            return false;
        },

        updateView: function() {
            if (this.timePicker) {
                this.renderTimePicker('left');
                this.renderTimePicker('right');
                if (!this.endDate) {
                    this.container.find('.right .calendar-time select').attr('disabled', 'disabled').addClass('disabled');
                } else {
                    this.container.find('.right .calendar-time select').removeAttr('disabled').removeClass('disabled');
                }
            }
            if (this.endDate) {
                this.container.find('input[name="daterangepicker_end"]').removeClass('active');
                this.container.find('input[name="daterangepicker_start"]').addClass('active');
            } else {
                this.container.find('input[name="daterangepicker_end"]').addClass('active');
                this.container.find('input[name="daterangepicker_start"]').removeClass('active');
            }
            this.updateMonthsInView();
            this.updateCalendars();
            this.updateFormInputs();
        },

        updateMonthsInView: function() {
            if (this.endDate) {

                //if both dates are visible already, do nothing
                if (!this.singleDatePicker && this.leftCalendar.month && this.rightCalendar.month &&
                    (this.startDate.format('YYYY-MM') == this.leftCalendar.month.format('YYYY-MM') || this.startDate.format('YYYY-MM') == this.rightCalendar.month.format('YYYY-MM'))
                    &&
                    (this.endDate.format('YYYY-MM') == this.leftCalendar.month.format('YYYY-MM') || this.endDate.format('YYYY-MM') == this.rightCalendar.month.format('YYYY-MM'))
                    ) {
                    return;
                }

                this.leftCalendar.month = this.startDate.clone().date(2);
                if (!this.linkedCalendars && (this.endDate.month() != this.startDate.month() || this.endDate.year() != this.startDate.year())) {
                    this.rightCalendar.month = this.endDate.clone().date(2);
                } else {
                    this.rightCalendar.month = this.startDate.clone().date(2).add(1, 'month');
                }

            } else {
                if (this.leftCalendar.month.format('YYYY-MM') != this.startDate.format('YYYY-MM') && this.rightCalendar.month.format('YYYY-MM') != this.startDate.format('YYYY-MM')) {
                    this.leftCalendar.month = this.startDate.clone().date(2);
                    this.rightCalendar.month = this.startDate.clone().date(2).add(1, 'month');
                }
            }
            if (this.maxDate && this.linkedCalendars && !this.singleDatePicker && this.rightCalendar.month > this.maxDate) {
              this.rightCalendar.month = this.maxDate.clone().date(2);
              this.leftCalendar.month = this.maxDate.clone().date(2).subtract(1, 'month');
            }
        },

        updateCalendars: function() {

            if (this.timePicker) {
                var hour, minute, second;
                if (this.endDate) {
                    hour = parseInt(this.container.find('.left .hourselect').val(), 10);
                    minute = parseInt(this.container.find('.left .minuteselect').val(), 10);
                    second = this.timePickerSeconds ? parseInt(this.container.find('.left .secondselect').val(), 10) : 0;
                    if (!this.timePicker24Hour) {
                        var ampm = this.container.find('.left .ampmselect').val();
                        if (ampm === 'PM' && hour < 12)
                            hour += 12;
                        if (ampm === 'AM' && hour === 12)
                            hour = 0;
                    }
                } else {
                    hour = parseInt(this.container.find('.right .hourselect').val(), 10);
                    minute = parseInt(this.container.find('.right .minuteselect').val(), 10);
                    second = this.timePickerSeconds ? parseInt(this.container.find('.right .secondselect').val(), 10) : 0;
                    if (!this.timePicker24Hour) {
                        var ampm = this.container.find('.right .ampmselect').val();
                        if (ampm === 'PM' && hour < 12)
                            hour += 12;
                        if (ampm === 'AM' && hour === 12)
                            hour = 0;
                    }
                }
                this.leftCalendar.month.hour(hour).minute(minute).second(second);
                this.rightCalendar.month.hour(hour).minute(minute).second(second);
            }

            this.renderCalendar('left');
            this.renderCalendar('right');

            //highlight any predefined range matching the current start and end dates
            this.container.find('.ranges li').removeClass('active');
            if (this.endDate == null) return;

            this.calculateChosenLabel();
        },

        renderCalendar: function(side) {

            //
            // Build the matrix of dates that will populate the calendar
            //

            var calendar = side == 'left' ? this.leftCalendar : this.rightCalendar;
            var month = calendar.month.month();
            var year = calendar.month.year();
            var hour = calendar.month.hour();
            var minute = calendar.month.minute();
            var second = calendar.month.second();
            var daysInMonth = moment([year, month]).daysInMonth();
            var firstDay = moment([year, month, 1]);
            var lastDay = moment([year, month, daysInMonth]);
            var lastMonth = moment(firstDay).subtract(1, 'month').month();
            var lastYear = moment(firstDay).subtract(1, 'month').year();
            var daysInLastMonth = moment([lastYear, lastMonth]).daysInMonth();
            var dayOfWeek = firstDay.day();

            //initialize a 6 rows x 7 columns array for the calendar
            var calendar = [];
            calendar.firstDay = firstDay;
            calendar.lastDay = lastDay;

            for (var i = 0; i < 6; i++) {
                calendar[i] = [];
            }

            //populate the calendar with date objects
            var startDay = daysInLastMonth - dayOfWeek + this.locale.firstDay + 1;
            if (startDay > daysInLastMonth)
                startDay -= 7;

            if (dayOfWeek == this.locale.firstDay)
                startDay = daysInLastMonth - 6;

            var curDate = moment([lastYear, lastMonth, startDay, 12, minute, second]);

            var col, row;
            for (var i = 0, col = 0, row = 0; i < 42; i++, col++, curDate = moment(curDate).add(24, 'hour')) {
                if (i > 0 && col % 7 === 0) {
                    col = 0;
                    row++;
                }
                calendar[row][col] = curDate.clone().hour(hour).minute(minute).second(second);
                curDate.hour(12);

                if (this.minDate && calendar[row][col].format('YYYY-MM-DD') == this.minDate.format('YYYY-MM-DD') && calendar[row][col].isBefore(this.minDate) && side == 'left') {
                    calendar[row][col] = this.minDate.clone();
                }

                if (this.maxDate && calendar[row][col].format('YYYY-MM-DD') == this.maxDate.format('YYYY-MM-DD') && calendar[row][col].isAfter(this.maxDate) && side == 'right') {
                    calendar[row][col] = this.maxDate.clone();
                }

            }

            //make the calendar object available to hoverDate/clickDate
            if (side == 'left') {
                this.leftCalendar.calendar = calendar;
            } else {
                this.rightCalendar.calendar = calendar;
            }

            //
            // Display the calendar
            //

            var minDate = side == 'left' ? this.minDate : this.startDate;
            var maxDate = this.maxDate;
            var selected = side == 'left' ? this.startDate : this.endDate;
            var arrow = this.locale.direction == 'ltr' ? {left: 'chevron-left', right: 'chevron-right'} : {left: 'chevron-right', right: 'chevron-left'};

            var html = '<table class="table-condensed">';
            html += '<thead>';
            html += '<tr>';

            // add empty cell for week number
            if (this.showWeekNumbers || this.showISOWeekNumbers)
                html += '<th></th>';

            if ((!minDate || minDate.isBefore(calendar.firstDay)) && (!this.linkedCalendars || side == 'left')) {
                html += '<th class="prev available"><i class="fa fa-' + arrow.left + ' glyphicon glyphicon-' + arrow.left + '"></i></th>';
            } else {
                html += '<th></th>';
            }

            var dateHtml = this.locale.monthNames[calendar[1][1].month()] + calendar[1][1].format(" YYYY");

            if (this.showDropdowns) {
                var currentMonth = calendar[1][1].month();
                var currentYear = calendar[1][1].year();
                var maxYear = (maxDate && maxDate.year()) || (currentYear + 5);
                var minYear = (minDate && minDate.year()) || (currentYear - 50);
                var inMinYear = currentYear == minYear;
                var inMaxYear = currentYear == maxYear;

                var monthHtml = '<select class="monthselect">';
                for (var m = 0; m < 12; m++) {
                    if ((!inMinYear || m >= minDate.month()) && (!inMaxYear || m <= maxDate.month())) {
                        monthHtml += "<option value='" + m + "'" +
                            (m === currentMonth ? " selected='selected'" : "") +
                            ">" + this.locale.monthNames[m] + "</option>";
                    } else {
                        monthHtml += "<option value='" + m + "'" +
                            (m === currentMonth ? " selected='selected'" : "") +
                            " disabled='disabled'>" + this.locale.monthNames[m] + "</option>";
                    }
                }
                monthHtml += "</select>";

                var yearHtml = '<select class="yearselect">';
                for (var y = minYear; y <= maxYear; y++) {
                    yearHtml += '<option value="' + y + '"' +
                        (y === currentYear ? ' selected="selected"' : '') +
                        '>' + y + '</option>';
                }
                yearHtml += '</select>';

                dateHtml = monthHtml + yearHtml;
            }

            html += '<th colspan="5" class="month">' + dateHtml + '</th>';
            if ((!maxDate || maxDate.isAfter(calendar.lastDay)) && (!this.linkedCalendars || side == 'right' || this.singleDatePicker)) {
                html += '<th class="next available"><i class="fa fa-' + arrow.right + ' glyphicon glyphicon-' + arrow.right + '"></i></th>';
            } else {
                html += '<th></th>';
            }

            html += '</tr>';
            html += '<tr>';

            // add week number label
            if (this.showWeekNumbers || this.showISOWeekNumbers)
                html += '<th class="week">' + this.locale.weekLabel + '</th>';

            $.each(this.locale.daysOfWeek, function(index, dayOfWeek) {
                html += '<th>' + dayOfWeek + '</th>';
            });

            html += '</tr>';
            html += '</thead>';
            html += '<tbody>';

            //adjust maxDate to reflect the dateLimit setting in order to
            //grey out end dates beyond the dateLimit
            if (this.endDate == null && this.dateLimit) {
                var maxLimit = this.startDate.clone().add(this.dateLimit).endOf('day');
                if (!maxDate || maxLimit.isBefore(maxDate)) {
                    maxDate = maxLimit;
                }
            }

            for (var row = 0; row < 6; row++) {
                html += '<tr>';

                // add week number
                if (this.showWeekNumbers)
                    html += '<td class="week">' + calendar[row][0].week() + '</td>';
                else if (this.showISOWeekNumbers)
                    html += '<td class="week">' + calendar[row][0].isoWeek() + '</td>';

                for (var col = 0; col < 7; col++) {

                    var classes = [];

                    //highlight today's date
                    if (calendar[row][col].isSame(new Date(), "day"))
                        classes.push('today');

                    //highlight weekends
                    if (calendar[row][col].isoWeekday() > 5)
                        classes.push('weekend');

                    //grey out the dates in other months displayed at beginning and end of this calendar
                    if (calendar[row][col].month() != calendar[1][1].month())
                        classes.push('off');

                    //don't allow selection of dates before the minimum date
                    if (this.minDate && calendar[row][col].isBefore(this.minDate, 'day'))
                        classes.push('off', 'disabled');

                    //don't allow selection of dates after the maximum date
                    if (maxDate && calendar[row][col].isAfter(maxDate, 'day'))
                        classes.push('off', 'disabled');

                    //don't allow selection of date if a custom function decides it's invalid
                    if (this.isInvalidDate(calendar[row][col]))
                        classes.push('off', 'disabled');

                    //highlight the currently selected start date
                    if (calendar[row][col].format('YYYY-MM-DD') == this.startDate.format('YYYY-MM-DD'))
                        classes.push('active', 'start-date');

                    //highlight the currently selected end date
                    if (this.endDate != null && calendar[row][col].format('YYYY-MM-DD') == this.endDate.format('YYYY-MM-DD'))
                        classes.push('active', 'end-date');

                    //highlight dates in-between the selected dates
                    if (this.endDate != null && calendar[row][col] > this.startDate && calendar[row][col] < this.endDate)
                        classes.push('in-range');

                    //apply custom classes for this date
                    var isCustom = this.isCustomDate(calendar[row][col]);
                    if (isCustom !== false) {
                        if (typeof isCustom === 'string')
                            classes.push(isCustom);
                        else
                            Array.prototype.push.apply(classes, isCustom);
                    }

                    var cname = '', disabled = false;
                    for (var i = 0; i < classes.length; i++) {
                        cname += classes[i] + ' ';
                        if (classes[i] == 'disabled')
                            disabled = true;
                    }
                    if (!disabled)
                        cname += 'available';

                    html += '<td class="' + cname.replace(/^\s+|\s+$/g, '') + '" data-title="' + 'r' + row + 'c' + col + '">' + calendar[row][col].date() + '</td>';

                }
                html += '</tr>';
            }

            html += '</tbody>';
            html += '</table>';

            this.container.find('.calendar.' + side + ' .calendar-table').html(html);

        },

        renderTimePicker: function(side) {

            // Don't bother updating the time picker if it's currently disabled
            // because an end date hasn't been clicked yet
            if (side == 'right' && !this.endDate) return;

            var html, selected, minDate, maxDate = this.maxDate;

            if (this.dateLimit && (!this.maxDate || this.startDate.clone().add(this.dateLimit).isAfter(this.maxDate)))
                maxDate = this.startDate.clone().add(this.dateLimit);

            if (side == 'left') {
                selected = this.startDate.clone();
                minDate = this.minDate;
            } else if (side == 'right') {
                selected = this.endDate.clone();
                minDate = this.startDate;

                //Preserve the time already selected
                var timeSelector = this.container.find('.calendar.right .calendar-time div');
                if (timeSelector.html() != '') {

                    selected.hour(timeSelector.find('.hourselect option:selected').val() || selected.hour());
                    selected.minute(timeSelector.find('.minuteselect option:selected').val() || selected.minute());
                    selected.second(timeSelector.find('.secondselect option:selected').val() || selected.second());

                    if (!this.timePicker24Hour) {
                        var ampm = timeSelector.find('.ampmselect option:selected').val();
                        if (ampm === 'PM' && selected.hour() < 12)
                            selected.hour(selected.hour() + 12);
                        if (ampm === 'AM' && selected.hour() === 12)
                            selected.hour(0);
                    }

                }

                if (selected.isBefore(this.startDate))
                    selected = this.startDate.clone();

                if (maxDate && selected.isAfter(maxDate))
                    selected = maxDate.clone();

            }

            //
            // hours
            //

            html = '<select class="hourselect">';

            var start = this.timePicker24Hour ? 0 : 1;
            var end = this.timePicker24Hour ? 23 : 12;

            for (var i = start; i <= end; i++) {
                var i_in_24 = i;
                if (!this.timePicker24Hour)
                    i_in_24 = selected.hour() >= 12 ? (i == 12 ? 12 : i + 12) : (i == 12 ? 0 : i);

                var time = selected.clone().hour(i_in_24);
                var disabled = false;
                if (minDate && time.minute(59).isBefore(minDate))
                    disabled = true;
                if (maxDate && time.minute(0).isAfter(maxDate))
                    disabled = true;

                if (i_in_24 == selected.hour() && !disabled) {
                    html += '<option value="' + i + '" selected="selected">' + i + '</option>';
                } else if (disabled) {
                    html += '<option value="' + i + '" disabled="disabled" class="disabled">' + i + '</option>';
                } else {
                    html += '<option value="' + i + '">' + i + '</option>';
                }
            }

            html += '</select> ';

            //
            // minutes
            //

            html += ': <select class="minuteselect">';

            for (var i = 0; i < 60; i += this.timePickerIncrement) {
                var padded = i < 10 ? '0' + i : i;
                var time = selected.clone().minute(i);

                var disabled = false;
                if (minDate && time.second(59).isBefore(minDate))
                    disabled = true;
                if (maxDate && time.second(0).isAfter(maxDate))
                    disabled = true;

                if (selected.minute() == i && !disabled) {
                    html += '<option value="' + i + '" selected="selected">' + padded + '</option>';
                } else if (disabled) {
                    html += '<option value="' + i + '" disabled="disabled" class="disabled">' + padded + '</option>';
                } else {
                    html += '<option value="' + i + '">' + padded + '</option>';
                }
            }

            html += '</select> ';

            //
            // seconds
            //

            if (this.timePickerSeconds) {
                html += ': <select class="secondselect">';

                for (var i = 0; i < 60; i++) {
                    var padded = i < 10 ? '0' + i : i;
                    var time = selected.clone().second(i);

                    var disabled = false;
                    if (minDate && time.isBefore(minDate))
                        disabled = true;
                    if (maxDate && time.isAfter(maxDate))
                        disabled = true;

                    if (selected.second() == i && !disabled) {
                        html += '<option value="' + i + '" selected="selected">' + padded + '</option>';
                    } else if (disabled) {
                        html += '<option value="' + i + '" disabled="disabled" class="disabled">' + padded + '</option>';
                    } else {
                        html += '<option value="' + i + '">' + padded + '</option>';
                    }
                }

                html += '</select> ';
            }

            //
            // AM/PM
            //

            if (!this.timePicker24Hour) {
                html += '<select class="ampmselect">';

                var am_html = '';
                var pm_html = '';

                if (minDate && selected.clone().hour(12).minute(0).second(0).isBefore(minDate))
                    am_html = ' disabled="disabled" class="disabled"';

                if (maxDate && selected.clone().hour(0).minute(0).second(0).isAfter(maxDate))
                    pm_html = ' disabled="disabled" class="disabled"';

                if (selected.hour() >= 12) {
                    html += '<option value="AM"' + am_html + '>AM</option><option value="PM" selected="selected"' + pm_html + '>PM</option>';
                } else {
                    html += '<option value="AM" selected="selected"' + am_html + '>AM</option><option value="PM"' + pm_html + '>PM</option>';
                }

                html += '</select>';
            }

            this.container.find('.calendar.' + side + ' .calendar-time div').html(html);

        },

        updateFormInputs: function() {

            //ignore mouse movements while an above-calendar text input has focus
            if (this.container.find('input[name=daterangepicker_start]').is(":focus") || this.container.find('input[name=daterangepicker_end]').is(":focus"))
                return;

            this.container.find('input[name=daterangepicker_start]').val(this.startDate.format(this.locale.format));
            if (this.endDate)
                this.container.find('input[name=daterangepicker_end]').val(this.endDate.format(this.locale.format));

            if (this.singleDatePicker || (this.endDate && (this.startDate.isBefore(this.endDate) || this.startDate.isSame(this.endDate)))) {
                this.container.find('button.applyBtn').removeAttr('disabled');
            } else {
                this.container.find('button.applyBtn').attr('disabled', 'disabled');
            }

        },

        move: function() {
            var parentOffset = { top: 0, left: 0 },
                containerTop;
            var parentRightEdge = $(window).width();
            if (!this.parentEl.is('body')) {
                parentOffset = {
                    top: this.parentEl.offset().top - this.parentEl.scrollTop(),
                    left: this.parentEl.offset().left - this.parentEl.scrollLeft()
                };
                parentRightEdge = this.parentEl[0].clientWidth + this.parentEl.offset().left;
            }

            if (this.drops == 'up')
                containerTop = this.element.offset().top - this.container.outerHeight() - parentOffset.top;
            else
                containerTop = this.element.offset().top + this.element.outerHeight() - parentOffset.top;
            this.container[this.drops == 'up' ? 'addClass' : 'removeClass']('dropup');

            if (this.opens == 'left') {
                this.container.css({
                    top: containerTop,
                    right: parentRightEdge - this.element.offset().left - this.element.outerWidth(),
                    left: 'auto'
                });
                if (this.container.offset().left < 0) {
                    this.container.css({
                        right: 'auto',
                        left: 9
                    });
                }
            } else if (this.opens == 'center') {
                this.container.css({
                    top: containerTop,
                    left: this.element.offset().left - parentOffset.left + this.element.outerWidth() / 2
                            - this.container.outerWidth() / 2,
                    right: 'auto'
                });
                if (this.container.offset().left < 0) {
                    this.container.css({
                        right: 'auto',
                        left: 9
                    });
                }
            } else {
                this.container.css({
                    top: containerTop,
                    left: this.element.offset().left - parentOffset.left,
                    right: 'auto'
                });
                if (this.container.offset().left + this.container.outerWidth() > $(window).width()) {
                    this.container.css({
                        left: 'auto',
                        right: 0
                    });
                }
            }
        },

        show: function(e) {
            if (this.isShowing) return;

            // Create a click proxy that is private to this instance of datepicker, for unbinding
            this._outsideClickProxy = $.proxy(function(e) { this.outsideClick(e); }, this);

            // Bind global datepicker mousedown for hiding and
            $(document)
              .on('mousedown.daterangepicker', this._outsideClickProxy)
              // also support mobile devices
              .on('touchend.daterangepicker', this._outsideClickProxy)
              // also explicitly play nice with Bootstrap dropdowns, which stopPropagation when clicking them
              .on('click.daterangepicker', '[data-toggle=dropdown]', this._outsideClickProxy)
              // and also close when focus changes to outside the picker (eg. tabbing between controls)
              .on('focusin.daterangepicker', this._outsideClickProxy);

            // Reposition the picker if the window is resized while it's open
            $(window).on('resize.daterangepicker', $.proxy(function(e) { this.move(e); }, this));

            this.oldStartDate = this.startDate.clone();
            this.oldEndDate = this.endDate.clone();
            this.previousRightTime = this.endDate.clone();

            this.updateView();
            this.container.show();
            this.move();
            this.element.trigger('show.daterangepicker', this);
            this.isShowing = true;
        },

        hide: function(e) {
            if (!this.isShowing) return;

            //incomplete date selection, revert to last values
            if (!this.endDate) {
                this.startDate = this.oldStartDate.clone();
                this.endDate = this.oldEndDate.clone();
            }

            //if a new date range was selected, invoke the user callback function
            if (!this.startDate.isSame(this.oldStartDate) || !this.endDate.isSame(this.oldEndDate))
                this.callback(this.startDate, this.endDate, this.chosenLabel);

            //if picker is attached to a text input, update it
            this.updateElement();

            $(document).off('.daterangepicker');
            $(window).off('.daterangepicker');
            this.container.hide();
            this.element.trigger('hide.daterangepicker', this);
            this.isShowing = false;
        },

        toggle: function(e) {
            if (this.isShowing) {
                this.hide();
            } else {
                this.show();
            }
        },

        outsideClick: function(e) {
            var target = $(e.target);
            // if the page is clicked anywhere except within the daterangerpicker/button
            // itself then call this.hide()
            if (
                // ie modal dialog fix
                e.type == "focusin" ||
                target.closest(this.element).length ||
                target.closest(this.container).length ||
                target.closest('.calendar-table').length
                ) return;
            this.hide();
            this.element.trigger('outsideClick.daterangepicker', this);
        },

        showCalendars: function() {
            this.container.addClass('show-calendar');
            this.move();
            this.element.trigger('showCalendar.daterangepicker', this);
        },

        hideCalendars: function() {
            this.container.removeClass('show-calendar');
            this.element.trigger('hideCalendar.daterangepicker', this);
        },

        hoverRange: function(e) {

            //ignore mouse movements while an above-calendar text input has focus
            if (this.container.find('input[name=daterangepicker_start]').is(":focus") || this.container.find('input[name=daterangepicker_end]').is(":focus"))
                return;

            var label = e.target.getAttribute('data-range-key');

            if (label == this.locale.customRangeLabel) {
                this.updateView();
            } else {
                var dates = this.ranges[label];
                this.container.find('input[name=daterangepicker_start]').val(dates[0].format(this.locale.format));
                this.container.find('input[name=daterangepicker_end]').val(dates[1].format(this.locale.format));
            }

        },

        clickRange: function(e) {
            var label = e.target.getAttribute('data-range-key');
            this.chosenLabel = label;
            if (label == this.locale.customRangeLabel) {
                this.showCalendars();
            } else {
                var dates = this.ranges[label];
                this.startDate = dates[0];
                this.endDate = dates[1];

                if (!this.timePicker) {
                    this.startDate.startOf('day');
                    this.endDate.endOf('day');
                }

                if (!this.alwaysShowCalendars)
                    this.hideCalendars();
                this.clickApply();
            }
        },

        clickPrev: function(e) {
            var cal = $(e.target).parents('.calendar');
            if (cal.hasClass('left')) {
                this.leftCalendar.month.subtract(1, 'month');
                if (this.linkedCalendars)
                    this.rightCalendar.month.subtract(1, 'month');
            } else {
                this.rightCalendar.month.subtract(1, 'month');
            }
            this.updateCalendars();
        },

        clickNext: function(e) {
            var cal = $(e.target).parents('.calendar');
            if (cal.hasClass('left')) {
                this.leftCalendar.month.add(1, 'month');
            } else {
                this.rightCalendar.month.add(1, 'month');
                if (this.linkedCalendars)
                    this.leftCalendar.month.add(1, 'month');
            }
            this.updateCalendars();
        },

        hoverDate: function(e) {

            //ignore mouse movements while an above-calendar text input has focus
            //if (this.container.find('input[name=daterangepicker_start]').is(":focus") || this.container.find('input[name=daterangepicker_end]').is(":focus"))
            //    return;

            //ignore dates that can't be selected
            if (!$(e.target).hasClass('available')) return;

            //have the text inputs above calendars reflect the date being hovered over
            var title = $(e.target).attr('data-title');
            var row = title.substr(1, 1);
            var col = title.substr(3, 1);
            var cal = $(e.target).parents('.calendar');
            var date = cal.hasClass('left') ? this.leftCalendar.calendar[row][col] : this.rightCalendar.calendar[row][col];
            
            // HB Customization << Start
//            if (this.endDate && !this.container.find('input[name=daterangepicker_start]').is(":focus")) {
//                this.container.find('input[name=daterangepicker_start]').val(date.format(this.locale.format));
//            } else if (!this.endDate && !this.container.find('input[name=daterangepicker_end]').is(":focus")) {
//                this.container.find('input[name=daterangepicker_end]').val(date.format(this.locale.format));
//            }

            var isLeft = $(e.target).closest('.calendar').hasClass('left');
            if(isLeft){
                this.container.find('input[name=daterangepicker_start]').val(date.format(this.locale.format));
            }else{
                this.container.find('input[name=daterangepicker_end]').val(date.format(this.locale.format));
            }
                
            // HB Customization >> END
                
            //highlight the dates between the start date and the date being hovered as a potential end date
            var leftCalendar = this.leftCalendar;
            var rightCalendar = this.rightCalendar;
            var startDate = this.startDate;
            if (!this.endDate) {
                this.container.find('.calendar tbody td').each(function(index, el) {

                    //skip week numbers, only look at dates
                    if ($(el).hasClass('week')) return;

                    var title = $(el).attr('data-title');
                    var row = title.substr(1, 1);
                    var col = title.substr(3, 1);
                    var cal = $(el).parents('.calendar');
                    var dt = cal.hasClass('left') ? leftCalendar.calendar[row][col] : rightCalendar.calendar[row][col];

                    if ((dt.isAfter(startDate) && dt.isBefore(date)) || dt.isSame(date, 'day')) {
                        $(el).addClass('in-range');
                    } else {
                        $(el).removeClass('in-range');
                    }

                });
            }

        },

        clickDate: function(e) {

            if (!$(e.target).hasClass('available')) return;

            var title = $(e.target).attr('data-title');
            var row = title.substr(1, 1);
            var col = title.substr(3, 1);
            var cal = $(e.target).parents('.calendar');
            var date = cal.hasClass('left') ? this.leftCalendar.calendar[row][col] : this.rightCalendar.calendar[row][col];

            //
            // this function needs to do a few things:
            // * alternate between selecting a start and end date for the range,
            // * if the time picker is enabled, apply the hour/minute/second from the select boxes to the clicked date
            // * if autoapply is enabled, and an end date was chosen, apply the selection
            // * if single date picker mode, and time picker isn't enabled, apply the selection immediately
            // * if one of the inputs above the calendars was focused, cancel that manual input
            //
            var isLeft = $(e.target).closest('.calendar').hasClass('left');
            if (this.endDate || date.isBefore(this.startDate, 'day')) { //picking start
                if (this.timePicker) {
                    var hour = parseInt(this.container.find('.left .hourselect').val(), 10);
                    if (!this.timePicker24Hour) {
                        var ampm = this.container.find('.left .ampmselect').val();
                        if (ampm === 'PM' && hour < 12)
                            hour += 12;
                        if (ampm === 'AM' && hour === 12)
                            hour = 0;
                    }
                    var minute = parseInt(this.container.find('.left .minuteselect').val(), 10);
                    var second = this.timePickerSeconds ? parseInt(this.container.find('.left .secondselect').val(), 10) : 0;
                    date = date.clone().hour(hour).minute(minute).second(second);
                }
                // HB Customization << Start
                //this.endDate = null;
                //this.setStartDate(date.clone());
                if(isLeft){
                    if(this.startDate.format('YYYY-MM-DD') == this.endDate.format('YYYY-MM-DD')){
                        this.endDate = null;
                    }
                    this.setStartDate(date.clone());
                }else{
                    this.setEndDate(date.clone());
                }
                
                // HB Customization >> END
            } else if (!this.endDate && date.isBefore(this.startDate)) {
                //special case: clicking the same date for start/end,
                //but the time of the end date is before the start date
                this.setEndDate(this.startDate.clone());
            } else { // picking end
                if (this.timePicker) {
                    var hour = parseInt(this.container.find('.right .hourselect').val(), 10);
                    if (!this.timePicker24Hour) {
                        var ampm = this.container.find('.right .ampmselect').val();
                        if (ampm === 'PM' && hour < 12)
                            hour += 12;
                        if (ampm === 'AM' && hour === 12)
                            hour = 0;
                    }
                    var minute = parseInt(this.container.find('.right .minuteselect').val(), 10);
                    var second = this.timePickerSeconds ? parseInt(this.container.find('.right .secondselect').val(), 10) : 0;
                    date = date.clone().hour(hour).minute(minute).second(second);
                }
                
                this.setEndDate(date.clone());
                if (this.autoApply) {
                  this.calculateChosenLabel();
                  this.clickApply();
                }
            }

            if (this.singleDatePicker) {
                this.setEndDate(this.startDate);
                if (!this.timePicker)
                    this.clickApply();
            }
            this.updateView();

            //This is to cancel the blur event handler if the mouse was in one of the inputs
            e.stopPropagation();

        },

        calculateChosenLabel: function () {
            var customRange = true;
            var i = 0;
            for (var range in this.ranges) {
                if (this.timePicker) {
                    if (this.startDate.isSame(this.ranges[range][0]) && this.endDate.isSame(this.ranges[range][1])) {
                        customRange = false;
                        this.chosenLabel = this.container.find('.ranges li:eq(' + i + ')').addClass('active').html();
                        break;
                    }
                } else {
                    //ignore times when comparing dates if time picker is not enabled
                    if (this.startDate.format('YYYY-MM-DD') == this.ranges[range][0].format('YYYY-MM-DD') && this.endDate.format('YYYY-MM-DD') == this.ranges[range][1].format('YYYY-MM-DD')) {
                        customRange = false;
                        this.chosenLabel = this.container.find('.ranges li:eq(' + i + ')').addClass('active').html();
                        break;
                    }
                }
                i++;
            }
            if (customRange) {
                if (this.showCustomRangeLabel) {
                    this.chosenLabel = this.container.find('.ranges li:last').addClass('active').html();
                } else {
                    this.chosenLabel = null;
                }
                this.showCalendars();
            }
        },

        clickApply: function(e) {
            this.hide();
            this.element.trigger('apply.daterangepicker', this);
        },

        clickCancel: function(e) {
            this.startDate = this.oldStartDate;
            this.endDate = this.oldEndDate;
            this.hide();
            this.element.trigger('cancel.daterangepicker', this);
        },

        monthOrYearChanged: function(e) {
            var isLeft = $(e.target).closest('.calendar').hasClass('left'),
                leftOrRight = isLeft ? 'left' : 'right',
                cal = this.container.find('.calendar.'+leftOrRight);

            // Month must be Number for new moment versions
            var month = parseInt(cal.find('.monthselect').val(), 10);
            var year = cal.find('.yearselect').val();

            if (!isLeft) {
                if (year < this.startDate.year() || (year == this.startDate.year() && month < this.startDate.month())) {
                    month = this.startDate.month();
                    year = this.startDate.year();
                }
            }

            if (this.minDate) {
                if (year < this.minDate.year() || (year == this.minDate.year() && month < this.minDate.month())) {
                    month = this.minDate.month();
                    year = this.minDate.year();
                }
            }

            if (this.maxDate) {
                if (year > this.maxDate.year() || (year == this.maxDate.year() && month > this.maxDate.month())) {
                    month = this.maxDate.month();
                    year = this.maxDate.year();
                }
            }

            if (isLeft) {
                this.leftCalendar.month.month(month).year(year);
                if (this.linkedCalendars)
                    this.rightCalendar.month = this.leftCalendar.month.clone().add(1, 'month');
            } else {
                this.rightCalendar.month.month(month).year(year);
                if (this.linkedCalendars)
                    this.leftCalendar.month = this.rightCalendar.month.clone().subtract(1, 'month');
            }
            this.updateCalendars();
        },

        timeChanged: function(e) {

            var cal = $(e.target).closest('.calendar'),
                isLeft = cal.hasClass('left');

            var hour = parseInt(cal.find('.hourselect').val(), 10);
            var minute = parseInt(cal.find('.minuteselect').val(), 10);
            var second = this.timePickerSeconds ? parseInt(cal.find('.secondselect').val(), 10) : 0;

            if (!this.timePicker24Hour) {
                var ampm = cal.find('.ampmselect').val();
                if (ampm === 'PM' && hour < 12)
                    hour += 12;
                if (ampm === 'AM' && hour === 12)
                    hour = 0;
            }

            if (isLeft) {
                var start = this.startDate.clone();
                start.hour(hour);
                start.minute(minute);
                start.second(second);
                this.setStartDate(start);
                if (this.singleDatePicker) {
                    this.endDate = this.startDate.clone();
                } else if (this.endDate && this.endDate.format('YYYY-MM-DD') == start.format('YYYY-MM-DD') && this.endDate.isBefore(start)) {
                    this.setEndDate(start.clone());
                }
            } else if (this.endDate) {
                var end = this.endDate.clone();
                end.hour(hour);
                end.minute(minute);
                end.second(second);
                this.setEndDate(end);
            }

            //update the calendars so all clickable dates reflect the new time component
            this.updateCalendars();

            //update the form inputs above the calendars with the new time
            this.updateFormInputs();

            //re-render the time pickers because changing one selection can affect what's enabled in another
            this.renderTimePicker('left');
            this.renderTimePicker('right');

        },

        formInputsChanged: function(e) {
            var isRight = $(e.target).closest('.calendar').hasClass('right');
            var start = moment(this.container.find('input[name="daterangepicker_start"]').val(), this.locale.format);
            var end = moment(this.container.find('input[name="daterangepicker_end"]').val(), this.locale.format);

            if (start.isValid() && end.isValid()) {

                if (isRight && end.isBefore(start))
                    start = end.clone();

                this.setStartDate(start);
                this.setEndDate(end);

                if (isRight) {
                    this.container.find('input[name="daterangepicker_start"]').val(this.startDate.format(this.locale.format));
                } else {
                    this.container.find('input[name="daterangepicker_end"]').val(this.endDate.format(this.locale.format));
                }

            }

            this.updateView();
        },

        formInputsFocused: function(e) {

            // Highlight the focused input
            this.container.find('input[name="daterangepicker_start"], input[name="daterangepicker_end"]').removeClass('active');
            $(e.target).addClass('active');

            // Set the state such that if the user goes back to using a mouse, 
            // the calendars are aware we're selecting the end of the range, not
            // the start. This allows someone to edit the end of a date range without
            // re-selecting the beginning, by clicking on the end date input then
            // using the calendar.
            var isRight = $(e.target).closest('.calendar').hasClass('right');
            if (isRight) {
                this.endDate = null;
                this.setStartDate(this.startDate.clone());
                this.updateView();
            }

        },

        formInputsBlurred: function(e) {

            // this function has one purpose right now: if you tab from the first
            // text input to the second in the UI, the endDate is nulled so that
            // you can click another, but if you tab out without clicking anything
            // or changing the input value, the old endDate should be retained

            if (!this.endDate) {
                var val = this.container.find('input[name="daterangepicker_end"]').val();
                var end = moment(val, this.locale.format);
                if (end.isValid()) {
                    this.setEndDate(end);
                    this.updateView();
                }
            }

        },

        elementChanged: function() {
            if (!this.element.is('input')) return;
            if (!this.element.val().length) return;
            if (this.element.val().length < this.locale.format.length) return;

            var dateString = this.element.val().split(this.locale.separator),
                start = null,
                end = null;

            if (dateString.length === 2) {
                start = moment(dateString[0], this.locale.format);
                end = moment(dateString[1], this.locale.format);
            }

            if (this.singleDatePicker || start === null || end === null) {
                start = moment(this.element.val(), this.locale.format);
                end = start;
            }

            if (!start.isValid() || !end.isValid()) return;

            this.setStartDate(start);
            this.setEndDate(end);
            this.updateView();
        },

        keydown: function(e) {
            //hide on tab or enter
            if ((e.keyCode === 9) || (e.keyCode === 13)) {
                this.hide();
            }
        },

        updateElement: function() {
            if (this.element.is('input') && !this.singleDatePicker && this.autoUpdateInput) {
                this.element.val(this.startDate.format(this.locale.format) + this.locale.separator + this.endDate.format(this.locale.format));
                this.element.trigger('change');
            } else if (this.element.is('input') && this.autoUpdateInput) {
                this.element.val(this.startDate.format(this.locale.format));
                this.element.trigger('change');
            }
        },

        remove: function() {
            this.container.remove();
            this.element.off('.daterangepicker');
            this.element.removeData();
        }

    };

    $.fn.daterangepicker = function(options, callback) {
        this.each(function() {
            var el = $(this);
            if (el.data('daterangepicker'))
                el.data('daterangepicker').remove();
            el.data('daterangepicker', new DateRangePicker(el, options, callback));
        });
        return this;
    };

    return DateRangePicker;

}));
;
(function(f){var h=function(a,b){this.$element=f(a);this.$element.is("input")?(this.options=f.extend({},f.fn.combodate.defaults,b,this.$element.data()),this.init()):f.error("Combodate should be applied to INPUT element")};h.prototype={constructor:h,init:function(){this.map={day:["D","date"],month:["M","month"],year:["Y","year"],hour:["[Hh]","hours"],minute:["m","minutes"],second:["s","seconds"],ampm:["[Aa]",""]};this.$widget=f('<span class="combodate"></span>').html(this.getTemplate());this.initCombos();
this.datetime=null;this.$widget.on("change","select",f.proxy(function(a){this.$element.val(this.getValue()).change();this.options.smartDays&&(f(a.target).is(".month")||f(a.target).is(".year"))&&(this.fillCombo("day"),f(this.$day).trigger("chosen:updated"))},this));this.$widget.find("select").css("width","auto");this.$element.hide().after(this.$widget);this.setValue(this.$element.val()||this.options.value)},getTemplate:function(){var a=this.options.template,b=this.$element.prop("disabled"),d=this.options.customClass,
e=this.options.commonClass,c=this.options.eachClass;f.each(this.map,function(b,c){c=c[0];var d=new RegExp(c+"+"),e=1<c.length?c.substring(1,2):c;a=a.replace(d,"{"+e+"}")});a=a.replace(/ /g,"&nbsp;");f.each(this.map,function(g,f){f=f[0];var k=c[g]?c[g]:"",h=1<f.length?f.substring(1,2):f;a=a.replace("{"+h+"}",'<select class="'+g+" "+d+" "+e+" "+k+'"'+(b?' disabled="disabled"':"")+"></select>")});return a},initCombos:function(){for(var a in this.map){var b=this.$widget.find("."+a);this["$"+a]=b.length?
b:null;this.fillCombo(a)}},fillCombo:function(a){var b=this["$"+a];if(b){a=this["fill"+a.charAt(0).toUpperCase()+a.slice(1)]();var d=b.val();b.empty();for(var e=0;e<a.length;e++)b.append('<option value="'+a[e][0]+'">'+a[e][1]+"</option>");b.val(d);b.trigger("chosen:updated")}},fillCommon:function(a){var b=[];if("name"===this.options.firstItem){var d=moment.localeData?moment.localeData()._relativeTime:moment.relativeTime||moment.langData()._relativeTime;a="function"===typeof d[a]?d[a](1,!0,a,!1):d[a];
a=a.split(" ").reverse()[0];b.push(["",a])}else"empty"===this.options.firstItem&&b.push(["",""]);return b},fillDay:function(){var a=this.fillCommon("d"),b=-1!==this.options.template.indexOf("DD"),d=31;if(this.options.smartDays&&this.$month&&this.$year){var e=parseInt(this.$month.val(),10);var c=parseInt(this.$year.val(),10);isNaN(e)||isNaN(c)||(d=moment([c,e]).daysInMonth())}for(c=1;c<=d;c++)e=b?this.leadZero(c):c,a.push([c,e]);return a},fillMonth:function(){var a=this.fillCommon("M"),b,d=-1!==this.options.template.indexOf("MMMMMM"),
e=-1!==this.options.template.indexOf("MMMMM"),c=-1!==this.options.template.indexOf("MMMM"),g=-1!==this.options.template.indexOf("MMM"),f=-1!==this.options.template.indexOf("MM");for(b=0;11>=b;b++){var l=d?moment().date(1).month(b).format("MM - MMMM"):e?moment().date(1).month(b).format("MM - MMM"):c?moment().date(1).month(b).format("MMMM"):g?moment().date(1).month(b).format("MMM"):f?this.leadZero(b+1):b+1;a.push([b,l])}return a},fillYear:function(){var a=[],b,d=-1!==this.options.template.indexOf("YYYY");
for(b=this.options.maxYear;b>=this.options.minYear;b--){var e=d?b:(b+"").substring(2);a[this.options.yearDescending?"push":"unshift"]([b,e])}return a=this.fillCommon("y").concat(a)},fillHour:function(){var a=this.fillCommon("h"),b;var d=-1!==this.options.template.indexOf("h");this.options.template.indexOf("H");var e=-1!==this.options.template.toLowerCase().indexOf("hh"),c=d?12:23;for(b=d?1:0;b<=c;b++)d=e?this.leadZero(b):b,a.push([b,d]);return a},fillMinute:function(){var a=this.fillCommon("m"),b,
d=-1!==this.options.template.indexOf("mm");for(b=0;59>=b;b+=this.options.minuteStep){var e=d?this.leadZero(b):b;a.push([b,e])}return a},fillSecond:function(){var a=this.fillCommon("s"),b,d=-1!==this.options.template.indexOf("ss");for(b=0;59>=b;b+=this.options.secondStep){var e=d?this.leadZero(b):b;a.push([b,e])}return a},fillAmpm:function(){var a=-1!==this.options.template.indexOf("a");this.options.template.indexOf("A");return[["am",a?"am":"AM"],["pm",a?"pm":"PM"]]},getValue:function(a){var b={},
d=this,e=!1;f.each(this.map,function(a,c){if("ampm"!==a){if(d["$"+a])b[a]=parseInt(d["$"+a].val(),10);else{var f=d.datetime?d.datetime[c[1]]():"day"===a?1:0;b[a]=f}if(isNaN(b[a]))return e=!0,!1}});if(e)return"";this.$ampm&&(b.hour=12===b.hour?"am"===this.$ampm.val()?0:12:"am"===this.$ampm.val()?b.hour:b.hour+12);var c=moment([b.year,b.month,b.day,b.hour,b.minute,b.second]);this.highlight(c);a=void 0===a?this.options.format:a;return null===a?c.isValid()?c:null:c.isValid()?c.format(a):""},setValue:function(a){function b(a,
b){var c={};a.children("option").each(function(a,d){var e=f(d).attr("value");if(""!==e){var g=Math.abs(e-b);if("undefined"===typeof c.distance||g<c.distance)c={value:e,distance:g}}});return c.value}if(a){var d="string"===typeof a?moment(a,this.options.format,!0):moment(a),e=this,c={};d.isValid()?(f.each(this.map,function(a,b){"ampm"!==a&&(c[a]=d[b[1]]())}),this.$ampm&&(12<=c.hour?(c.ampm="pm",12<c.hour&&(c.hour-=12)):(c.ampm="am",0===c.hour&&(c.hour=12))),f.each(c,function(a,c){e["$"+a]&&("minute"===
a&&1<e.options.minuteStep&&e.options.roundTime&&(c=b(e["$"+a],c)),"second"===a&&1<e.options.secondStep&&e.options.roundTime&&(c=b(e["$"+a],c)),e["$"+a].val(c))}),this.options.smartDays&&(this.fillCombo("day"),f(this.$day).trigger("chosen:updated")),this.$element.val(d.format(this.options.format)).change(),this.datetime=d):this.datetime=null}},highlight:function(a){a.isValid()?this.options.errorClass?this.$widget.removeClass(this.options.errorClass):this.$widget.find("select").css("border-color",this.borderColor):
this.options.errorClass?this.$widget.addClass(this.options.errorClass):(this.borderColor||(this.borderColor=this.$widget.find("select").css("border-color")),this.$widget.find("select").css("border-color","red"))},leadZero:function(a){return 9>=a?"0"+a:a},destroy:function(){this.$widget.remove();this.$element.removeData("combodate").show()}};f.fn.combodate=function(a){var b,d=Array.apply(null,arguments);d.shift();return"getValue"===a&&this.length&&(b=this.eq(0).data("combodate"))?b.getValue.apply(b,
d):this.each(function(){var b=f(this),c=b.data("combodate"),g="object"==typeof a&&a;c||b.data("combodate",c=new h(this,g));"string"==typeof a&&"function"==typeof c[a]&&c[a].apply(c,d)})};f.fn.combodate.defaults={format:"DD-MM-YYYY HH:mm",template:"D / MMM / YYYY   H : mm",value:null,minYear:1970,maxYear:2015,yearDescending:!0,minuteStep:5,secondStep:1,firstItem:"empty",errorClass:null,customClass:"",commonClass:"",eachClass:"",roundTime:!0,smartDays:!1}})(window.jQuery);;
;
(function ($) {
    $.jgrid = $.jgrid || {};
    $.extend($.jgrid, {
        captions: {
            success: js_lang_label.GENERIC_GRID_SUCCESS_MESSAGE
        },
        defaults: {
            recordtext: js_lang_label.GENERIC_GRID_VIEW + " {0} - {1} " + js_lang_label.GENERIC_GRID_OF + " {2}",
            emptyrecords: js_lang_label.GENERIC_GRID_NO_RECORDS_TO_VIEW,
            loadtext: js_lang_label.GENERIC_GRID_LOADING + "...",
            pgtext: js_lang_label.GENERIC_GRID_PAGE + " {0} " + js_lang_label.GENERIC_GRID_OF + " {1}",
            lvtext: {
                table: js_lang_label.GENERIC_GRID_TABLE_VIEW,
                view: js_lang_label.GENERIC_GRID_LIST_VIEW,
                grid: js_lang_label.GENERIC_GRID_GRID_VIEW
            },
            quicktext: js_lang_label.GENERIC_GRID_QUICK_SEARCH,
            savesearch: js_lang_label.GENERIC_GRID_SAVE_SEARCH,
            searchlist: js_lang_label.GENERIC_GRID_SEARCH_LIST,
            chviewtext: js_lang_label.GENERIC_GRID_CHANGE_VIEW,
            chsorttext: js_lang_label.GENERIC_GRID_CHANGE_SORTING,
            chgrouptext: js_lang_label.GENERIC_GRID_CHANGE_GROUPING,
            dfiltertext: js_lang_label.GENERIC_GRID_SELECT_DATES_TO_FILTER_DATA
        },
        search: {
            caption: js_lang_label.GENERIC_GRID_SEARCH + "...",
            Find: js_lang_label.GENERIC_GRID_FIND,
            Reset: js_lang_label.GENERIC_GRID_RESET,
            odata: [
                {oper: 'bt', text: (js_lang_label.GENERIC_BETWEEN ? js_lang_label.GENERIC_BETWEEN : "between")},
                {oper: 'nb', text: (js_lang_label.GENERIC_NOT_BETWEEN ? js_lang_label.GENERIC_NOT_BETWEEN : "not between")},
                {oper: 'bw', text: (js_lang_label.GENERIC_BEGINS_WITH ? js_lang_label.GENERIC_BEGINS_WITH : "begins with")},
                {oper: 'bn', text: (js_lang_label.GENERIC_DOES_NOT_BEGIN_WITH ? js_lang_label.GENERIC_DOES_NOT_BEGIN_WITH : "does not begins with")},
                {oper: 'ew', text: (js_lang_label.GENERIC_ENDS_WITH ? js_lang_label.GENERIC_ENDS_WITH : "ends with")},
                {oper: 'en', text: (js_lang_label.GENERIC_DOES_NOT_END_WITH ? js_lang_label.GENERIC_DOES_NOT_END_WITH : "does not end with")},
                {oper: 'cn', text: (js_lang_label.GENERIC_CONTAINS ? js_lang_label.GENERIC_CONTAINS : "contains")},
                {oper: 'nc', text: (js_lang_label.GENERIC_DOES_NOT_CONTAIN ? js_lang_label.GENERIC_DOES_NOT_CONTAIN : "does not contain")},
                {oper: 'mw', text: (js_lang_label.GENERIC_MATCH_WITH ? js_lang_label.GENERIC_MATCH_WITH : "match with")},
                {oper: 'eq', text: (js_lang_label.GENERIC_EQUAL ? js_lang_label.GENERIC_EQUAL : "equal")},
                {oper: 'ne', text: (js_lang_label.GENERIC_NOT_EQUAL ? js_lang_label.GENERIC_NOT_EQUAL : "not equal")},
                {oper: 'lt', text: (js_lang_label.GENERIC_LESS ? js_lang_label.GENERIC_LESS : "less")},
                {oper: 'le', text: (js_lang_label.GENERIC_LESS_OR_EQUAL ? js_lang_label.GENERIC_LESS_OR_EQUAL : "less or equal")},
                {oper: 'gt', text: (js_lang_label.GENERIC_GREATER ? js_lang_label.GENERIC_GREATER : "greater")},
                {oper: 'ge', text: (js_lang_label.GENERIC_GREATER_OR_EQUAL ? js_lang_label.GENERIC_GREATER_OR_EQUAL : "greater or equal")},
                {oper: 'in', text: (js_lang_label.GENERIC_IS_IN ? js_lang_label.GENERIC_IS_IN : "is in")},
                {oper: 'ni', text: (js_lang_label.GENERIC_IS_NOT_IN ? js_lang_label.GENERIC_IS_NOT_IN : "is not in")},
                {oper: 'nu', text: (js_lang_label.GENERIC_IS_EMPTY ? js_lang_label.GENERIC_IS_EMPTY : "is empty")},
                {oper: 'nn', text: (js_lang_label.GENERIC_IS_NOT_EMPTY ? js_lang_label.GENERIC_IS_NOT_EMPTY : "is not empty")}
            ],
            groupOps: [
                {op: "AND", text: js_lang_label.GENERIC_GRID_ALL},
                {op: "OR", text: js_lang_label.GENERIC_GRID_ANY}
            ],
            operandTitle: js_lang_label.GENERIC_CLICK_TO_SELECT_SEARCH_OPERATION,
            resetTitle: js_lang_label.GENERIC_RESET_SEARCH_VALUE
        },
        edit: {
            addCaption: js_lang_label.GENERIC_GRID_ADD_RECORD,
            editCaption: js_lang_label.GENERIC_GRID_EDIT_RECORD,
            bSubmit: js_lang_label.GENERIC_GRID_SUBMIT,
            bCancel: js_lang_label.GENERIC_GRID_ADD_CANCEL,
            bClose: js_lang_label.GENERIC_GRID_CLOSE,
            saveData: js_lang_label.GENERIC_GRID_GENERIC_GRID_DATA_HAS_BEEN_CHANGED_SAVE_CHANGES,
            bYes: js_lang_label.GENERIC_GRID_YES,
            bNo: js_lang_label.GENERIC_GRID_NO,
            bExit: js_lang_label.GENERIC_GRID_CANCEL,
            msg: {
                required: js_lang_label.GENERIC_GRID_FIELD_IS_REQUIRED,
                number: js_lang_label.GENERIC_GRID_PLEASE_ENTER_VALID_NUMBER,
                minValue: js_lang_label.GENERIC_GRID_VALUE_MUST_BE_GREATER_THAN_OR_EQUAL_TO,
                maxValue: js_lang_label.GENERIC_GRID_VALUE_MUST_BE_LESS_THAN_OR_EQUAL_TO,
                email: " " + js_lang_label.GENERIC_GRID_IS_NOT_A_VALID_EMAIL,
                integer: js_lang_label.GENERIC_GRID_PLEASE_ENTER_VALID_INTEGER_VALUE,
                date: js_lang_label.GENERIC_GRID_PLEASE_ENTER_VALID_DATE_VALUE,
                url: js_lang_label.GENERIC_GRID_IS_NOT_A_VALID_URL_PREFIX_REQUIRED_HTTP_OR_HTTPS,
                nodefined: " " + js_lang_label.GENERIC_GRID_IS_NOT_DEFINED,
                novalue: " " + js_lang_label.GENERIC_GRID_RETURN_VALUE_IS_REQUIRED,
                customarray: js_lang_label.GENERIC_GRID_CUSTOM_FUNCTION_SHOULD_RETURN_ARRAY,
                customfcheck: js_lang_label.CUSTOM_FUNCTION_SHOULD_BE_PRESENT_IN_CASE_OF_CUSTOM_CHECKING

            }
        },
        view: {
            caption: js_lang_label.GENERIC_GRID_VIEW_RECORD,
            bClose: js_lang_label.GENERIC_GRID_CLOSE
        },
        del: {
            caption: js_lang_label.GENERIC_GRID_DELETE,
            msg: js_lang_label.GENERIC_GRID_DELETE_SELECTED_RECORDS,
            bSubmit: js_lang_label.GENERIC_GRID_DELETE,
            bCancel: js_lang_label.GENERIC_GRID_CANCEL
        },
        nav: {
            edittext: "",
            edittitle: js_lang_label.GENERIC_GRID_EDIT_SELECTED_ROW,
            addtext: "",
            addtitle: js_lang_label.GENERIC_GRID_ADD_NEW_ROW,
            deltext: "",
            deltitle: js_lang_label.GENERIC_GRID_DELETE_SELECTED_ROW,
            searchtext: "",
            searchtitle: js_lang_label.GENERIC_GRID_FIND_RECORDS,
            refreshtext: "",
            refreshtitle: js_lang_label.GENERIC_GRID_RELOAD_GRID,
            alertcap: js_lang_label.GENERIC_GRID_WARNING,
            alerttext: js_lang_label.GENERIC_GRID_PLEASE_SELECT_ROW,
            viewtext: "",
            viewtitle: js_lang_label.GENERIC_GRID_VIEW_SELECTED_ROW
        },
        col: {
            caption: js_lang_label.GENERIC_GRID_SELECT_COLUMNS,
            bSubmit: (js_lang_label.GENERIC_GRID_APPLY ? js_lang_label.GENERIC_GRID_APPLY : js_lang_label.GENERIC_GRID_OK),
            bCancel: js_lang_label.GENERIC_GRID_CANCEL
        },
        errors: {
            errcap: js_lang_label.GENERIC_GRID_ERROR,
            nourl: js_lang_label.GENERIC_GRID_NO_URL_IS_SET,
            norecords: js_lang_label.GENERIC_GRID_NO_RECORDS_TO_PROCESS,
            model: js_lang_label.GENERIC_GRID_LENGTH_OF_COLNAMES_DOES_NOT_MATCH_WITH_COLMODEL
        },
        formatter: {
            integer: {
                thousandsSeparator: el_tpl_settings.admin_formats.thousand_seperator,
                defaultValue: '0'
            },
            number: {
                decimalSeparator: el_tpl_settings.admin_formats.decimal_seperator,
                thousandsSeparator: el_tpl_settings.admin_formats.thousand_seperator,
                decimalPlaces: parseInt(el_tpl_settings.admin_formats.decimal_places),
                defaultValue: '0.00'
            },
            currency: {
                decimalSeparator: el_tpl_settings.admin_formats.decimal_seperator,
                thousandsSeparator: el_tpl_settings.admin_formats.thousand_seperator,
                decimalPlaces: parseInt(el_tpl_settings.admin_formats.decimal_places),
                prefix: el_tpl_settings.admin_formats.currency_prefix,
                suffix: el_tpl_settings.admin_formats.currency_suffix,
                defaultValue: '0.00'
            },
            date: {
                dayNames: [
                    "Sun", "Mon", "Tue", "Wed", "Thr", "Fri", "Sat",
                    "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
                ],
                monthNames: [
                    "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
                    "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
                ],
                AmPm: ["am", "pm", "AM", "PM"],
                S: function (j) {
                    return j < 11 || j > 13 ? ['st', 'nd', 'rd', 'th'][Math.min((j - 1) % 10, 3)] : 'th';
                },
                srcformat: 'Y-m-d',
                newformat: 'n/j/Y',
                parseRe: /[#%\\\/:_;.,\t\s-]/,
                masks: {
                    // see http://php.net/manual/en/function.date.php for PHP format used in jqGrid
                    // and see http://docs.jquery.com/UI/Datepicker/formatDate
                    // and https://github.com/jquery/globalize#dates for alternative formats used frequently
                    // one can find on https://github.com/jquery/globalize/tree/master/lib/cultures many
                    // information about date, time, numbers and currency formats used in different countries
                    // one should just convert the information in PHP format
                    ISO8601Long: "Y-m-d H:i:s",
                    ISO8601Short: "Y-m-d",
                    // short date:
                    //    n - Numeric representation of a month, without leading zeros
                    //    j - Day of the month without leading zeros
                    //    Y - A full numeric representation of a year, 4 digits
                    // example: 3/1/2012 which means 1 March 2012
                    ShortDate: "n/j/Y", // in jQuery UI Datepicker: "M/d/yyyy"
                    // long date:
                    //    l - A full textual representation of the day of the week
                    //    F - A full textual representation of a month
                    //    d - Day of the month, 2 digits with leading zeros
                    //    Y - A full numeric representation of a year, 4 digits
                    LongDate: "l, F d, Y", // in jQuery UI Datepicker: "dddd, MMMM dd, yyyy"
                    // long date with long time:
                    //    l - A full textual representation of the day of the week
                    //    F - A full textual representation of a month
                    //    d - Day of the month, 2 digits with leading zeros
                    //    Y - A full numeric representation of a year, 4 digits
                    //    g - 12-hour format of an hour without leading zeros
                    //    i - Minutes with leading zeros
                    //    s - Seconds, with leading zeros
                    //    A - Uppercase Ante meridiem and Post meridiem (AM or PM)
                    FullDateTime: "l, F d, Y g:i:s A", // in jQuery UI Datepicker: "dddd, MMMM dd, yyyy h:mm:ss tt"
                    // month day:
                    //    F - A full textual representation of a month
                    //    d - Day of the month, 2 digits with leading zeros
                    MonthDay: "F d", // in jQuery UI Datepicker: "MMMM dd"
                    // short time (without seconds)
                    //    g - 12-hour format of an hour without leading zeros
                    //    i - Minutes with leading zeros
                    //    A - Uppercase Ante meridiem and Post meridiem (AM or PM)
                    ShortTime: "g:i A", // in jQuery UI Datepicker: "h:mm tt"
                    // long time (with seconds)
                    //    g - 12-hour format of an hour without leading zeros
                    //    i - Minutes with leading zeros
                    //    s - Seconds, with leading zeros
                    //    A - Uppercase Ante meridiem and Post meridiem (AM or PM)
                    LongTime: "g:i:s A", // in jQuery UI Datepicker: "h:mm:ss tt"
                    SortableDateTime: "Y-m-d\\TH:i:s",
                    UniversalSortableDateTime: "Y-m-d H:i:sO",
                    // month with year
                    //    Y - A full numeric representation of a year, 4 digits
                    //    F - A full textual representation of a month
                    YearMonth: "F, Y" // in jQuery UI Datepicker: "MMMM, yyyy"
                },
                reformatAfterEdit: false
            },
            baseLinkUrl: '',
            showAction: '',
            target: '',
            checkbox: {disabled: true},
            idName: 'id'
        }
    });
})(jQuery);
;
// ==ClosureCompiler==
// @compilation_level SIMPLE_OPTIMIZATIONS
/**
 * @license jqGrid  4.6.0 - jQuery Grid
 * Date: 2014-02-20
 */
/*global jQuery */
(function ($) {
    "use strict";
    $.jgrid = $.jgrid || {};
    $.extend($.jgrid, {
        version: "4.6.0",
        htmlDecode: function (value) {
            if (value && (value === '&nbsp;' || value === '&#160;' || (value.length === 1 && value.charCodeAt(0) === 160))) {
                return "";
            }
            return !value ? value : String(value).replace(/&gt;/g, ">").replace(/&lt;/g, "<").replace(/&quot;/g, '"').replace(/&amp;/g, "&");
        },
        htmlEncode: function (value) {
            return !value ? value : String(value).replace(/&/g, "&amp;").replace(/\"/g, "&quot;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
        },
        format: function (format) { //jqgformat
            var args = $.makeArray(arguments).slice(1);
            if (format == null) {
                format = "";
            }
            return format.replace(/\{(\d+)\}/g, function (m, i) {
                return args[i];
            });
        },
        msie: navigator.appName === 'Microsoft Internet Explorer',
        msiever: function () {
            var rv = -1;
            var ua = navigator.userAgent;
            var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
            if (re.exec(ua) != null) {
                rv = parseFloat(RegExp.$1);
            }
            return rv;
        },
        getCellIndex: function (cell) {
            var c = $(cell);
            if (c.is('tr')) {
                return -1;
            }
            c = (!c.is('td') && !c.is('th') ? c.closest("td,th") : c)[0];
            if ($.jgrid.msie) {
                return $.inArray(c, c.parentNode.cells);
            }
            return c.cellIndex;
        },
        stripHtml: function (v) {
            v = String(v);
            var regexp = /<("[^"]*"|'[^']*'|[^'">])*>/gi;
            if (v) {
                v = v.replace(regexp, "");
                return (v && v !== '&nbsp;' && v !== '&#160;') ? v.replace(/\"/g, "'") : "";
            }
            return v;
        },
        stripPref: function (pref, id) {
            var obj = $.type(pref);
            if (obj === "string" || obj === "number") {
                pref = String(pref);
                id = pref !== "" ? String(id).replace(String(pref), "") : id;
            }
            return id;
        },
        parse: function (jsonString) {
            var js = jsonString;
            if (js.substr(0, 9) === "while(1);") {
                js = js.substr(9);
            }
            if (js.substr(0, 2) === "/*") {
                js = js.substr(2, js.length - 4);
            }
            if (!js) {
                js = "{}";
            }
            return ($.jgrid.useJSON === true && typeof JSON === 'object' && typeof JSON.parse === 'function') ? JSON.parse(js) : eval('(' + js + ')');
        },
        parseDate: function (format, date, newformat, opts) {
            var token = /\\.|[dDjlNSwzWFmMntLoYyaABgGhHisueIOPTZcrU]/g,
                    timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
                    timezoneClip = /[^-+\dA-Z]/g,
                    msDateRegExp = new RegExp("^\/Date\\((([-+])?[0-9]+)(([-+])([0-9]{2})([0-9]{2}))?\\)\/$"),
                    msMatch = ((typeof date === 'string') ? date.match(msDateRegExp) : null),
                    pad = function (value, length) {
                        value = String(value);
                        length = parseInt(length, 10) || 2;
                        while (value.length < length) {
                            value = '0' + value;
                        }
                        return value;
                    },
                    ts = {
                        m: 1,
                        d: 1,
                        y: 1970,
                        h: 0,
                        i: 0,
                        s: 0,
                        u: 0
                    },
            timestamp = 0,
                    dM, k, hl, h12to24 = function (ampm, h) {
                        if (ampm === 0) {
                            if (h === 12) {
                                h = 0;
                            }
                        } else {
                            if (h !== 12) {
                                h += 12;
                            }
                        }
                        return h;
                    };
            if (opts === undefined) {
                opts = $.jgrid.formatter.date;
            }
            // old lang files
            if (opts.parseRe === undefined) {
                opts.parseRe = /[#%\\\/:_;.,\t\s-]/;
            }
            if (opts.masks.hasOwnProperty(format)) {
                format = opts.masks[format];
            }
            if (date && date != null) {
                if (!isNaN(date - 0) && String(format).toLowerCase() === "u") {
                    //Unix timestamp
                    timestamp = new Date(parseFloat(date) * 1000);
                } else if (date.constructor === Date) {
                    timestamp = date;
                    // Microsoft date format support
                } else if (msMatch !== null) {
                    timestamp = new Date(parseInt(msMatch[1], 10));
                    if (msMatch[3]) {
                        var offset = Number(msMatch[5]) * 60 + Number(msMatch[6]);
                        offset *= ((msMatch[4] === '-') ? 1 : -1);
                        offset -= timestamp.getTimezoneOffset();
                        timestamp.setTime(Number(Number(timestamp) + (offset * 60 * 1000)));
                    }
                } else {
                    var offset = 0;
                    //Support ISO8601Long that have Z at the end to indicate UTC timezone
                    if (opts.srcformat === 'ISO8601Long' && date.charAt(date.length - 1) === 'Z') {
                        offset -= (new Date()).getTimezoneOffset();
                    }
                    date = String(date).replace(/\T/g, "#").replace(/\t/, "%").split(opts.parseRe);
                    format = format.replace(/\T/g, "#").replace(/\t/, "%").split(opts.parseRe);
                    // parsing for month names
                    for (k = 0, hl = format.length; k < hl; k++) {
                        if (format[k] === 'M') {
                            dM = $.inArray(date[k], opts.monthNames);
                            if (dM !== -1 && dM < 12) {
                                date[k] = dM + 1;
                                ts.m = date[k];
                            }
                        }
                        if (format[k] === 'F') {
                            dM = $.inArray(date[k], opts.monthNames, 12);
                            if (dM !== -1 && dM > 11) {
                                date[k] = dM + 1 - 12;
                                ts.m = date[k];
                            }
                        }
                        if (format[k] === 'a') {
                            dM = $.inArray(date[k], opts.AmPm);
                            if (dM !== -1 && dM < 2 && date[k] === opts.AmPm[dM]) {
                                date[k] = dM;
                                ts.h = h12to24(date[k], ts.h);
                            }
                        }
                        if (format[k] === 'A') {
                            dM = $.inArray(date[k], opts.AmPm);
                            if (dM !== -1 && dM > 1 && date[k] === opts.AmPm[dM]) {
                                date[k] = dM - 2;
                                ts.h = h12to24(date[k], ts.h);
                            }
                        }
                        if (format[k] === 'g') {
                            ts.h = parseInt(date[k], 10);
                        }
                        if (date[k] !== undefined) {
                            ts[format[k].toLowerCase()] = parseInt(date[k], 10);
                        }
                    }
                    if (ts.f) {
                        ts.m = ts.f;
                    }
                    if (ts.m === 0 && ts.y === 0 && ts.d === 0) {
                        return "&#160;";
                    }
                    ts.m = parseInt(ts.m, 10) - 1;
                    var ty = ts.y;
                    if (ty >= 70 && ty <= 99) {
                        ts.y = 1900 + ts.y;
                    } else if (ty >= 0 && ty <= 69) {
                        ts.y = 2000 + ts.y;
                    }
                    timestamp = new Date(ts.y, ts.m, ts.d, ts.h, ts.i, ts.s, ts.u);
                    //Apply offset to show date as local time.
                    if (offset > 0) {
                        timestamp.setTime(Number(Number(timestamp) + (offset * 60 * 1000)));
                    }
                }
            } else {
                timestamp = new Date(ts.y, ts.m, ts.d, ts.h, ts.i, ts.s, ts.u);
            }
            if (newformat === undefined) {
                return timestamp;
            }
            if (opts.masks.hasOwnProperty(newformat)) {
                newformat = opts.masks[newformat];
            } else if (!newformat) {
                newformat = 'Y-m-d';
            }
            var
                    G = timestamp.getHours(),
                    i = timestamp.getMinutes(),
                    j = timestamp.getDate(),
                    n = timestamp.getMonth() + 1,
                    o = timestamp.getTimezoneOffset(),
                    s = timestamp.getSeconds(),
                    u = timestamp.getMilliseconds(),
                    w = timestamp.getDay(),
                    Y = timestamp.getFullYear(),
                    N = (w + 6) % 7 + 1,
                    z = (new Date(Y, n - 1, j) - new Date(Y, 0, 1)) / 86400000,
                    flags = {
                        // Day
                        d: pad(j),
                        D: opts.dayNames[w],
                        j: j,
                        l: opts.dayNames[w + 7],
                        N: N,
                        S: opts.S(j),
                        //j < 11 || j > 13 ? ['st', 'nd', 'rd', 'th'][Math.min((j - 1) % 10, 3)] : 'th',
                        w: w,
                        z: z,
                        // Week
                        W: N < 5 ? Math.floor((z + N - 1) / 7) + 1 : Math.floor((z + N - 1) / 7) || ((new Date(Y - 1, 0, 1).getDay() + 6) % 7 < 4 ? 53 : 52),
                        // Month
                        F: opts.monthNames[n - 1 + 12],
                        m: pad(n),
                        M: opts.monthNames[n - 1],
                        n: n,
                        t: '?',
                        // Year
                        L: '?',
                        o: '?',
                        Y: Y,
                        y: String(Y).substring(2),
                        // Time
                        a: G < 12 ? opts.AmPm[0] : opts.AmPm[1],
                        A: G < 12 ? opts.AmPm[2] : opts.AmPm[3],
                        B: '?',
                        g: G % 12 || 12,
                        G: G,
                        h: pad(G % 12 || 12),
                        H: pad(G),
                        i: pad(i),
                        s: pad(s),
                        u: u,
                        // Timezone
                        e: '?',
                        I: '?',
                        O: (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
                        P: '?',
                        T: (String(timestamp).match(timezone) || [""]).pop().replace(timezoneClip, ""),
                        Z: '?',
                        // Full Date/Time
                        c: '?',
                        r: '?',
                        U: Math.floor(timestamp / 1000)
                    };
            return newformat.replace(token, function ($0) {
                return flags.hasOwnProperty($0) ? flags[$0] : $0.substring(1);
            });
        },
        jqID: function (sid) {
            return String(sid).replace(/[!"#$%&'()*+,.\/:; <=>?@\[\\\]\^`{|}~]/g, "\\$&");
        },
        guid: 1,
        uidPref: 'jqg',
        randId: function (prefix) {
            return (prefix || $.jgrid.uidPref) + ($.jgrid.guid++);
        },
        getAccessor: function (obj, expr) {
            var ret, p, prm = [],
                    i;
            if (typeof expr === 'function') {
                return expr(obj);
            }
            ret = obj[expr];
            if (ret === undefined) {
                try {
                    if (typeof expr === 'string') {
                        prm = expr.split('.');
                    }
                    i = prm.length;
                    if (i) {
                        ret = obj;
                        while (ret && i--) {
                            p = prm.shift();
                            ret = ret[p];
                        }
                    }
                } catch (e) {
                }
            }
            return ret;
        },
        getXmlData: function (obj, expr, returnObj) {
            var ret, m = typeof expr === 'string' ? expr.match(/^(.*)\[(\w+)\]$/) : null;
            if (typeof expr === 'function') {
                return expr(obj);
            }
            if (m && m[2]) {
                // m[2] is the attribute selector
                // m[1] is an optional element selector
                // examples: "[id]", "rows[page]"
                return m[1] ? $(m[1], obj).attr(m[2]) : $(obj).attr(m[2]);
            }
            ret = $(expr, obj);
            if (returnObj) {
                return ret;
            }
            //$(expr, obj).filter(':last'); // we use ':last' to be more compatible with old version of jqGrid
            return ret.length > 0 ? $(ret).text() : undefined;
        },
        cellWidth: function () {
            var $testDiv = $("<div class='ui-jqgrid' style='left:10000px'><table class='ui-jqgrid-btable' style='width:5px;'><tr class='jqgrow'><td style='width:5px;display:block;'></td></tr></table></div>"),
                    testCell = $testDiv.appendTo("body").find("td").width();
            $testDiv.remove();
            return Math.abs(testCell - 5) > 0.1;
        },
        cell_width: true,
        ajaxOptions: {},
        from: function (source) {
            // Original Author Hugo Bonacci
            // License MIT http://jlinq.codeplex.com/license
            var QueryObject = function (d, q) {
                if (typeof d === "string") {
                    d = $.data(d);
                }
                var self = this,
                        _data = d,
                        _usecase = true,
                        _trim = false,
                        _query = q,
                        _stripNum = /[\$,%]/g,
                        _lastCommand = null,
                        _lastField = null,
                        _orDepth = 0,
                        _negate = false,
                        _queuedOperator = "",
                        _sorting = [],
                        _useProperties = true;
                if (typeof d === "object" && d.push) {
                    if (d.length > 0) {
                        if (typeof d[0] !== "object") {
                            _useProperties = false;
                        } else {
                            _useProperties = true;
                        }
                    }
                } else {
                    throw "data provides is not an array";
                }
                this._hasData = function () {
                    return _data === null ? false : _data.length === 0 ? false : true;
                };
                this._getStr = function (s) {
                    var phrase = [];
                    if (_trim) {
                        phrase.push("jQuery.trim(");
                    }
                    phrase.push("String(" + s + ")");
                    if (_trim) {
                        phrase.push(")");
                    }
                    if (!_usecase) {
                        phrase.push(".toLowerCase()");
                    }
                    return phrase.join("");
                };
                this._strComp = function (val) {
                    if (typeof val === "string") {
                        return ".toString()";
                    }
                    return "";
                };
                this._group = function (f, u) {
                    return ({
                        field: f.toString(),
                        unique: u,
                        items: []
                    });
                };
                this._toStr = function (phrase) {
                    if (_trim) {
                        phrase = $.trim(phrase);
                    }
                    phrase = phrase.toString().replace(/\\/g, '\\\\').replace(/\"/g, '\\"');
                    return _usecase ? phrase : phrase.toLowerCase();
                };
                this._funcLoop = function (func) {
                    var results = [];
                    $.each(_data, function (i, v) {
                        results.push(func(v));
                    });
                    return results;
                };
                this._append = function (s) {
                    var i;
                    if (_query === null) {
                        _query = "";
                    } else {
                        _query += _queuedOperator === "" ? " && " : _queuedOperator;
                    }
                    for (i = 0; i < _orDepth; i++) {
                        _query += "(";
                    }
                    if (_negate) {
                        _query += "!";
                    }
                    _query += "(" + s + ")";
                    _negate = false;
                    _queuedOperator = "";
                    _orDepth = 0;
                };
                this._setCommand = function (f, c) {
                    _lastCommand = f;
                    _lastField = c;
                };
                this._resetNegate = function () {
                    _negate = false;
                };
                this._repeatCommand = function (f, v) {
                    if (_lastCommand === null) {
                        return self;
                    }
                    if (f !== null && v !== null) {
                        return _lastCommand(f, v);
                    }
                    if (_lastField === null) {
                        return _lastCommand(f);
                    }
                    if (!_useProperties) {
                        return _lastCommand(f);
                    }
                    return _lastCommand(_lastField, f);
                };
                this._equals = function (a, b) {
                    return (self._compare(a, b, 1) === 0);
                };
                this._compare = function (a, b, d) {
                    var toString = Object.prototype.toString;
                    if (d === undefined) {
                        d = 1;
                    }
                    if (a === undefined) {
                        a = null;
                    }
                    if (b === undefined) {
                        b = null;
                    }
                    if (a === null && b === null) {
                        return 0;
                    }
                    if (a === null && b !== null) {
                        return 1;
                    }
                    if (a !== null && b === null) {
                        return -1;
                    }
                    if (toString.call(a) === '[object Date]' && toString.call(b) === '[object Date]') {
                        if (a < b) {
                            return -d;
                        }
                        if (a > b) {
                            return d;
                        }
                        return 0;
                    }
                    if (!_usecase && typeof a !== "number" && typeof b !== "number") {
                        a = String(a);
                        b = String(b);
                    }
                    if (a < b) {
                        return -d;
                    }
                    if (a > b) {
                        return d;
                    }
                    return 0;
                };
                this._performSort = function () {
                    if (_sorting.length === 0) {
                        return;
                    }
                    _data = self._doSort(_data, 0);
                };
                this._doSort = function (d, q) {
                    var by = _sorting[q].by,
                            dir = _sorting[q].dir,
                            type = _sorting[q].type,
                            dfmt = _sorting[q].datefmt,
                            sfunc = _sorting[q].sfunc;
                    if (q === _sorting.length - 1) {
                        return self._getOrder(d, by, dir, type, dfmt, sfunc);
                    }
                    q++;
                    var values = self._getGroup(d, by, dir, type, dfmt),
                            results = [],
                            i, j, sorted;
                    for (i = 0; i < values.length; i++) {
                        sorted = self._doSort(values[i].items, q);
                        for (j = 0; j < sorted.length; j++) {
                            results.push(sorted[j]);
                        }
                    }
                    return results;
                };
                this._getOrder = function (data, by, dir, type, dfmt, sfunc) {
                    var sortData = [],
                            _sortData = [],
                            newDir = dir === "a" ? 1 : -1,
                            i, ab, j, findSortKey;

                    if (type === undefined) {
                        type = "text";
                    }
                    if (type === 'float' || type === 'number' || type === 'currency' || type === 'numeric') {
                        findSortKey = function ($cell) {
                            var key = parseFloat(String($cell).replace(_stripNum, ''));
                            return isNaN(key) ? 0.00 : key;
                        };
                    } else if (type === 'int' || type === 'integer') {
                        findSortKey = function ($cell) {
                            return $cell ? parseFloat(String($cell).replace(_stripNum, '')) : 0;
                        };
                    } else if (type === 'date' || type === 'datetime') {
                        findSortKey = function ($cell) {
                            return $.jgrid.parseDate(dfmt, $cell).getTime();
                        };
                    } else if ($.isFunction(type)) {
                        findSortKey = type;
                    } else {
                        findSortKey = function ($cell) {
                            $cell = $cell ? $.trim(String($cell)) : "";
                            return _usecase ? $cell : $cell.toLowerCase();
                        };
                    }
                    $.each(data, function (i, v) {
                        ab = by !== "" ? $.jgrid.getAccessor(v, by) : v;
                        if (ab === undefined) {
                            ab = "";
                        }
                        ab = findSortKey(ab, v);
                        _sortData.push({
                            'vSort': ab,
                            'index': i
                        });
                    });
                    if ($.isFunction(sfunc)) {
                        _sortData.sort(function (a, b) {
                            a = a.vSort;
                            b = b.vSort;
                            return sfunc.call(this, a, b, newDir);
                        });
                    } else {
                        _sortData.sort(function (a, b) {
                            a = a.vSort;
                            b = b.vSort;
                            return self._compare(a, b, newDir);
                        });
                    }
                    j = 0;
                    var nrec = data.length;
                    // overhead, but we do not change the original data.
                    while (j < nrec) {
                        i = _sortData[j].index;
                        sortData.push(data[i]);
                        j++;
                    }
                    return sortData;
                };
                this._getGroup = function (data, by, dir, type, dfmt) {
                    var results = [],
                            group = null,
                            last = null,
                            val;
                    $.each(self._getOrder(data, by, dir, type, dfmt), function (i, v) {
                        val = $.jgrid.getAccessor(v, by);
                        if (val == null) {
                            val = "";
                        }
                        if (!self._equals(last, val)) {
                            last = val;
                            if (group !== null) {
                                results.push(group);
                            }
                            group = self._group(by, val);
                        }
                        group.items.push(v);
                    });
                    if (group !== null) {
                        results.push(group);
                    }
                    return results;
                };
                this.ignoreCase = function () {
                    _usecase = false;
                    return self;
                };
                this.useCase = function () {
                    _usecase = true;
                    return self;
                };
                this.trim = function () {
                    _trim = true;
                    return self;
                };
                this.noTrim = function () {
                    _trim = false;
                    return self;
                };
                this.execute = function () {
                    var match = _query,
                            results = [];
                    if (match === null) {
                        return self;
                    }
                    $.each(_data, function () {
                        if (eval(match)) {
                            results.push(this);
                        }
                    });
                    _data = results;
                    return self;
                };
                this.data = function () {
                    return _data;
                };
                this.select = function (f) {
                    self._performSort();
                    if (!self._hasData()) {
                        return [];
                    }
                    self.execute();
                    if ($.isFunction(f)) {
                        var results = [];
                        $.each(_data, function (i, v) {
                            results.push(f(v));
                        });
                        return results;
                    }
                    return _data;
                };
                this.hasMatch = function () {
                    if (!self._hasData()) {
                        return false;
                    }
                    self.execute();
                    return _data.length > 0;
                };
                this.andNot = function (f, v, x) {
                    _negate = !_negate;
                    return self.and(f, v, x);
                };
                this.orNot = function (f, v, x) {
                    _negate = !_negate;
                    return self.or(f, v, x);
                };
                this.not = function (f, v, x) {
                    return self.andNot(f, v, x);
                };
                this.and = function (f, v, x) {
                    _queuedOperator = " && ";
                    if (f === undefined) {
                        return self;
                    }
                    return self._repeatCommand(f, v, x);
                };
                this.or = function (f, v, x) {
                    _queuedOperator = " || ";
                    if (f === undefined) {
                        return self;
                    }
                    return self._repeatCommand(f, v, x);
                };
                this.orBegin = function () {
                    _orDepth++;
                    return self;
                };
                this.orEnd = function () {
                    if (_query !== null) {
                        _query += ")";
                    }
                    return self;
                };
                this.isNot = function (f) {
                    _negate = !_negate;
                    return self.is(f);
                };
                this.is = function (f) {
                    self._append('this.' + f);
                    self._resetNegate();
                    return self;
                };
                this._compareValues = function (func, f, v, how, t) {
                    var fld;
                    if (_useProperties) {
                        fld = 'jQuery.jgrid.getAccessor(this,\'' + f + '\')';
                    } else {
                        fld = 'this';
                    }
                    if (v === undefined) {
                        v = null;
                    }
                    //var val=v===null?f:v,
                    var val = v,
                            swst = t.stype === undefined ? "text" : t.stype;
                    if (v !== null) {
                        switch (swst) {
                            case 'int':
                            case 'integer':
                                val = (isNaN(Number(val)) || val === "") ? '0' : val; // To be fixed with more inteligent code
                                fld = 'parseInt(' + fld + ',10)';
                                val = 'parseInt(' + val + ',10)';
                                break;
                            case 'float':
                            case 'number':
                            case 'numeric':
                                val = String(val).replace(_stripNum, '');
                                val = (isNaN(Number(val)) || val === "") ? '0' : val; // To be fixed with more inteligent code
                                fld = 'parseFloat(' + fld + ')';
                                val = 'parseFloat(' + val + ')';
                                break;
                            case 'date':
                            case 'datetime':
                                val = String($.jgrid.parseDate(t.newfmt || 'Y-m-d', val).getTime());
                                fld = 'jQuery.jgrid.parseDate("' + t.srcfmt + '",' + fld + ').getTime()';
                                break;
                            default:
                                fld = self._getStr(fld);
                                val = self._getStr('"' + self._toStr(val) + '"');
                        }
                    }
                    self._append(fld + ' ' + how + ' ' + val);
                    self._setCommand(func, f);
                    self._resetNegate();
                    return self;
                };
                this.equals = function (f, v, t) {
                    return self._compareValues(self.equals, f, v, "==", t);
                };
                this.notEquals = function (f, v, t) {
                    return self._compareValues(self.equals, f, v, "!==", t);
                };
                this.isNull = function (f, v, t) {
                    return self._compareValues(self.equals, f, null, "===", t);
                };
                this.greater = function (f, v, t) {
                    return self._compareValues(self.greater, f, v, ">", t);
                };
                this.less = function (f, v, t) {
                    return self._compareValues(self.less, f, v, "<", t);
                };
                this.greaterOrEquals = function (f, v, t) {
                    return self._compareValues(self.greaterOrEquals, f, v, ">=", t);
                };
                this.lessOrEquals = function (f, v, t) {
                    return self._compareValues(self.lessOrEquals, f, v, "<=", t);
                };
                this.startsWith = function (f, v) {
                    var val = (v == null) ? f : v,
                            length = _trim ? $.trim(val.toString()).length : val.toString().length;
                    if (_useProperties) {
                        self._append(self._getStr('jQuery.jgrid.getAccessor(this,\'' + f + '\')') + '.substr(0,' + length + ') == ' + self._getStr('"' + self._toStr(v) + '"'));
                    } else {
                        if (v != null) {
                            length = _trim ? $.trim(v.toString()).length : v.toString().length;
                        }
                        self._append(self._getStr('this') + '.substr(0,' + length + ') == ' + self._getStr('"' + self._toStr(f) + '"'));
                    }
                    self._setCommand(self.startsWith, f);
                    self._resetNegate();
                    return self;
                };
                this.endsWith = function (f, v) {
                    var val = (v == null) ? f : v,
                            length = _trim ? $.trim(val.toString()).length : val.toString().length;
                    if (_useProperties) {
                        self._append(self._getStr('jQuery.jgrid.getAccessor(this,\'' + f + '\')') + '.substr(' + self._getStr('jQuery.jgrid.getAccessor(this,\'' + f + '\')') + '.length-' + length + ',' + length + ') == "' + self._toStr(v) + '"');
                    } else {
                        self._append(self._getStr('this') + '.substr(' + self._getStr('this') + '.length-"' + self._toStr(f) + '".length,"' + self._toStr(f) + '".length) == "' + self._toStr(f) + '"');
                    }
                    self._setCommand(self.endsWith, f);
                    self._resetNegate();
                    return self;
                };
                this.contains = function (f, v) {
                    if (_useProperties) {
                        self._append(self._getStr('jQuery.jgrid.getAccessor(this,\'' + f + '\')') + '.indexOf("' + self._toStr(v) + '",0) > -1');
                    } else {
                        self._append(self._getStr('this') + '.indexOf("' + self._toStr(f) + '",0) > -1');
                    }
                    self._setCommand(self.contains, f);
                    self._resetNegate();
                    return self;
                };
                this.groupBy = function (by, dir, type, datefmt) {
                    if (!self._hasData()) {
                        return null;
                    }
                    return self._getGroup(_data, by, dir, type, datefmt);
                };
                this.orderBy = function (by, dir, stype, dfmt, sfunc) {
                    dir = dir == null ? "a" : $.trim(dir.toString().toLowerCase());
                    if (stype == null) {
                        stype = "text";
                    }
                    if (dfmt == null) {
                        dfmt = "Y-m-d";
                    }
                    if (sfunc == null) {
                        sfunc = false;
                    }
                    if (dir === "desc" || dir === "descending") {
                        dir = "d";
                    }
                    if (dir === "asc" || dir === "ascending") {
                        dir = "a";
                    }
                    _sorting.push({
                        by: by,
                        dir: dir,
                        type: stype,
                        datefmt: dfmt,
                        sfunc: sfunc
                    });
                    return self;
                };
                return self;
            };
            return new QueryObject(source, null);
        },
        getMethod: function (name) {
            return this.getAccessor($.fn.jqGrid, name);
        },
        extend: function (methods) {
            $.extend($.fn.jqGrid, methods);
            if (!this.no_legacy_api) {
                $.fn.extend(methods);
            }
        }
    });

    $.fn.jqGrid = function (pin) {
        if (typeof pin === 'string') {
            var fn = $.jgrid.getMethod(pin);
            if (!fn) {
                throw ("jqGrid - No such method: " + pin);
            }
            var args = $.makeArray(arguments).slice(1);
            return fn.apply(this, args);
        }
        return this.each(function () {
            if (this.grid) {
                return;
            }

            var p = $.extend(true, {
                url: "",
                height: 150,
                page: 1,
                rowNum: 20,
                rowTotal: null,
                records: 0,
                pager: "",
                pgbuttons: true,
                pginput: true,
                pgnumbers: false,
                // HB Customization
                pgnumlimit: 5,
                // HB Customization
                pagingpos: "right",
                // HB Customization
                colModel: [],
                rowList: [],
                colNames: [],
                sortorder: "asc",
                sortname: "",
                defaultsort: "Yes",
                // HB Customization
                datatype: "xml",
                mtype: "GET",
                altRows: false,
                selarrrow: [],
                savedRow: [],
                shrinkToFit: true,
                xmlReader: {},
                jsonReader: {},
                subGrid: false,
                subGridModel: [],
                reccount: 0,
                lastpage: 0,
                lastsort: 0,
                selrow: null,
                beforeSelectRow: null,
                onSelectRow: null,
                onSortCol: null,
                ondblClickRow: null,
                onRightClickRow: null,
                onPaging: null,
                onSelectAll: null,
                onInitGrid: null,
                loadComplete: null,
                gridComplete: null,
                frozenComplete: null,
                //HB Customization
                loadError: null,
                loadBeforeSend: null,
                afterInsertRow: null,
                beforeRequest: null,
                beforeProcessing: null,
                onHeaderClick: null,
                viewrecords: false,
                loadonce: false,
                multiselect: false,
                multikey: false,
                editurl: null,
                search: false,
                caption: "",
                hidegrid: true,
                hiddengrid: false,
                postData: {},
                userData: {},
                treeGrid: false,
                treeGridModel: 'nested',
                treeReader: {},
                treeANode: -1,
                ExpandColumn: null,
                tree_root_level: 0,
                prmNames: {
                    page: "page",
                    rows: "rows",
                    sort: "sidx",
                    order: "sord",
                    columns:"columns",
                    defsort: 'sdef',
                    // HB Customization
                    search: "_search",
                    nd: "nd",
                    id: "id",
                    oper: "oper",
                    editoper: "edit",
                    addoper: "add",
                    deloper: "del",
                    subgridid: "id",
                    npage: null,
                    totalrows: "totalrows"
                },
                forceFit: false,
                gridstate: "visible",
                cellEdit: false,
                cellsubmit: "remote",
                nv: 0,
                loadui: "enable",
                toolbar: [false, ""],
                scroll: false,
                multiboxonly: false,
                deselectAfterSort: true,
                scrollrows: false,
                autowidth: false,
                scrollOffset: 18,
                cellLayout: 5,
                subGridWidth: 20,
                multiselectWidth: 20,
                gridview: false,
                // HB Customization
                listview: '',
                rownumWidth: 25,
                rownumbers: false,
                pagerpos: 'center',
                recordpos: 'right',
                footerrow: false,
                userDataOnFooter: false,
                hoverrows: true,
                altclass: 'ui-priority-secondary',
                viewsortcols: [false, 'vertical', true],
                resizeclass: '',
                autoencode: false,
                remapColumns: [],
                ajaxGridOptions: {},
                direction: "ltr",
                toppager: false,
                toppaging: true,
                // HB Customization
                showpaging: true,
                // HB Customization
                headertitles: false,
                scrollTimeout: 40,
                data: [],
                _index: {},
                grouping: false,
                groupingView: {
                    groupField: [],
                    groupOrder: [],
                    groupText: [],
                    groupColumnShow: [],
                    groupSummary: [],
                    showSummaryOnHide: false,
                    sortitems: [],
                    sortnames: [],
                    summary: [],
                    summaryval: [],
                    plusicon: 'ui-icon-circlesmall-plus',
                    minusicon: 'ui-icon-circlesmall-minus',
                    displayField: [],
                    groupSummaryPos: [],
                    formatDisplayField: [],
                    _locgr: false
                },
                ignoreCase: false,
                cmTemplate: {},
                idPrefix: "",
                multiSort: false
            }, $.jgrid.defaults, pin || {});
            var ts = this,
                    grid = {
                        headers: [],
                        cols: [],
                        footers: [],
                        dragStart: function (i, x, y) {
                            var gridLeftPos = $(this.bDiv).offset().left;
                            this.resizing = {
                                idx: i,
                                startX: x.clientX,
                                sOL: x.clientX - gridLeftPos
                            };
                            this.hDiv.style.cursor = "col-resize";
                            this.curGbox = $("#rs_m" + $.jgrid.jqID(p.id), "#gbox_" + $.jgrid.jqID(p.id));
                            this.curGbox.css({
                                display: "block",
                                left: x.clientX - gridLeftPos,
                                top: y[1],
                                height: y[2]
                            });
                            $(ts).triggerHandler("jqGridResizeStart", [x, i]);
                            if ($.isFunction(p.resizeStart)) {
                                p.resizeStart.call(ts, x, i);
                            }
                            document.onselectstart = function () {
                                return false;
                            };
                        },
                        dragMove: function (x) {
                            if (this.resizing) {
                                var diff = x.clientX - this.resizing.startX,
                                        h = this.headers[this.resizing.idx],
                                        newWidth = p.direction === "ltr" ? h.width + diff : h.width - diff,
                                        hn, nWn;
                                if (newWidth > 33) {
                                    this.curGbox.css({
                                        left: this.resizing.sOL + diff
                                    });
                                    if (p.forceFit === true) {
                                        hn = this.headers[this.resizing.idx + p.nv];
                                        nWn = p.direction === "ltr" ? hn.width - diff : hn.width + diff;
                                        if (nWn > 33) {
                                            h.newWidth = newWidth;
                                            hn.newWidth = nWn;
                                        }
                                    } else {
                                        this.newWidth = p.direction === "ltr" ? p.tblwidth + diff : p.tblwidth - diff;
                                        h.newWidth = newWidth;
                                    }
                                }
                            }
                        },
                        dragEnd: function () {
                            this.hDiv.style.cursor = "default";
                            if (this.resizing) {
                                var idx = this.resizing.idx,
                                        nw = this.headers[idx].newWidth || this.headers[idx].width;
                                nw = parseInt(nw, 10);
                                this.resizing = false;
                                $("#rs_m" + $.jgrid.jqID(p.id)).css("display", "none");
                                p.colModel[idx].width = nw;
                                this.headers[idx].width = nw;
                                this.headers[idx].el.style.width = nw + "px";
                                this.cols[idx].style.width = nw + "px";
                                if (this.footers.length > 0) {
                                    this.footers[idx].style.width = nw + "px";
                                }
                                if (p.forceFit === true) {
                                    nw = this.headers[idx + p.nv].newWidth || this.headers[idx + p.nv].width;
                                    this.headers[idx + p.nv].width = nw;
                                    this.headers[idx + p.nv].el.style.width = nw + "px";
                                    this.cols[idx + p.nv].style.width = nw + "px";
                                    if (this.footers.length > 0) {
                                        this.footers[idx + p.nv].style.width = nw + "px";
                                    }
                                    p.colModel[idx + p.nv].width = nw;
                                } else {
                                    p.tblwidth = this.newWidth || p.tblwidth;
                                    $('table:first', this.bDiv).css("width", p.tblwidth + "px");
                                    $('table:first', this.hDiv).css("width", p.tblwidth + "px");
                                    this.hDiv.scrollLeft = this.bDiv.scrollLeft;
                                    if (p.footerrow) {
                                        $('table:first', this.sDiv).css("width", p.tblwidth + "px");
                                        this.sDiv.scrollLeft = this.bDiv.scrollLeft;
                                    }
                                }
                                $(ts).triggerHandler("jqGridResizeStop", [nw, idx]);
                                if ($.isFunction(p.resizeStop)) {
                                    p.resizeStop.call(ts, nw, idx);
                                }
                            }
                            this.curGbox = null;
                            document.onselectstart = function () {
                                return true;
                            };
                        },
                        populateVisible: function () {
                            if (grid.timer) {
                                clearTimeout(grid.timer);
                            }
                            grid.timer = null;
                            var dh = $(grid.bDiv).height();
                            if (!dh) {
                                return;
                            }
                            var table = $("table:first", grid.bDiv);
                            var rows, rh;
                            if (table[0].rows.length) {
                                try {
                                    rows = table[0].rows[1];
                                    rh = rows ? $(rows).outerHeight() || grid.prevRowHeight : grid.prevRowHeight;
                                } catch (pv) {
                                    rh = grid.prevRowHeight;
                                }
                            }
                            if (!rh) {
                                return;
                            }
                            grid.prevRowHeight = rh;
                            var rn = p.rowNum;
                            var scrollTop = grid.scrollTop = grid.bDiv.scrollTop;
                            var ttop = Math.round(table.position().top) - scrollTop;
                            var tbot = ttop + table.height();
                            var div = rh * rn;
                            var page, npage, empty;
                            if (tbot < dh && ttop <= 0 && (p.lastpage === undefined || parseInt((tbot + scrollTop + div - 1) / div, 10) <= p.lastpage)) {
                                npage = parseInt((dh - tbot + div - 1) / div, 10);
                                if (tbot >= 0 || npage < 2 || p.scroll === true) {
                                    page = Math.round((tbot + scrollTop) / div) + 1;
                                    ttop = -1;
                                } else {
                                    ttop = 1;
                                }
                            }
                            if (ttop > 0) {
                                page = parseInt(scrollTop / div, 10) + 1;
                                npage = parseInt((scrollTop + dh) / div, 10) + 2 - page;
                                empty = true;
                            }
                            if (npage) {
                                if (p.lastpage && (page > p.lastpage || p.lastpage === 1 || (page === p.page && page === p.lastpage))) {
                                    return;
                                }
                                if (grid.hDiv.loading) {
                                    grid.timer = setTimeout(grid.populateVisible, p.scrollTimeout);
                                } else {
                                    p.page = page;
                                    if (empty) {
                                        grid.selectionPreserver(table[0]);
                                        grid.emptyRows.call(table[0], false, false);
                                    }
                                    grid.populate(npage);
                                }
                            }
                        },
                        scrollGrid: function (e) {
                            if (p.scroll) {
                                var scrollTop = grid.bDiv.scrollTop;
                                if (grid.scrollTop === undefined) {
                                    grid.scrollTop = 0;
                                }
                                if (scrollTop !== grid.scrollTop) {
                                    grid.scrollTop = scrollTop;
                                    if (grid.timer) {
                                        clearTimeout(grid.timer);
                                    }
                                    grid.timer = setTimeout(grid.populateVisible, p.scrollTimeout);
                                }
                            }
                            grid.hDiv.scrollLeft = grid.bDiv.scrollLeft;
                            if (p.footerrow) {
                                grid.sDiv.scrollLeft = grid.bDiv.scrollLeft;
                            }
                            if (e) {
                                e.stopPropagation();
                            }
                        },
                        selectionPreserver: function (ts) {
                            var p = ts.p,
                                    sr = p.selrow,
                                    sra = p.selarrrow ? $.makeArray(p.selarrrow) : null,
                                    left = ts.grid.bDiv.scrollLeft,
                                    restoreSelection = function () {
                                        var i;
                                        p.selrow = null;
                                        p.selarrrow = [];
                                        if (p.multiselect && sra && sra.length > 0) {
                                            for (i = 0; i < sra.length; i++) {
                                                if (sra[i] !== sr) {
                                                    $(ts).jqGrid("setSelection", sra[i], false, null);
                                                }
                                            }
                                        }
                                        if (sr) {
                                            $(ts).jqGrid("setSelection", sr, false, null);
                                        }
                                        ts.grid.bDiv.scrollLeft = left;
                                        $(ts).unbind('.selectionPreserver', restoreSelection);
                                    };
                            $(ts).bind('jqGridGridComplete.selectionPreserver', restoreSelection);
                        }
                    };
            if (this.tagName.toUpperCase() !== 'TABLE') {
                alert("Element is not a table");
                return;
            }
            if (document.documentMode !== undefined) { // IE only
                if (document.documentMode <= 5) {
                    alert("Grid can not be used in this ('quirks') mode!");
                    return;
                }
            }
            $(this).empty().attr("tabindex", "0");
            this.p = p;
            this.p.useProp = !!$.fn.prop;
            var i, dir;
            if (this.p.colNames.length === 0) {
                for (i = 0; i < this.p.colModel.length; i++) {
                    this.p.colNames[i] = this.p.colModel[i].label || this.p.colModel[i].name;
                }
            }
            if (this.p.colNames.length !== this.p.colModel.length) {
                alert($.jgrid.errors.model);
                return;
            } else {
                // HB Customization << Start
                for (i = 0; i < this.p.colModel.length; i++) {
                    this.p.colModel[i].col_name = this.p.colNames[i];
                }
                // HB Customization >> End
            }
            var gv = $("<div class='ui-jqgrid-view'></div>"),
                    isMSIE = $.jgrid.msie;
            ts.p.direction = $.trim(ts.p.direction.toLowerCase());
            if ($.inArray(ts.p.direction, ["ltr", "rtl"]) === -1) {
                ts.p.direction = "ltr";
            }
            dir = ts.p.direction;

            $(gv).insertBefore(this);
            $(this).removeClass("scroll").appendTo(gv);
            var eg = $("<div class='ui-jqgrid ui-widget ui-widget-content ui-corner-all'></div>");
            $(eg).attr({
                "id": "gbox_" + this.id,
                "dir": dir
            }).insertBefore(gv);
            $(gv).attr("id", "gview_" + this.id).appendTo(eg);
            $("<div class='ui-widget-overlay jqgrid-overlay' id='lui_" + this.id + "'></div>").insertBefore(gv);
            $("<div class='loading ui-state-default ui-state-active' id='load_" + this.id + "'>" + this.p.loadtext + "</div>").insertBefore(gv);
            $(this).attr({
                cellspacing: "0",
                cellpadding: "0",
                border: "0",
                "role": "grid",
                "aria-multiselectable": !!this.p.multiselect,
                "aria-labelledby": "gbox_" + this.id
            });
            var sortkeys = ["shiftKey", "altKey", "ctrlKey"],
                    intNum = function (val, defval) {
                        val = parseInt(val, 10);
                        if (isNaN(val)) {
                            return defval || 0;
                        }
                        return val;
                    },
                    formatCol = function (pos, rowInd, tv, rawObject, rowId, rdata) {
                        var cm = ts.p.colModel[pos],
                                ral = cm.align,
                                result = "style=\"",
                                clas = cm.classes,
                                nm = cm.name,
                                celp, acp = [];
                        if (ral) {
                            result += "text-align:" + ral + ";";
                        }
                        if (cm.hidden === true) {
                            result += "display:none;";
                        }
                        if (rowInd === 0) {
                            result += "width: " + grid.headers[pos].width + "px;";
                        } else if (cm.cellattr && $.isFunction(cm.cellattr)) {
                            celp = cm.cellattr.call(ts, rowId, tv, rawObject, cm, rdata);
                            if (celp && typeof celp === "string") {
                                celp = celp.replace(/style/i, 'style').replace(/title/i, 'title');
                                if (celp.indexOf('title') > -1) {
                                    cm.title = false;
                                }
                                if (celp.indexOf('class') > -1) {
                                    clas = undefined;
                                }
                                acp = celp.replace('-style', '-sti').split(/style/);
                                if (acp.length === 2) {
                                    acp[1] = $.trim(acp[1].replace('-sti', '-style').replace("=", ""));
                                    if (acp[1].indexOf("'") === 0 || acp[1].indexOf('"') === 0) {
                                        acp[1] = acp[1].substring(1);
                                    }
                                    result += acp[1].replace(/'/gi, '"');
                                } else {
                                    result += "\"";
                                }
                            }
                        }
                        if (!acp.length) {
                            acp[0] = "";
                            result += "\"";
                        }
                        // HB Customization
                        result += (clas !== undefined ? (" class=\"" + clas + "\"") : "") + ((cm.title && tv) ? ("") : ""); // title=\""+$.jgrid.stripHtml(tv)+"\"
                        result += " aria-describedby=\"" + ts.p.id + "_" + nm + "\"";
                        return result + acp[0];
                    },
                    cellVal = function (val) {
                        // HB Customization << Start
                        if ($.isPlainObject(val)) {
                            return val;
                        }
                        // HB Customization >> End
                        return val == null || val === "" ? "&#160;" : (ts.p.autoencode ? $.jgrid.htmlEncode(val) : String(val));
                    },
                    formatter = function (rowId, cellval, colpos, rwdat, _act) {
                        var cm = ts.p.colModel[colpos],
                                v;
                        if (cm.formatter !== undefined) {
                            rowId = String(ts.p.idPrefix) !== "" ? $.jgrid.stripPref(ts.p.idPrefix, rowId) : rowId;
                            var opts = {
                                rowId: rowId,
                                colModel: cm,
                                gid: ts.p.id,
                                pos: colpos
                            };
                            if ($.isFunction(cm.formatter)) {
                                v = cm.formatter.call(ts, cellval, opts, rwdat, _act);
                            } else if (cm.checkFunc && cm.checkFunc === true && $.isFunction(window[cm.formatter])) {
                                v = window[cm.formatter].call(ts, cellval, opts, rwdat, _act);
                            } else if ($.fmatter) {
                                v = $.fn.fmatter.call(ts, cm.formatter, cellval, opts, rwdat, _act);
                            } else {
                                v = cellVal(cellval);
                            }
                        } else {
                            v = cellVal(cellval);
                        }
                        return v;
                    },
                    addCell = function (rowId, cell, pos, irow, srvr, rdata) {
                        var v, prp;
                        v = formatter(rowId, cell, pos, srvr, 'add');
                        prp = formatCol(pos, irow, v, srvr, rowId, rdata);
                        // HB Customization << Start
                        if ($.isPlainObject(v)) {
                            v = JSON.stringify(v, null, 2);
                            return "<td role=\"gridcell\" " + prp + " freeze=\"true\">" + v + "</td>";
                        } else {
                            return "<td role=\"gridcell\" " + prp + ">" + v + "</td>";
                        }
                        //return "<td role=\"gridcell\" " + prp + ">" + v + "</td>";
                        // HB Customization >> End
                    },
                    addMulti = function (rowid, pos, irow, checked) {
                        var v = "<input role=\"checkbox\" type=\"checkbox\"" + " id=\"jqg_" + ts.p.id + "_" + rowid + "\" class=\"regular-checkbox cbox\" name=\"jqg_" + ts.p.id + "_" + rowid + "\"" + (checked ? "checked=\"checked\"" : "") + "/><label for=\"jqg_" + ts.p.id + "_" + rowid + "\"></label>",
                                prp = formatCol(pos, irow, '', null, rowid, true);
                        return "<td role=\"gridcell\" " + prp + ">" + v + "</td>";
                    },
                    addRowNum = function (pos, irow, pG, rN) {
                        var v = (parseInt(pG, 10) - 1) * parseInt(rN, 10) + 1 + irow,
                                prp = formatCol(pos, irow, v, null, irow, true);
                        return "<td role=\"gridcell\" class=\"ui-state-default jqgrid-rownum\" " + prp + ">" + v + "</td>";
                    },
                    addListCell = function (rowId, cell, pos, irow, srvr, rdata) {
                        var v, prp;
                        v = formatter(rowId, cell, pos, srvr, 'add');
                        //prp = formatCol(pos, irow, v, srvr, rowId, rdata);
                        return v;
                    },
                    addGridCell = function (rowId, cell, pos, irow, srvr, rdata) {
                        var v, prp;
                        v = formatter(rowId, cell, pos, srvr, 'add');
                        //prp = formatCol(pos, irow, v, srvr, rowId, rdata);
                        return v;
                    },
                    addListData = function (rowId, rowData, listId, listTags, irow, srvr, rdata) {
                        var cspan = ($.isPlainObject(rowData)) ? Object.keys(rowData).length : 1;
                        var cdata = replaceListData($(listId).html(), rowData, listTags);
                        cdata = cdata.replace(new RegExp(listTags[0] + "id" + listTags[1], 'gi'), rowId);
                        return "<td colspan=\"" + cspan + "\" class=\"cit-list-view\"><div class=\"cit-list-block\" style=\"width:100%;\">" + cdata + "</div></td>";
                    },
                    addGridData = function (rowId, rowData, listId, listTags, irow, srvr, rdata) {
                        var chtml = ($(listId).find("repeat").length) ? $(listId).find("repeat").html() : $(listId).html();
                        var cdata = replaceListData(chtml, rowData, listTags);
                        cdata = cdata.replace(new RegExp(listTags[0] + "id" + listTags[1], 'gi'), rowId);
                        return cdata;
                    },
                    returnListAttr = function (cls) {
                        if (ts.p.listview == "view") {
                            if (!(cls && cls.match(/list-view-middle/gi))) {
                                cls = (cls) ? cls + " list-view-middle" : "list-view-middle";
                            }
                        } else {
                            if (cls && cls.match(/list-view-middle/gi)) {
                                cls = cls.replace(/list-view-middle/gi, "");
                            }
                        }
                        return cls;
                    },
                    replaceListData = function (liststr, obj, tags) {
                        if (!liststr || $.isEmptyObject(obj)) {
                            return liststr;
                        }
                        var open_tag = tags[0], close_tag = tags[1];
                        for (var i in obj) {
                            if (obj[i] == "&#160;") {
                                obj[i] = "";
                            }
                            liststr = liststr.replace(new RegExp(open_tag + i + close_tag, 'gi'), obj[i]);
                        }
                        if (typeof Mustache != 'undefined') {
                            liststr = Mustache.render(liststr, obj);
                        }
                        return liststr;
                    },
                    reader = function (datatype) {
                        var field, f = [],
                                j = 0,
                                i;
                        for (i = 0; i < ts.p.colModel.length; i++) {
                            field = ts.p.colModel[i];
                            if (field.name !== 'cb' && field.name !== 'subgrid' && field.name !== 'rn') {
                                f[j] = datatype === "local" ? field.name : ((datatype === "xml" || datatype === "xmlstring") ? field.xmlmap || field.name : field.jsonmap || field.name);
                                if (ts.p.keyIndex !== false && field.key === true) {
                                    ts.p.keyName = f[j];
                                }
                                j++;
                            }
                        }
                        return f;
                    },
                    orderedCols = function (offset) {
                        var order = ts.p.remapColumns;
                        if (!order || !order.length) {
                            order = $.map(ts.p.colModel, function (v, i) {
                                return i;
                            });
                        }
                        if (offset) {
                            order = $.map(order, function (v) {
                                return v < offset ? null : v - offset;
                            });
                        }
                        return order;
                    },
                    emptyRows = function (scroll, locdata) {
                        var firstrow;
                        if (this.p.deepempty) {
                            $(this.rows).slice(1).remove();
                        } else {
                            firstrow = this.rows.length > 0 ? this.rows[0] : null;
                            $(this.firstChild).empty().append(firstrow);
                        }
                        if (scroll && this.p.scroll) {
                            $(this.grid.bDiv.firstChild).css({
                                height: "auto"
                            });
                            $(this.grid.bDiv.firstChild.firstChild).css({
                                height: 0,
                                display: "none"
                            });
                            if (this.grid.bDiv.scrollTop !== 0) {
                                this.grid.bDiv.scrollTop = 0;
                            }
                        }
                        if (locdata === true && this.p.treeGrid) {
                            this.p.data = [];
                            this.p._index = {};
                        }
                    },
                    refreshIndex = function () {
                        var datalen = ts.p.data.length,
                                idname, i, val, ni = ts.p.rownumbers === true ? 1 : 0,
                                gi = ts.p.multiselect === true ? 1 : 0,
                                si = ts.p.subGrid === true ? 1 : 0;

                        if (ts.p.keyIndex === false || ts.p.loadonce === true) {
                            idname = ts.p.localReader.id;
                        } else {
                            idname = ts.p.colModel[ts.p.keyIndex + gi + si + ni].name;
                        }
                        for (i = 0; i < datalen; i++) {
                            val = $.jgrid.getAccessor(ts.p.data[i], idname);
                            if (val === undefined) {
                                val = String(i + 1);
                            }
                            ts.p._index[val] = i;
                        }
                    },
                    constructTr = function (id, hide, altClass, rd, cur, selected) {
                        var tabindex = '-1',
                                restAttr = '',
                                attrName, style = hide ? 'display:none;' : '',
                                classes = 'ui-widget-content jqgrow ui-row-' + ts.p.direction + (altClass ? ' ' + altClass : '') + (selected ? ' ui-state-highlight' : ''),
                                rowAttrObj = $(ts).triggerHandler("jqGridRowAttr", [rd, cur, id]);
                        if (typeof rowAttrObj !== "object") {
                            rowAttrObj = $.isFunction(ts.p.rowattr) ? ts.p.rowattr.call(ts, rd, cur, id) : {};
                        }
                        if (!$.isEmptyObject(rowAttrObj)) {
                            if (rowAttrObj.hasOwnProperty("id")) {
                                id = rowAttrObj.id;
                                delete rowAttrObj.id;
                            }
                            if (rowAttrObj.hasOwnProperty("tabindex")) {
                                tabindex = rowAttrObj.tabindex;
                                delete rowAttrObj.tabindex;
                            }
                            if (rowAttrObj.hasOwnProperty("style")) {
                                style += rowAttrObj.style;
                                delete rowAttrObj.style;
                            }
                            if (rowAttrObj.hasOwnProperty("class")) {
                                classes += ' ' + rowAttrObj['class'];
                                delete rowAttrObj['class'];
                            }
                            // dot't allow to change role attribute
                            try {
                                delete rowAttrObj.role;
                            } catch (ra) {
                            }
                            for (attrName in rowAttrObj) {
                                if (rowAttrObj.hasOwnProperty(attrName)) {
                                    restAttr += ' ' + attrName + '=' + rowAttrObj[attrName];
                                }
                            }
                        }
                        return '<tr role="row" id="' + id + '" tabindex="' + tabindex + '" class="' + classes + '"' + (style === '' ? '' : ' style="' + style + '"') + restAttr + '>';
                    },
                    addXmlData = function (xml, t, rcnt, more, adjust) {
                        var startReq = new Date(),
                                locdata = (ts.p.datatype !== "local" && ts.p.loadonce) || ts.p.datatype === "xmlstring",
                                xmlid = "_id_",
                                xmlRd = ts.p.xmlReader,
                                frd = ts.p.datatype === "local" ? "local" : "xml";
                        if (locdata) {
                            ts.p.data = [];
                            ts.p._index = {};
                            ts.p.localReader.id = xmlid;
                        }
                        ts.p.reccount = 0;
                        if ($.isXMLDoc(xml)) {
                            if (ts.p.treeANode === -1 && !ts.p.scroll) {
                                emptyRows.call(ts, false, true);
                                rcnt = 1;
                            } else {
                                rcnt = rcnt > 1 ? rcnt : 1;
                            }
                        } else {
                            return;
                        }
                        var self = $(ts),
                                i, fpos, ir = 0,
                                v, gi = ts.p.multiselect === true ? 1 : 0,
                                si = 0,
                                addSubGridCell, ni = ts.p.rownumbers === true ? 1 : 0,
                                idn, getId, f = [],
                                F, rd = {},
                                xmlr, rid, rowData = [],
                                cn = (ts.p.altRows === true) ? ts.p.altclass : "",
                                cn1;
                        if (ts.p.subGrid === true) {
                            si = 1;
                            addSubGridCell = $.jgrid.getMethod("addSubGridCell");
                        }
                        if (!xmlRd.repeatitems) {
                            f = reader(frd);
                        }
                        if (ts.p.keyIndex === false) {
                            idn = $.isFunction(xmlRd.id) ? xmlRd.id.call(ts, xml) : xmlRd.id;
                        } else {
                            idn = ts.p.keyIndex;
                        }
                        if (f.length > 0 && !isNaN(idn)) {
                            idn = ts.p.keyName;
                        }
                        if (String(idn).indexOf("[") === -1) {
                            if (f.length) {
                                getId = function (trow, k) {
                                    return $(idn, trow).text() || k;
                                };
                            } else {
                                getId = function (trow, k) {
                                    return $(xmlRd.cell, trow).eq(idn).text() || k;
                                };
                            }
                        } else {
                            getId = function (trow, k) {
                                return trow.getAttribute(idn.replace(/[\[\]]/g, "")) || k;
                            };
                        }
                        ts.p.userData = {};
                        ts.p.page = intNum($.jgrid.getXmlData(xml, xmlRd.page), ts.p.page);
                        ts.p.lastpage = intNum($.jgrid.getXmlData(xml, xmlRd.total), 1);
                        ts.p.records = intNum($.jgrid.getXmlData(xml, xmlRd.records));
                        if ($.isFunction(xmlRd.userdata)) {
                            ts.p.userData = xmlRd.userdata.call(ts, xml) || {};
                        } else {
                            $.jgrid.getXmlData(xml, xmlRd.userdata, true).each(function () {
                                ts.p.userData[this.getAttribute("name")] = $(this).text();
                            });
                        }
                        var gxml = $.jgrid.getXmlData(xml, xmlRd.root, true);
                        gxml = $.jgrid.getXmlData(gxml, xmlRd.row, true);
                        if (!gxml) {
                            gxml = [];
                        }
                        var gl = gxml.length,
                                j = 0,
                                grpdata = [],
                                rn = parseInt(ts.p.rowNum, 10),
                                br = ts.p.scroll ? $.jgrid.randId() : 1,
                                altr;
                        if (gl > 0 && ts.p.page <= 0) {
                            ts.p.page = 1;
                        }
                        if (gxml && gl) {
                            if (adjust) {
                                rn *= adjust + 1;
                            }
                            var afterInsRow = $.isFunction(ts.p.afterInsertRow),
                                    hiderow = false,
                                    groupingPrepare;
                            if (ts.p.grouping) {
                                hiderow = ts.p.groupingView.groupCollapse === true;
                                groupingPrepare = $.jgrid.getMethod("groupingPrepare");
                            }
                            while (j < gl) {
                                xmlr = gxml[j];
                                rid = getId(xmlr, br + j);
                                rid = ts.p.idPrefix + rid;
                                altr = rcnt === 0 ? 0 : rcnt + 1;
                                cn1 = (altr + j) % 2 === 1 ? cn : '';
                                var iStartTrTag = rowData.length;
                                rowData.push("");
                                if (ni) {
                                    rowData.push(addRowNum(0, j, ts.p.page, ts.p.rowNum));
                                }
                                if (gi) {
                                    rowData.push(addMulti(rid, ni, j, false));
                                }
                                if (si) {
                                    rowData.push(addSubGridCell.call(self, gi + ni, j + rcnt));
                                }
                                if (xmlRd.repeatitems) {
                                    if (!F) {
                                        F = orderedCols(gi + si + ni);
                                    }
                                    var cells = $.jgrid.getXmlData(xmlr, xmlRd.cell, true);
                                    $.each(F, function (k) {
                                        var cell = cells[this];
                                        if (!cell) {
                                            return false;
                                        }
                                        v = cell.textContent || cell.text;
                                        rd[ts.p.colModel[k + gi + si + ni].name] = v;
                                        rowData.push(addCell(rid, v, k + gi + si + ni, j + rcnt, xmlr, rd));
                                    });
                                } else {
                                    for (i = 0; i < f.length; i++) {
                                        v = $.jgrid.getXmlData(xmlr, f[i]);
                                        rd[ts.p.colModel[i + gi + si + ni].name] = v;
                                        rowData.push(addCell(rid, v, i + gi + si + ni, j + rcnt, xmlr, rd));
                                    }
                                }
                                rowData[iStartTrTag] = constructTr(rid, hiderow, cn1, rd, xmlr, false);
                                rowData.push("</tr>");
                                if (ts.p.grouping) {
                                    grpdata.push(rowData);
                                    if (!ts.p.groupingView._locgr) {
                                        groupingPrepare.call(self, rd, j);
                                    }
                                    rowData = [];
                                }
                                if (locdata || ts.p.treeGrid === true) {
                                    rd[xmlid] = $.jgrid.stripPref(ts.p.idPrefix, rid);
                                    ts.p.data.push(rd);
                                    ts.p._index[rd[xmlid]] = ts.p.data.length - 1;
                                }
                                if (ts.p.gridview === false) {
                                    $("tbody:first", t).append(rowData.join(''));
                                    self.triggerHandler("jqGridAfterInsertRow", [rid, rd, xmlr]);
                                    if (afterInsRow) {
                                        ts.p.afterInsertRow.call(ts, rid, rd, xmlr);
                                    }
                                    rowData = [];
                                }
                                rd = {};
                                ir++;
                                j++;
                                if (ir === rn) {
                                    break;
                                }
                            }
                        }
                        if (ts.p.gridview === true) {
                            fpos = ts.p.treeANode > -1 ? ts.p.treeANode : 0;
                            if (ts.p.grouping) {
                                if (!locdata) {
                                    self.jqGrid('groupingRender', grpdata, ts.p.colModel.length, ts.p.page, rn);
                                }
                                grpdata = null;
                            } else if (ts.p.treeGrid === true && fpos > 0) {
                                $(ts.rows[fpos]).after(rowData.join(''));
                            } else {
                                $("tbody:first", t).append(rowData.join(''));
                            }
                        }
                        if (ts.p.subGrid === true) {
                            try {
                                self.jqGrid("addSubGrid", gi + ni);
                            } catch (_) {
                            }
                        }
                        ts.p.totaltime = new Date() - startReq;
                        if (ir > 0) {
                            if (ts.p.records === 0) {
                                ts.p.records = gl;
                            }
                        }
                        rowData = null;
                        if (ts.p.treeGrid === true) {
                            try {
                                self.jqGrid("setTreeNode", fpos + 1, ir + fpos + 1);
                            } catch (e) {
                            }
                        }
                        if (!ts.p.treeGrid && !ts.p.scroll) {
                            ts.grid.bDiv.scrollTop = 0;
                        }
                        ts.p.reccount = ir;
                        ts.p.treeANode = -1;
                        if (ts.p.userDataOnFooter) {
                            self.jqGrid("footerData", "set", ts.p.userData, true);
                        }
                        if (locdata) {
                            ts.p.records = gl;
                            ts.p.lastpage = Math.ceil(gl / rn);
                        }
                        if (!more) {
                            ts.updatepager(false, true);
                        }
                        if (locdata) {
                            while (ir < gl) {
                                xmlr = gxml[ir];
                                rid = getId(xmlr, ir + br);
                                rid = ts.p.idPrefix + rid;
                                if (xmlRd.repeatitems) {
                                    if (!F) {
                                        F = orderedCols(gi + si + ni);
                                    }
                                    var cells2 = $.jgrid.getXmlData(xmlr, xmlRd.cell, true);
                                    $.each(F, function (k) {
                                        var cell = cells2[this];
                                        if (!cell) {
                                            return false;
                                        }
                                        v = cell.textContent || cell.text;
                                        rd[ts.p.colModel[k + gi + si + ni].name] = v;
                                    });
                                } else {
                                    for (i = 0; i < f.length; i++) {
                                        v = $.jgrid.getXmlData(xmlr, f[i]);
                                        rd[ts.p.colModel[i + gi + si + ni].name] = v;
                                    }
                                }
                                rd[xmlid] = $.jgrid.stripPref(ts.p.idPrefix, rid);
                                if (ts.p.grouping) {
                                    groupingPrepare.call(self, rd, ir);
                                }
                                ts.p.data.push(rd);
                                ts.p._index[rd[xmlid]] = ts.p.data.length - 1;
                                rd = {};
                                ir++;
                            }
                            if (ts.p.grouping) {
                                ts.p.groupingView._locgr = true;
                                self.jqGrid('groupingRender', grpdata, ts.p.colModel.length, ts.p.page, rn);
                                grpdata = null;
                            }
                        }
                    },
                    addJSONData = function (data, t, rcnt, more, adjust) {
                        var startReq = new Date();
                        if (data) {
                            if (ts.p.treeANode === -1 && !ts.p.scroll) {
                                emptyRows.call(ts, false, true);
                                rcnt = 1;
                            } else {
                                rcnt = rcnt > 1 ? rcnt : 1;
                            }
                        } else {
                            return;
                        }

                        var dReader, locid = "_id_",
                                frd, locdata = (ts.p.datatype !== "local" && ts.p.loadonce) || ts.p.datatype === "jsonstring";
                        if (locdata) {
                            ts.p.data = [];
                            ts.p._index = {};
                            ts.p.localReader.id = locid;
                        }
                        ts.p.reccount = 0;
                        if (ts.p.datatype === "local") {
                            dReader = ts.p.localReader;
                            frd = 'local';
                        } else {
                            dReader = ts.p.jsonReader;
                            frd = 'json';
                        }
                        var self = $(ts),
                                ir = 0,
                                v, i, j, f = [],
                                cur, gi = ts.p.multiselect ? 1 : 0,
                                si = ts.p.subGrid === true ? 1 : 0,
                                addSubGridCell, ni = ts.p.rownumbers === true ? 1 : 0,
                                arrayReader = orderedCols(gi + si + ni),
                                objectReader = reader(frd),
                                rowReader, len, drows, idn, rd = {}, gcnt = 0,
                                fpos, idr, rowData = [], listData = {}, gridData = {},
                                cn = (ts.p.altRows === true) ? ts.p.altclass : "",
                                cn1;
                        ts.p.page = intNum($.jgrid.getAccessor(data, dReader.page), ts.p.page);
                        ts.p.lastpage = intNum($.jgrid.getAccessor(data, dReader.total), 1);
                        ts.p.records = intNum($.jgrid.getAccessor(data, dReader.records));
                        ts.p.userData = $.jgrid.getAccessor(data, dReader.userdata) || {};
                        if (si) {
                            addSubGridCell = $.jgrid.getMethod("addSubGridCell");
                        }
                        if (ts.p.keyIndex === false) {
                            idn = $.isFunction(dReader.id) ? dReader.id.call(ts, data) : dReader.id;
                        } else {
                            idn = ts.p.keyIndex;
                        }
                        if (!dReader.repeatitems) {
                            f = objectReader;
                            if (f.length > 0 && !isNaN(idn)) {
                                idn = ts.p.keyName;
                            }
                        }
                        drows = $.jgrid.getAccessor(data, dReader.root);
                        if (drows == null && $.isArray(data)) {
                            drows = data;
                        }
                        if (!drows) {
                            drows = [];
                        }
                        len = drows.length;
                        i = 0;
                        if (len > 0 && ts.p.page <= 0) {
                            ts.p.page = 1;
                        }
                        var rn = parseInt(ts.p.rowNum, 10),
                                br = ts.p.scroll ? $.jgrid.randId() : 1,
                                altr, selected = false,
                                selr;
                        if (adjust) {
                            rn *= adjust + 1;
                        }
                        if (ts.p.datatype === "local" && !ts.p.deselectAfterSort) {
                            selected = true;
                        }
                        var afterInsRow = $.isFunction(ts.p.afterInsertRow),
                                grpdata = [],
                                hiderow = false,
                                groupingPrepare;
                        if (ts.p.grouping) {
                            hiderow = ts.p.groupingView.groupCollapse === true;
                            groupingPrepare = $.jgrid.getMethod("groupingPrepare");
                        }
                        while (i < len) {
                            cur = drows[i];
                            idr = $.jgrid.getAccessor(cur, idn);
                            if (idr === undefined) {
                                if (typeof idn === "number" && ts.p.colModel[idn + gi + si + ni] != null) {
                                    // reread id by name
                                    idr = $.jgrid.getAccessor(cur, ts.p.colModel[idn + gi + si + ni].name);
                                }
                                if (idr === undefined) {
                                    idr = br + i;
                                    if (f.length === 0) {
                                        if (dReader.cell) {
                                            var ccur = $.jgrid.getAccessor(cur, dReader.cell) || cur;
                                            idr = ccur != null && ccur[idn] !== undefined ? ccur[idn] : idr;
                                            ccur = null;
                                        }
                                    }
                                }
                            }
                            idr = ts.p.idPrefix + idr;
                            altr = rcnt === 1 ? 0 : rcnt;
                            cn1 = (altr + i) % 2 === 1 ? cn : '';
                            if (selected) {
                                if (ts.p.multiselect) {
                                    selr = ($.inArray(idr, ts.p.selarrrow) !== -1);
                                } else {
                                    selr = (idr === ts.p.selrow);
                                }
                            }
                            var iStartTrTag = rowData.length;
                            if (!(ts.p.listview == "grid")) {
                                rowData.push("");
                                if (ni) {
                                    ts.p.colModel[0].classes = returnListAttr(ts.p.colModel[0].classes);
                                    rowData.push(addRowNum(0, i, ts.p.page, ts.p.rowNum));
                                }
                                if (gi) {
                                    ts.p.colModel[ni].classes = returnListAttr(ts.p.colModel[ni].classes);
                                    rowData.push(addMulti(idr, ni, i, selr));
                                }
                                if (si) {
                                    rowData.push(addSubGridCell.call(self, gi + ni, i + rcnt));
                                }
                            }
                            rowReader = objectReader;
                            if (dReader.repeatitems) {
                                if (dReader.cell) {
                                    cur = $.jgrid.getAccessor(cur, dReader.cell) || cur;
                                }
                                if ($.isArray(cur)) {
                                    rowReader = arrayReader;
                                }
                            }
                            for (j = 0; j < rowReader.length; j++) {
                                v = $.jgrid.getAccessor(cur, rowReader[j]);
                                rd[ts.p.colModel[j + gi + si + ni].name] = v;
                                // HB Customization << Start
                                if (ts.p.listview == "grid") {
                                    gridData[ts.p.colModel[j + gi + si + ni].name] = addGridCell(idr, v, j + gi + si + ni, i + rcnt, cur, rd);
                                } else if (ts.p.listview == "view") {
                                    listData[ts.p.colModel[j + gi + si + ni].name] = addListCell(idr, v, j + gi + si + ni, i + rcnt, cur, rd);
                                } else {
                                    rowData.push(addCell(idr, v, j + gi + si + ni, i + rcnt, cur, rd));
                                }
                                // HB Customization >> End
                            }
                            // HB Customization << Start
                            if (ts.p.listview == "grid") {
                                gcnt = Object.keys(gridData).length;
                                rowData.push(addGridData(idr, gridData, ts.p.gridtemplate, ts.p.listtags, i + rcnt, cur, rd));
                                gridData = {};
                            } else {
                                if (ts.p.listview == "view") {
                                    rowData.push(addListData(idr, listData, ts.p.viewtemplate, ts.p.listtags, i + rcnt, cur, rd));
                                }
                                rowData[iStartTrTag] = constructTr(idr, hiderow, cn1, rd, cur, selr);
                                rowData.push("</tr>");

                                if (ts.p.grouping) {
                                    grpdata.push(rowData);
                                    if (!ts.p.groupingView._locgr) {
                                        groupingPrepare.call(self, rd, i);
                                    }
                                    rowData = [];
                                    listData = {};
                                }
                                if (locdata || ts.p.treeGrid === true) {
                                    rd[locid] = $.jgrid.stripPref(ts.p.idPrefix, idr);
                                    ts.p.data.push(rd);
                                    ts.p._index[rd[locid]] = ts.p.data.length - 1;
                                }
                                if (ts.p.gridview === false) {
                                    $("#" + $.jgrid.jqID(ts.p.id) + " tbody:first").append(rowData.join(''));
                                    self.triggerHandler("jqGridAfterInsertRow", [idr, rd, cur]);
                                    if (afterInsRow) {
                                        ts.p.afterInsertRow.call(ts, idr, rd, cur);
                                    }
                                    rowData = [];  //ari=0;
                                    listData = {};
                                }
                            }
                            rd = {};
                            ir++;
                            i++;
                            if (ir === rn) {
                                break;
                            }
                        }
                        if (ts.p.listview == "grid") {
                            if (ni) {
                                gcnt++;
                            }
                            if (gi) {
                                gcnt++;
                            }
                            if (si) {
                                gcnt++;
                            }
                            var grid_str = constructTr(1, false, '', rd, cur, selr), grid_cnt;
                            if ($(ts.p.gridtemplate).find("repeat").length) {
                                grid_cnt = $(ts.p.gridtemplate).html();
                            } else {
                                grid_cnt = rowData.join('');
                            }
                            grid_str += '<td colspan="' + gcnt + '" class="cit-grid-view">' + grid_cnt + '</td></tr>';
                            $("#" + $.jgrid.jqID(ts.p.id) + " tbody:first").append(grid_str);
                            if ($("#" + $.jgrid.jqID(ts.p.id) + " tbody:first").find("repeat").length) {
                                $("#" + $.jgrid.jqID(ts.p.id) + " tbody:first").find("repeat").replaceWith(rowData.join(''));
                            }
                        }
                        // HB Customization >> End
                        if (ts.p.gridview === true) {
                            fpos = ts.p.treeANode > -1 ? ts.p.treeANode : 0;
                            if (ts.p.grouping) {
                                if (!locdata) {
                                    self.jqGrid('groupingRender', grpdata, ts.p.colModel.length, ts.p.page, rn);
                                    grpdata = null;
                                }
                            } else if (ts.p.treeGrid === true && fpos > 0) {
                                $(ts.rows[fpos]).after(rowData.join(''));
                            } else {
                                $("#" + $.jgrid.jqID(ts.p.id) + " tbody:first").append(rowData.join(''));
                            }
                        }
                        if (ts.p.subGrid === true) {
                            try {
                                self.jqGrid("addSubGrid", gi + ni);
                            } catch (_) {
                            }
                        }
                        ts.p.totaltime = new Date() - startReq;
                        if (ir > 0) {
                            if (ts.p.records === 0) {
                                ts.p.records = len;
                            }
                        }
                        rowData = null;
                        if (ts.p.treeGrid === true) {
                            try {
                                self.jqGrid("setTreeNode", fpos + 1, ir + fpos + 1);
                            } catch (e) {
                            }
                        }
                        if (!ts.p.treeGrid && !ts.p.scroll) {
                            ts.grid.bDiv.scrollTop = 0;
                        }
                        ts.p.reccount = ir;
                        ts.p.treeANode = -1;
                        if (ts.p.userDataOnFooter) {
                            self.jqGrid("footerData", "set", ts.p.userData, true);
                        }
                        if (locdata) {
                            ts.p.records = len;
                            ts.p.lastpage = Math.ceil(len / rn);
                        }
                        if (!more) {
                            ts.updatepager(false, true);
                        }
                        if (locdata) {
                            while (ir < len && drows[ir]) {
                                cur = drows[ir];
                                idr = $.jgrid.getAccessor(cur, idn);
                                if (idr === undefined) {
                                    if (typeof idn === "number" && ts.p.colModel[idn + gi + si + ni] != null) {
                                        // reread id by name
                                        idr = $.jgrid.getAccessor(cur, ts.p.colModel[idn + gi + si + ni].name);
                                    }
                                    if (idr === undefined) {
                                        idr = br + ir;
                                        if (f.length === 0) {
                                            if (dReader.cell) {
                                                var ccur2 = $.jgrid.getAccessor(cur, dReader.cell) || cur;
                                                idr = ccur2 != null && ccur2[idn] !== undefined ? ccur2[idn] : idr;
                                                ccur2 = null;
                                            }
                                        }
                                    }
                                }
                                if (cur) {
                                    idr = ts.p.idPrefix + idr;
                                    rowReader = objectReader;
                                    if (dReader.repeatitems) {
                                        if (dReader.cell) {
                                            cur = $.jgrid.getAccessor(cur, dReader.cell) || cur;
                                        }
                                        if ($.isArray(cur)) {
                                            rowReader = arrayReader;
                                        }
                                    }

                                    for (j = 0; j < rowReader.length; j++) {
                                        rd[ts.p.colModel[j + gi + si + ni].name] = $.jgrid.getAccessor(cur, rowReader[j]);
                                    }
                                    rd[locid] = $.jgrid.stripPref(ts.p.idPrefix, idr);
                                    if (ts.p.grouping) {
                                        groupingPrepare.call(self, rd, ir);
                                    }
                                    ts.p.data.push(rd);
                                    ts.p._index[rd[locid]] = ts.p.data.length - 1;
                                    rd = {};
                                }
                                ir++;
                            }
                            if (ts.p.grouping) {
                                ts.p.groupingView._locgr = true;
                                self.jqGrid('groupingRender', grpdata, ts.p.colModel.length, ts.p.page, rn);
                                grpdata = null;
                            }
                        }
                    },
                    addLocalData = function () {
                        var st = ts.p.multiSort ? [] : "",
                                sto = [],
                                fndsort = false,
                                cmtypes = {},
                                grtypes = [],
                                grindexes = [],
                                srcformat, sorttype, newformat;
                        if (!$.isArray(ts.p.data)) {
                            return;
                        }
                        var grpview = ts.p.grouping ? ts.p.groupingView : false,
                                lengrp, gin;
                        $.each(ts.p.colModel, function () {
                            sorttype = this.sorttype || "text";
                            if (sorttype === "date" || sorttype === "datetime") {
                                if (this.formatter && typeof this.formatter === 'string' && this.formatter === 'date') {
                                    if (this.formatoptions && this.formatoptions.srcformat) {
                                        srcformat = this.formatoptions.srcformat;
                                    } else {
                                        srcformat = $.jgrid.formatter.date.srcformat;
                                    }
                                    if (this.formatoptions && this.formatoptions.newformat) {
                                        newformat = this.formatoptions.newformat;
                                    } else {
                                        newformat = $.jgrid.formatter.date.newformat;
                                    }
                                } else {
                                    srcformat = newformat = this.datefmt || "Y-m-d";
                                }
                                cmtypes[this.name] = {
                                    "stype": sorttype,
                                    "srcfmt": srcformat,
                                    "newfmt": newformat,
                                    "sfunc": this.sortfunc || null
                                };
                            } else {
                                cmtypes[this.name] = {
                                    "stype": sorttype,
                                    "srcfmt": '',
                                    "newfmt": '',
                                    "sfunc": this.sortfunc || null
                                };
                            }
                            if (ts.p.grouping) {
                                for (gin = 0, lengrp = grpview.groupField.length; gin < lengrp; gin++) {
                                    if (this.name === grpview.groupField[gin]) {
                                        var grindex = this.name;
                                        if (this.index) {
                                            grindex = this.index;
                                        }
                                        grtypes[gin] = cmtypes[grindex];
                                        grindexes[gin] = grindex;
                                    }
                                }
                            }
                            if (ts.p.multiSort) {
                                if (this.lso) {
                                    st.push(this.name);
                                    var tmplso = this.lso.split("-");
                                    sto.push(tmplso[tmplso.length - 1]);
                                }
                            } else {
                                if (!fndsort && (this.index === ts.p.sortname || this.name === ts.p.sortname)) {
                                    st = this.name; // ???
                                    fndsort = true;
                                }
                            }
                        });
                        if (ts.p.treeGrid) {
                            $(ts).jqGrid("SortTree", st, ts.p.sortorder, cmtypes[st].stype || 'text', cmtypes[st].srcfmt || '');
                            return;
                        }
                        var compareFnMap = {
                            'eq': function (queryObj) {
                                return queryObj.equals;
                            },
                            'ne': function (queryObj) {
                                return queryObj.notEquals;
                            },
                            'lt': function (queryObj) {
                                return queryObj.less;
                            },
                            'le': function (queryObj) {
                                return queryObj.lessOrEquals;
                            },
                            'gt': function (queryObj) {
                                return queryObj.greater;
                            },
                            'ge': function (queryObj) {
                                return queryObj.greaterOrEquals;
                            },
                            'cn': function (queryObj) {
                                return queryObj.contains;
                            },
                            'nc': function (queryObj, op) {
                                return op === "OR" ? queryObj.orNot().contains : queryObj.andNot().contains;
                            },
                            'bw': function (queryObj) {
                                return queryObj.startsWith;
                            },
                            'bn': function (queryObj, op) {
                                return op === "OR" ? queryObj.orNot().startsWith : queryObj.andNot().startsWith;
                            },
                            'en': function (queryObj, op) {
                                return op === "OR" ? queryObj.orNot().endsWith : queryObj.andNot().endsWith;
                            },
                            'ew': function (queryObj) {
                                return queryObj.endsWith;
                            },
                            'ni': function (queryObj, op) {
                                return op === "OR" ? queryObj.orNot().equals : queryObj.andNot().equals;
                            },
                            'in': function (queryObj) {
                                return queryObj.equals;
                            },
                            'nu': function (queryObj) {
                                return queryObj.isNull;
                            },
                            'nn': function (queryObj, op) {
                                return op === "OR" ? queryObj.orNot().isNull : queryObj.andNot().isNull;
                            }

                        },
                        query = $.jgrid.from(ts.p.data);
                        if (ts.p.ignoreCase) {
                            query = query.ignoreCase();
                        }

                        function tojLinq(group) {
                            var s = 0,
                                    index, gor, ror, opr, rule;
                            if (group.groups != null) {
                                gor = group.groups.length && group.groupOp.toString().toUpperCase() === "OR";
                                if (gor) {
                                    query.orBegin();
                                }
                                for (index = 0; index < group.groups.length; index++) {
                                    if (s > 0 && gor) {
                                        query.or();
                                    }
                                    try {
                                        tojLinq(group.groups[index]);
                                    } catch (e) {
                                        alert(e);
                                    }
                                    s++;
                                }
                                if (gor) {
                                    query.orEnd();
                                }
                            }
                            if (group.rules != null) {
                                //if(s>0) {
                                //	var result = query.select();
                                //	query = $.jgrid.from( result);
                                //	if (ts.p.ignoreCase) { query = query.ignoreCase(); } 
                                //}
                                try {
                                    ror = group.rules.length && group.groupOp.toString().toUpperCase() === "OR";
                                    if (ror) {
                                        query.orBegin();
                                    }
                                    for (index = 0; index < group.rules.length; index++) {
                                        rule = group.rules[index];
                                        opr = group.groupOp.toString().toUpperCase();
                                        if (compareFnMap[rule.op] && rule.field) {
                                            if (s > 0 && opr && opr === "OR") {
                                                query = query.or();
                                            }
                                            query = compareFnMap[rule.op](query, opr)(rule.field, rule.data, cmtypes[rule.field]);
                                        }
                                        s++;
                                    }
                                    if (ror) {
                                        query.orEnd();
                                    }
                                } catch (g) {
                                    alert(g);
                                }
                            }
                        }

                        if (ts.p.search === true) {
                            var srules = ts.p.postData.filters;
                            if (srules) {
                                if (typeof srules === "string") {
                                    srules = $.jgrid.parse(srules);
                                }
                                tojLinq(srules);
                            } else {
                                try {
                                    query = compareFnMap[ts.p.postData.searchOper](query)(ts.p.postData.searchField, ts.p.postData.searchString, cmtypes[ts.p.postData.searchField]);
                                } catch (se) {
                                }
                            }
                        }
                        if (ts.p.grouping) {
                            for (gin = 0; gin < lengrp; gin++) {
                                query.orderBy(grindexes[gin], grpview.groupOrder[gin], grtypes[gin].stype, grtypes[gin].srcfmt);
                            }
                        }
                        if (ts.p.multiSort) {
                            $.each(st, function (i) {
                                query.orderBy(this, sto[i], cmtypes[this].stype, cmtypes[this].srcfmt, cmtypes[this].sfunc);
                            });
                        } else {
                            if (st && ts.p.sortorder && fndsort) {
                                if (ts.p.sortorder.toUpperCase() === "DESC") {
                                    query.orderBy(ts.p.sortname, "d", cmtypes[st].stype, cmtypes[st].srcfmt, cmtypes[st].sfunc);
                                } else {
                                    query.orderBy(ts.p.sortname, "a", cmtypes[st].stype, cmtypes[st].srcfmt, cmtypes[st].sfunc);
                                }
                            }
                        }
                        var queryResults = query.select(),
                                recordsperpage = parseInt(ts.p.rowNum, 10),
                                total = queryResults.length,
                                page = parseInt(ts.p.page, 10),
                                totalpages = Math.ceil(total / recordsperpage),
                                retresult = {};
                        if ((ts.p.search || ts.p.resetsearch) && ts.p.grouping && ts.p.groupingView._locgr) {
                            ts.p.groupingView.groups = [];
                            var j, grPrepare = $.jgrid.getMethod("groupingPrepare"),
                                    key, udc;
                            if (ts.p.footerrow && ts.p.userDataOnFooter) {
                                for (key in ts.p.userData) {
                                    if (ts.p.userData.hasOwnProperty(key)) {
                                        ts.p.userData[key] = 0;
                                    }
                                }
                                udc = true;
                            }
                            for (j = 0; j < total; j++) {
                                if (udc) {
                                    for (key in ts.p.userData) {
                                        ts.p.userData[key] += parseFloat(queryResults[j][key] || 0);
                                    }
                                }
                                grPrepare.call($(ts), queryResults[j], j, recordsperpage);
                            }
                        }
                        queryResults = queryResults.slice((page - 1) * recordsperpage, page * recordsperpage);
                        query = null;
                        cmtypes = null;
                        retresult[ts.p.localReader.total] = totalpages;
                        retresult[ts.p.localReader.page] = page;
                        retresult[ts.p.localReader.records] = total;
                        retresult[ts.p.localReader.root] = queryResults;
                        retresult[ts.p.localReader.userdata] = ts.p.userData;
                        queryResults = null;
                        return retresult;
                    },
                    updatepager = function (rn, dnd) {
                        var cp, last, base, from, to, tot, fmt, pgboxes = "",
                                sppg, tspg = ts.p.pager ? "_" + $.jgrid.jqID(ts.p.pager.substr(1)) : "",
                                tspg_t = ts.p.toppager ? "_" + ts.p.toppager.substr(1) : "";
                        var spnm = "", spnl, spsl, spel, spcn;
                        // HB Customization
                        base = parseInt(ts.p.page, 10) - 1;
                        if (base < 0) {
                            base = 0;
                        }
                        base = base * parseInt(ts.p.rowNum, 10);
                        to = base + ts.p.reccount;
                        if (ts.p.scroll) {
                            var rows = $("tbody:first > tr:gt(0)", ts.grid.bDiv);
                            base = to - rows.length;
                            ts.p.reccount = rows.length;
                            var rh = rows.outerHeight() || ts.grid.prevRowHeight;
                            if (rh) {
                                var top = base * rh;
                                var height = parseInt(ts.p.records, 10) * rh;
                                $(">div:first", ts.grid.bDiv).css({
                                    height: height
                                }).children("div:first").css({
                                    height: top,
                                    display: top ? "" : "none"
                                });
                                if (ts.grid.bDiv.scrollTop == 0 && ts.p.page > 1) {
                                    ts.grid.bDiv.scrollTop = ts.p.rowNum * (ts.p.page - 1) * rh;
                                }
                            }
                            ts.grid.bDiv.scrollLeft = ts.grid.hDiv.scrollLeft;
                        }
                        pgboxes = ts.p.pager || "";
                        pgboxes += ts.p.toppager ? (pgboxes ? "," + ts.p.toppager : ts.p.toppager) : "";
                        if (pgboxes) {
                            fmt = $.jgrid.formatter.integer || {};
                            cp = intNum(ts.p.page);
                            last = intNum(ts.p.lastpage);
                            $(".selbox", pgboxes)[this.p.useProp ? 'prop' : 'attr']("disabled", false);
                            if (ts.p.pginput === true) {
                                //HB Customization << Start
                                $('.ui-pg-input', pgboxes).val(ts.p.page);
                                sppg = ts.p.toppager ? '#sp_1' + tspg + ",#sp_1" + tspg_t : '#sp_1' + tspg;
                                if (ts.p.pgnumbers === true) {
                                    spnl = ts.p.pgnumlimit;
                                    spnm = $('<ul class="ui-pg-number-list"/>');
                                    spcn = (ts.p.page) ? ts.p.page : 1;
                                    spnl = Math.floor(ts.p.pgnumlimit / 2);
                                    spsl = (spcn > ts.p.pgnumlimit) ? spcn - spnl : 1;
                                    spel = spsl + ts.p.pgnumlimit;
                                    for (var i = spsl; i < spel; i++) {
                                        if (i == spcn) {
                                            spnm.append('<li class="ui-pg-number active" aria-pg-num="' + i + '">' + i + '</li>');
                                        } else {
                                            spnm.append('<li class="ui-pg-number" aria-pg-num="' + i + '">' + i + '</li>');
                                        }
                                        if (!ts.p.lastpage || ts.p.lastpage == i) {
                                            break;
                                        }
                                    }
                                    $(sppg).html('');
                                    spnm.appendTo(sppg);
                                } else {
                                    $(sppg).html($.fmatter ? $.fmatter.util.NumberFormat(ts.p.lastpage, fmt) : ts.p.lastpage);
                                }
                                //HB Customization >> End
                            }
                            if (ts.p.viewrecords) {
                                if (ts.p.reccount === 0) {
                                    $(".ui-paging-info", pgboxes).html(ts.p.emptyrecords);
                                } else {
                                    from = base + 1;
                                    tot = ts.p.records;
                                    if ($.fmatter) {
                                        from = $.fmatter.util.NumberFormat(from, fmt);
                                        to = $.fmatter.util.NumberFormat(to, fmt);
                                        tot = $.fmatter.util.NumberFormat(tot, fmt);
                                    }
                                    $(".ui-paging-info", pgboxes).html($.jgrid.format(ts.p.recordtext, from, to, tot));
                                }
                            }
                            if (ts.p.pgbuttons === true) {
                                if (cp <= 0) {
                                    cp = last = 0;
                                }
                                if (cp === 1 || cp === 0) {
                                    $("#first" + tspg + ", #prev" + tspg).addClass('ui-state-disabled').removeClass('ui-state-hover');
                                    if (ts.p.toppager) {
                                        $("#first_t" + tspg_t + ", #prev_t" + tspg_t).addClass('ui-state-disabled').removeClass('ui-state-hover');
                                    }
                                } else {
                                    $("#first" + tspg + ", #prev" + tspg).removeClass('ui-state-disabled');
                                    if (ts.p.toppager) {
                                        $("#first_t" + tspg_t + ", #prev_t" + tspg_t).removeClass('ui-state-disabled');
                                    }
                                }
                                if (cp === last || cp === 0) {
                                    $("#next" + tspg + ", #last" + tspg).addClass('ui-state-disabled').removeClass('ui-state-hover');
                                    if (ts.p.toppager) {
                                        $("#next_t" + tspg_t + ", #last_t" + tspg_t).addClass('ui-state-disabled').removeClass('ui-state-hover');
                                    }
                                } else {
                                    $("#next" + tspg + ", #last" + tspg).removeClass('ui-state-disabled');
                                    if (ts.p.toppager) {
                                        $("#next_t" + tspg_t + ", #last_t" + tspg_t).removeClass('ui-state-disabled');
                                    }
                                }
                            }
                        }
                        if (rn === true && ts.p.rownumbers === true) {
                            $(">td.jqgrid-rownum", ts.rows).each(function (i) {
                                $(this).html(base + 1 + i);
                            });
                        }
                        if (dnd && ts.p.jqgdnd) {
                            $(ts).jqGrid('gridDnD', 'updateDnD');
                        }
                        $(ts).triggerHandler("jqGridGridComplete");
                        if ($.isFunction(ts.p.gridComplete)) {
                            ts.p.gridComplete.call(ts);
                        }
                        $(ts).triggerHandler("jqGridAfterGridComplete");
                    },
                    beginReq = function () {
                        ts.grid.hDiv.loading = true;
                        if (ts.p.hiddengrid) {
                            return;
                        }
                        switch (ts.p.loadui) {
                            case "disable":
                                break;
                            case "enable":
                                $("#load_" + $.jgrid.jqID(ts.p.id)).show();
                                break;
                            case "block":
                                $("#lui_" + $.jgrid.jqID(ts.p.id)).show();
                                $("#load_" + $.jgrid.jqID(ts.p.id)).show();
                                break;
                        }
                    },
                    endReq = function () {
                        ts.grid.hDiv.loading = false;
                        switch (ts.p.loadui) {
                            case "disable":
                                break;
                            case "enable":
                                $("#load_" + $.jgrid.jqID(ts.p.id)).hide();
                                break;
                            case "block":
                                $("#lui_" + $.jgrid.jqID(ts.p.id)).hide();
                                $("#load_" + $.jgrid.jqID(ts.p.id)).hide();
                                break;
                        }
                    },
                    populate = function (npage) {
                        if (!ts.grid.hDiv.loading) {
                            var pvis = ts.p.scroll && npage === false,
                                    prm = {},
                                    dt, dstr, pN = ts.p.prmNames;
                            if (ts.p.page <= 0) {
                                ts.p.page = Math.min(1, ts.p.lastpage);
                            }
                            if (pN.search !== null) {
                                prm[pN.search] = ts.p.search;
                            }
                            if (pN.nd !== null) {
                                prm[pN.nd] = new Date().getTime();
                            }
                            if (pN.rows !== null) {
                                prm[pN.rows] = ts.p.rowNum;
                            }
                            if (pN.page !== null) {
                                prm[pN.page] = ts.p.page;
                            }
                            if (pN.sort !== null) {
                                prm[pN.sort] = ts.p.sortname;
                            }
                            if (pN.order !== null) {
                                prm[pN.order] = ts.p.sortorder;
                            }
                            // HB Customization << Start
                            if (pN.defsort !== null) {
                                prm[pN.defsort] = ts.p.defaultsort;
                            }
                            if(ts.p.searchGrid && ts.p.searchGrid.globalFilter){
                                var visible = [];
                                $.each(ts.p.colModel, function (cmIndex, cmValue) {
                                    if (!(cmValue.name == "cb" || cmValue.name == "subgrid" || cmValue.name == "prec")) {
                                        if(!cmValue.hidden){
                                            visible.push(cmValue.name);
                                        }
                                    }
                                });
                                prm[pN.columns] = JSON.stringify(visible);
                            }
                            // HB Customization >> End
                            if (ts.p.rowTotal !== null && pN.totalrows !== null) {
                                prm[pN.totalrows] = ts.p.rowTotal;
                            }
                            var lcf = $.isFunction(ts.p.loadComplete),
                                    lc = lcf ? ts.p.loadComplete : null;
                            var adjust = 0;
                            npage = npage || 1;
                            if (npage > 1) {
                                if (pN.npage !== null) {
                                    prm[pN.npage] = npage;
                                    adjust = npage - 1;
                                    npage = 1;
                                } else {
                                    lc = function (req) {
                                        ts.p.page++;
                                        ts.grid.hDiv.loading = false;
                                        if (lcf) {
                                            ts.p.loadComplete.call(ts, req);
                                        }
                                        populate(npage - 1);
                                    };
                                }
                            } else if (pN.npage !== null) {
                                delete ts.p.postData[pN.npage];
                            }
                            if (ts.p.grouping) {
                                $(ts).jqGrid('groupingSetup');
                                var grp = ts.p.groupingView,
                                        gi, gs = "";
                                var gso = "";
                                // HB Customization
                                for (gi = 0; gi < grp.groupField.length; gi++) {
                                    var index = grp.groupField[gi];
                                    $.each(ts.p.colModel, function (cmIndex, cmValue) {
                                        if (cmValue.name === index && cmValue.index) {
                                            index = cmValue.index;
                                        }
                                    });
                                    // HB Customization << Start
                                    gs += index + ",";
                                    gso += grp.groupOrder[gi] + ",";
                                    // HB Customization >> End
                                }
                                prm[pN.sort] = gs + prm[pN.sort];
                                // HB Customization
                                prm[pN.order] = gso + prm[pN.order];
                            }
                            $.extend(ts.p.postData, prm);
                            var rcnt = !ts.p.scroll ? 1 : ts.rows.length - 1;
                            var bfr = $(ts).triggerHandler("jqGridBeforeRequest");
                            if (bfr === false || bfr === 'stop') {
                                return;
                            }
                            if ($.isFunction(ts.p.datatype)) {
                                ts.p.datatype.call(ts, ts.p.postData, "load_" + ts.p.id, rcnt, npage, adjust);
                                return;
                            }
                            if ($.isFunction(ts.p.beforeRequest)) {
                                bfr = ts.p.beforeRequest.call(ts);
                                if (bfr === undefined) {
                                    bfr = true;
                                }
                                if (bfr === false) {
                                    return;
                                }
                            }
                            dt = ts.p.datatype.toLowerCase();
                            switch (dt) {
                                case "json":
                                case "jsonp":
                                case "xml":
                                case "script":
                                    $.ajax($.extend({
                                        url: ts.p.url,
                                        type: ts.p.mtype,
                                        dataType: dt,
                                        data: $.isFunction(ts.p.serializeGridData) ? ts.p.serializeGridData.call(ts, ts.p.postData) : ts.p.postData,
                                        success: function (data, st, xhr) {
                                            if ($.isFunction(ts.p.beforeProcessing)) {
                                                if (ts.p.beforeProcessing.call(ts, data, st, xhr) === false) {
                                                    endReq();
                                                    return;
                                                }
                                            }
                                            if (dt === "xml") {
                                                addXmlData(data, ts.grid.bDiv, rcnt, npage > 1, adjust);
                                            } else {
                                                addJSONData(data, ts.grid.bDiv, rcnt, npage > 1, adjust);
                                            }
                                            $(ts).triggerHandler("jqGridLoadComplete", [data]);
                                            if (lc) {
                                                lc.call(ts, data);
                                            }
                                            $(ts).triggerHandler("jqGridAfterLoadComplete", [data]);
                                            if (pvis) {
                                                ts.grid.populateVisible();
                                            }
                                            if (ts.p.loadonce || ts.p.treeGrid) {
                                                ts.p.datatype = "local";
                                            }
                                            data = null;
                                            if (npage === 1) {
                                                endReq();
                                            }
                                        },
                                        error: function (xhr, st, err) {
                                            if ($.isFunction(ts.p.loadError)) {
                                                ts.p.loadError.call(ts, xhr, st, err);
                                            }
                                            if (npage === 1) {
                                                endReq();
                                            }
                                            xhr = null;
                                        },
                                        beforeSend: function (xhr, settings) {
                                            var gotoreq = true;
                                            if ($.isFunction(ts.p.loadBeforeSend)) {
                                                gotoreq = ts.p.loadBeforeSend.call(ts, xhr, settings);
                                            }
                                            if (gotoreq === undefined) {
                                                gotoreq = true;
                                            }
                                            if (gotoreq === false) {
                                                return false;
                                            }
                                            beginReq();
                                        }
                                    }, $.jgrid.ajaxOptions, ts.p.ajaxGridOptions));
                                    break;
                                case "xmlstring":
                                    beginReq();
                                    dstr = typeof ts.p.datastr !== 'string' ? ts.p.datastr : $.parseXML(ts.p.datastr);
                                    addXmlData(dstr, ts.grid.bDiv);
                                    $(ts).triggerHandler("jqGridLoadComplete", [dstr]);
                                    if (lcf) {
                                        ts.p.loadComplete.call(ts, dstr);
                                    }
                                    $(ts).triggerHandler("jqGridAfterLoadComplete", [dstr]);
                                    ts.p.datatype = "local";
                                    ts.p.datastr = null;
                                    endReq();
                                    break;
                                case "jsonstring":
                                    beginReq();
                                    if (typeof ts.p.datastr === 'string') {
                                        dstr = $.jgrid.parse(ts.p.datastr);
                                    } else {
                                        dstr = ts.p.datastr;
                                    }
                                    addJSONData(dstr, ts.grid.bDiv);
                                    $(ts).triggerHandler("jqGridLoadComplete", [dstr]);
                                    if (lcf) {
                                        ts.p.loadComplete.call(ts, dstr);
                                    }
                                    $(ts).triggerHandler("jqGridAfterLoadComplete", [dstr]);
                                    ts.p.datatype = "local";
                                    ts.p.datastr = null;
                                    endReq();
                                    break;
                                case "local":
                                case "clientside":
                                    beginReq();
                                    ts.p.datatype = "local";
                                    var req = addLocalData();
                                    addJSONData(req, ts.grid.bDiv, rcnt, npage > 1, adjust);
                                    $(ts).triggerHandler("jqGridLoadComplete", [req]);
                                    if (lc) {
                                        lc.call(ts, req);
                                    }
                                    $(ts).triggerHandler("jqGridAfterLoadComplete", [req]);
                                    if (pvis) {
                                        ts.grid.populateVisible();
                                    }
                                    endReq();
                                    break;
                            }
                        }
                    },
                    setHeadCheckBox = function (checked) {
                        $('#cb_' + $.jgrid.jqID(ts.p.id), ts.grid.hDiv)[ts.p.useProp ? 'prop' : 'attr']("checked", checked);
                        var fid = ts.p.frozenColumns ? ts.p.id + "_frozen" : "";
                        if (fid) {
                            $('#cb_' + $.jgrid.jqID(ts.p.id), ts.grid.fhDiv)[ts.p.useProp ? 'prop' : 'attr']("checked", checked);
                        }
                    },
                    setPager = function (pgid, tp, frm) {
                        // TBD - consider escaping pgid with pgid = $.jgrid.jqID(pgid);
                        //var sep = "<td class='ui-pg-button ui-state-disabled' style='width:4px;'><span class='ui-separator'></span></td>"
                        // HB Customization
                        var sep = "", pgr,
                                pginp = "",
                                pgl = "<table cellspacing='0' cellpadding='0' border='0' style='table-layout:auto;' class='ui-pg-table'><tbody><tr>",
                                str = "",
                                pgcnt, lft, cent, rgt, twd, tdw, i, clearVals = function (onpaging) {
                                    var ret;
                                    if ($.isFunction(ts.p.onPaging)) {
                                        ret = ts.p.onPaging.call(ts, onpaging);
                                    }
                                    if (ret === 'stop') {
                                        return false;
                                    }
                                    ts.p.selrow = null;
                                    if (ts.p.multiselect) {
                                        ts.p.selarrrow = [];
                                        setHeadCheckBox(false);
                                    }
                                    ts.p.savedRow = [];
                                    return true;
                                };
                        pgid = pgid.substr(1);
                        tp += "_" + pgid;
                        pgcnt = "pg_" + pgid;
                        lft = pgid + "_left";
                        cent = pgid + "_center";
                        rgt = pgid + "_right";
                        // HB Customization << Start
                        if (frm == 'top') {
                            if (ts.p.toppaging) {
                                pgr = "<tr><td colspan='2' width='100%' id='" + lft + "' align='left' class='pad-bot-none pad-left-none'></td></tr>";
                                if (ts.p.pagingpos == "right") {
                                    pgr += "<tr><td id='" + rgt + "' align='left' class='ui-records-info pad-top-none pad-bot-none pad-left-none'></td><td id='" + cent + "'align='right' class='ui-records-paging pad-top-none pad-bot-none'></td></tr>";
                                } else {
                                    pgr += "<tr><td id='" + cent + "' align='left'  class='ui-records-paging pad-top-none pad-bot-none pad-left-none'></td><td id='" + rgt + "' align='right' class='ui-records-info pad-top-none pad-bot-none'></td></tr>";
                                }

                            } else {
                                pgr = "<tr><td colspan='2' width='100%' id='" + lft + "' align='left' class='pad-bot-none pad-left-none'></td></tr>";
                            }
                        } else {
                            if (ts.p.pagingpos == "right") {
                                pgr = "<tr><td class='ui-records-info pad-bot-none pad-left-none' id='" + rgt + "' align='left'></td><td id='" + cent + "' align='right' class='ui-records-paging pad-bot-none'></td></tr>";
                            } else {
                                pgr = "<tr><td id='" + cent + "' align='left' class='ui-records-paging pad-bot-none pad-left-none'></td><td id='" + rgt + "' align='right' class='ui-records-info pad-bot-none'></td></tr>";
                            }
                        }

                        $("#" + $.jgrid.jqID(pgid)).append("<div id='" + pgcnt + "' class='ui-pager-control' role='group'><table cellspacing='0' cellpadding='0' border='0' class='ui-pg-table' style='width:100%;table-layout:fixed;height:100%;' role='row'><tbody>" + pgr + "</tbody></table></div>").attr("dir", "ltr");
                        // HB Customization >> End
                        //explicit setting
                        if (ts.p.rowList.length > 0) {
                            str = "<td dir='" + dir + "'>";
                            str += "<select class='ui-pg-selbox' role='listbox'>";
                            for (i = 0; i < ts.p.rowList.length; i++) {
                                str += "<option role=\"option\" value=\"" + ts.p.rowList[i] + "\"" + ((ts.p.rowNum === ts.p.rowList[i]) ? " selected=\"selected\"" : "") + ">" + ts.p.rowList[i] + "</option>";
                            }
                            str += "</select></td>";
                        }
                        if (dir === "rtl") {
                            pgl += str;
                        }
                        if (ts.p.pginput === true) {
                            //HB Customization << Start
                            if (ts.p.pgnumbers === true) {
                                pginp = "<td dir='" + dir + "'><input class='ui-pg-input' type='hidden' size='2' maxlength='7' value='0' role='textbox'/>" + $.jgrid.format("<span id='sp_1_" + $.jgrid.jqID(pgid) + "'></span>") + "</td>";
                            } else {
                                pginp = "<td dir='" + dir + "'>" + $.jgrid.format(ts.p.pgtext || "", "<input class='ui-pg-input' type='text' size='2' maxlength='7' value='0' role='textbox'/>", "<span id='sp_1_" + $.jgrid.jqID(pgid) + "'></span>") + "</td>";
                            }
                            //HB Customization >> End
                        }
                        if (ts.p.pgbuttons === true) {
                            // HB Customization
                            var po = ["first" + tp, "prev" + tp, "next" + tp, "last" + tp, "expcol" + tp, "inlrec" + tp];
                            var pgcls = (ts.p.pgnumbers === true) ? " pg-num-span" : "";
                            if (dir === "rtl") {
                                po.reverse();
                            }
                            pgl += "<td id='" + po[0] + "' class='jqgrid-pg-row jqgrid-pg-first ui-pg-button ui-corner-all'><span class='ui-pg-navig" + pgcls + "'><span class='ui-icon ui-icon-seek-first'></span></span></td>";
                            pgl += "<td id='" + po[1] + "' class='jqgrid-pg-row jqgrid-pg-prev ui-pg-button ui-corner-all'><span class='ui-pg-navig" + pgcls + "'><span class='ui-icon ui-icon-seek-prev'></span></span></td>";
                            pgl += pginp !== "" ? sep + pginp + sep : "";
                            pgl += "<td id='" + po[2] + "' class='jqgrid-pg-row jqgrid-pg-next ui-pg-button ui-corner-all'><span class='ui-pg-navig" + pgcls + "'><span class='ui-icon ui-icon-seek-next'></span></span></td>";
                            pgl += "<td id='" + po[3] + "' class='jqgrid-pg-row jqgrid-pg-last ui-pg-button ui-corner-all'><span class='ui-pg-navig" + pgcls + "'><span class='ui-icon ui-icon-seek-end'></span></span></td>";
                        } else if (pginp !== "") {
                            pgl += pginp;
                        }
                        if (dir === "ltr") {
                            pgl += str;
                        }
                        // HB Customization << Start
                        /*
                         // used for collpase all and expand all
                         if(ts.p.subGrid === true ){
                         var sub_col_exp = "<td id='"+po[4]+"'>";
                         sub_col_exp += "<div aria-sg-exp='subgrid-collapse-all' class='btn subgrid-collapse-all'><span class='icomoon-icon-contract'></span>Collapse All</div>";
                         sub_col_exp += "<div aria-sg-col='subgrid-expand-all' class='btn subgrid-expand-all'><span class='icomoon-icon-expand'></span>Expand All</div>";
                         sub_col_exp += "</td>";
                         pgl += sub_col_exp;
                         }
                         
                         // used for inline save /cancel
                         if(ts.p.inlineadd === true ){
                         var in_add_str = "<td id='"+po[5]+"'>";
                         in_add_str += "<div aria-iadd-new='"+ts.id+"' title='Add New' class='btn inline-add-new'><span class='icon16 iconic-icon-plus-alt'></span></div>";
                         in_add_str += "<div aria-isave-all='"+ts.id+"' title='Save All' class='btn inline-save-all'><span class='iconic-icon-check-alt icon16'></span></div>";
                         in_add_str += "<div aria-icancel-all='"+ts.id+"' title='Cancel All' class='btn inline-cancel-all'><span class='icomoon-icon-cancel-2 icon16'></span></div>";
                         in_add_str += "</td>";
                         pgl += in_add_str;
                         }
                         */
                        // HB Customization >> End
                        pgl += "</tr></tbody></table>";
                        if (ts.p.viewrecords === true) {
                            if (ts.p.pagingpos == "right") {
                                $("td#" + pgid + "_" + ts.p.recordpos, "#" + pgcnt).append("<div dir='" + dir + "' style='text-align:left;padding-left:5px;' class='ui-paging-info'></div>");
                            } else {
                                $("td#" + pgid + "_" + ts.p.recordpos, "#" + pgcnt).append("<div dir='" + dir + "' style='text-align:" + ts.p.recordpos + "' class='ui-paging-info'></div>");
                            }
                        }
                        $("td#" + pgid + "_" + ts.p.pagerpos, "#" + pgcnt).append(pgl);
                        tdw = $(".ui-jqgrid").css("font-size") || "11px";
                        $(document.body).append("<div id='testpg' class='ui-jqgrid ui-widget ui-widget-content' style='font-size:" + tdw + ";visibility:hidden;' ></div>");
                        twd = $(pgl).clone().appendTo("#testpg").width();
                        $("#testpg").remove();
                        if (twd > 0) {
                            if (pginp !== "") {
                                // HB Customization
                                twd += 150;
                            } //should be param
                            // HB Customization
                            //$("td#" + pgid + "_" + ts.p.pagerpos, "#" + pgcnt).width(twd);
                        }
                        ts.p._nvtd = [];
                        ts.p._nvtd[0] = twd ? Math.floor((ts.p.width - twd) / 2) : Math.floor(ts.p.width / 3);
                        ts.p._nvtd[1] = 0;
                        pgl = null;
                        $('.ui-pg-selbox', "#" + pgcnt).bind('change', function () {
                            if (!clearVals('records')) {
                                return false;
                            }
                            ts.p.page = Math.round(ts.p.rowNum * (ts.p.page - 1) / this.value - 0.5) + 1;
                            ts.p.rowNum = this.value;
                            if (ts.p.pager) {
                                $('.ui-pg-selbox', ts.p.pager).val(this.value);
                            }
                            if (ts.p.toppager) {
                                $('.ui-pg-selbox', ts.p.toppager).val(this.value);
                            }
                            populate();
                            return false;
                        });
                        if (ts.p.pgbuttons === true) {
                            $(".ui-pg-button", "#" + pgcnt).hover(function () {
                                if ($(this).hasClass('ui-state-disabled')) {
                                    this.style.cursor = 'default';
                                } else {
                                    $(this).addClass('ui-state-hover');
                                    this.style.cursor = 'pointer';
                                }
                            }, function () {
                                if (!$(this).hasClass('ui-state-disabled')) {
                                    $(this).removeClass('ui-state-hover');
                                    this.style.cursor = "default";
                                }
                            });
                            $("#first" + $.jgrid.jqID(tp) + ", #prev" + $.jgrid.jqID(tp) + ", #next" + $.jgrid.jqID(tp) + ", #last" + $.jgrid.jqID(tp)).click(function () {
                                if ($(this).hasClass("ui-state-disabled")) {
                                    return false;
                                }
                                var cp = intNum(ts.p.page, 1),
                                        last = intNum(ts.p.lastpage, 1),
                                        selclick = false,
                                        fp = true,
                                        pp = true,
                                        np = true,
                                        lp = true;
                                if (last === 0 || last === 1) {
                                    fp = false;
                                    pp = false;
                                    np = false;
                                    lp = false;
                                } else if (last > 1 && cp >= 1) {
                                    if (cp === 1) {
                                        fp = false;
                                        pp = false;
                                    }
                                    //else if( cp>1 && cp <last){ }
                                    else if (cp === last) {
                                        np = false;
                                        lp = false;
                                    }
                                } else if (last > 1 && cp === 0) {
                                    np = false;
                                    lp = false;
                                    cp = last - 1;
                                }
                                if (!clearVals(this.id)) {
                                    return false;
                                }
                                if (this.id === 'first' + tp && fp) {
                                    ts.p.page = 1;
                                    selclick = true;
                                }
                                if (this.id === 'prev' + tp && pp) {
                                    ts.p.page = (cp - 1);
                                    selclick = true;
                                }
                                if (this.id === 'next' + tp && np) {
                                    ts.p.page = (cp + 1);
                                    selclick = true;
                                }
                                if (this.id === 'last' + tp && lp) {
                                    ts.p.page = last;
                                    selclick = true;
                                }
                                if (selclick) {
                                    populate();
                                }
                                return false;
                            });
                        }
                        if (ts.p.pginput === true) {
                            $('input.ui-pg-input', "#" + pgcnt).keypress(function (e) {
                                var key = e.charCode || e.keyCode || 0;
                                if (key === 13) {
                                    if (!clearVals('user')) {
                                        return false;
                                    }
                                    $(this).val(intNum($(this).val(), 1));
                                    ts.p.page = ($(this).val() > 0) ? $(this).val() : ts.p.page;
                                    populate();
                                    return false;
                                }
                                return this;
                            });
                            // HB Customization << Start
                            $("#" + pgcnt).on('click', '.ui-pg-number', function (e) {
                                if (!clearVals('user')) {
                                    return false;
                                }
                                $(this).parent().find(".ui-pg-number").removeClass("active");
                                $(this).addClass("active");
                                var num = $(this).attr("aria-pg-num");
                                $(this).val(intNum(num, 1));
                                ts.p.page = (num > 0) ? num : ts.p.page;
                                populate();
                                return false;
                            });
                            // HB Customization >> End
                        }
                    },
                    multiSort = function (iCol, obj) {
                        // HB Customization
                        var splas, sort = "",
                                cm = ts.p.colModel,
                                fs = false,
                                ls, selTh = ts.p.frozenColumns ? obj : ts.grid.headers[iCol].el,
                                so = "";
                        var ord = "";
                        //HB Custimization
                        $("span.ui-grid-ico-sort", selTh).addClass('ui-state-disabled');
                        $(selTh).attr("aria-selected", "false");

                        if (cm[iCol].lso) {
                            if (cm[iCol].lso === "asc") {
                                cm[iCol].lso += "-desc";
                                so = "desc";
                            } else if (cm[iCol].lso === "desc") {
                                cm[iCol].lso += "-asc";
                                so = "asc";
                            } else if (cm[iCol].lso === "asc-desc" || cm[iCol].lso === "desc-asc") {
                                cm[iCol].lso = "";
                            }
                        } else {
                            cm[iCol].lso = so = cm[iCol].firstsortorder || 'asc';
                        }
                        if (so) {
                            $("span.s-ico", selTh).show();
                            $("span.ui-icon-" + so, selTh).removeClass('ui-state-disabled');
                            $(selTh).attr("aria-selected", "true");
                        } else {
                            if (!ts.p.viewsortcols[0]) {
                                $("span.s-ico", selTh).hide();
                            }
                        }
                        // HB Customization << Start
                        ts.p.sortorder = "", ts.p.sortorder = "";
                        $.each(cm, function (i) {
                            if (this.lso) {
                                if (i > 0 && fs) {
                                    sort += ",";
                                    ord += ",";
                                }
                                splas = this.lso.split("-");
                                sort += cm[i].index || cm[i].name;
                                ord += splas[splas.length - 1];
                                fs = true;
                            }
                        });
                        //ls = sort.lastIndexOf(ts.p.sortorder);
                        //sort = sort.substring(0, ls);
                        ts.p.sortname = sort;
                        ts.p.sortorder = ord;
                        // HB Customization >> End
                    },
                    sortData = function (index, idxcol, reload, sor, obj) {
                        if (!ts.p.colModel[idxcol].sortable) {
                            return;
                        }
                        if (ts.p.savedRow.length > 0) {
                            return;
                        }
                        if (!reload) {
                            if (ts.p.lastsort === idxcol) {
                                if (ts.p.sortorder === 'asc') {
                                    ts.p.sortorder = 'desc';
                                } else if (ts.p.sortorder === 'desc') {
                                    ts.p.sortorder = 'asc';
                                }
                            } else {
                                ts.p.sortorder = ts.p.colModel[idxcol].firstsortorder || 'asc';
                            }
                            ts.p.page = 1;
                        }
                        if (ts.p.multiSort) {
                            multiSort(idxcol, obj);
                        } else {
                            if (sor) {
                                if (ts.p.lastsort === idxcol && ts.p.sortorder === sor && !reload) {
                                    return;
                                }
                                ts.p.sortorder = sor;
                            }
                            var previousSelectedTh = ts.grid.headers[ts.p.lastsort].el,
                                    newSelectedTh = ts.p.frozenColumns ? obj : ts.grid.headers[idxcol].el;

                            $("span.ui-grid-ico-sort", previousSelectedTh).addClass('ui-state-disabled');
                            $(previousSelectedTh).attr("aria-selected", "false");
                            if (ts.p.frozenColumns) {
                                ts.grid.fhDiv.find("span.ui-grid-ico-sort").addClass('ui-state-disabled');
                                ts.grid.fhDiv.find("th").attr("aria-selected", "false");
                            }
                            $("span.ui-icon-" + ts.p.sortorder, newSelectedTh).removeClass('ui-state-disabled');
                            $(newSelectedTh).attr("aria-selected", "true");
                            if (!ts.p.viewsortcols[0]) {
                                if (ts.p.lastsort !== idxcol) {
                                    if (ts.p.frozenColumns) {
                                        ts.grid.fhDiv.find("span.s-ico").hide();
                                    }
                                    $("span.s-ico", previousSelectedTh).hide();
                                    $("span.s-ico", newSelectedTh).show();
                                }
                            }
                            index = index.substring(5 + ts.p.id.length + 1); // bad to be changed!?!
                            ts.p.sortname = ts.p.colModel[idxcol].index || index;
                        }
                        if ($(ts).triggerHandler("jqGridSortCol", [ts.p.sortname, idxcol, ts.p.sortorder]) === 'stop') {
                            ts.p.lastsort = idxcol;
                            return;
                        }
                        if ($.isFunction(ts.p.onSortCol)) {
                            if (ts.p.onSortCol.call(ts, ts.p.sortname, idxcol, ts.p.sortorder) === 'stop') {
                                ts.p.lastsort = idxcol;
                                return;
                            }
                        }
                        if (ts.p.datatype === "local") {
                            if (ts.p.deselectAfterSort) {
                                $(ts).jqGrid("resetSelection");
                            }
                        } else {
                            ts.p.selrow = null;
                            if (ts.p.multiselect) {
                                setHeadCheckBox(false);
                            }
                            ts.p.selarrrow = [];
                            ts.p.savedRow = [];
                        }
                        if (ts.p.scroll) {
                            var sscroll = ts.grid.bDiv.scrollLeft;
                            emptyRows.call(ts, true, false);
                            ts.grid.hDiv.scrollLeft = sscroll;
                        }
                        if (ts.p.subGrid && ts.p.datatype === 'local') {
                            $("td.sgexpanded", "#" + $.jgrid.jqID(ts.p.id)).each(function () {
                                $(this).trigger("click");
                            });
                        }
                        populate();
                        ts.p.lastsort = idxcol;
                        if (ts.p.sortname !== index && idxcol) {
                            ts.p.lastsort = idxcol;
                        }
                    },
                    setColWidth = function () {
                        var initwidth = 0,
                                brd = $.jgrid.cell_width ? 0 : intNum(ts.p.cellLayout, 0),
                                vc = 0,
                                lvc, scw = intNum(ts.p.scrollOffset, 0),
                                cw, hs = false,
                                aw, gw = 0,
                                cr;
                        $.each(ts.p.colModel, function () {
                            if (this.hidden === undefined) {
                                this.hidden = false;
                            }
                            if (ts.p.grouping && ts.p.autowidth) {
                                var ind = $.inArray(this.name, ts.p.groupingView.groupField);
                                if (ind >= 0 && ts.p.groupingView.groupColumnShow.length > ind) {
                                    this.hidden = !ts.p.groupingView.groupColumnShow[ind];
                                }
                            }
                            this.widthOrg = cw = intNum(this.width, 0);
                            if (this.hidden === false) {
                                initwidth += cw + brd;
                                if (this.fixed) {
                                    gw += cw + brd;
                                } else {
                                    vc++;
                                }
                            }
                        });
                        // HB Customization << Start
                        if (ts.p.forceApply === true && !isNaN(ts.p.forceWidth) && initwidth < ts.p.forceWidth) {
                            initwidth = ts.p.forceWidth;
                        }
                        // HB Customization >> End
                        if (isNaN(ts.p.width)) {
                            ts.p.width = initwidth + ((ts.p.shrinkToFit === false && !isNaN(ts.p.height)) ? scw : 0);
                        }
                        grid.width = ts.p.width;
                        ts.p.tblwidth = initwidth;
                        if (ts.p.shrinkToFit === false && ts.p.forceFit === true) {
                            ts.p.forceFit = false;
                        }
                        if (ts.p.shrinkToFit === true && vc > 0) {
                            aw = grid.width - brd * vc - gw;
                            if (!isNaN(ts.p.height)) {
                                aw -= scw;
                                hs = true;
                            }
                            initwidth = 0;
                            $.each(ts.p.colModel, function (i) {
                                if (this.hidden === false && !this.fixed) {
                                    cw = Math.round(aw * this.width / (ts.p.tblwidth - brd * vc - gw));
                                    this.width = cw;
                                    initwidth += cw;
                                    lvc = i;
                                }
                            });
                            cr = 0;
                            if (hs) {
                                if (grid.width - gw - (initwidth + brd * vc) !== scw) {
                                    cr = grid.width - gw - (initwidth + brd * vc) - scw;
                                }
                            } else if (!hs && Math.abs(grid.width - gw - (initwidth + brd * vc)) !== 1) {
                                cr = grid.width - gw - (initwidth + brd * vc);
                            }
                            ts.p.colModel[lvc].width += cr;
                            ts.p.tblwidth = initwidth + cr + brd * vc + gw;
                            if (ts.p.tblwidth > ts.p.width) {
                                ts.p.colModel[lvc].width -= (ts.p.tblwidth - parseInt(ts.p.width, 10));
                                ts.p.tblwidth = ts.p.width;
                            }
                            // HB Customization << Start
                            if (ts.p.forceApply === true && !isNaN(ts.p.forceWidth) && initwidth < ts.p.forceWidth) {
                                ts.p.tblwidth = ts.p.forceWidth;
                                ts.p.width = grid.width = ts.p.forceWidth + 20;
                            }
                            // HB Customization >> End
                        }
                    },
                    nextVisible = function (iCol) {
                        var ret = iCol,
                                j = iCol,
                                i;
                        for (i = iCol + 1; i < ts.p.colModel.length; i++) {
                            if (ts.p.colModel[i].hidden !== true) {
                                j = i;
                                break;
                            }
                        }
                        return j - ret;
                    },
                    getOffset = function (iCol) {
                        var $th = $(ts.grid.headers[iCol].el),
                                ret = [$th.position().left + $th.outerWidth()];
                        if (ts.p.direction === "rtl") {
                            ret[0] = ts.p.width - ret[0];
                        }
                        ret[0] -= ts.grid.bDiv.scrollLeft;
                        ret.push($(ts.grid.hDiv).position().top);
                        ret.push($(ts.grid.bDiv).offset().top - $(ts.grid.hDiv).offset().top + $(ts.grid.bDiv).height());
                        return ret;
                    },
                    getColumnHeaderIndex = function (th) {
                        var i, headers = ts.grid.headers,
                                ci = $.jgrid.getCellIndex(th);
                        for (i = 0; i < headers.length; i++) {
                            if (th === headers[i].el) {
                                ci = i;
                                break;
                            }
                        }
                        return ci;
                    };
            this.p.id = this.id;
            if ($.inArray(ts.p.multikey, sortkeys) === -1) {
                ts.p.multikey = false;
            }
            ts.p.keyIndex = false;
            ts.p.keyName = false;
            for (i = 0; i < ts.p.colModel.length; i++) {
                ts.p.colModel[i] = $.extend(true, {}, ts.p.cmTemplate, ts.p.colModel[i].template || {}, ts.p.colModel[i]);
                if (ts.p.keyIndex === false && ts.p.colModel[i].key === true) {
                    ts.p.keyIndex = i;
                }
            }
            ts.p.sortorder = ts.p.sortorder.toLowerCase();
            $.jgrid.cell_width = $.jgrid.cellWidth();
            if (ts.p.grouping === true) {
                ts.p.scroll = false;
                ts.p.rownumbers = false;
                //ts.p.subGrid = false; expiremental
                ts.p.treeGrid = false;
                ts.p.gridview = true;
            }
            if (this.p.treeGrid === true) {
                try {
                    $(this).jqGrid("setTreeGrid");
                } catch (_) {
                }
                if (ts.p.datatype !== "local") {
                    ts.p.localReader = {
                        id: "_id_"
                    };
                }
            }
            if (this.p.subGrid) {
                try {
                    $(ts).jqGrid("setSubGrid");
                } catch (s) {
                }
            }
            if (this.p.multiselect) {
                this.p.colNames.unshift("<input role='checkbox' id='cb_" + this.p.id + "' class='regular-checkbox cbox' type='checkbox'/><label for=\"cb_" + this.p.id + "\"></label>");
                this.p.colModel.unshift({
                    name: 'cb',
                    width: $.jgrid.cell_width ? ts.p.multiselectWidth + ts.p.cellLayout : ts.p.multiselectWidth,
                    sortable: false,
                    resizable: false,
                    hidedlg: true,
                    search: false,
                    align: 'center',
                    fixed: true
                });
            }
            if (this.p.rownumbers) {
                this.p.colNames.unshift("");
                this.p.colModel.unshift({
                    name: 'rn',
                    width: ts.p.rownumWidth,
                    sortable: false,
                    resizable: false,
                    hidedlg: true,
                    search: false,
                    align: 'center',
                    fixed: true
                });
            }
            ts.p.xmlReader = $.extend(true, {
                root: "rows",
                row: "row",
                page: "rows>page",
                total: "rows>total",
                records: "rows>records",
                repeatitems: true,
                cell: "cell",
                id: "[id]",
                userdata: "userdata",
                subgrid: {
                    root: "rows",
                    row: "row",
                    repeatitems: true,
                    cell: "cell"
                }
            }, ts.p.xmlReader);
            ts.p.jsonReader = $.extend(true, {
                root: "rows",
                page: "page",
                total: "total",
                records: "records",
                repeatitems: true,
                cell: "cell",
                id: "id",
                userdata: "userdata",
                subgrid: {
                    root: "rows",
                    repeatitems: true,
                    cell: "cell"
                }
            }, ts.p.jsonReader);
            ts.p.localReader = $.extend(true, {
                root: "rows",
                page: "page",
                total: "total",
                records: "records",
                repeatitems: false,
                cell: "cell",
                id: "id",
                userdata: "userdata",
                subgrid: {
                    root: "rows",
                    repeatitems: true,
                    cell: "cell"
                }
            }, ts.p.localReader);
            if (ts.p.scroll) {
                ts.p.pgbuttons = false;
                ts.p.pginput = false;
                ts.p.rowList = [];
            }
            if (ts.p.data.length) {
                refreshIndex();
            }
            var thead = "<thead><tr class='ui-jqgrid-labels' role='rowheader'>",
                    tdc, idn, w, res, sort, td, ptr, tbody, imgs, iac = "",
                    idc = "",
                    sortarr = [],
                    sortord = [],
                    sotmp = [];
            if (ts.p.shrinkToFit === true && ts.p.forceFit === true) {
                for (i = ts.p.colModel.length - 1; i >= 0; i--) {
                    if (!ts.p.colModel[i].hidden) {
                        ts.p.colModel[i].resizable = false;
                        break;
                    }
                }
            }
            if (ts.p.viewsortcols[1] === 'horizontal') {
                iac = " ui-i-asc";
                idc = " ui-i-desc";
            }
            tdc = isMSIE ? "class='ui-th-div-ie'" : "";
            imgs = "<span class='s-ico' style='display:none'><span sort='asc' class='ui-grid-ico-sort ui-icon-asc" + iac + " ui-state-disabled ui-icon ui-icon-triangle-1-n ui-sort-" + dir + "'></span>";
            imgs += "<span sort='desc' class='ui-grid-ico-sort ui-icon-desc" + idc + " ui-state-disabled ui-icon ui-icon-triangle-1-s ui-sort-" + dir + "'></span></span>";
            if (ts.p.multiSort) {
                // HB Customization << Start
                sortarr = ts.p.sortname.split(",");
                sortord = ts.p.sortorder.split(",");
                for (i = 0; i < sortarr.length; i++) {
                    sortarr[i] = $.trim(sortarr[i]);
                    sortord[i] = sortord[i] ? $.trim(sortord[i]) : ts.p.sortorder || "asc";
                }
                // HB Customization >> End
            }
            for (i = 0; i < this.p.colNames.length; i++) {
                var tooltip = ts.p.headertitles ? (" title=\"" + $.jgrid.stripHtml(ts.p.colNames[i]) + "\"") : "";
                var lblcls = (ts.p.colModel[i].labelClass) ? ts.p.colModel[i].labelClass : '';
                // HB Customization
                thead += "<th id='" + ts.p.id + "_" + ts.p.colModel[i].name + "' role='columnheader' class='ui-state-default ui-th-column ui-th-" + dir + " " + lblcls + "' " + tooltip + ">";
                idn = ts.p.colModel[i].index || ts.p.colModel[i].name;
                thead += "<div id='jqgh_" + ts.p.id + "_" + ts.p.colModel[i].name + "' " + tdc + ">" + ts.p.colNames[i];
                if (!ts.p.colModel[i].width) {
                    ts.p.colModel[i].width = 150;
                } else {
                    ts.p.colModel[i].width = parseInt(ts.p.colModel[i].width, 10);
                }
                if (typeof ts.p.colModel[i].title !== "boolean") {
                    ts.p.colModel[i].title = true;
                }
                ts.p.colModel[i].lso = "";
                if (idn === ts.p.sortname) {
                    ts.p.lastsort = i;
                }
                if (ts.p.multiSort) {
                    sotmp = $.inArray(idn, sortarr);
                    if (sotmp !== -1) {
                        ts.p.colModel[i].lso = sortord[sotmp];
                    }
                }
                thead += imgs + "</div></th>";
            }
            thead += "</tr></thead>";
            imgs = null;
            $(this).append(thead);
            $("thead tr:first th", this).hover(function () {
                $(this).addClass('ui-state-hover');
            }, function () {
                $(this).removeClass('ui-state-hover');
            });
            if (this.p.multiselect) {
                var emp = [],
                        chk;
                $('#cb_' + $.jgrid.jqID(ts.p.id), this).bind('click', function () {
                    ts.p.selarrrow = [];
                    var froz = ts.p.frozenColumns === true ? ts.p.id + "_frozen" : "";
                    if (this.checked) {
                        $(ts.rows).each(function (i) {
                            if (i > 0) {
                                if (!$(this).hasClass("ui-subgrid") && !$(this).hasClass("jqgroup") && !$(this).hasClass('ui-state-disabled')) {
                                    $("#jqg_" + $.jgrid.jqID(ts.p.id) + "_" + $.jgrid.jqID(this.id))[ts.p.useProp ? 'prop' : 'attr']("checked", true);
                                    $(this).addClass("ui-state-highlight").attr("aria-selected", "true");
                                    ts.p.selarrrow.push(this.id);
                                    ts.p.selrow = this.id;
                                    if (froz) {
                                        $("#jqg_" + $.jgrid.jqID(ts.p.id) + "_" + $.jgrid.jqID(this.id), ts.grid.fbDiv)[ts.p.useProp ? 'prop' : 'attr']("checked", true);
                                        $("#" + $.jgrid.jqID(this.id), ts.grid.fbDiv).addClass("ui-state-highlight");
                                    }
                                }
                            }
                        });
                        chk = true;
                        emp = [];
                    } else {
                        $(ts.rows).each(function (i) {
                            if (i > 0) {
                                if (!$(this).hasClass("ui-subgrid") && !$(this).hasClass('ui-state-disabled')) {
                                    $("#jqg_" + $.jgrid.jqID(ts.p.id) + "_" + $.jgrid.jqID(this.id))[ts.p.useProp ? 'prop' : 'attr']("checked", false);
                                    $(this).removeClass("ui-state-highlight").attr("aria-selected", "false");
                                    emp.push(this.id);
                                    if (froz) {
                                        $("#jqg_" + $.jgrid.jqID(ts.p.id) + "_" + $.jgrid.jqID(this.id), ts.grid.fbDiv)[ts.p.useProp ? 'prop' : 'attr']("checked", false);
                                        $("#" + $.jgrid.jqID(this.id), ts.grid.fbDiv).removeClass("ui-state-highlight");
                                    }
                                }
                            }
                        });
                        ts.p.selrow = null;
                        chk = false;
                    }
                    $(ts).triggerHandler("jqGridSelectAll", [chk ? ts.p.selarrrow : emp, chk]);
                    if ($.isFunction(ts.p.onSelectAll)) {
                        ts.p.onSelectAll.call(ts, chk ? ts.p.selarrrow : emp, chk);
                    }
                });
            }

            if (ts.p.autowidth === true) {
                var pw = $(eg).innerWidth();
                ts.p.width = pw > 0 ? pw : 'nw';
            }
            setColWidth();
            $(eg).css("width", grid.width + "px").append("<div class='ui-jqgrid-resize-mark' id='rs_m" + ts.p.id + "'>&#160;</div>");
            $(gv).css("width", grid.width + "px");
            thead = $("thead:first", ts).get(0);
            var tfoot = "";
            if (ts.p.footerrow) {
                tfoot += "<table role='grid' style='width:" + ts.p.tblwidth + "px' class='ui-jqgrid-ftable' cellspacing='0' cellpadding='0' border='0'><tbody><tr role='row' class='ui-widget-content footrow footrow-" + dir + "'>";
            }
            var thr = $("tr:first", thead),
                    firstr = "<tr class='jqgfirstrow' role='row' style='height:auto'>";
            ts.p.disableClick = false;
            $("th", thr).each(function (j) {
                w = ts.p.colModel[j].width;
                if (ts.p.colModel[j].resizable === undefined) {
                    ts.p.colModel[j].resizable = true;
                }
                if (ts.p.colModel[j].resizable) {
                    res = document.createElement("span");
                    $(res).html("&#160;").addClass('ui-jqgrid-resize ui-jqgrid-resize-' + dir).css("cursor", "col-resize");
                    $(this).addClass(ts.p.resizeclass);
                } else {
                    res = "";
                }
                $(this).css("width", w + "px").prepend(res);
                res = null;
                var hdcol = "";
                if (ts.p.colModel[j].hidden) {
                    $(this).css("display", "none");
                    hdcol = "display:none;";
                }
                firstr += "<td role='gridcell' style='height:0px;width:" + w + "px;" + hdcol + "'></td>";
                grid.headers[j] = {
                    width: w,
                    el: this
                };
                sort = ts.p.colModel[j].sortable;
                if (typeof sort !== 'boolean') {
                    ts.p.colModel[j].sortable = true;
                    sort = true;
                }
                var nm = ts.p.colModel[j].name;
                if (!(nm === 'cb' || nm === 'subgrid' || nm === 'rn')) {
                    if (ts.p.viewsortcols[2]) {
                        $(">div", this).addClass('ui-jqgrid-sortable');
                    }
                }
                if (sort) {
                    if (ts.p.multiSort) {
                        if (ts.p.viewsortcols[0]) {
                            $("div span.s-ico", this).show();
                            if (ts.p.colModel[j].lso) {
                                $("div span.ui-icon-" + ts.p.colModel[j].lso, this).removeClass("ui-state-disabled");
                            }
                        } else if (ts.p.colModel[j].lso) {
                            $("div span.s-ico", this).show();
                            $("div span.ui-icon-" + ts.p.colModel[j].lso, this).removeClass("ui-state-disabled");
                        }
                    } else {
                        if (ts.p.viewsortcols[0]) {
                            $("div span.s-ico", this).show();
                            if (j === ts.p.lastsort) {
                                $("div span.ui-icon-" + ts.p.sortorder, this).removeClass("ui-state-disabled");
                            }
                        } else if (j === ts.p.lastsort) {
                            $("div span.s-ico", this).show();
                            $("div span.ui-icon-" + ts.p.sortorder, this).removeClass("ui-state-disabled");
                        }
                    }
                }
                if (ts.p.footerrow) {
                    tfoot += "<td role='gridcell' " + formatCol(j, 0, '', null, '', false) + ">&#160;</td>";
                }
            }).mousedown(function (e) {
                if ($(e.target).closest("th>span.ui-jqgrid-resize").length !== 1) {
                    return;
                }
                var ci = getColumnHeaderIndex(this);
                if (ts.p.forceFit === true) {
                    ts.p.nv = nextVisible(ci);
                }
                grid.dragStart(ci, e, getOffset(ci));
                return false;
            }).click(function (e) {
                if (ts.p.disableClick) {
                    ts.p.disableClick = false;
                    return false;
                }
                var s = "th>div.ui-jqgrid-sortable",
                        r, d;
                if (!ts.p.viewsortcols[2]) {
                    s = "th>div>span>span.ui-grid-ico-sort";
                }
                var t = $(e.target).closest(s);
                if (t.length !== 1) {
                    return;
                }
                var ci;
                if (ts.p.frozenColumns) {
                    var tid = $(this)[0].id.substring(ts.p.id.length + 1);
                    $(ts.p.colModel).each(function (i) {
                        if (this.name === tid) {
                            ci = i;
                            return false;
                        }
                    });
                } else {
                    ci = getColumnHeaderIndex(this);
                }
                if (!ts.p.viewsortcols[2]) {
                    r = true;
                    d = t.attr("sort");
                }
                if (ci != null) {
                    sortData($('div', this)[0].id, ci, r, d, this);
                }
                return false;
            });
            if (ts.p.sortable && $.fn.sortable) {
                try {
                    $(ts).jqGrid("sortableColumns", thr);
                } catch (e) {
                }
            }
            if (ts.p.footerrow) {
                tfoot += "</tr></tbody></table>";
            }
            firstr += "</tr>";
            tbody = document.createElement("tbody");
            this.appendChild(tbody);
            $(this).addClass('ui-jqgrid-btable').append(firstr);
            firstr = null;
            var hTable = $("<table class='ui-jqgrid-htable' style='width:" + ts.p.tblwidth + "px' role='grid' aria-labelledby='gbox_" + this.id + "' cellspacing='0' cellpadding='0' border='0'></table>").append(thead),
                    hg = (ts.p.caption && ts.p.hiddengrid === true) ? true : false,
                    // HB Customization
                    hb = $("<div id='hbox_" + ts.p.id + "_jqgrid' class='ui-jqgrid-hbox" + (dir == "rtl" ? "-rtl" : "") + "'></div>");
            thead = null;
            grid.hDiv = document.createElement("div");
            $(grid.hDiv).css({
                width: grid.width + "px"
            }).addClass("ui-state-default ui-jqgrid-hdiv").append(hb);
            $(hb).append(hTable);
            hTable = null;
            if (hg) {
                $(grid.hDiv).hide();
            }
            if (ts.p.pager) {
                // TBD -- escape ts.p.pager here?
                if (typeof ts.p.pager === "string") {
                    if (ts.p.pager.substr(0, 1) !== "#") {
                        ts.p.pager = "#" + ts.p.pager;
                    }
                } else {
                    ts.p.pager = "#" + $(ts.p.pager).attr("id");
                }
                $(ts.p.pager).css({
                    width: grid.width + "px"
                }).addClass('ui-state-default ui-jqgrid-pager ui-corner-bottom').appendTo(eg);
                if (hg) {
                    $(ts.p.pager).hide();
                }
                setPager(ts.p.pager, '', 'bot');
            }
            if (ts.p.cellEdit === false && ts.p.hoverrows === true) {
                $(ts).bind('mouseover', function (e) {
                    ptr = $(e.target).closest("tr.jqgrow");
                    if ($(ptr).attr("class") !== "ui-subgrid") {
                        $(ptr).addClass("ui-state-hover");
                    }
                }).bind('mouseout', function (e) {
                    ptr = $(e.target).closest("tr.jqgrow");
                    $(ptr).removeClass("ui-state-hover");
                });
            }
            var ri, ci, tdHtml;
            $(ts).before(grid.hDiv).click(function (e) {
                td = e.target;
                ptr = $(td, ts.rows).closest("tr.jqgrow");
                if ($(ptr).length === 0 || ptr[0].className.indexOf('ui-state-disabled') > -1 || ($(td, ts).closest("table.ui-jqgrid-btable").attr('id') || '').replace("_frozen", "") !== ts.id) {
                    return this;
                }
                var scb = $(td).hasClass("cbox"),
                        cSel = $(ts).triggerHandler("jqGridBeforeSelectRow", [ptr[0].id, e]);
                cSel = (cSel === false || cSel === 'stop') ? false : true;
                if (cSel && $.isFunction(ts.p.beforeSelectRow)) {
                    cSel = ts.p.beforeSelectRow.call(ts, ptr[0].id, e);
                }
                if (td.tagName === 'A' || ((td.tagName === 'INPUT' || td.tagName === 'TEXTAREA' || td.tagName === 'OPTION' || td.tagName === 'SELECT') && !scb)) {
                    return;
                }
                if (cSel === true) {
                    ri = ptr[0].id;
                    ci = $.jgrid.getCellIndex(td);
                    tdHtml = $(td).closest("td,th").html();
                    $(ts).triggerHandler("jqGridCellSelect", [ri, ci, tdHtml, e]);
                    if ($.isFunction(ts.p.onCellSelect)) {
                        ts.p.onCellSelect.call(ts, ri, ci, tdHtml, e);
                    }
                    if (ts.p.cellEdit === true) {
                        if (ts.p.multiselect && scb) {
                            $(ts).jqGrid("setSelection", ri, true, e);
                        } else {
                            ri = ptr[0].rowIndex;
                            try {
                                $(ts).jqGrid("editCell", ri, ci, true);
                            } catch (_) {
                            }
                        }
                    } else if (!ts.p.multikey) {
                        if (ts.p.multiselect && ts.p.multiboxonly) {
                            if (scb) {
                                $(ts).jqGrid("setSelection", ri, true, e);
                            } else {
                                var frz = ts.p.frozenColumns ? ts.p.id + "_frozen" : "";
                                $(ts.p.selarrrow).each(function (i, n) {
                                    var trid = $(ts).jqGrid('getGridRowById', n);
                                    $(trid).removeClass("ui-state-highlight");
                                    $("#jqg_" + $.jgrid.jqID(ts.p.id) + "_" + $.jgrid.jqID(n))[ts.p.useProp ? 'prop' : 'attr']("checked", false);
                                    if (frz) {
                                        $("#" + $.jgrid.jqID(n), "#" + $.jgrid.jqID(frz)).removeClass("ui-state-highlight");
                                        $("#jqg_" + $.jgrid.jqID(ts.p.id) + "_" + $.jgrid.jqID(n), "#" + $.jgrid.jqID(frz))[ts.p.useProp ? 'prop' : 'attr']("checked", false);
                                    }
                                });
                                ts.p.selarrrow = [];
                                $(ts).jqGrid("setSelection", ri, true, e);
                            }
                        } else {
                            $(ts).jqGrid("setSelection", ri, true, e);
                        }
                    } else {
                        if (e[ts.p.multikey]) {
                            $(ts).jqGrid("setSelection", ri, true, e);
                        } else if (ts.p.multiselect && scb) {
                            scb = $("#jqg_" + $.jgrid.jqID(ts.p.id) + "_" + ri).is(":checked");
                            $("#jqg_" + $.jgrid.jqID(ts.p.id) + "_" + ri)[ts.p.useProp ? 'prop' : 'attr']("checked", scb);
                        }
                    }
                }
            }).bind('reloadGrid', function (e, opts) {
                if (ts.p.treeGrid === true) {
                    ts.p.datatype = ts.p.treedatatype;
                }
                if (opts && opts.current) {
                    ts.grid.selectionPreserver(ts);
                }
                if (ts.p.datatype === "local") {
                    $(ts).jqGrid("resetSelection");
                    if (ts.p.data.length) {
                        refreshIndex();
                    }
                } else if (!ts.p.treeGrid) {
                    ts.p.selrow = null;
                    if (ts.p.multiselect) {
                        ts.p.selarrrow = [];
                        setHeadCheckBox(false);
                    }
                    ts.p.savedRow = [];
                }
                if (ts.p.scroll) {
                    emptyRows.call(ts, true, false);
                }
                if (opts && opts.page) {
                    var page = opts.page;
                    if (page > ts.p.lastpage) {
                        page = ts.p.lastpage;
                    }
                    if (page < 1) {
                        page = 1;
                    }
                    ts.p.page = page;
                    if (ts.grid.prevRowHeight) {
                        ts.grid.bDiv.scrollTop = (page - 1) * ts.grid.prevRowHeight * ts.p.rowNum;
                    } else {
                        ts.grid.bDiv.scrollTop = 0;
                    }
                }
                if (ts.grid.prevRowHeight && ts.p.scroll) {
                    delete ts.p.lastpage;
                    ts.grid.populateVisible();
                } else {
                    ts.grid.populate();
                }
                if (ts.p._inlinenav === true) {
                    $(ts).jqGrid('showAddEditButtons');
                }
                return false;
            }).dblclick(function (e) {
                td = e.target;
                ptr = $(td, ts.rows).closest("tr.jqgrow");
                if ($(ptr).length === 0) {
                    return;
                }
                ri = ptr[0].rowIndex;
                ci = $.jgrid.getCellIndex(td);
                $(ts).triggerHandler("jqGridDblClickRow", [$(ptr).attr("id"), ri, ci, e]);
                if ($.isFunction(ts.p.ondblClickRow)) {
                    ts.p.ondblClickRow.call(ts, $(ptr).attr("id"), ri, ci, e);
                }
            }).bind('contextmenu', function (e) {
                td = e.target;
                ptr = $(td, ts.rows).closest("tr.jqgrow");
                if ($(ptr).length === 0) {
                    return;
                }
                if (!ts.p.multiselect) {
                    $(ts).jqGrid("setSelection", ptr[0].id, true, e);
                }
                ri = ptr[0].rowIndex;
                ci = $.jgrid.getCellIndex(td);
                $(ts).triggerHandler("jqGridRightClickRow", [$(ptr).attr("id"), ri, ci, e]);
                if ($.isFunction(ts.p.onRightClickRow)) {
                    ts.p.onRightClickRow.call(ts, $(ptr).attr("id"), ri, ci, e);
                }
            });
            grid.bDiv = document.createElement("div");
            if (isMSIE) {
                if (String(ts.p.height).toLowerCase() === "auto") {
                    ts.p.height = "100%";
                }
            }
            $(grid.bDiv).append($('<div style="position:relative;' + (isMSIE && $.jgrid.msiever() < 8 ? "height:0.01%;" : "") + '"></div>').append('<div></div>').append(this)).addClass("ui-jqgrid-bdiv").css({
                height: ts.p.height + (isNaN(ts.p.height) ? "" : "px"),
                width: (grid.width) + "px"
            }).scroll(grid.scrollGrid);
            $("table:first", grid.bDiv).css({
                width: ts.p.tblwidth + "px"
            });
            if (!$.support.tbody) { //IE
                if ($("tbody", this).length === 2) {
                    $("tbody:gt(0)", this).remove();
                }
            }
            if (ts.p.multikey) {
                if ($.jgrid.msie) {
                    $(grid.bDiv).bind("selectstart", function () {
                        return false;
                    });
                } else {
                    $(grid.bDiv).bind("mousedown", function () {
                        return false;
                    });
                }
            }
            if (hg) {
                $(grid.bDiv).hide();
            }
            grid.cDiv = document.createElement("div");
            var arf = ts.p.hidegrid === true ? $("<a role='link' class='ui-jqgrid-titlebar-close ui-corner-all HeaderButton' />").hover(
                    function () {
                        arf.addClass('ui-state-hover');
                    }, function () {
                arf.removeClass('ui-state-hover');
            }).append("<span class='ui-icon ui-icon-circle-triangle-n'></span>").css((dir === "rtl" ? "left" : "right"), "0px") : "";
            $(grid.cDiv).append(arf).append("<span class='ui-jqgrid-title'>" + ts.p.caption + "</span>").addClass("ui-jqgrid-titlebar ui-jqgrid-caption" + (dir === "rtl" ? "-rtl" : "") + " ui-widget-header ui-corner-top ui-helper-clearfix");
            $(grid.cDiv).insertBefore(grid.hDiv);
            if (ts.p.toolbar[0]) {
                grid.uDiv = document.createElement("div");
                if (ts.p.toolbar[1] === "top") {
                    $(grid.uDiv).insertBefore(grid.hDiv);
                } else if (ts.p.toolbar[1] === "bottom") {
                    $(grid.uDiv).insertAfter(grid.hDiv);
                }
                if (ts.p.toolbar[1] === "both") {
                    grid.ubDiv = document.createElement("div");
                    $(grid.uDiv).addClass("ui-userdata ui-state-default").attr("id", "t_" + this.id).insertBefore(grid.hDiv);
                    $(grid.ubDiv).addClass("ui-userdata ui-state-default").attr("id", "tb_" + this.id).insertAfter(grid.hDiv);
                    if (hg) {
                        $(grid.ubDiv).hide();
                    }
                } else {
                    $(grid.uDiv).width(grid.width).addClass("ui-userdata ui-state-default").attr("id", "t_" + this.id);
                }
                if (hg) {
                    $(grid.uDiv).hide();
                }
            }
            //HB Customization << Start
            //if (ts.p.toppager) {
            //}
            if (ts.p.showpaging) {
                ts.p.toppager = $.jgrid.jqID(ts.p.id) + "_toppager";
                grid.topDiv = $("<div id='" + ts.p.toppager + "'></div>")[0];
                ts.p.toppager = "#" + ts.p.toppager;
                $(grid.topDiv).addClass('ui-state-default ui-jqgrid-toppager').width(grid.width).insertBefore(grid.hDiv);
                setPager(ts.p.toppager, '_t', 'top');
            }
            //HB Customization >> End
            if (ts.p.footerrow) {
                grid.sDiv = $("<div class='ui-jqgrid-sdiv'></div>")[0];
                // HB Customization
                hb = $("<div id='hbox_" + ts.p.id + "_jqgrid' class='ui-jqgrid-hbox" + (dir == "rtl" ? "-rtl" : "") + "'></div>");
                $(grid.sDiv).append(hb).width(grid.width).insertAfter(grid.hDiv);
                $(hb).append(tfoot);
                grid.footers = $(".ui-jqgrid-ftable", grid.sDiv)[0].rows[0].cells;
                if (ts.p.rownumbers) {
                    grid.footers[0].className = 'ui-state-default jqgrid-rownum';
                }
                if (hg) {
                    $(grid.sDiv).hide();
                }
            }
            hb = null;
            if (ts.p.caption) {
                var tdt = ts.p.datatype;
                if (ts.p.hidegrid === true) {
                    $(".ui-jqgrid-titlebar-close", grid.cDiv).click(function (e) {
                        var onHdCl = $.isFunction(ts.p.onHeaderClick),
                                elems = ".ui-jqgrid-bdiv, .ui-jqgrid-hdiv, .ui-jqgrid-pager, .ui-jqgrid-sdiv",
                                counter, self = this;
                        if (ts.p.toolbar[0] === true) {
                            if (ts.p.toolbar[1] === 'both') {
                                elems += ', #' + $(grid.ubDiv).attr('id');
                            }
                            elems += ', #' + $(grid.uDiv).attr('id');
                        }
                        counter = $(elems, "#gview_" + $.jgrid.jqID(ts.p.id)).length;

                        if (ts.p.gridstate === 'visible') {
                            $(elems, "#gbox_" + $.jgrid.jqID(ts.p.id)).slideUp("fast", function () {
                                counter--;
                                if (counter === 0) {
                                    $("span", self).removeClass("ui-icon-circle-triangle-n").addClass("ui-icon-circle-triangle-s");
                                    ts.p.gridstate = 'hidden';
                                    if ($("#gbox_" + $.jgrid.jqID(ts.p.id)).hasClass("ui-resizable")) {
                                        $(".ui-resizable-handle", "#gbox_" + $.jgrid.jqID(ts.p.id)).hide();
                                    }
                                    $(ts).triggerHandler("jqGridHeaderClick", [ts.p.gridstate, e]);
                                    if (onHdCl) {
                                        if (!hg) {
                                            ts.p.onHeaderClick.call(ts, ts.p.gridstate, e);
                                        }
                                    }
                                }
                            });
                        } else if (ts.p.gridstate === 'hidden') {
                            $(elems, "#gbox_" + $.jgrid.jqID(ts.p.id)).slideDown("fast", function () {
                                counter--;
                                if (counter === 0) {
                                    $("span", self).removeClass("ui-icon-circle-triangle-s").addClass("ui-icon-circle-triangle-n");
                                    if (hg) {
                                        ts.p.datatype = tdt;
                                        populate();
                                        hg = false;
                                    }
                                    ts.p.gridstate = 'visible';
                                    if ($("#gbox_" + $.jgrid.jqID(ts.p.id)).hasClass("ui-resizable")) {
                                        $(".ui-resizable-handle", "#gbox_" + $.jgrid.jqID(ts.p.id)).show();
                                    }
                                    $(ts).triggerHandler("jqGridHeaderClick", [ts.p.gridstate, e]);
                                    if (onHdCl) {
                                        if (!hg) {
                                            ts.p.onHeaderClick.call(ts, ts.p.gridstate, e);
                                        }
                                    }
                                }
                            });
                        }
                        return false;
                    });
                    if (hg) {
                        ts.p.datatype = "local";
                        $(".ui-jqgrid-titlebar-close", grid.cDiv).trigger("click");
                    }
                }
            } else {
                $(grid.cDiv).hide();
            }
            $(grid.hDiv).after(grid.bDiv).mousemove(function (e) {
                if (grid.resizing) {
                    grid.dragMove(e);
                    return false;
                }
            });
            $(".ui-jqgrid-labels", grid.hDiv).bind("selectstart", function () {
                return false;
            });
            $(document).bind("mouseup.jqGrid" + ts.p.id, function () {
                if (grid.resizing) {
                    grid.dragEnd();
                    return false;
                }
                return true;
            });
            ts.formatCol = formatCol;
            ts.sortData = sortData;
            ts.updatepager = updatepager;
            ts.refreshIndex = refreshIndex;
            ts.setHeadCheckBox = setHeadCheckBox;
            ts.constructTr = constructTr;
            ts.formatter = function (rowId, cellval, colpos, rwdat, act) {
                return formatter(rowId, cellval, colpos, rwdat, act);
            };
            $.extend(grid, {
                populate: populate,
                emptyRows: emptyRows,
                beginReq: beginReq,
                endReq: endReq
            });
            this.grid = grid;
            ts.addXmlData = function (d) {
                addXmlData(d, ts.grid.bDiv);
            };
            ts.addJSONData = function (d) {
                addJSONData(d, ts.grid.bDiv);
            };
            this.grid.cols = this.rows[0].cells;
            $(ts).triggerHandler("jqGridInitGrid");
            if ($.isFunction(ts.p.onInitGrid)) {
                ts.p.onInitGrid.call(ts);
            }

            populate();
            ts.p.hiddengrid = false;
        });
    };
    $.jgrid.extend({
        getGridParam: function (pName) {
            var $t = this[0];
            if (!$t || !$t.grid) {
                return;
            }
            if (!pName) {
                return $t.p;
            }
            return $t.p[pName] !== undefined ? $t.p[pName] : null;
        },
        setGridParam: function (newParams) {
            return this.each(function () {
                if (this.grid && typeof newParams === 'object') {
                    $.extend(true, this.p, newParams);
                }
            });
        },
        getGridRowById: function (rowid) {
            var row;
            this.each(function () {
                try {
                    //row = this.rows.namedItem( rowid );
                    var i = this.rows.length;
                    while (i--) {
                        if (rowid.toString() === this.rows[i].id) {
                            row = this.rows[i];
                            break;
                        }
                    }
                } catch (e) {
                    row = $(this.grid.bDiv).find("#" + $.jgrid.jqID(rowid));
                }
            });
            return row;
        },
        getDataIDs: function () {
            var ids = [],
                    i = 0,
                    len, j = 0;
            this.each(function () {
                len = this.rows.length;
                if (len && len > 0) {
                    while (i < len) {
                        if ($(this.rows[i]).hasClass('jqgrow')) {
                            ids[j] = this.rows[i].id;
                            j++;
                        }
                        i++;
                    }
                }
            });
            return ids;
        },
        setSelection: function (selection, onsr, e) {
            return this.each(function () {
                var $t = this,
                        stat, pt, ner, ia, tpsr, fid;
                if (selection === undefined) {
                    return;
                }
                onsr = onsr === false ? false : true;
                pt = $($t).jqGrid('getGridRowById', selection);
                if (!pt || !pt.className || pt.className.indexOf('ui-state-disabled') > -1) {
                    return;
                }

                function scrGrid(iR) {
                    var ch = $($t.grid.bDiv)[0].clientHeight,
                            st = $($t.grid.bDiv)[0].scrollTop,
                            rpos = $($t.rows[iR]).position().top,
                            rh = $t.rows[iR].clientHeight;
                    if (rpos + rh >= ch + st) {
                        $($t.grid.bDiv)[0].scrollTop = rpos - (ch + st) + rh + st;
                    } else if (rpos < ch + st) {
                        if (rpos < st) {
                            $($t.grid.bDiv)[0].scrollTop = rpos;
                        }
                    }
                }
                if ($t.p.scrollrows === true) {
                    ner = $($t).jqGrid('getGridRowById', selection).rowIndex;
                    if (ner >= 0) {
                        scrGrid(ner);
                    }
                }
                if ($t.p.frozenColumns === true) {
                    fid = $t.p.id + "_frozen";
                }
                if (!$t.p.multiselect) {
                    if (pt.className !== "ui-subgrid") {
                        if ($t.p.selrow !== pt.id) {
                            $($($t).jqGrid('getGridRowById', $t.p.selrow)).removeClass("ui-state-highlight").attr({
                                "aria-selected": "false",
                                "tabindex": "-1"
                            });
                            $(pt).addClass("ui-state-highlight").attr({
                                "aria-selected": "true",
                                "tabindex": "0"
                            }); //.focus();
                            if (fid) {
                                $("#" + $.jgrid.jqID($t.p.selrow), "#" + $.jgrid.jqID(fid)).removeClass("ui-state-highlight");
                                $("#" + $.jgrid.jqID(selection), "#" + $.jgrid.jqID(fid)).addClass("ui-state-highlight");
                            }
                            stat = true;
                        } else {
                            stat = false;
                        }
                        $t.p.selrow = pt.id;
                        if (onsr) {
                            $($t).triggerHandler("jqGridSelectRow", [pt.id, stat, e]);
                            if ($t.p.onSelectRow) {
                                $t.p.onSelectRow.call($t, pt.id, stat, e);
                            }
                        }
                    }
                } else {
                    //unselect selectall checkbox when deselecting a specific row
                    $t.setHeadCheckBox(false);
                    $t.p.selrow = pt.id;
                    ia = $.inArray($t.p.selrow, $t.p.selarrrow);
                    if (ia === -1) {
                        if (pt.className !== "ui-subgrid") {
                            $(pt).addClass("ui-state-highlight").attr("aria-selected", "true");
                        }
                        stat = true;
                        $t.p.selarrrow.push($t.p.selrow);
                    } else {
                        if (pt.className !== "ui-subgrid") {
                            $(pt).removeClass("ui-state-highlight").attr("aria-selected", "false");
                        }
                        stat = false;
                        $t.p.selarrrow.splice(ia, 1);
                        tpsr = $t.p.selarrrow[0];
                        $t.p.selrow = (tpsr === undefined) ? null : tpsr;
                    }
                    $("#jqg_" + $.jgrid.jqID($t.p.id) + "_" + $.jgrid.jqID(pt.id))[$t.p.useProp ? 'prop' : 'attr']("checked", stat);
                    if (fid) {
                        if (ia === -1) {
                            $("#" + $.jgrid.jqID(selection), "#" + $.jgrid.jqID(fid)).addClass("ui-state-highlight");
                        } else {
                            $("#" + $.jgrid.jqID(selection), "#" + $.jgrid.jqID(fid)).removeClass("ui-state-highlight");
                        }
                        $("#jqg_" + $.jgrid.jqID($t.p.id) + "_" + $.jgrid.jqID(selection), "#" + $.jgrid.jqID(fid))[$t.p.useProp ? 'prop' : 'attr']("checked", stat);
                    }
                    if (onsr) {
                        $($t).triggerHandler("jqGridSelectRow", [pt.id, stat, e]);
                        if ($t.p.onSelectRow) {
                            $t.p.onSelectRow.call($t, pt.id, stat, e);
                        }
                    }
                }
            });
        },
        resetSelection: function (rowid) {
            return this.each(function () {
                var t = this,
                        sr, fid;
                if (t.p.frozenColumns === true) {
                    fid = t.p.id + "_frozen";
                }
                if (rowid !== undefined) {
                    sr = rowid === t.p.selrow ? t.p.selrow : rowid;
                    $("#" + $.jgrid.jqID(t.p.id) + " tbody:first tr#" + $.jgrid.jqID(sr)).removeClass("ui-state-highlight").attr("aria-selected", "false");
                    if (fid) {
                        $("#" + $.jgrid.jqID(sr), "#" + $.jgrid.jqID(fid)).removeClass("ui-state-highlight");
                    }
                    if (t.p.multiselect) {
                        $("#jqg_" + $.jgrid.jqID(t.p.id) + "_" + $.jgrid.jqID(sr), "#" + $.jgrid.jqID(t.p.id))[t.p.useProp ? 'prop' : 'attr']("checked", false);
                        if (fid) {
                            $("#jqg_" + $.jgrid.jqID(t.p.id) + "_" + $.jgrid.jqID(sr), "#" + $.jgrid.jqID(fid))[t.p.useProp ? 'prop' : 'attr']("checked", false);
                        }
                        t.setHeadCheckBox(false);
                    }
                    sr = null;
                } else if (!t.p.multiselect) {
                    if (t.p.selrow) {
                        $("#" + $.jgrid.jqID(t.p.id) + " tbody:first tr#" + $.jgrid.jqID(t.p.selrow)).removeClass("ui-state-highlight").attr("aria-selected", "false");
                        if (fid) {
                            $("#" + $.jgrid.jqID(t.p.selrow), "#" + $.jgrid.jqID(fid)).removeClass("ui-state-highlight");
                        }
                        t.p.selrow = null;
                    }
                } else {
                    $(t.p.selarrrow).each(function (i, n) {
                        $($(t).jqGrid('getGridRowById', n)).removeClass("ui-state-highlight").attr("aria-selected", "false");
                        $("#jqg_" + $.jgrid.jqID(t.p.id) + "_" + $.jgrid.jqID(n))[t.p.useProp ? 'prop' : 'attr']("checked", false);
                        if (fid) {
                            $("#" + $.jgrid.jqID(n), "#" + $.jgrid.jqID(fid)).removeClass("ui-state-highlight");
                            $("#jqg_" + $.jgrid.jqID(t.p.id) + "_" + $.jgrid.jqID(n), "#" + $.jgrid.jqID(fid))[t.p.useProp ? 'prop' : 'attr']("checked", false);
                        }
                    });
                    t.setHeadCheckBox(false);
                    t.p.selarrrow = [];
                    t.p.selrow = null;
                }
                if (t.p.cellEdit === true) {
                    if (parseInt(t.p.iCol, 10) >= 0 && parseInt(t.p.iRow, 10) >= 0) {
                        $("td:eq(" + t.p.iCol + ")", t.rows[t.p.iRow]).removeClass("edit-cell ui-state-highlight");
                        $(t.rows[t.p.iRow]).removeClass("selected-row ui-state-hover");
                    }
                }
                t.p.savedRow = [];
            });
        },
        getRowData: function (rowid) {
            var res = {},
                    resall, getall = false,
                    len, j = 0;
            this.each(function () {
                var $t = this,
                        nm, ind;
                if (rowid === undefined) {
                    getall = true;
                    resall = [];
                    len = $t.rows.length;
                } else {
                    ind = $($t).jqGrid('getGridRowById', rowid);
                    if (!ind) {
                        return res;
                    }
                    len = 2;
                }
                while (j < len) {
                    if (getall) {
                        ind = $t.rows[j];
                    }
                    if ($(ind).hasClass('jqgrow')) {
                        $('td[role="gridcell"]', ind).each(function (i) {
                            nm = $t.p.colModel[i].name;
                            if (nm !== 'cb' && nm !== 'subgrid' && nm !== 'rn') {
                                if ($t.p.treeGrid === true && nm === $t.p.ExpandColumn) {
                                    res[nm] = $.jgrid.htmlDecode($("span:first", this).html());
                                } else {
                                    try {
                                        res[nm] = $.unformat.call($t, this, {
                                            rowId: ind.id,
                                            colModel: $t.p.colModel[i]
                                        }, i);
                                    } catch (e) {
                                        res[nm] = $.jgrid.htmlDecode($(this).html());
                                    }
                                }
                            }
                        });
                        if (getall) {
                            resall.push(res);
                            res = {};
                        }
                    }
                    j++;
                }
            });
            return resall || res;
        },
        delRowData: function (rowid) {
            var success = false,
                    rowInd, ia;
            this.each(function () {
                var $t = this;
                rowInd = $($t).jqGrid('getGridRowById', rowid);
                if (!rowInd) {
                    return false;
                }
                $(rowInd).remove();
                $t.p.records--;
                $t.p.reccount--;
                $t.updatepager(true, false);
                success = true;
                if ($t.p.multiselect) {
                    ia = $.inArray(rowid, $t.p.selarrrow);
                    if (ia !== -1) {
                        $t.p.selarrrow.splice(ia, 1);
                    }
                }
                if ($t.p.multiselect && $t.p.selarrrow.length > 0) {
                    $t.p.selrow = $t.p.selarrrow[$t.p.selarrrow.length - 1];
                } else {
                    $t.p.selrow = null;
                }
                if ($t.p.datatype === 'local') {
                    var id = $.jgrid.stripPref($t.p.idPrefix, rowid),
                            pos = $t.p._index[id];
                    if (pos !== undefined) {
                        $t.p.data.splice(pos, 1);
                        $t.refreshIndex();
                    }
                }
                if ($t.p.altRows === true && success) {
                    var cn = $t.p.altclass;
                    $($t.rows).each(function (i) {
                        if (i % 2 === 1) {
                            $(this).addClass(cn);
                        } else {
                            $(this).removeClass(cn);
                        }
                    });
                }
            });
            return success;
        },
        setRowData: function (rowid, data, cssp) {
            var nm, success = true,
                    title;
            this.each(function () {
                if (!this.grid) {
                    return false;
                }
                var t = this,
                        vl, ind, cp = typeof cssp,
                        lcdata = {};
                ind = $(this).jqGrid('getGridRowById', rowid);
                if (!ind) {
                    return false;
                }
                if (data) {
                    try {
                        $(this.p.colModel).each(function (i) {
                            nm = this.name;
                            var dval = $.jgrid.getAccessor(data, nm);
                            if (dval !== undefined) {
                                lcdata[nm] = this.formatter && typeof this.formatter === 'string' && this.formatter === 'date' ? $.unformat.date.call(t, dval, this) : dval;
                                vl = t.formatter(rowid, dval, i, data, 'edit');
                                title = this.title ? {
                                    "title": $.jgrid.stripHtml(vl)
                                } : {};
                                if (t.p.treeGrid === true && nm === t.p.ExpandColumn) {
                                    $("td[role='gridcell']:eq(" + i + ") > span:first", ind).html(vl).attr(title);
                                } else {
                                    $("td[role='gridcell']:eq(" + i + ")", ind).html(vl).attr(title);
                                }
                            }
                        });
                        if (t.p.datatype === 'local') {
                            var id = $.jgrid.stripPref(t.p.idPrefix, rowid),
                                    pos = t.p._index[id],
                                    key;
                            if (t.p.treeGrid) {
                                for (key in t.p.treeReader) {
                                    if (t.p.treeReader.hasOwnProperty(key)) {
                                        delete lcdata[t.p.treeReader[key]];
                                    }
                                }
                            }
                            if (pos !== undefined) {
                                t.p.data[pos] = $.extend(true, t.p.data[pos], lcdata);
                            }
                            lcdata = null;
                        }
                    } catch (e) {
                        success = false;
                    }
                }
                if (success) {
                    if (cp === 'string') {
                        $(ind).addClass(cssp);
                    } else if (cssp !== null && cp === 'object') {
                        $(ind).css(cssp);
                    }
                    $(t).triggerHandler("jqGridAfterGridComplete");
                }
            });
            return success;
        },
        addRowData: function (rowid, rdata, pos, src) {
            if (!pos) {
                pos = "last";
            }
            var success = false,
                    nm, row, gi, si, ni, sind, i, v, prp = "",
                    aradd, cnm, cn, data, cm, id;
            if (rdata) {
                if ($.isArray(rdata)) {
                    aradd = true;
                    pos = "last";
                    cnm = rowid;
                } else {
                    rdata = [rdata];
                    aradd = false;
                }
                this.each(function () {
                    var t = this,
                            datalen = rdata.length;
                    ni = t.p.rownumbers === true ? 1 : 0;
                    gi = t.p.multiselect === true ? 1 : 0;
                    si = t.p.subGrid === true ? 1 : 0;
                    if (!aradd) {
                        if (rowid !== undefined) {
                            rowid = String(rowid);
                        } else {
                            rowid = $.jgrid.randId();
                            if (t.p.keyIndex !== false) {
                                cnm = t.p.colModel[t.p.keyIndex + gi + si + ni].name;
                                if (rdata[0][cnm] !== undefined) {
                                    rowid = rdata[0][cnm];
                                }
                            }
                        }
                    }
                    cn = t.p.altclass;
                    var k = 0,
                            cna = "",
                            lcdata = {},
                            air = $.isFunction(t.p.afterInsertRow) ? true : false;
                    while (k < datalen) {
                        data = rdata[k];
                        row = [];
                        if (aradd) {
                            try {
                                rowid = data[cnm];
                                if (rowid === undefined) {
                                    rowid = $.jgrid.randId();
                                }
                            } catch (e) {
                                rowid = $.jgrid.randId();
                            }
                            cna = t.p.altRows === true ? (t.rows.length - 1) % 2 === 0 ? cn : "" : "";
                        }
                        id = rowid;
                        rowid = t.p.idPrefix + rowid;
                        if (ni) {
                            prp = t.formatCol(0, 1, '', null, rowid, true);
                            row[row.length] = "<td role=\"gridcell\" class=\"ui-state-default jqgrid-rownum\" " + prp + ">0</td>";
                        }
                        if (gi) {
                            v = "<input role=\"checkbox\" type=\"checkbox\"" + " id=\"jqg_" + t.p.id + "_" + rowid + "\" class=\"regular-checkbox cbox\"/><label for=\"jqg_" + t.p.id + "_" + rowid + "\"></label>";
                            prp = t.formatCol(ni, 1, '', null, rowid, true);
                            row[row.length] = "<td role=\"gridcell\" " + prp + ">" + v + "</td>";
                        }
                        if (si) {
                            row[row.length] = $(t).jqGrid("addSubGridCell", gi + ni, 1);
                        }
                        for (i = gi + si + ni; i < t.p.colModel.length; i++) {
                            cm = t.p.colModel[i];
                            nm = cm.name;
                            lcdata[nm] = data[nm];
                            v = t.formatter(rowid, $.jgrid.getAccessor(data, nm), i, data);
                            prp = t.formatCol(i, 1, v, data, rowid, lcdata);
                            row[row.length] = "<td role=\"gridcell\" " + prp + ">" + v + "</td>";
                        }
                        row.unshift(t.constructTr(rowid, false, cna, lcdata, data, false));
                        row[row.length] = "</tr>";
                        if (t.rows.length === 0) {
                            $("table:first", t.grid.bDiv).append(row.join(''));
                        } else {
                            switch (pos) {
                                case 'last':
                                    $(t.rows[t.rows.length - 1]).after(row.join(''));
                                    sind = t.rows.length - 1;
                                    break;
                                case 'first':
                                    $(t.rows[0]).after(row.join(''));
                                    sind = 1;
                                    break;
                                case 'after':
                                    sind = $(t).jqGrid('getGridRowById', src);
                                    if (sind) {
                                        if ($(t.rows[sind.rowIndex + 1]).hasClass("ui-subgrid")) {
                                            $(t.rows[sind.rowIndex + 1]).after(row);
                                        } else {
                                            $(sind).after(row.join(''));
                                        }
                                        sind = sind.rowIndex + 1;
                                    }
                                    break;
                                case 'before':
                                    sind = $(t).jqGrid('getGridRowById', src);
                                    if (sind) {
                                        $(sind).before(row.join(''));
                                        sind = sind.rowIndex - 1;
                                    }
                                    break;
                            }
                        }
                        if (t.p.subGrid === true) {
                            $(t).jqGrid("addSubGrid", gi + ni, sind);
                        }
                        t.p.records++;
                        t.p.reccount++;
                        $(t).triggerHandler("jqGridAfterInsertRow", [rowid, data, data]);
                        if (air) {
                            t.p.afterInsertRow.call(t, rowid, data, data);
                        }
                        k++;
                        if (t.p.datatype === 'local') {
                            lcdata[t.p.localReader.id] = id;
                            t.p._index[id] = t.p.data.length;
                            t.p.data.push(lcdata);
                            lcdata = {};
                        }
                    }
                    if (t.p.altRows === true && !aradd) {
                        if (pos === "last") {
                            if ((t.rows.length - 1) % 2 === 1) {
                                $(t.rows[t.rows.length - 1]).addClass(cn);
                            }
                        } else {
                            $(t.rows).each(function (i) {
                                if (i % 2 === 1) {
                                    $(this).addClass(cn);
                                } else {
                                    $(this).removeClass(cn);
                                }
                            });
                        }
                    }
                    t.updatepager(true, true);
                    success = true;
                });
            }
            return success;
        },
        footerData: function (action, data, format) {
            var nm, success = false,
                    res = {},
                    title;

            function isEmpty(obj) {
                var i;
                for (i in obj) {
                    if (obj.hasOwnProperty(i)) {
                        return false;
                    }
                }
                return true;
            }
            if (action == undefined) {
                action = "get";
            }
            if (typeof format !== "boolean") {
                format = true;
            }
            action = action.toLowerCase();
            this.each(function () {
                var t = this,
                        vl;
                if (!t.grid || !t.p.footerrow) {
                    return false;
                }
                if (action === "set") {
                    if (isEmpty(data)) {
                        return false;
                    }
                }
                success = true;
                $(this.p.colModel).each(function (i) {
                    nm = this.name;
                    if (action === "set") {
                        if (data[nm] !== undefined) {
                            vl = format ? t.formatter("", data[nm], i, data, 'edit') : data[nm];
                            title = this.title ? {
                                "title": $.jgrid.stripHtml(vl)
                            } : {};
                            // HB Customization << Start
                            var frow = data[nm];
                            if ($.isArray(frow)) {
                                var $ftbl = $("<div />").attr("class", 'calc-list'), ftype, ftext, fhtml;
                                for (var fd in frow) {
                                    if (frow[fd]) {
                                        var $ftr = $("<div />");
                                        if (frow[fd]['type'] == "calc") {
                                            fhtml = (this.footerTpl && this.footerTpl.calTPL) ? $.trim(this.footerTpl.calTPL) : '{0}';
                                            $($ftr).append($.jgrid.template(fhtml, frow[fd]['text'], frow[fd]['title']));
                                        } else if (frow[fd]['type'] == "final") {
                                            if (this.footerTpl && this.footerTpl.finTPL) {
                                                fhtml = $.trim(this.footerTpl.finTPL);
                                            } else {
                                                fhtml = '{0}';
                                                $($ftr).addClass("calc-final");
                                            }
                                            $($ftr).append($.jgrid.template(fhtml, frow[fd]['text']));
                                        } else {
                                            fhtml = (this.footerTpl && this.footerTpl.subTPL) ? $.trim(this.footerTpl.subTPL) : '{0}';
                                            $($ftr).append($.jgrid.template(fhtml, frow[fd]['text']));
                                        }
                                        $($ftbl).append($ftr);
                                    }
                                }
                                $("tr.footrow td:eq(" + i + ")", t.grid.sDiv).html($ftbl); //.attr(title)
                                // HB Customization >> End
                            } else {
                                $("tr.footrow td:eq(" + i + ")", t.grid.sDiv).html(vl).attr(title);
                            }

                            success = true;
                        }
                    } else if (action === "get") {
                        res[nm] = $("tr.footrow td:eq(" + i + ")", t.grid.sDiv).html();
                    }
                });
            });
            return action === "get" ? res : success;
        },
        showHideCol: function (colname, show) {
            return this.each(function () {
                var $t = this,
                        fndh = false,
                        brd = $.jgrid.cell_width ? 0 : $t.p.cellLayout,
                        cw;
                if (!$t.grid) {
                    return;
                }
                if (typeof colname === 'string') {
                    colname = [colname];
                }
                show = show !== "none" ? "" : "none";
                var sw = show === "" ? true : false,
                        gh = $t.p.groupHeader && (typeof $t.p.groupHeader === 'object' || $.isFunction($t.p.groupHeader));
                if (gh) {
                    $($t).jqGrid('destroyGroupHeader', false);
                }
                $(this.p.colModel).each(function (i) {
                    if ($.inArray(this.name, colname) !== -1 && this.hidden === sw) {
                        if ($t.p.frozenColumns === true && this.frozen === true) {
                            return true;
                        }
                        $("tr[role=rowheader]", $t.grid.hDiv).each(function () {
                            $(this.cells[i]).css("display", show);
                        });
                        $($t.rows).each(function () {
                            if (!$(this).hasClass("jqgroup")) {
                                $(this.cells[i]).css("display", show);
                            }
                        });
                        if ($t.p.footerrow) {
                            $("tr.footrow td:eq(" + i + ")", $t.grid.sDiv).css("display", show);
                        }
                        cw = parseInt(this.width, 10);
                        if (show === "none") {
                            $t.p.tblwidth -= cw + brd;
                        } else {
                            $t.p.tblwidth += cw + brd;
                        }
                        this.hidden = !sw;
                        fndh = true;
                        $($t).triggerHandler("jqGridShowHideCol", [sw, this.name, i]);
                    }
                });
                if (fndh === true) {
                    if ($t.p.shrinkToFit === true && !isNaN($t.p.height)) {
                        $t.p.tblwidth += parseInt($t.p.scrollOffset, 10);
                    }
                    $($t).jqGrid("setGridWidth", $t.p.shrinkToFit === true ? $t.p.tblwidth : $t.p.width);
                }
                if (gh) {
                    $($t).jqGrid('setGroupHeaders', $t.p.groupHeader);
                }
            });
        },
        hideCol: function (colname) {
            return this.each(function () {
                $(this).jqGrid("showHideCol", colname, "none");
            });
        },
        showCol: function (colname) {
            return this.each(function () {
                $(this).jqGrid("showHideCol", colname, "");
            });
        },
        remapColumns: function (permutation, updateCells, keepHeader) {
            function resortArray(a) {
                var ac;
                if (a.length) {
                    ac = $.makeArray(a);
                } else {
                    ac = $.extend({}, a);
                }
                $.each(permutation, function (i) {
                    a[i] = ac[this];
                });
            }
            var ts = this.get(0);

            function resortRows(parent, clobj) {
                $(">tr" + (clobj || ""), parent).each(function () {
                    var row = this;
                    var elems = $.makeArray(row.cells);
                    $.each(permutation, function () {
                        var e = elems[this];
                        if (e) {
                            row.appendChild(e);
                        }
                    });
                });
            }
            resortArray(ts.p.colModel);
            resortArray(ts.p.colNames);
            resortArray(ts.grid.headers);
            resortRows($("thead:first", ts.grid.hDiv), keepHeader && ":not(.ui-jqgrid-labels)");
            if (updateCells) {
                resortRows($("#" + $.jgrid.jqID(ts.p.id) + " tbody:first"), ".jqgfirstrow, tr.jqgrow, tr.jqfoot");
            }
            if (ts.p.footerrow) {
                resortRows($("tbody:first", ts.grid.sDiv));
            }
            if (ts.p.remapColumns) {
                if (!ts.p.remapColumns.length) {
                    ts.p.remapColumns = $.makeArray(permutation);
                } else {
                    resortArray(ts.p.remapColumns);
                }
            }
            ts.p.lastsort = $.inArray(ts.p.lastsort, permutation);
            if (ts.p.treeGrid) {
                ts.p.expColInd = $.inArray(ts.p.expColInd, permutation);
            }
            $(ts).triggerHandler("jqGridRemapColumns", [permutation, updateCells, keepHeader]);
        },
        setGridWidth: function (nwidth, shrink) {
            return this.each(function () {
                if (!this.grid) {
                    return;
                }
                var $t = this,
                        cw, initwidth = 0,
                        brd = $.jgrid.cell_width ? 0 : $t.p.cellLayout,
                        lvc, vc = 0,
                        hs = false,
                        scw = $t.p.scrollOffset,
                        aw, gw = 0,
                        cr;
                if (typeof shrink !== 'boolean') {
                    shrink = $t.p.shrinkToFit;
                }
                if (isNaN(nwidth)) {
                    return;
                }
                nwidth = parseInt(nwidth, 10);
                $t.grid.width = $t.p.width = nwidth;
                $("#gbox_" + $.jgrid.jqID($t.p.id)).css("width", nwidth + "px");
                $("#gview_" + $.jgrid.jqID($t.p.id)).css("width", nwidth + "px");
                $($t.grid.bDiv).css("width", nwidth + "px");
                $($t.grid.hDiv).css("width", nwidth + "px");
                if ($t.p.pager) {
                    $($t.p.pager).css("width", nwidth + "px");
                }
                if ($t.p.toppager) {
                    $($t.p.toppager).css("width", nwidth + "px");
                }
                if ($t.p.toolbar[0] === true) {
                    $($t.grid.uDiv).css("width", nwidth + "px");
                    if ($t.p.toolbar[1] === "both") {
                        $($t.grid.ubDiv).css("width", nwidth + "px");
                    }
                }
                if ($t.p.footerrow) {
                    $($t.grid.sDiv).css("width", nwidth + "px");
                }
                if (shrink === false && $t.p.forceFit === true) {
                    $t.p.forceFit = false;
                }
                if (shrink === true) {
                    $.each($t.p.colModel, function () {
                        if (this.hidden === false) {
                            cw = this.widthOrg;
                            initwidth += cw + brd;
                            if (this.fixed) {
                                gw += cw + brd;
                            } else {
                                vc++;
                            }
                        }
                    });
                    if (vc === 0) {
                        return;
                    }
                    $t.p.tblwidth = initwidth;
                    aw = nwidth - brd * vc - gw;
                    if (!isNaN($t.p.height)) {
                        if ($($t.grid.bDiv)[0].clientHeight < $($t.grid.bDiv)[0].scrollHeight || $t.rows.length === 1) {
                            hs = true;
                            aw -= scw;
                        }
                    }
                    initwidth = 0;
                    var cle = $t.grid.cols.length > 0;
                    $.each($t.p.colModel, function (i) {
                        if (this.hidden === false && !this.fixed) {
                            cw = this.widthOrg;
                            cw = Math.round(aw * cw / ($t.p.tblwidth - brd * vc - gw));
                            if (cw < 0) {
                                return;
                            }
                            this.width = cw;
                            initwidth += cw;
                            $t.grid.headers[i].width = cw;
                            $t.grid.headers[i].el.style.width = cw + "px";
                            if ($t.p.footerrow) {
                                $t.grid.footers[i].style.width = cw + "px";
                            }
                            if (cle) {
                                $t.grid.cols[i].style.width = cw + "px";
                            }
                            lvc = i;
                        }
                    });

                    if (!lvc) {
                        return;
                    }

                    cr = 0;
                    if (hs) {
                        if (nwidth - gw - (initwidth + brd * vc) !== scw) {
                            cr = nwidth - gw - (initwidth + brd * vc) - scw;
                        }
                    } else if (Math.abs(nwidth - gw - (initwidth + brd * vc)) !== 1) {
                        cr = nwidth - gw - (initwidth + brd * vc);
                    }
                    $t.p.colModel[lvc].width += cr;
                    $t.p.tblwidth = initwidth + cr + brd * vc + gw;
                    if ($t.p.tblwidth > nwidth) {
                        var delta = $t.p.tblwidth - parseInt(nwidth, 10);
                        $t.p.tblwidth = nwidth;
                        cw = $t.p.colModel[lvc].width = $t.p.colModel[lvc].width - delta;
                    } else {
                        cw = $t.p.colModel[lvc].width;
                    }
                    $t.grid.headers[lvc].width = cw;
                    $t.grid.headers[lvc].el.style.width = cw + "px";
                    if (cle) {
                        $t.grid.cols[lvc].style.width = cw + "px";
                    }
                    if ($t.p.footerrow) {
                        $t.grid.footers[lvc].style.width = cw + "px";
                    }
                }
                if ($t.p.tblwidth) {
                    $('table:first', $t.grid.bDiv).css("width", $t.p.tblwidth + "px");
                    $('table:first', $t.grid.hDiv).css("width", $t.p.tblwidth + "px");
                    $t.grid.hDiv.scrollLeft = $t.grid.bDiv.scrollLeft;
                    if ($t.p.footerrow) {
                        $('table:first', $t.grid.sDiv).css("width", $t.p.tblwidth + "px");
                    }
                }
            });
        },
        setGridHeight: function (nh) {
            return this.each(function () {
                var $t = this;
                if (!$t.grid) {
                    return;
                }
                var bDiv = $($t.grid.bDiv);
                bDiv.css({
                    height: nh + (isNaN(nh) ? "" : "px")
                });
                if ($t.p.frozenColumns === true) {
                    //follow the original set height to use 16, better scrollbar width detection
                    $('#' + $.jgrid.jqID($t.p.id) + "_frozen").parent().height(bDiv.height() - 16);
                }
                $t.p.height = nh;
                if ($t.p.scroll) {
                    $t.grid.populateVisible();
                }
            });
        },
        setCaption: function (newcap) {
            return this.each(function () {
                this.p.caption = newcap;
                $("span.ui-jqgrid-title, span.ui-jqgrid-title-rtl", this.grid.cDiv).html(newcap);
                $(this.grid.cDiv).show();
            });
        },
        setLabel: function (colname, nData, prop, attrp) {
            return this.each(function () {
                var $t = this,
                        pos = -1;
                if (!$t.grid) {
                    return;
                }
                if (colname !== undefined) {
                    $($t.p.colModel).each(function (i) {
                        if (this.name === colname) {
                            pos = i;
                            return false;
                        }
                    });
                } else {
                    return;
                }
                if (pos >= 0) {
                    var thecol = $("tr.ui-jqgrid-labels th:eq(" + pos + ")", $t.grid.hDiv);
                    if (nData) {
                        var ico = $(".s-ico", thecol);
                        $("[id^=jqgh_]", thecol).empty().html(nData).append(ico);
                        $t.p.colNames[pos] = nData;
                    }
                    if (prop) {
                        if (typeof prop === 'string') {
                            $(thecol).addClass(prop);
                        } else {
                            $(thecol).css(prop);
                        }
                    }
                    if (typeof attrp === 'object') {
                        $(thecol).attr(attrp);
                    }
                }
            });
        },
        setCell: function (rowid, colname, nData, cssp, attrp, forceupd) {
            return this.each(function () {
                var $t = this,
                        pos = -1,
                        v, title;
                if (!$t.grid) {
                    return;
                }
                if (isNaN(colname)) {
                    $($t.p.colModel).each(function (i) {
                        if (this.name === colname) {
                            pos = i;
                            return false;
                        }
                    });
                } else {
                    pos = parseInt(colname, 10);
                }
                if (pos >= 0) {
                    var ind = $($t).jqGrid('getGridRowById', rowid);
                    if (ind) {
                        var tcell = $("td:eq(" + pos + ")", ind);
                        if (nData !== "" || forceupd === true) {
                            v = $t.formatter(rowid, nData, pos, ind, 'edit');
                            title = $t.p.colModel[pos].title ? {
                                "title": $.jgrid.stripHtml(v)
                            } : {};
                            if ($t.p.treeGrid && $(".tree-wrap", $(tcell)).length > 0) {
                                $("span", $(tcell)).html(v).attr(title);
                            } else {
                                $(tcell).html(v).attr(title);
                            }
                            if ($t.p.datatype === "local") {
                                var cm = $t.p.colModel[pos],
                                        index;
                                nData = cm.formatter && typeof cm.formatter === 'string' && cm.formatter === 'date' ? $.unformat.date.call($t, nData, cm) : nData;
                                index = $t.p._index[$.jgrid.stripPref($t.p.idPrefix, rowid)];
                                if (index !== undefined) {
                                    $t.p.data[index][cm.name] = nData;
                                }
                            }
                        }
                        if (typeof cssp === 'string') {
                            $(tcell).addClass(cssp);
                        } else if (cssp) {
                            $(tcell).css(cssp);
                        }
                        if (typeof attrp === 'object') {
                            $(tcell).attr(attrp);
                        }
                    }
                }
            });
        },
        getCell: function (rowid, col) {
            var ret = false;
            this.each(function () {
                var $t = this,
                        pos = -1;
                if (!$t.grid) {
                    return;
                }
                if (isNaN(col)) {
                    $($t.p.colModel).each(function (i) {
                        if (this.name === col) {
                            pos = i;
                            return false;
                        }
                    });
                } else {
                    pos = parseInt(col, 10);
                }
                if (pos >= 0) {
                    var ind = $($t).jqGrid('getGridRowById', rowid);
                    if (ind) {
                        try {
                            ret = $.unformat.call($t, $("td:eq(" + pos + ")", ind), {
                                rowId: ind.id,
                                colModel: $t.p.colModel[pos]
                            }, pos);
                        } catch (e) {
                            ret = $.jgrid.htmlDecode($("td:eq(" + pos + ")", ind).html());
                        }
                    }
                }
            });
            return ret;
        },
        getCol: function (col, obj, mathopr) {
            var ret = [],
                    val, sum = 0,
                    min, max, v;
            obj = typeof obj !== 'boolean' ? false : obj;
            if (mathopr === undefined) {
                mathopr = false;
            }
            this.each(function () {
                var $t = this,
                        pos = -1;
                if (!$t.grid) {
                    return;
                }
                if (isNaN(col)) {
                    $($t.p.colModel).each(function (i) {
                        if (this.name === col) {
                            pos = i;
                            return false;
                        }
                    });
                } else {
                    pos = parseInt(col, 10);
                }
                if (pos >= 0) {
                    var ln = $t.rows.length,
                            i = 0,
                            dlen = 0;
                    if (ln && ln > 0) {
                        while (i < ln) {
                            if ($($t.rows[i]).hasClass('jqgrow')) {
                                try {
                                    val = $.unformat.call($t, $($t.rows[i].cells[pos]), {
                                        rowId: $t.rows[i].id,
                                        colModel: $t.p.colModel[pos]
                                    }, pos);
                                } catch (e) {
                                    val = $.jgrid.htmlDecode($t.rows[i].cells[pos].innerHTML);
                                }
                                if (mathopr) {
                                    v = parseFloat(val);
                                    if (!isNaN(v)) {
                                        sum += v;
                                        if (max === undefined) {
                                            max = min = v;
                                        }
                                        min = Math.min(min, v);
                                        max = Math.max(max, v);
                                        dlen++;
                                    }
                                } else if (obj) {
                                    ret.push({
                                        id: $t.rows[i].id,
                                        value: val
                                    });
                                } else {
                                    ret.push(val);
                                }
                            }
                            i++;
                        }
                        if (mathopr) {
                            switch (mathopr.toLowerCase()) {
                                case 'sum':
                                    ret = sum;
                                    break;
                                case 'avg':
                                    ret = sum / dlen;
                                    break;
                                case 'count':
                                    ret = (ln - 1);
                                    break;
                                case 'min':
                                    ret = min;
                                    break;
                                case 'max':
                                    ret = max;
                                    break;
                            }
                        }
                    }
                }
            });
            return ret;
        },
        clearGridData: function (clearfooter) {
            return this.each(function () {
                var $t = this;
                if (!$t.grid) {
                    return;
                }
                if (typeof clearfooter !== 'boolean') {
                    clearfooter = false;
                }
                if ($t.p.deepempty) {
                    $("#" + $.jgrid.jqID($t.p.id) + " tbody:first tr:gt(0)").remove();
                } else {
                    var trf = $("#" + $.jgrid.jqID($t.p.id) + " tbody:first tr:first")[0];
                    $("#" + $.jgrid.jqID($t.p.id) + " tbody:first").empty().append(trf);
                }
                if ($t.p.footerrow && clearfooter) {
                    $(".ui-jqgrid-ftable td", $t.grid.sDiv).html("&#160;");
                }
                $t.p.selrow = null;
                $t.p.selarrrow = [];
                $t.p.savedRow = [];
                $t.p.records = 0;
                $t.p.page = 1;
                $t.p.lastpage = 0;
                $t.p.reccount = 0;
                $t.p.data = [];
                $t.p._index = {};
                $t.updatepager(true, false);
            });
        },
        getInd: function (rowid, rc) {
            var ret = false,
                    rw;
            this.each(function () {
                rw = $(this).jqGrid('getGridRowById', rowid);
                if (rw) {
                    ret = rc === true ? rw : rw.rowIndex;
                }
            });
            return ret;
        },
        bindKeys: function (settings) {
            var o = $.extend({
                onEnter: null,
                onSpace: null,
                onLeftKey: null,
                onRightKey: null,
                scrollingRows: true
            }, settings || {});
            return this.each(function () {
                var $t = this;
                if (!$('body').is('[role]')) {
                    $('body').attr('role', 'application');
                }
                $t.p.scrollrows = o.scrollingRows;
                $($t).keydown(function (event) {
                    var target = $($t).find('tr[tabindex=0]')[0],
                            id, r, mind, expanded = $t.p.treeReader.expanded_field;
                    //check for arrow keys
                    if (target) {
                        mind = $t.p._index[$.jgrid.stripPref($t.p.idPrefix, target.id)];
                        if (event.keyCode === 37 || event.keyCode === 38 || event.keyCode === 39 || event.keyCode === 40) {
                            // up key
                            if (event.keyCode === 38) {
                                r = target.previousSibling;
                                id = "";
                                if (r) {
                                    if ($(r).is(":hidden")) {
                                        while (r) {
                                            r = r.previousSibling;
                                            if (!$(r).is(":hidden") && $(r).hasClass('jqgrow')) {
                                                id = r.id;
                                                break;
                                            }
                                        }
                                    } else {
                                        id = r.id;
                                    }
                                }
                                $($t).jqGrid('setSelection', id, true, event);
                                event.preventDefault();
                            }
                            //if key is down arrow
                            if (event.keyCode === 40) {
                                r = target.nextSibling;
                                id = "";
                                if (r) {
                                    if ($(r).is(":hidden")) {
                                        while (r) {
                                            r = r.nextSibling;
                                            if (!$(r).is(":hidden") && $(r).hasClass('jqgrow')) {
                                                id = r.id;
                                                break;
                                            }
                                        }
                                    } else {
                                        id = r.id;
                                    }
                                }
                                $($t).jqGrid('setSelection', id, true, event);
                                event.preventDefault();
                            }
                            // left
                            if (event.keyCode === 37) {
                                if ($t.p.treeGrid && $t.p.data[mind][expanded]) {
                                    $(target).find("div.treeclick").trigger('click');
                                }
                                $($t).triggerHandler("jqGridKeyLeft", [$t.p.selrow]);
                                if ($.isFunction(o.onLeftKey)) {
                                    o.onLeftKey.call($t, $t.p.selrow);
                                }
                            }
                            // right
                            if (event.keyCode === 39) {
                                if ($t.p.treeGrid && !$t.p.data[mind][expanded]) {
                                    $(target).find("div.treeclick").trigger('click');
                                }
                                $($t).triggerHandler("jqGridKeyRight", [$t.p.selrow]);
                                if ($.isFunction(o.onRightKey)) {
                                    o.onRightKey.call($t, $t.p.selrow);
                                }
                            }
                        }
                        //check if enter was pressed on a grid or treegrid node
                        else if (event.keyCode === 13) {
                            $($t).triggerHandler("jqGridKeyEnter", [$t.p.selrow]);
                            if ($.isFunction(o.onEnter)) {
                                o.onEnter.call($t, $t.p.selrow);
                            }
                        } else if (event.keyCode === 32) {
                            $($t).triggerHandler("jqGridKeySpace", [$t.p.selrow]);
                            if ($.isFunction(o.onSpace)) {
                                o.onSpace.call($t, $t.p.selrow);
                            }
                        }
                    }
                });
            });
        },
        unbindKeys: function () {
            return this.each(function () {
                $(this).unbind('keydown');
            });
        },
        getLocalRow: function (rowid) {
            var ret = false,
                    ind;
            this.each(function () {
                if (rowid !== undefined) {
                    ind = this.p._index[$.jgrid.stripPref(this.p.idPrefix, rowid)];
                    if (ind >= 0) {
                        ret = this.p.data[ind];
                    }
                }
            });
            return ret;
        }
    });
})(jQuery); /*jshint eqeqeq:false */
/*global jQuery */
(function ($) {
    /**
     * jqGrid extension for custom methods
     * Tony Tomov tony@trirand.com
     * http://trirand.com/blog/ 
     * 
     * Wildraid wildraid@mail.ru
     * Oleg Kiriljuk oleg.kiriljuk@ok-soft-gmbh.com
     * Dual licensed under the MIT and GPL licenses:
     * http://www.opensource.org/licenses/mit-license.php
     * http://www.gnu.org/licenses/gpl-2.0.html
     **/
    "use strict";
    $.jgrid.extend({
        getColProp: function (colname) {
            var ret = {},
                    $t = this[0];
            if (!$t.grid) {
                return false;
            }
            var cM = $t.p.colModel,
                    i;
            for (i = 0; i < cM.length; i++) {
                if (cM[i].name === colname) {
                    ret = cM[i];
                    break;
                }
            }
            return ret;
        },
        setColProp: function (colname, obj) {
            //do not set width will not work
            return this.each(function () {
                if (this.grid) {
                    if (obj) {
                        var cM = this.p.colModel,
                                i;
                        for (i = 0; i < cM.length; i++) {
                            if (cM[i].name === colname) {
                                $.extend(true, this.p.colModel[i], obj);
                                break;
                            }
                        }
                    }
                }
            });
        },
        sortGrid: function (colname, reload, sor) {
            return this.each(function () {
                var $t = this,
                        idx = -1,
                        i, sobj = false;
                if (!$t.grid) {
                    return;
                }
                if (!colname) {
                    colname = $t.p.sortname;
                }
                for (i = 0; i < $t.p.colModel.length; i++) {
                    if ($t.p.colModel[i].index === colname || $t.p.colModel[i].name === colname) {
                        idx = i;
                        if ($t.p.frozenColumns === true && $t.p.colModel[i].frozen === true) {
                            sobj = $t.grid.fhDiv.find("#" + $t.p.id + "_" + colname);
                        }
                        break;
                    }
                }
                if (idx !== -1) {
                    var sort = $t.p.colModel[idx].sortable;
                    if (!sobj) {
                        sobj = $t.grid.headers[idx].el;
                    }
                    if (typeof sort !== 'boolean') {
                        sort = true;
                    }
                    if (typeof reload !== 'boolean') {
                        reload = false;
                    }
                    if (sort) {
                        $t.sortData("jqgh_" + $t.p.id + "_" + colname, idx, reload, sor, sobj);
                    }
                }
            });
        },
        clearBeforeUnload: function () {
            return this.each(function () {
                var grid = this.grid;
                if ($.isFunction(grid.emptyRows)) {
                    grid.emptyRows.call(this, true, true); // this work quick enough and reduce the size of memory leaks if we have someone
                }

                $(document).unbind("mouseup.jqGrid" + this.p.id);
                $(grid.hDiv).unbind("mousemove"); // TODO add namespace
                $(this).unbind();

                grid.dragEnd = null;
                grid.dragMove = null;
                grid.dragStart = null;
                grid.emptyRows = null;
                grid.populate = null;
                grid.populateVisible = null;
                grid.scrollGrid = null;
                grid.selectionPreserver = null;

                grid.bDiv = null;
                grid.cDiv = null;
                grid.hDiv = null;
                grid.cols = null;
                var i, l = grid.headers.length;
                for (i = 0; i < l; i++) {
                    grid.headers[i].el = null;
                }

                this.formatCol = null;
                this.sortData = null;
                this.updatepager = null;
                this.refreshIndex = null;
                this.setHeadCheckBox = null;
                this.constructTr = null;
                this.formatter = null;
                this.addXmlData = null;
                this.addJSONData = null;
                this.grid = null;
            });
        },
        GridDestroy: function () {
            return this.each(function () {
                if (this.grid) {
                    if (this.p.pager) { // if not part of grid
                        $(this.p.pager).remove();
                    }
                    try {
                        $(this).jqGrid('clearBeforeUnload');
                        $("#gbox_" + $.jgrid.jqID(this.id)).remove();
                    } catch (_) {
                    }
                }
            });
        },
        GridUnload: function () {
            return this.each(function () {
                if (!this.grid) {
                    return;
                }
                var defgrid = {
                    id: $(this).attr('id'),
                    cl: $(this).attr('class')
                };
                if (this.p.pager) {
                    $(this.p.pager).empty().removeClass("ui-state-default ui-jqgrid-pager ui-corner-bottom");
                }
                var newtable = document.createElement('table');
                $(newtable).attr({
                    id: defgrid.id
                });
                newtable.className = defgrid.cl;
                var gid = $.jgrid.jqID(this.id);
                $(newtable).removeClass("ui-jqgrid-btable");
                if ($(this.p.pager).parents("#gbox_" + gid).length === 1) {
                    $(newtable).insertBefore("#gbox_" + gid).show();
                    $(this.p.pager).insertBefore("#gbox_" + gid);
                } else {
                    $(newtable).insertBefore("#gbox_" + gid).show();
                }
                $(this).jqGrid('clearBeforeUnload');
                $("#gbox_" + gid).remove();
            });
        },
        setGridState: function (state) {
            return this.each(function () {
                if (!this.grid) {
                    return;
                }
                var $t = this;
                if (state === 'hidden') {
                    $(".ui-jqgrid-bdiv, .ui-jqgrid-hdiv", "#gview_" + $.jgrid.jqID($t.p.id)).slideUp("fast");
                    if ($t.p.pager) {
                        $($t.p.pager).slideUp("fast");
                    }
                    if ($t.p.toppager) {
                        $($t.p.toppager).slideUp("fast");
                    }
                    if ($t.p.toolbar[0] === true) {
                        if ($t.p.toolbar[1] === 'both') {
                            $($t.grid.ubDiv).slideUp("fast");
                        }
                        $($t.grid.uDiv).slideUp("fast");
                    }
                    if ($t.p.footerrow) {
                        $(".ui-jqgrid-sdiv", "#gbox_" + $.jgrid.jqID($t.p.id)).slideUp("fast");
                    }
                    $(".ui-jqgrid-titlebar-close span", $t.grid.cDiv).removeClass("ui-icon-circle-triangle-n").addClass("ui-icon-circle-triangle-s");
                    $t.p.gridstate = 'hidden';
                } else if (state === 'visible') {
                    $(".ui-jqgrid-hdiv, .ui-jqgrid-bdiv", "#gview_" + $.jgrid.jqID($t.p.id)).slideDown("fast");
                    if ($t.p.pager) {
                        $($t.p.pager).slideDown("fast");
                    }
                    if ($t.p.toppager) {
                        $($t.p.toppager).slideDown("fast");
                    }
                    if ($t.p.toolbar[0] === true) {
                        if ($t.p.toolbar[1] === 'both') {
                            $($t.grid.ubDiv).slideDown("fast");
                        }
                        $($t.grid.uDiv).slideDown("fast");
                    }
                    if ($t.p.footerrow) {
                        $(".ui-jqgrid-sdiv", "#gbox_" + $.jgrid.jqID($t.p.id)).slideDown("fast");
                    }
                    $(".ui-jqgrid-titlebar-close span", $t.grid.cDiv).removeClass("ui-icon-circle-triangle-s").addClass("ui-icon-circle-triangle-n");
                    $t.p.gridstate = 'visible';
                }

            });
        },
        filterToolbar: function (p) {
            p = $.extend({
                autosearch: true,
                searchOnEnter: true,
                beforeSearch: null,
                afterSearch: null,
                beforeClear: null,
                afterClear: null,
                searchurl: '',
                stringResult: false,
                groupOp: 'AND',
                defaultSearch: "bw",
                searchOperators: false,
                resetIcon: "x",
                operands: {
                    "eq": "==",
                    "ne": "!",
                    "lt": "<",
                    "le": "<=",
                    "gt": ">",
                    "ge": ">=",
                    "bw": "^",
                    "bn": "!^",
                    "in": "=",
                    "ni": "!=",
                    "ew": "|",
                    "en": "!@",
                    "cn": "~",
                    "nc": "!~",
                    "nu": "#",
                    "nn": "!#",
                    "bt": "<>",
                    // HB Customization
                    "nb": "!<>"
                            // HB Customization
                }
            }, $.jgrid.search, p || {});
            return this.each(function () {
                var $t = this;
                if (this.ftoolbar) {
                    return;
                }
                var triggerToolbar = function () {
                    var sdata = {},
                            j = 0,
                            v, nm, sopt = {},
                            so;
                    $.each($t.p.colModel, function () {
                        var $elem = $("#gs_" + $.jgrid.jqID(this.name), (this.frozen === true && $t.p.frozenColumns === true) ? $t.grid.fhDiv : $t.grid.hDiv);
                        nm = this.index || this.name;
                        if (p.searchOperators) {
                            //so = $elem.parent().prev().children("a").attr("soper") || p.defaultSearch;
                            so = $elem.parent().siblings(".ui-search-combo").find("select").val() || p.defaultSearch;
                            // HB Customization
                        } else {
                            // HB Customization << Start
                            if (this.filterSopt != undefined && this.filterSopt != '') {
                                so = this.filterSopt;
                            } else {
                                so = (this.searchoptions && this.searchoptions.sopt) ? this.searchoptions.sopt[0] : this.stype == 'select' ? 'eq' : p.defaultSearch;
                            }
                            // HB Customization >> End
                        }
                        v = this.stype === "custom" && $.isFunction(this.searchoptions.custom_value) && $elem.length > 0 && $elem[0].nodeName.toUpperCase() === "SPAN" ? this.searchoptions.custom_value.call($t, $elem.children(".customelement:first"), "get") : $elem.val();
                        if (v || so === "nu" || so === "nn") {
                            sdata[nm] = v;
                            sopt[nm] = so;
                            j++;
                        } else {
                            try {
                                delete $t.p.postData[nm];
                            } catch (z) {
                            }
                        }
                    });
                    var sd = j > 0 ? true : false;
                    if (p.stringResult === true || $t.p.datatype === "local") {
                        var ruleGroup = "{\"groupOp\":\"" + p.groupOp + "\",\"rules\":[";
                        var gi = 0;
                        $.each(sdata, function (i, n) {
                            if (gi > 0) {
                                ruleGroup += ",";
                            }
                            ruleGroup += "{\"field\":\"" + i + "\",";
                            ruleGroup += "\"op\":\"" + sopt[i] + "\",";
                            n += "";
                            ruleGroup += "\"data\":\"" + n.replace(/\\/g, '\\\\').replace(/\"/g, '\\"') + "\"}";
                            gi++;
                        });
                        ruleGroup += "]";
                        // HB Customization << Start
                        var exfilt = {};
                        try {
                            exfilt = ($t.p.postData && $t.p.postData.filters) ? JSON.parse($t.p.postData.filters) : {};
                        } catch (err) {

                        }
                        if (exfilt && exfilt.entrys) {
                            ruleGroup += ",\"entrys\":" + JSON.stringify(exfilt.entrys);
                        }
                        if (exfilt && exfilt.range) {
                            ruleGroup += ",\"range\":" + JSON.stringify(exfilt.range);
                        }
                        // HB Customization >> End
                        ruleGroup += "}";
                        $.extend($t.p.postData, {
                            filters: ruleGroup
                        });
                        $.each(['searchField', 'searchString', 'searchOper'], function (i, n) {
                            if ($t.p.postData.hasOwnProperty(n)) {
                                delete $t.p.postData[n];
                            }
                        });
                    } else {
                        $.extend($t.p.postData, sdata);
                    }
                    var saveurl;
                    if ($t.p.searchurl) {
                        saveurl = $t.p.url;
                        $($t).jqGrid("setGridParam", {
                            url: $t.p.searchurl
                        });
                    }
                    var bsr = $($t).triggerHandler("jqGridToolbarBeforeSearch") === 'stop' ? true : false;
                    if (!bsr && $.isFunction(p.beforeSearch)) {
                        bsr = p.beforeSearch.call($t);
                    }
                    if (!bsr) {
                        $($t).jqGrid("setGridParam", {
                            search: sd
                        }).trigger("reloadGrid", [{
                                page: 1
                            }]);
                    }
                    if (saveurl) {
                        $($t).jqGrid("setGridParam", {
                            url: saveurl
                        });
                    }
                    $($t).triggerHandler("jqGridToolbarAfterSearch");
                    if ($.isFunction(p.afterSearch)) {
                        p.afterSearch.call($t);
                    }
                },
                        clearToolbar = function (trigger) {
                            var sdata = {},
                                    j = 0,
                                    nm;
                            trigger = (typeof trigger !== 'boolean') ? true : trigger;
                            $.each($t.p.colModel, function () {
                                var v, $elem = $("#gs_" + $.jgrid.jqID(this.name), (this.frozen === true && $t.p.frozenColumns === true) ? $t.grid.fhDiv : $t.grid.hDiv);
                                if (this.searchoptions && this.searchoptions.defaultValue !== undefined) {
                                    v = this.searchoptions.defaultValue;
                                }
                                nm = this.index || this.name;
                                switch (this.stype) {
                                    case 'select':
                                        $elem.find("option").each(function (i) {
                                            // HB Customization << Start
                                            /*
                                             if (i === 0) {
                                             this.selected = true;
                                             }
                                             */
                                            // HB Customization >> End
                                            if ($(this).val() === v) {
                                                this.selected = true;
                                                return false;
                                            }
                                        });
                                        if (v !== undefined) {
                                            // post the key and not the text
                                            sdata[nm] = v;
                                            j++;
                                        } else {
                                            try {
                                                delete $t.p.postData[nm];
                                            } catch (e) {
                                            }
                                        }
                                        break;
                                    case 'text':
                                        $elem.val(v || "");
                                        if (v !== undefined) {
                                            sdata[nm] = v;
                                            j++;
                                        } else {
                                            try {
                                                delete $t.p.postData[nm];
                                            } catch (y) {
                                            }
                                        }
                                        break;
                                    case 'custom':
                                        if ($.isFunction(this.searchoptions.custom_value) && $elem.length > 0 && $elem[0].nodeName.toUpperCase() === "SPAN") {
                                            this.searchoptions.custom_value.call($t, $elem.children(".customelement:first"), "set", v || "");
                                        }
                                        break;
                                }
                            });
                            var sd = j > 0 ? true : false;
                            $t.p.resetsearch = true;
                            if (p.stringResult === true || $t.p.datatype === "local") {
                                var ruleGroup = "{\"groupOp\":\"" + p.groupOp + "\",\"rules\":[";
                                var gi = 0;
                                $.each(sdata, function (i, n) {
                                    if (gi > 0) {
                                        ruleGroup += ",";
                                    }
                                    ruleGroup += "{\"field\":\"" + i + "\",";
                                    ruleGroup += "\"op\":\"" + "eq" + "\",";
                                    n += "";
                                    ruleGroup += "\"data\":\"" + n.replace(/\\/g, '\\\\').replace(/\"/g, '\\"') + "\"}";
                                    gi++;
                                });
                                ruleGroup += "]";
                                // HB Customization << Start
                                var exfilt = {};
                                try {
                                    exfilt = ($t.p.postData && $t.p.postData.filters) ? JSON.parse($t.p.postData.filters) : {};
                                } catch (err) {

                                }
                                if (exfilt && exfilt.entrys) {
                                    ruleGroup += ",\"entrys\":" + JSON.stringify(exfilt.entrys);
                                }
                                if (exfilt && exfilt.range) {
                                    ruleGroup += ",\"range\":" + JSON.stringify(exfilt.range);
                                }
                                // HB Customization >> End
                                ruleGroup += "}";
                                $.extend($t.p.postData, {
                                    filters: ruleGroup
                                });
                                $.each(['searchField', 'searchString', 'searchOper'], function (i, n) {
                                    if ($t.p.postData.hasOwnProperty(n)) {
                                        delete $t.p.postData[n];
                                    }
                                });
                            } else {
                                $.extend($t.p.postData, sdata);
                            }
                            var saveurl;
                            if ($t.p.searchurl) {
                                saveurl = $t.p.url;
                                $($t).jqGrid("setGridParam", {
                                    url: $t.p.searchurl
                                });
                            }
                            var bcv = $($t).triggerHandler("jqGridToolbarBeforeClear") === 'stop' ? true : false;
                            if (!bcv && $.isFunction(p.beforeClear)) {
                                bcv = p.beforeClear.call($t);
                            }
                            if (!bcv) {
                                if (trigger) {
                                    $($t).jqGrid("setGridParam", {
                                        search: sd
                                    }).trigger("reloadGrid", [{
                                            page: 1
                                        }]);
                                }
                            }
                            if (saveurl) {
                                $($t).jqGrid("setGridParam", {
                                    url: saveurl
                                });
                            }
                            $($t).triggerHandler("jqGridToolbarAfterClear");
                            if ($.isFunction(p.afterClear)) {
                                p.afterClear();
                            }
                        },
                        toggleToolbar = function () {
                            var trow = $("tr.ui-search-toolbar", $t.grid.hDiv),
                                    trow2 = $t.p.frozenColumns === true ? $("tr.ui-search-toolbar", $t.grid.fhDiv) : false;
                            if (trow.css("display") === 'none') {
                                trow.show();
                                if (trow2) {
                                    trow2.show();
                                }
                            } else {
                                trow.hide();
                                if (trow2) {
                                    trow2.hide();
                                }
                            }
                        },
                        buildRuleMenu = function (elem, left, top) {
                            $("#sopt_menu").remove();

                            left = parseInt(left, 10);
                            top = parseInt(top, 10) + 18;

                            var fs = $('.ui-jqgrid-view').css('font-size') || '11px';
                            var str = '<ul id="sopt_menu" class="ui-search-menu" role="menu" tabindex="0" style="font-size:' + fs + ';left:' + left + 'px;top:' + top + 'px;">',
                                    selected = $(elem).attr("soper"),
                                    selclass, aoprs = [],
                                    ina;
                            var i = 0,
                                    nm = $(elem).attr("colname"),
                                    len = $t.p.colModel.length;
                            while (i < len) {
                                if ($t.p.colModel[i].name === nm) {
                                    break;
                                }
                                i++;
                            }
                            var cm = $t.p.colModel[i],
                                    options = $.extend({}, cm.searchoptions);
                            if (!options.sopt) {
                                options.sopt = [];
                                options.sopt[0] = cm.stype === 'select' ? 'eq' : p.defaultSearch;
                            }
                            $.each(p.odata, function () {
                                aoprs.push(this.oper);
                            });
                            for (i = 0; i < options.sopt.length; i++) {
                                ina = $.inArray(options.sopt[i], aoprs);
                                if (ina !== -1) {
                                    selclass = selected === p.odata[ina].oper ? "ui-state-highlight" : "";
                                    str += '<li class="ui-menu-item ' + selclass + '" role="presentation"><a class="ui-corner-all g-menu-item" tabindex="0" role="menuitem" value="' + p.odata[ina].oper + '" oper="' + p.operands[p.odata[ina].oper] + '"><table cellspacing="0" cellpadding="0" border="0"><tr><td width="25px">' + p.operands[p.odata[ina].oper] + '</td><td>' + p.odata[ina].text + '</td></tr></table></a></li>';
                                }
                            }
                            str += "</ul>";
                            $('body').append(str);
                            $("#sopt_menu").addClass("ui-menu ui-widget ui-widget-content ui-corner-all");
                            $("#sopt_menu > li > a").hover(
                                    function () {
                                        $(this).addClass("ui-state-hover");
                                    }, function () {
                                $(this).removeClass("ui-state-hover");
                            }).click(function (e) {
                                var v = $(this).attr("value"),
                                        oper = $(this).attr("oper");
                                $($t).triggerHandler("jqGridToolbarSelectOper", [v, oper, elem]);
                                $("#sopt_menu").hide();
                                $(elem).text(oper).attr("soper", v);
                                if (p.autosearch === true) {
                                    var inpelm = $(elem).parent().next().children()[0];
                                    if ($(inpelm).val() || v === "nu" || v === "nn") {
                                        triggerToolbar();
                                    }
                                }
                            });
                        };
                // create the row
                var tr = $("<tr class='ui-search-toolbar' role='rowheader'></tr>");
                var timeoutHnd;
                $.each($t.p.colModel, function (ci) {
                    // HB Customization << Start
                    var cb_cls = '',
                            cb_sh = '';
                    if (this.name == "cb") {
                        cb_cls = 'search-toolbar-row';
                        cb_sh = '<span class="ui-icon ui-icon-search"></span>';
                    }
                    var cm = this,
                            soptions, surl, self, select = "", coptions = "",
                            sot = "=",
                            so, i, pre_search, th = $("<th role='columnheader' class='ui-state-default " + cb_cls + " ui-th-column ui-th-" + $t.p.direction + "'></th>"),
                            thd = $("<div style='width:100%;position:relative;height:100%;' class='column-search-block'>" + cb_sh + "</div>"),
                            stbl = $("<table class='ui-search-table' cellspacing='0'><tr><td class='ui-search-oper'></td><td><div class='ui-search-combo'></div><div class='ui-search-input'></div></td><td class='ui-search-clear'></td></tr></table>");
                    // HB Customization >> End
                    if (this.hidden === true) {
                        $(th).css("display", "none");
                    }
                    this.search = this.search === false ? false : true;
                    if (this.stype === undefined) {
                        this.stype = 'text';
                    }
                    soptions = $.extend({}, this.searchoptions || {});
                    // HB Customization
                    pre_search = ($t.p.preSearch) ? $t.p.preSearch[cm.name] : '';
                    if (this.search) {
                        if (p.searchOperators) {
                            // HB Customization << Start
                            if (this.filterSopt) {
                                so = this.filterSopt;
                            } else {
                                so = (soptions.sopt) ? soptions.sopt[0] : cm.stype === 'select' ? 'eq' : p.defaultSearch;
                            }
                            for (i = 0; i < p.odata.length; i++) {
                                if ($.isArray(soptions.sopt) && $.inArray(p.odata[i].oper, soptions.sopt) == -1) {
                                    continue;
                                }
                                if (p.odata[i].oper === so) {
                                    coptions += '<option value="' + p.odata[i].oper + '" selected=true>' + p.odata[i].text + '</option>';
                                } else {
                                    coptions += '<option value="' + p.odata[i].oper + '">' + p.odata[i].text + '</option>';
                                }
                                //if (p.odata[i].oper === so) {
                                //sot = p.operands[so] || "";
                                //break;
                                //}
                            }
                            var st = soptions.searchtitle != null ? soptions.searchtitle : p.operandTitle;
                            //select = "<a title='" + st + "' style='padding-right: 0.5em;' soper='" + so + "' class='soptclass' colname='" + this.name + "'>" + sot + "</a>";
                            select = "<select colname='" + this.name + "' title='" + st + "'>" + coptions + "</select>";
                            // HB Customization >> End
                        }
                        $("td:eq(0)", stbl).attr("colindex", ci);//.append(select)
                        $("td:eq(1)", stbl).find(".ui-search-combo").append(select);
                        if (soptions.clearSearch === undefined) {
                            soptions.clearSearch = true;
                        }
                        if (soptions.clearSearch) {
                            var csv = p.resetTitle || 'Clear Search Value';
                            $("td:eq(2)", stbl).append("<a title='" + csv + "' style='padding-right: 0.3em;padding-left: 0.3em;' class='clearsearchclass'>" + p.resetIcon + "</a>");
                        } else {
                            $("td:eq(2)", stbl).hide();
                        }
                        switch (this.stype) {
                            case "select":
                                surl = this.surl || soptions.dataUrl;
                                if (surl) {
                                    // data returned should have already constructed html select
                                    // primitive jQuery load
                                    self = thd;
                                    $(self).append(stbl);
                                    setTimeout(function(){
                                    $.ajax($.extend({
                                        url: surl,
                                        type: 'POST',
                                        //dataType: "html",
                                        success: function (res) {
                                            if (soptions.buildSelect !== undefined) {
                                                var d = soptions.buildSelect(res);
                                                if (d) {
                                                    $("td:eq(1)", stbl).find(".ui-search-input").append(d);
                                                    // HB Customization
                                                }
                                            } else {
                                                $("td:eq(1)", stbl).find(".ui-search-input").append(res);
                                                // HB Customization
                                            }
                                            var sdrop = $(self).find(".ui-search-input");
                                            if (soptions.defaultValue !== undefined) {
                                                $("select", sdrop).val(soptions.defaultValue);
                                            }
                                            // HB Customization << Start
                                            if (pre_search && pre_search.data) {
                                                $("select", sdrop).val(pre_search.data);
                                            }
                                            // HB Customization >> End
                                            $("select", sdrop).attr({
                                                "name": cm.index || cm.name,
                                                "id": "gs_" + cm.name,
                                                "aria-parent-overflow": ($t.p.autowidth) ? "false" : "true"
                                            });
                                            if (soptions.attr) {
                                                $("select", sdrop).attr(soptions.attr);
                                            }
                                            $("select", sdrop).css({
                                                width: "95%" // HB Customization
                                            });
                                            // preserve autoserch
                                            $.jgrid.bindEv.call($t, $("select", sdrop)[0], soptions);
                                            if (p.autosearch === true) {
                                                $("select", sdrop).change(function () {
                                                    triggerToolbar();
                                                    return false;
                                                });
                                            }
                                            res = null;
                                        }
                                    }, $.jgrid.ajaxOptions, $t.p.ajaxSelectOptions || {}));
                                    }, 500);
                                } else {
                                    var oSv, sep, delim;
                                    if (cm.searchoptions) {
                                        oSv = cm.searchoptions.value === undefined ? "" : cm.searchoptions.value;
                                        sep = cm.searchoptions.separator === undefined ? ":" : cm.searchoptions.separator;
                                        delim = cm.searchoptions.delimiter === undefined ? ";" : cm.searchoptions.delimiter;
                                    } else if (cm.editoptions) {
                                        oSv = cm.editoptions.value === undefined ? "" : cm.editoptions.value;
                                        sep = cm.editoptions.separator === undefined ? ":" : cm.editoptions.separator;
                                        delim = cm.editoptions.delimiter === undefined ? ";" : cm.editoptions.delimiter;
                                    }
                                    if (oSv) {
                                        var elem = document.createElement("select");
                                        elem.style.width = "95%"; // HB Customization
                                        $(elem).attr({
                                            name: cm.index || cm.name,
                                            id: "gs_" + cm.name,
                                            "aria-parent-overflow": ($t.p.autowidth) ? "false" : "true"
                                        });
                                        var sv, ov, key, k;
                                        if (typeof oSv === "string") {
                                            so = oSv.split(delim);
                                            for (k = 0; k < so.length; k++) {
                                                sv = so[k].split(sep);
                                                ov = document.createElement("option");
                                                ov.value = sv[0];
                                                ov.innerHTML = sv[1];
                                                elem.appendChild(ov);
                                            }
                                        } else if (typeof oSv === "object") {
                                            for (key in oSv) {
                                                if (oSv.hasOwnProperty(key)) {
                                                    ov = document.createElement("option");
                                                    ov.value = key;
                                                    ov.innerHTML = oSv[key];
                                                    elem.appendChild(ov);
                                                }
                                            }
                                        }
                                        if (soptions.attr) {
                                            $(elem).attr(soptions.attr);
                                        }
                                        $(elem).find("option:selected").removeAttr("selected");
                                        if (soptions.defaultValue !== undefined) {
                                            $(elem).val(soptions.defaultValue);
                                        }
                                        // HB Customization << Start
                                        if (pre_search && pre_search.data) {
                                            $(elem).val(pre_search.data);
                                        }
                                        // HB Customization >> End
                                        $(thd).append(stbl);
                                        $("td:eq(1)", stbl).find(".ui-search-input").append(elem);
                                        // HB Customization
                                        $.jgrid.bindEv.call($t, elem, soptions);
                                        if (p.autosearch === true) {
                                            $(elem).change(function () {
                                                triggerToolbar();
                                                return false;
                                            });
                                        }
                                    }
                                }
                                break;
                            case "text":
                                var df = soptions.defaultValue !== undefined ? soptions.defaultValue : "";
                                // HB Customization << Start
                                df = (pre_search && pre_search.data) ? pre_search.data[0] : df;
                                $("td:eq(1)", stbl).find(".ui-search-input").append("<input type='text' style='width:100%;padding:0px;' name='" + (cm.index || cm.name) + "' id='gs_" + cm.name + "' value='" + df + "'/>");
                                // HB Customization >> End
                                $(thd).append(stbl);

                                if (soptions.attr) {
                                    $("input", thd).attr(soptions.attr);
                                }
                                $.jgrid.bindEv.call($t, $("input", thd)[0], soptions);
                                if (p.autosearch === true) {
                                    if (p.searchOnEnter) {
                                        $("input", thd).keypress(function (e) {
                                            var key = e.charCode || e.keyCode || 0;
                                            if (key === 13) {
                                                triggerToolbar();
                                                return false;
                                            }
                                            return this;
                                        });
                                    } else {
                                        $("input", thd).keydown(function (e) {
                                            var key = e.which;
                                            // HB Customization << Start
                                            if ((key == 8) || (key >= 46 && key <= 90) || (key >= 96 && key <= 111) || (key >= 188 && key <= 192) || (key >= 219 && key <= 221) || (key == 222 && e.shiftKey == true)) {
                                                if (timeoutHnd) {
                                                    clearTimeout(timeoutHnd);
                                                }
                                                timeoutHnd = setTimeout(function () {
                                                    triggerToolbar();
                                                }, 500);
                                            }
                                            /*
                                             switch (key) {
                                             case 13:
                                             return false;
                                             case 9 :
                                             case 16:
                                             case 37:
                                             case 38:
                                             case 39:
                                             case 40:
                                             case 27:
                                             break;
                                             default :
                                             if (timeoutHnd) {
                                             clearTimeout(timeoutHnd);
                                             }
                                             timeoutHnd = setTimeout(function() {
                                             triggerToolbar();
                                             }, 500);
                                             }
                                             */
                                            // HB Customization >> End
                                        });
                                    }
                                }
                                break;
                            case "custom":
                                $("td:eq(1)", stbl).find(".ui-search-input").append("<span style='width:95%;padding:0px;' name='" + (cm.index || cm.name) + "' id='gs_" + cm.name + "'/>");
                                // HB Customization
                                $(thd).append(stbl);
                                try {
                                    if ($.isFunction(soptions.custom_element)) {
                                        var celm = soptions.custom_element.call($t, soptions.defaultValue !== undefined ? soptions.defaultValue : "", soptions);
                                        if (celm) {
                                            celm = $(celm).addClass("customelement");
                                            $(thd).find(">span").append(celm);
                                        } else {
                                            throw "e2";
                                        }
                                    } else {
                                        throw "e1";
                                    }
                                } catch (e) {
                                    if (e === "e1") {
                                        $.jgrid.info_dialog($.jgrid.errors.errcap, "function 'custom_element' " + $.jgrid.edit.msg.nodefined, $.jgrid.edit.bClose);
                                    }
                                    if (e === "e2") {
                                        $.jgrid.info_dialog($.jgrid.errors.errcap, "function 'custom_element' " + $.jgrid.edit.msg.novalue, $.jgrid.edit.bClose);
                                    } else {
                                        $.jgrid.info_dialog($.jgrid.errors.errcap, typeof e === "string" ? e : e.message, $.jgrid.edit.bClose);
                                    }
                                }
                                break;
                        }
                    }
                    $(th).append(thd);
                    $(tr).append(th);
                    // HB Customization << Start
                    if (!p.searchOperators) {
                        //$("td:eq(0)", stbl).hide();
                        $("td:eq(1)", stbl).find(".ui-search-combo").hide();
                    }
                    $("td:eq(0)", stbl).hide();
                    // HB Customization >> End
                });
                $("table thead", $t.grid.hDiv).append(tr);
                if (p.searchOperators) {
                    // HB Customization << Start
//                    $(".soptclass", tr).click(function (e) {
//                        var offset = $(this).offset(),
//                                left = (offset.left),
//                                top = (offset.top);
//                        buildRuleMenu(this, left, top);
//                        e.stopPropagation();
//                    });
//                    $("body").on('click', function (e) {
//                        if (e.target.className !== "soptclass") {
//                            $("#sopt_menu").hide();
//                        }
//                    });
                    $(".ui-search-combo select", tr).change(function (e) {
                        var inpelm = $(this).parent().siblings(".ui-search-input").find('[id^="gs_"]');
                        if ($(inpelm).val() || $(this).val() === "nu" || $(this).val() === "nn") {
                            triggerToolbar();
                        }
                    });
                    // HB Customization >> End
                }
                $(".clearsearchclass", tr).click(function (e) {
                    var ptr = $(this).parents("tr:first"),
                            coli = parseInt($("td.ui-search-oper", ptr).attr('colindex'), 10),
                            sval = $.extend({}, $t.p.colModel[coli].searchoptions || {}),
                            dval = sval.defaultValue ? sval.defaultValue : "";
                    if ($t.p.colModel[coli].stype === "select") {
                        if (dval) {
                            $("td div.ui-search-input select", ptr).val(dval);
                            // HB Customization
                        } else {
                            //$("td.ui-search-input select", ptr)[0].selectedIndex = 0;
                            // HB Customization
                            $("td div.ui-search-input select", ptr).val(dval).trigger("chosen:updated");
                        }
                    } else {
                        $("td div.ui-search-input input", ptr).val(dval);
                        // HB Customization
                    }
                    // HB Customization << Start
                    if ($t.p.colModel[coli].ctrl_type === "autocomplete") {
                        $("td div.ui-search-input", ptr).find(".search-token-autocomplete").tokenInput("clear");
                    }
                    // HB Customization >> End
                    // ToDo custom search type
                    if (p.autosearch === true) {
                        triggerToolbar();
                    }

                });
                this.ftoolbar = true;
                this.triggerToolbar = triggerToolbar;
                this.clearToolbar = clearToolbar;
                this.toggleToolbar = toggleToolbar;
            });
        },
        destroyFilterToolbar: function () {
            return this.each(function () {
                if (!this.ftoolbar) {
                    return;
                }
                this.triggerToolbar = null;
                this.clearToolbar = null;
                this.toggleToolbar = null;
                this.ftoolbar = false;
                $(this.grid.hDiv).find("table thead tr.ui-search-toolbar").remove();
            });
        },
        destroyGroupHeader: function (nullHeader) {
            if (nullHeader === undefined) {
                nullHeader = true;
            }
            return this.each(function () {
                var $t = this,
                        $tr, i, l, headers, $th, $resizing, grid = $t.grid,
                        thead = $("table.ui-jqgrid-htable thead", grid.hDiv),
                        cm = $t.p.colModel,
                        hc;
                if (!grid) {
                    return;
                }

                $(this).unbind('.setGroupHeaders');
                $tr = $("<tr>", {
                    role: "rowheader"
                }).addClass("ui-jqgrid-labels");
                headers = grid.headers;
                for (i = 0, l = headers.length; i < l; i++) {
                    hc = cm[i].hidden ? "none" : "";
                    $th = $(headers[i].el).width(headers[i].width).css('display', hc);
                    try {
                        $th.removeAttr("rowSpan");
                    } catch (rs) {
                        //IE 6/7
                        $th.attr("rowSpan", 1);
                    }
                    $tr.append($th);
                    $resizing = $th.children("span.ui-jqgrid-resize");
                    if ($resizing.length > 0) { // resizable column
                        $resizing[0].style.height = "";
                    }
                    $th.children("div")[0].style.top = "";
                }
                $(thead).children('tr.ui-jqgrid-labels').remove();
                $(thead).prepend($tr);

                if (nullHeader === true) {
                    $($t).jqGrid('setGridParam', {
                        'groupHeader': null
                    });
                }
            });
        },
        setGroupHeaders: function (o) {
            o = $.extend({
                useColSpanStyle: false,
                groupHeaders: []
            }, o || {});
            return this.each(function () {
                this.p.groupHeader = o;
                var ts = this,
                        i, cmi, skip = 0,
                        $tr, $colHeader, th, $th, thStyle, iCol, cghi,
                        //startColumnName,
                        numberOfColumns, titleText, cVisibleColumns, colModel = ts.p.colModel,
                        cml = colModel.length,
                        ths = ts.grid.headers,
                        $htable = $("table.ui-jqgrid-htable", ts.grid.hDiv),
                        $trLabels = $htable.children("thead").children("tr.ui-jqgrid-labels:last").addClass("jqg-second-row-header"),
                        $thead = $htable.children("thead"),
                        $theadInTable, $firstHeaderRow = $htable.find(".jqg-first-row-header");
                if ($firstHeaderRow[0] === undefined) {
                    $firstHeaderRow = $('<tr>', {
                        role: "row",
                        "aria-hidden": "true"
                    }).addClass("jqg-first-row-header").css("height", "auto");
                } else {
                    $firstHeaderRow.empty();
                }
                var $firstRow, inColumnHeader = function (text, columnHeaders) {
                    var length = columnHeaders.length,
                            i;
                    for (i = 0; i < length; i++) {
                        if (columnHeaders[i].startColumnName === text) {
                            return i;
                        }
                    }
                    return -1;
                };

                $(ts).prepend($thead);
                $tr = $('<tr>', {
                    role: "rowheader"
                }).addClass("ui-jqgrid-labels jqg-third-row-header");
                for (i = 0; i < cml; i++) {
                    th = ths[i].el;
                    $th = $(th);
                    cmi = colModel[i];
                    // build the next cell for the first header row
                    thStyle = {
                        height: '0px',
                        width: ths[i].width + 'px',
                        display: (cmi.hidden ? 'none' : '')
                    };
                    $("<th>", {
                        role: 'gridcell'
                    }).css(thStyle).addClass("ui-first-th-" + ts.p.direction).appendTo($firstHeaderRow);

                    th.style.width = ""; // remove unneeded style
                    iCol = inColumnHeader(cmi.name, o.groupHeaders);
                    var lblcls = (cmi.labelClass) ? cmi.labelClass : '';
                    //HB Customization
                    if (iCol >= 0) {
                        cghi = o.groupHeaders[iCol];
                        numberOfColumns = cghi.numberOfColumns;
                        titleText = cghi.titleText;

                        // caclulate the number of visible columns from the next numberOfColumns columns
                        for (cVisibleColumns = 0, iCol = 0; iCol < numberOfColumns && (i + iCol < cml); iCol++) {
                            if (!colModel[i + iCol].hidden) {
                                cVisibleColumns++;
                            }
                        }

                        // The next numberOfColumns headers will be moved in the next row
                        // in the current row will be placed the new column header with the titleText.
                        // The text will be over the cVisibleColumns columns
                        $colHeader = $('<th>').attr({
                            role: "columnheader"
                        }).addClass("ui-state-default ui-th-column-header ui-th-" + ts.p.direction + " " + lblcls).css({
                            'height': '22px',
                            'border-top': '0 none'
                        }).html(titleText);
                        if (cVisibleColumns > 0) {
                            $colHeader.attr("colspan", String(cVisibleColumns));
                        }
                        if (ts.p.headertitles) {
                            $colHeader.attr("title", $colHeader.text());
                        }
                        // hide if not a visible cols
                        if (cVisibleColumns === 0) {
                            $colHeader.hide();
                        }

                        $th.before($colHeader); // insert new column header before the current
                        $tr.append(th); // move the current header in the next row
                        // set the coumter of headers which will be moved in the next row
                        skip = numberOfColumns - 1;
                    } else {
                        if (skip === 0) {
                            if (o.useColSpanStyle) {
                                // expand the header height to two rows
                                $th.attr("rowspan", "2");
                            } else {
                                $('<th>', {
                                    role: "columnheader"
                                }).addClass("ui-state-default ui-th-column-header ui-th-" + ts.p.direction + " " + lblcls).css({
                                    "display": cmi.hidden ? 'none' : '',
                                    'border-top': '0 none'
                                }).insertBefore($th);
                                $tr.append(th);
                            }
                        } else {
                            // move the header to the next row
                            //$th.css({"padding-top": "2px", height: "19px"});
                            $tr.append(th);
                            skip--;
                        }
                    }
                }
                $theadInTable = $(ts).children("thead");
                $theadInTable.prepend($firstHeaderRow);
                $tr.insertAfter($trLabels);
                $htable.append($theadInTable);

                if (o.useColSpanStyle) {
                    // Increase the height of resizing span of visible headers
                    $htable.find("span.ui-jqgrid-resize").each(function () {
                        var $parent = $(this).parent();
                        if ($parent.is(":visible")) {
                            this.style.cssText = 'height: ' + $parent.height() + 'px !important; cursor: col-resize;';
                        }
                    });

                    // Set position of the sortable div (the main lable)
                    // with the column header text to the middle of the cell.
                    // One should not do this for hidden headers.
                    $htable.find("div.ui-jqgrid-sortable").each(function () {
                        var $ts = $(this),
                                $parent = $ts.parent();
                        if ($parent.is(":visible") && $parent.is(":has(span.ui-jqgrid-resize)")) {
                            $ts.css('top', ($parent.height() - $ts.outerHeight()) / 2 + 'px');
                        }
                    });
                }

                $firstRow = $theadInTable.find("tr.jqg-first-row-header");
                $(ts).bind('jqGridResizeStop.setGroupHeaders', function (e, nw, idx) {
                    $firstRow.find('th').eq(idx).width(nw);
                });
            });
        },
        setFrozenColumns: function () {
            return this.each(function () {
                if (!this.grid) {
                    return;
                }
                var $t = this,
                        cm = $t.p.colModel,
                        i = 0,
                        len = cm.length,
                        maxfrozen = -1,
                        frozen = false;
                // TODO treeGrid and grouping  Support
                if ($t.p.subGrid === true || $t.p.treeGrid === true || $t.p.cellEdit === true || $t.p.sortable || $t.p.scroll) {
                    return;
                }
                if ($t.p.rownumbers) {
                    i++;
                }
                if ($t.p.multiselect) {
                    i++;
                }

                // get the max index of frozen col
                while (i < len) {
                    // from left, no breaking frozen
                    if (cm[i].frozen === true) {
                        frozen = true;
                        maxfrozen = i;
                    } else {
                        break;
                    }
                    i++;
                }
                if (maxfrozen >= 0 && frozen) {
                    var top = $t.p.caption ? $($t.grid.cDiv).outerHeight() : 0,
                            hth = $(".ui-jqgrid-htable", "#gview_" + $.jgrid.jqID($t.p.id)).height();
                    //headers
                    if ($t.p.toppager) {
                        top = top + $($t.grid.topDiv).outerHeight();
                    }
                    if ($t.p.toolbar[0] === true) {
                        if ($t.p.toolbar[1] !== "bottom") {
                            top = top + $($t.grid.uDiv).outerHeight();
                        }
                    }
                    $t.grid.fhDiv = $('<div style="position:absolute;left:0px;top:' + top + 'px;height:' + hth + 'px;" class="frozen-div ui-state-default ui-jqgrid-hdiv"></div>');
                    $t.grid.fbDiv = $('<div style="position:absolute;left:0px;top:' + (parseInt(top, 10) + parseInt(hth, 10) + 1) + 'px;overflow-y:hidden" class="frozen-bdiv ui-jqgrid-bdiv"></div>');
                    $("#gview_" + $.jgrid.jqID($t.p.id)).append($t.grid.fhDiv);
                    var htbl = $(".ui-jqgrid-htable", "#gview_" + $.jgrid.jqID($t.p.id)).clone(true);
                    // groupheader support - only if useColSpanstyle is false
                    if ($t.p.groupHeader) {
                        $("tr.jqg-first-row-header, tr.jqg-third-row-header", htbl).each(function () {
                            $("th:gt(" + maxfrozen + ")", this).remove();
                        });
                        var swapfroz = -1,
                                fdel = -1,
                                cs, rs;
                        $("tr.jqg-second-row-header th", htbl).each(function () {
                            cs = parseInt($(this).attr("colspan"), 10);
                            rs = parseInt($(this).attr("rowspan"), 10);
                            if (rs) {
                                swapfroz++;
                                fdel++;
                            }
                            if (cs) {
                                swapfroz = swapfroz + cs;
                                fdel++;
                            }
                            if (swapfroz === maxfrozen) {
                                return false;
                            }
                        });
                        if (swapfroz !== maxfrozen) {
                            fdel = maxfrozen;
                        }
                        $("tr.jqg-second-row-header", htbl).each(function () {
                            $("th:gt(" + fdel + ")", this).remove();
                        });
                    } else {
                        $("tr", htbl).each(function () {
                            $("th:gt(" + maxfrozen + ")", this).remove();
                        });
                    }
                    $(htbl).width(1);
                    // resizing stuff
                    $($t.grid.fhDiv).append(htbl).mousemove(function (e) {
                        if ($t.grid.resizing) {
                            $t.grid.dragMove(e);
                            return false;
                        }
                    });
                    $($t).bind('jqGridResizeStop.setFrozenColumns', function (e, w, index) {
                        var rhth = $(".ui-jqgrid-htable", $t.grid.fhDiv);
                        $("th:eq(" + index + ")", rhth).width(w);
                        var btd = $(".ui-jqgrid-btable", $t.grid.fbDiv);
                        $("tr:first td:eq(" + index + ")", btd).width(w);
                    });
                    // sorting stuff
                    $($t).bind('jqGridSortCol.setFrozenColumns', function (e, index, idxcol) {

                        var previousSelectedTh = $("tr.ui-jqgrid-labels:last th:eq(" + $t.p.lastsort + ")", $t.grid.fhDiv),
                                newSelectedTh = $("tr.ui-jqgrid-labels:last th:eq(" + idxcol + ")", $t.grid.fhDiv);

                        $("span.ui-grid-ico-sort", previousSelectedTh).addClass('ui-state-disabled');
                        $(previousSelectedTh).attr("aria-selected", "false");
                        $("span.ui-icon-" + $t.p.sortorder, newSelectedTh).removeClass('ui-state-disabled');
                        $(newSelectedTh).attr("aria-selected", "true");
                        if (!$t.p.viewsortcols[0]) {
                            if ($t.p.lastsort !== idxcol) {
                                $("span.s-ico", previousSelectedTh).hide();
                                $("span.s-ico", newSelectedTh).show();
                            }
                        }
                    });

                    // data stuff
                    //TODO support for setRowData
                    $("#gview_" + $.jgrid.jqID($t.p.id)).append($t.grid.fbDiv);
                    $($t.grid.bDiv).scroll(function () {
                        $($t.grid.fbDiv).scrollTop($(this).scrollTop());
                    });
                    if ($t.p.hoverrows === true) {
                        $("#" + $.jgrid.jqID($t.p.id)).unbind('mouseover').unbind('mouseout');
                    }
                    $($t).bind('jqGridAfterGridComplete.setFrozenColumns', function () {
                        $("#" + $.jgrid.jqID($t.p.id) + "_frozen").remove();
                        $($t.grid.fbDiv).height($($t.grid.bDiv).height() - 16);
                        var btbl = $("#" + $.jgrid.jqID($t.p.id)).clone(true);
                        $("tr[role=row]", btbl).each(function () {
                            $("td[role=gridcell]:gt(" + maxfrozen + ")", this).remove();
                        });

                        $(btbl).width(1).attr("id", $t.p.id + "_frozen");
                        $($t.grid.fbDiv).append(btbl);
                        if ($t.p.hoverrows === true) {
                            $("tr.jqgrow", btbl).hover(
                                    function () {
                                        $(this).addClass("ui-state-hover");
                                        $("#" + $.jgrid.jqID(this.id), "#" + $.jgrid.jqID($t.p.id)).addClass("ui-state-hover");
                                    }, function () {
                                $(this).removeClass("ui-state-hover");
                                $("#" + $.jgrid.jqID(this.id), "#" + $.jgrid.jqID($t.p.id)).removeClass("ui-state-hover");
                            });
                            $("tr.jqgrow", "#" + $.jgrid.jqID($t.p.id)).hover(
                                    function () {
                                        $(this).addClass("ui-state-hover");
                                        $("#" + $.jgrid.jqID(this.id), "#" + $.jgrid.jqID($t.p.id) + "_frozen").addClass("ui-state-hover");
                                    }, function () {
                                $(this).removeClass("ui-state-hover");
                                $("#" + $.jgrid.jqID(this.id), "#" + $.jgrid.jqID($t.p.id) + "_frozen").removeClass("ui-state-hover");
                            });
                        }
                        btbl = null;
                    });
                    //HB Customization << Start
                    if ($.isFunction($t.p.frozenComplete)) {
                        $t.p.frozenComplete.call($t);
                    }
                    //HB Customization >> End
                    if (!$t.grid.hDiv.loading) {
                        $($t).triggerHandler("jqGridAfterGridComplete");
                    }
                    $t.p.frozenColumns = true;
                }
            });
        },
        destroyFrozenColumns: function () {
            return this.each(function () {
                if (!this.grid) {
                    return;
                }
                if (this.p.frozenColumns === true) {
                    var $t = this;
                    $($t.grid.fhDiv).remove();
                    $($t.grid.fbDiv).remove();
                    $t.grid.fhDiv = null;
                    $t.grid.fbDiv = null;
                    $(this).unbind('.setFrozenColumns');
                    if ($t.p.hoverrows === true) {
                        var ptr;
                        $("#" + $.jgrid.jqID($t.p.id)).bind('mouseover', function (e) {
                            ptr = $(e.target).closest("tr.jqgrow");
                            if ($(ptr).attr("class") !== "ui-subgrid") {
                                $(ptr).addClass("ui-state-hover");
                            }
                        }).bind('mouseout', function (e) {
                            ptr = $(e.target).closest("tr.jqgrow");
                            $(ptr).removeClass("ui-state-hover");
                        });
                    }
                    this.p.frozenColumns = false;
                }
            });
        }
    });
})(jQuery);
/*
 * jqModal - Minimalist Modaling with jQuery
 *   (http://dev.iceburg.net/jquery/jqmodal/)
 *
 * Copyright (c) 2007,2008 Brice Burgess <bhb@iceburg.net>
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 * 
 * $Version: 07/06/2008 +r13
 */
(function ($) {
    $.fn.jqm = function (o) {
        var p = {
            overlay: 50,
            closeoverlay: true,
            overlayClass: 'jqmOverlay',
            closeClass: 'jqmClose',
            trigger: '.jqModal',
            ajax: F,
            ajaxText: '',
            target: F,
            modal: F,
            toTop: F,
            onShow: F,
            onHide: F,
            onLoad: F
        };
        return this.each(function () {
            if (this._jqm)
                return H[this._jqm].c = $.extend({}, H[this._jqm].c, o);
            s++;
            this._jqm = s;
            H[s] = {
                c: $.extend(p, $.jqm.params, o),
                a: F,
                w: $(this).addClass('jqmID' + s),
                s: s
            };
            if (p.trigger)
                $(this).jqmAddTrigger(p.trigger);
        });
    };

    $.fn.jqmAddClose = function (e) {
        return hs(this, e, 'jqmHide');
    };
    $.fn.jqmAddTrigger = function (e) {
        return hs(this, e, 'jqmShow');
    };
    $.fn.jqmShow = function (t) {
        return this.each(function () {
            $.jqm.open(this._jqm, t);
        });
    };
    $.fn.jqmHide = function (t) {
        return this.each(function () {
            $.jqm.close(this._jqm, t)
        });
    };

    $.jqm = {
        hash: {},
        open: function (s, t) {
            var h = H[s],
                    c = h.c,
                    cc = '.' + c.closeClass,
                    z = (parseInt(h.w.css('z-index')));
            z = (z > 0) ? z : 3000;
            var o = $('<div></div>').css({
                height: '100%',
                width: '100%',
                position: 'fixed',
                left: 0,
                top: 0,
                'z-index': z - 1,
                opacity: c.overlay / 100
            });
            if (h.a)
                return F;
            h.t = t;
            h.a = true;
            h.w.css('z-index', z);
            if (c.modal) {
                if (!A[0])
                    setTimeout(function () {
                        L('bind');
                    }, 1);
                A.push(s);
            } else if (c.overlay > 0) {
                if (c.closeoverlay)
                    h.w.jqmAddClose(o);
            } else
                o = F;

            h.o = (o) ? o.addClass(c.overlayClass).prependTo('body') : F;

            if (c.ajax) {
                var r = c.target || h.w,
                        u = c.ajax;
                r = (typeof r == 'string') ? $(r, h.w) : $(r);
                u = (u.substr(0, 1) == '@') ? $(t).attr(u.substring(1)) : u;
                r.html(c.ajaxText).load(u, function () {
                    if (c.onLoad)
                        c.onLoad.call(this, h);
                    if (cc)
                        h.w.jqmAddClose($(cc, h.w));
                    e(h);
                });
            } else if (cc)
                h.w.jqmAddClose($(cc, h.w));

            if (c.toTop && h.o)
                h.w.before('<span id="jqmP' + h.w[0]._jqm + '"></span>').insertAfter(h.o);
            (c.onShow) ? c.onShow(h) : h.w.show();
            e(h);
            return F;
        },
        close: function (s) {
            var h = H[s];
            if (!h.a)
                return F;
            h.a = F;
            if (A[0]) {
                A.pop();
                if (!A[0])
                    L('unbind');
            }
            if (h.c.toTop && h.o)
                $('#jqmP' + h.w[0]._jqm).after(h.w).remove();
            if (h.c.onHide)
                h.c.onHide(h);
            else {
                h.w.hide();
                if (h.o)
                    h.o.remove();
            }
            return F;
        },
        params: {}
    };
    var s = 0,
            H = $.jqm.hash,
            A = [],
            F = false,
            e = function (h) {
                f(h);
            },
            f = function (h) {
                try {
                    $(':input:visible', h.w)[0].focus();
                } catch (_) {
                }
            },
            L = function (t) {
                $(document)[t]("keypress", m)[t]("keydown", m)[t]("mousedown", m);
            },
            m = function (e) {
                var h = H[A[A.length - 1]],
                        r = (!$(e.target).parents('.jqmID' + h.s)[0]);
                if (r) {
                    $('.jqmID' + h.s).each(function () {
                        var $self = $(this),
                                offset = $self.offset();
                        if (offset.top <= e.pageY && e.pageY <= offset.top + $self.height() && offset.left <= e.pageX && e.pageX <= offset.left + $self.width()) {
                            r = false;
                            return false;
                        }
                    });
                    f(h);
                }
                return !r;
            },
            hs = function (w, t, c) {
                return w.each(function () {
                    var s = this._jqm;
                    $(t).each(function () {
                        if (!this[c]) {
                            this[c] = [];
                            $(this).click(function () {
                                for (var i in {
                                jqmShow: 1,
                                        jqmHide: 1
                                })
                                    for (var s in this[i])
                                        if (H[this[i][s]])
                                            H[this[i][s]].w[i](this);
                                return F;
                            });
                        }
                        this[c].push(s);
                    });
                });
            };
})(jQuery);
/*
 * jqDnR - Minimalistic Drag'n'Resize for jQuery.
 *
 * Copyright (c) 2007 Brice Burgess <bhb@iceburg.net>, http://www.iceburg.net
 * Licensed under the MIT License:
 * http://www.opensource.org/licenses/mit-license.php
 * 
 * $Version: 2007.08.19 +r2
 */

(function ($) {
    $.fn.jqDrag = function (h) {
        return i(this, h, 'd');
    };
    $.fn.jqResize = function (h, ar) {
        return i(this, h, 'r', ar);
    };
    $.jqDnR = {
        dnr: {},
        e: 0,
        drag: function (v) {
            if (M.k == 'd') {
                E.css({
                    left: M.X + v.pageX - M.pX,
                    top: M.Y + v.pageY - M.pY
                });
            } else {
                E.css({
                    width: Math.max(v.pageX - M.pX + M.W, 0),
                    height: Math.max(v.pageY - M.pY + M.H, 0)
                });
                if (M1) {
                    E1.css({
                        width: Math.max(v.pageX - M1.pX + M1.W, 0),
                        height: Math.max(v.pageY - M1.pY + M1.H, 0)
                    });
                }
            }
            return false;
        },
        stop: function () {
            //E.css('opacity',M.o);
            $(document).unbind('mousemove', J.drag).unbind('mouseup', J.stop);
        }
    };
    var J = $.jqDnR,
            M = J.dnr,
            E = J.e,
            E1, M1, i = function (e, h, k, aR) {
                return e.each(function () {
                    h = (h) ? $(h, e) : e;
                    h.bind('mousedown', {
                        e: e,
                        k: k
                    }, function (v) {
                        var d = v.data,
                                p = {};
                        E = d.e;
                        E1 = aR ? $(aR) : false;
                        // attempt utilization of dimensions plugin to fix IE issues
                        if (E.css('position') != 'relative') {
                            try {
                                E.position(p);
                            } catch (e) {
                            }
                        }
                        M = {
                            X: p.left || f('left') || 0,
                            Y: p.top || f('top') || 0,
                            W: f('width') || E[0].scrollWidth || 0,
                            H: f('height') || E[0].scrollHeight || 0,
                            pX: v.pageX,
                            pY: v.pageY,
                            k: d.k
                                    //o:E.css('opacity')
                        };
                        // also resize
                        if (E1 && d.k != 'd') {
                            M1 = {
                                X: p.left || f1('left') || 0,
                                Y: p.top || f1('top') || 0,
                                W: E1[0].offsetWidth || f1('width') || 0,
                                H: E1[0].offsetHeight || f1('height') || 0,
                                pX: v.pageX,
                                pY: v.pageY,
                                k: d.k
                            };
                        } else {
                            M1 = false;
                        }
                        //E.css({opacity:0.8});
                        if ($("input.hasDatepicker", E[0])[0]) {
                            try {
                                $("input.hasDatepicker", E[0]).datepicker('hide');
                            } catch (dpe) {
                            }
                        }
                        $(document).mousemove($.jqDnR.drag).mouseup($.jqDnR.stop);
                        return false;
                    });
                });
            },
            f = function (k) {
                return parseInt(E.css(k), 10) || false;
            },
            f1 = function (k) {
                return parseInt(E1.css(k), 10) || false;
            };
})(jQuery);
/*
 The below work is licensed under Creative Commons GNU LGPL License.
 
 Original work:
 
 License:     http://creativecommons.org/licenses/LGPL/2.1/
 Author:      Stefan Goessner/2006
 Web:         http://goessner.net/ 
 
 Modifications made:
 
 Version:     0.9-p5
 Description: Restructured code, JSLint validated (no strict whitespaces),
 added handling of empty arrays, empty strings, and int/floats values.
 Author:      Michael Schøler/2008-01-29
 Web:         http://michael.hinnerup.net/blog/2008/01/26/converting-json-to-xml-and-xml-to-json/
 
 Description: json2xml added support to convert functions as CDATA
 so it will be easy to write characters that cause some problems when convert
 Author:      Tony Tomov
 */

/*global alert */
var xmlJsonClass = {
    // Param "xml": Element or document DOM node.
    // Param "tab": Tab or indent string for pretty output formatting omit or use empty string "" to supress.
    // Returns:     JSON string
    xml2json: function (xml, tab) {
        if (xml.nodeType === 9) {
            // document node
            xml = xml.documentElement;
        }
        var nws = this.removeWhite(xml);
        var obj = this.toObj(nws);
        var json = this.toJson(obj, xml.nodeName, "\t");
        return "{\n" + tab + (tab ? json.replace(/\t/g, tab) : json.replace(/\t|\n/g, "")) + "\n}";
    },
    // Param "o":   JavaScript object
    // Param "tab": tab or indent string for pretty output formatting omit or use empty string "" to supress.
    // Returns:     XML string
    json2xml: function (o, tab) {
        var toXml = function (v, name, ind) {
            var xml = "";
            var i, n;
            if (v instanceof Array) {
                if (v.length === 0) {
                    xml += ind + "<" + name + ">__EMPTY_ARRAY_</" + name + ">\n";
                } else {
                    for (i = 0, n = v.length; i < n; i += 1) {
                        var sXml = ind + toXml(v[i], name, ind + "\t") + "\n";
                        xml += sXml;
                    }
                }
            } else if (typeof (v) === "object") {
                var hasChild = false;
                xml += ind + "<" + name;
                var m;
                for (m in v)
                    if (v.hasOwnProperty(m)) {
                        if (m.charAt(0) === "@") {
                            xml += " " + m.substr(1) + "=\"" + v[m].toString() + "\"";
                        } else {
                            hasChild = true;
                        }
                    }
                xml += hasChild ? ">" : "/>";
                if (hasChild) {
                    for (m in v)
                        if (v.hasOwnProperty(m)) {
                            if (m === "#text") {
                                xml += v[m];
                            } else if (m === "#cdata") {
                                xml += "<![CDATA[" + v[m] + "]]>";
                            } else if (m.charAt(0) !== "@") {
                                xml += toXml(v[m], m, ind + "\t");
                            }
                        }
                    xml += (xml.charAt(xml.length - 1) === "\n" ? ind : "") + "</" + name + ">";
                }
            } else if (typeof (v) === "function") {
                xml += ind + "<" + name + ">" + "<![CDATA[" + v + "]]>" + "</" + name + ">";
            } else {
                if (v === undefined) {
                    v = "";
                }
                if (v.toString() === "\"\"" || v.toString().length === 0) {
                    xml += ind + "<" + name + ">__EMPTY_STRING_</" + name + ">";
                } else {
                    xml += ind + "<" + name + ">" + v.toString() + "</" + name + ">";
                }
            }
            return xml;
        };
        var xml = "";
        var m;
        for (m in o)
            if (o.hasOwnProperty(m)) {
                xml += toXml(o[m], m, "");
            }
        return tab ? xml.replace(/\t/g, tab) : xml.replace(/\t|\n/g, "");
    },
    // Internal methods
    toObj: function (xml) {
        var o = {};
        var FuncTest = /function/i;
        if (xml.nodeType === 1) {
            // element node ..
            if (xml.attributes.length) {
                // element with attributes ..
                var i;
                for (i = 0; i < xml.attributes.length; i += 1) {
                    o["@" + xml.attributes[i].nodeName] = (xml.attributes[i].nodeValue || "").toString();
                }
            }
            if (xml.firstChild) {
                // element has child nodes ..
                var textChild = 0,
                        cdataChild = 0,
                        hasElementChild = false;
                var n;
                for (n = xml.firstChild; n; n = n.nextSibling) {
                    if (n.nodeType === 1) {
                        hasElementChild = true;
                    } else if (n.nodeType === 3 && n.nodeValue.match(/[^ \f\n\r\t\v]/)) {
                        // non-whitespace text
                        textChild += 1;
                    } else if (n.nodeType === 4) {
                        // cdata section node
                        cdataChild += 1;
                    }
                }
                if (hasElementChild) {
                    if (textChild < 2 && cdataChild < 2) {
                        // structured element with evtl. a single text or/and cdata node ..
                        this.removeWhite(xml);
                        for (n = xml.firstChild; n; n = n.nextSibling) {
                            if (n.nodeType === 3) {
                                // text node
                                o["#text"] = this.escape(n.nodeValue);
                            } else if (n.nodeType === 4) {
                                // cdata node
                                if (FuncTest.test(n.nodeValue)) {
                                    o[n.nodeName] = [o[n.nodeName], n.nodeValue];
                                } else {
                                    o["#cdata"] = this.escape(n.nodeValue);
                                }
                            } else if (o[n.nodeName]) {
                                // multiple occurence of element ..
                                if (o[n.nodeName] instanceof Array) {
                                    o[n.nodeName][o[n.nodeName].length] = this.toObj(n);
                                } else {
                                    o[n.nodeName] = [o[n.nodeName], this.toObj(n)];
                                }
                            } else {
                                // first occurence of element ..
                                o[n.nodeName] = this.toObj(n);
                            }
                        }
                    } else {
                        // mixed content
                        if (!xml.attributes.length) {
                            o = this.escape(this.innerXml(xml));
                        } else {
                            o["#text"] = this.escape(this.innerXml(xml));
                        }
                    }
                } else if (textChild) {
                    // pure text
                    if (!xml.attributes.length) {
                        o = this.escape(this.innerXml(xml));
                        if (o === "__EMPTY_ARRAY_") {
                            o = "[]";
                        } else if (o === "__EMPTY_STRING_") {
                            o = "";
                        }
                    } else {
                        o["#text"] = this.escape(this.innerXml(xml));
                    }
                } else if (cdataChild) {
                    // cdata
                    if (cdataChild > 1) {
                        o = this.escape(this.innerXml(xml));
                    } else {
                        for (n = xml.firstChild; n; n = n.nextSibling) {
                            if (FuncTest.test(xml.firstChild.nodeValue)) {
                                o = xml.firstChild.nodeValue;
                                break;
                            } else {
                                o["#cdata"] = this.escape(n.nodeValue);
                            }
                        }
                    }
                }
            }
            if (!xml.attributes.length && !xml.firstChild) {
                o = null;
            }
        } else if (xml.nodeType === 9) {
            // document.node
            o = this.toObj(xml.documentElement);
        } else {
            alert("unhandled node type: " + xml.nodeType);
        }
        return o;
    },
    toJson: function (o, name, ind, wellform) {
        if (wellform === undefined)
            wellform = true;
        var json = name ? ("\"" + name + "\"") : "",
                tab = "\t",
                newline = "\n";
        if (!wellform) {
            tab = "";
            newline = "";
        }

        if (o === "[]") {
            json += (name ? ":[]" : "[]");
        } else if (o instanceof Array) {
            var n, i, ar = [];
            for (i = 0, n = o.length; i < n; i += 1) {
                ar[i] = this.toJson(o[i], "", ind + tab, wellform);
            }
            json += (name ? ":[" : "[") + (ar.length > 1 ? (newline + ind + tab + ar.join("," + newline + ind + tab) + newline + ind) : ar.join("")) + "]";
        } else if (o === null) {
            json += (name && ":") + "null";
        } else if (typeof (o) === "object") {
            var arr = [],
                    m;
            for (m in o) {
                if (o.hasOwnProperty(m)) {
                    arr[arr.length] = this.toJson(o[m], m, ind + tab, wellform);
                }
            }
            json += (name ? ":{" : "{") + (arr.length > 1 ? (newline + ind + tab + arr.join("," + newline + ind + tab) + newline + ind) : arr.join("")) + "}";
        } else if (typeof (o) === "string") {
            /*
             var objRegExp  = /(^-?\d+\.?\d*$)/;
             var FuncTest = /function/i;
             var os = o.toString();
             if (objRegExp.test(os) || FuncTest.test(os) || os==="false" || os==="true") {
             // int or float
             json += (name && ":")  + "\"" +os + "\"";
             } 
             else {
             */
            json += (name && ":") + "\"" + o.replace(/\\/g, '\\\\').replace(/\"/g, '\\"') + "\"";
            //}
        } else {
            json += (name && ":") + o.toString();
        }
        return json;
    },
    innerXml: function (node) {
        var s = "";
        if ("innerHTML" in node) {
            s = node.innerHTML;
        } else {
            var asXml = function (n) {
                var s = "",
                        i;
                if (n.nodeType === 1) {
                    s += "<" + n.nodeName;
                    for (i = 0; i < n.attributes.length; i += 1) {
                        s += " " + n.attributes[i].nodeName + "=\"" + (n.attributes[i].nodeValue || "").toString() + "\"";
                    }
                    if (n.firstChild) {
                        s += ">";
                        for (var c = n.firstChild; c; c = c.nextSibling) {
                            s += asXml(c);
                        }
                        s += "</" + n.nodeName + ">";
                    } else {
                        s += "/>";
                    }
                } else if (n.nodeType === 3) {
                    s += n.nodeValue;
                } else if (n.nodeType === 4) {
                    s += "<![CDATA[" + n.nodeValue + "]]>";
                }
                return s;
            };
            for (var c = node.firstChild; c; c = c.nextSibling) {
                s += asXml(c);
            }
        }
        return s;
    },
    escape: function (txt) {
        return txt.replace(/[\\]/g, "\\\\").replace(/[\"]/g, '\\"').replace(/[\n]/g, '\\n').replace(/[\r]/g, '\\r');
    },
    removeWhite: function (e) {
        e.normalize();
        var n;
        for (n = e.firstChild; n; ) {
            if (n.nodeType === 3) {
                // text node
                if (!n.nodeValue.match(/[^ \f\n\r\t\v]/)) {
                    // pure whitespace text node
                    var nxt = n.nextSibling;
                    e.removeChild(n);
                    n = nxt;
                } else {
                    n = n.nextSibling;
                }
            } else if (n.nodeType === 1) {
                // element node
                this.removeWhite(n);
                n = n.nextSibling;
            } else {
                // any other node
                n = n.nextSibling;
            }
        }
        return e;
    }
};
/*
 **
 * formatter for values but most of the values if for jqGrid
 * Some of this was inspired and based on how YUI does the table datagrid but in jQuery fashion
 * we are trying to keep it as light as possible
 * Joshua Burnett josh@9ci.com	
 * http://www.greenbill.com
 *
 * Changes from Tony Tomov tony@trirand.com
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl-2.0.html
 * 
 **/
/*jshint eqeqeq:false */
/*global jQuery */

(function ($) {
    "use strict";
    $.fmatter = {};
    //opts can be id:row id for the row, rowdata:the data for the row, colmodel:the column model for this column
    //example {id:1234,}
    $.extend($.fmatter, {
        isBoolean: function (o) {
            return typeof o === 'boolean';
        },
        isObject: function (o) {
            return (o && (typeof o === 'object' || $.isFunction(o))) || false;
        },
        isString: function (o) {
            return typeof o === 'string';
        },
        isNumber: function (o) {
            return typeof o === 'number' && isFinite(o);
        },
        isValue: function (o) {
            return (this.isObject(o) || this.isString(o) || this.isNumber(o) || this.isBoolean(o));
        },
        isEmpty: function (o) {
            if (!this.isString(o) && this.isValue(o)) {
                return false;
            }
            if (!this.isValue(o)) {
                return true;
            }
            o = $.trim(o).replace(/\&nbsp\;/ig, '').replace(/\&#160\;/ig, '');
            return o === "";
        }
    });
    $.fn.fmatter = function (formatType, cellval, opts, rwd, act) {
        // build main options before element iteration
        var v = cellval;
        opts = $.extend({}, $.jgrid.formatter, opts);

        try {
            v = $.fn.fmatter[formatType].call(this, cellval, opts, rwd, act);
        } catch (fe) {
        }
        return v;
    };
    $.fmatter.util = {
        // Taken from YAHOO utils
        NumberFormat: function (nData, opts) {
            if (!$.fmatter.isNumber(nData)) {
                nData *= 1;
            }
            if ($.fmatter.isNumber(nData)) {
                var bNegative = (nData < 0);
                var sOutput = String(nData);
                var sDecimalSeparator = opts.decimalSeparator || ".";
                var nDotIndex;
                if ($.fmatter.isNumber(opts.decimalPlaces)) {
                    // Round to the correct decimal place
                    var nDecimalPlaces = opts.decimalPlaces;
                    var nDecimal = Math.pow(10, nDecimalPlaces);
                    sOutput = String(Math.round(nData * nDecimal) / nDecimal);
                    nDotIndex = sOutput.lastIndexOf(".");
                    if (nDecimalPlaces > 0) {
                        // Add the decimal separator
                        if (nDotIndex < 0) {
                            sOutput += sDecimalSeparator;
                            nDotIndex = sOutput.length - 1;
                        }
                        // Replace the "."
                        else if (sDecimalSeparator !== ".") {
                            sOutput = sOutput.replace(".", sDecimalSeparator);
                        }
                        // Add missing zeros
                        while ((sOutput.length - 1 - nDotIndex) < nDecimalPlaces) {
                            sOutput += "0";
                        }
                    }
                }
                if (opts.thousandsSeparator) {
                    var sThousandsSeparator = opts.thousandsSeparator;
                    nDotIndex = sOutput.lastIndexOf(sDecimalSeparator);
                    nDotIndex = (nDotIndex > -1) ? nDotIndex : sOutput.length;
                    var sNewOutput = sOutput.substring(nDotIndex);
                    var nCount = -1,
                            i;
                    for (i = nDotIndex; i > 0; i--) {
                        nCount++;
                        if ((nCount % 3 === 0) && (i !== nDotIndex) && (!bNegative || (i > 1))) {
                            sNewOutput = sThousandsSeparator + sNewOutput;
                        }
                        sNewOutput = sOutput.charAt(i - 1) + sNewOutput;
                    }
                    sOutput = sNewOutput;
                }
                // Prepend prefix
                sOutput = (opts.prefix) ? opts.prefix + sOutput : sOutput;
                // Append suffix
                sOutput = (opts.suffix) ? sOutput + opts.suffix : sOutput;
                return sOutput;

            }
            return nData;
        }
    };
    $.fn.fmatter.defaultFormat = function (cellval, opts) {
        return ($.fmatter.isValue(cellval) && cellval !== "") ? cellval : opts.defaultValue || "&#160;";
    };
    $.fn.fmatter.email = function (cellval, opts) {
        if (!$.fmatter.isEmpty(cellval)) {
            return "<a href=\"mailto:" + cellval + "\">" + cellval + "</a>";
        }
        return $.fn.fmatter.defaultFormat(cellval, opts);
    };
    $.fn.fmatter.checkbox = function (cval, opts) {
        var op = $.extend({}, opts.checkbox),
                ds;
        if (opts.colModel !== undefined && opts.colModel.formatoptions !== undefined) {
            op = $.extend({}, op, opts.colModel.formatoptions);
        }
        if (op.disabled === true) {
            ds = "disabled=\"disabled\"";
        } else {
            ds = "";
        }
        if ($.fmatter.isEmpty(cval) || cval === undefined) {
            cval = $.fn.fmatter.defaultFormat(cval, op);
        }
        cval = String(cval);
        cval = (cval + "").toLowerCase();
        var bchk = cval.search(/(false|f|0|no|n|off|undefined)/i) < 0 ? " checked='checked' " : "";
        return "<input type=\"checkbox\" " + bchk + " value=\"" + cval + "\" offval=\"no\" " + ds + "/>";
    };
    $.fn.fmatter.link = function (cellval, opts) {
        var op = {
            target: opts.target
        };
        var target = "";
        if (opts.colModel !== undefined && opts.colModel.formatoptions !== undefined) {
            op = $.extend({}, op, opts.colModel.formatoptions);
        }
        if (op.target) {
            target = 'target=' + op.target;
        }
        if (!$.fmatter.isEmpty(cellval)) {
            return "<a " + target + " href=\"" + cellval + "\">" + cellval + "</a>";
        }
        return $.fn.fmatter.defaultFormat(cellval, opts);
    };
    $.fn.fmatter.showlink = function (cellval, opts) {
        var op = {
            baseLinkUrl: opts.baseLinkUrl,
            showAction: opts.showAction,
            addParam: opts.addParam || "",
            target: opts.target,
            idName: opts.idName
        },
        target = "",
                idUrl;
        if (opts.colModel !== undefined && opts.colModel.formatoptions !== undefined) {
            op = $.extend({}, op, opts.colModel.formatoptions);
        }
        if (op.target) {
            target = 'target=' + op.target;
        }
        idUrl = op.baseLinkUrl + op.showAction + '?' + op.idName + '=' + opts.rowId + op.addParam;
        if ($.fmatter.isString(cellval) || $.fmatter.isNumber(cellval)) { //add this one even if its blank string
            return "<a " + target + " href=\"" + idUrl + "\">" + cellval + "</a>";
        }
        return $.fn.fmatter.defaultFormat(cellval, opts);
    };
    $.fn.fmatter.integer = function (cellval, opts) {
        var op = $.extend({}, opts.integer);
        if (opts.colModel !== undefined && opts.colModel.formatoptions !== undefined) {
            op = $.extend({}, op, opts.colModel.formatoptions);
        }
        if ($.fmatter.isEmpty(cellval)) {
            return op.defaultValue;
        }
        return $.fmatter.util.NumberFormat(cellval, op);
    };
    $.fn.fmatter.number = function (cellval, opts) {
        var op = $.extend({}, opts.number);
        if (opts.colModel !== undefined && opts.colModel.formatoptions !== undefined) {
            op = $.extend({}, op, opts.colModel.formatoptions);
        }
        if ($.fmatter.isEmpty(cellval)) {
            return op.defaultValue;
        }
        return $.fmatter.util.NumberFormat(cellval, op);
    };
    $.fn.fmatter.currency = function (cellval, opts) {
        var op = $.extend({}, opts.currency);
        if (opts.colModel !== undefined && opts.colModel.formatoptions !== undefined) {
            op = $.extend({}, op, opts.colModel.formatoptions);
        }
        if ($.fmatter.isEmpty(cellval)) {
            return op.defaultValue;
        }
        return $.fmatter.util.NumberFormat(cellval, op);
    };
    $.fn.fmatter.date = function (cellval, opts, rwd, act) {
        var op = $.extend({}, opts.date);
        if (opts.colModel !== undefined && opts.colModel.formatoptions !== undefined) {
            op = $.extend({}, op, opts.colModel.formatoptions);
        }
        if (!op.reformatAfterEdit && act === 'edit') {
            return $.fn.fmatter.defaultFormat(cellval, opts);
        }
        if (!$.fmatter.isEmpty(cellval)) {
            return $.jgrid.parseDate(op.srcformat, cellval, op.newformat, op);
        }
        return $.fn.fmatter.defaultFormat(cellval, opts);
    };
    $.fn.fmatter.select = function (cellval, opts) {
        // jqGrid specific
        cellval = String(cellval);
        var oSelect = false,
                ret = [],
                sep, delim;
        if (opts.colModel.formatoptions !== undefined) {
            oSelect = opts.colModel.formatoptions.value;
            sep = opts.colModel.formatoptions.separator === undefined ? ":" : opts.colModel.formatoptions.separator;
            delim = opts.colModel.formatoptions.delimiter === undefined ? ";" : opts.colModel.formatoptions.delimiter;
        } else if (opts.colModel.editoptions !== undefined) {
            oSelect = opts.colModel.editoptions.value;
            sep = opts.colModel.editoptions.separator === undefined ? ":" : opts.colModel.editoptions.separator;
            delim = opts.colModel.editoptions.delimiter === undefined ? ";" : opts.colModel.editoptions.delimiter;
        }
        if (oSelect) {
            var msl = opts.colModel.editoptions.multiple === true ? true : false,
                    scell = [],
                    sv;
            if (msl) {
                scell = (typeof cellval === 'string') ? cellval.split(",") : cellval;
                if ($.isArray(scell)) {
                    scell = $.map(scell, function (n) {
                        return $.trim(n);
                    });
                }
            }
            if ($.fmatter.isString(oSelect)) {
                // mybe here we can use some caching with care ????
                var so = oSelect.split(delim),
                        j = 0,
                        i;
                for (i = 0; i < so.length; i++) {
                    sv = so[i].split(sep);
                    if (sv.length > 2) {
                        sv[1] = $.map(sv, function (n, i) {
                            if (i > 0) {
                                return n;
                            }
                        }).join(sep);
                    }
                    if (msl) {
                        if ($.inArray(sv[0], scell) > -1) {
                            ret[j] = sv[1];
                            j++;
                        }
                    } else if ($.trim(sv[0]) === $.trim(cellval)) {
                        ret[0] = sv[1];
                        break;
                    }
                }
            } else if ($.fmatter.isObject(oSelect)) {
                // this is quicker
                if (msl) {
                    ret = $.map(scell, function (n) {
                        return oSelect[n];
                    });
                } else {
                    ret[0] = oSelect[cellval] || "";
                }
            }
        }
        cellval = ret.join(", ");
        return cellval === "" ? $.fn.fmatter.defaultFormat(cellval, opts) : cellval;
    };
    $.fn.fmatter.rowactions = function (act) {
        var $tr = $(this).closest("tr.jqgrow"),
                rid = $tr.attr("id"),
                $id = $(this).closest("table.ui-jqgrid-btable").attr('id').replace(/_frozen([^_]*)$/, '$1'),
                $grid = $("#" + $id),
                $t = $grid[0],
                p = $t.p,
                cm = p.colModel[$.jgrid.getCellIndex(this)],
                $actionsDiv = cm.frozen ? $("tr#" + rid + " td:eq(" + $.jgrid.getCellIndex(this) + ") > div", $grid) : $(this).parent(),
                op = {
                    keys: false,
                    onEdit: null,
                    onSuccess: null,
                    afterSave: null,
                    onError: null,
                    afterRestore: null,
                    extraparam: {},
                    url: null,
                    restoreAfterError: true,
                    mtype: "POST",
                    delOptions: {},
                    editOptions: {}
                },
        saverow = function (rowid, res) {
            if ($.isFunction(op.afterSave)) {
                op.afterSave.call($t, rowid, res);
            }
            $actionsDiv.find("div.ui-inline-edit,div.ui-inline-del").show();
            $actionsDiv.find("div.ui-inline-save,div.ui-inline-cancel").hide();
        },
                restorerow = function (rowid) {
                    if ($.isFunction(op.afterRestore)) {
                        op.afterRestore.call($t, rowid);
                    }
                    $actionsDiv.find("div.ui-inline-edit,div.ui-inline-del").show();
                    $actionsDiv.find("div.ui-inline-save,div.ui-inline-cancel").hide();
                };

        if (cm.formatoptions !== undefined) {
            op = $.extend(op, cm.formatoptions);
        }
        if (p.editOptions !== undefined) {
            op.editOptions = p.editOptions;
        }
        if (p.delOptions !== undefined) {
            op.delOptions = p.delOptions;
        }
        if ($tr.hasClass("jqgrid-new-row")) {
            op.extraparam[p.prmNames.oper] = p.prmNames.addoper;
        }
        var actop = {
            keys: op.keys,
            oneditfunc: op.onEdit,
            successfunc: op.onSuccess,
            url: op.url,
            extraparam: op.extraparam,
            aftersavefunc: saverow,
            errorfunc: op.onError,
            afterrestorefunc: restorerow,
            restoreAfterError: op.restoreAfterError,
            mtype: op.mtype
        };
        switch (act) {
            case 'edit':
                $grid.jqGrid('editRow', rid, actop);
                $actionsDiv.find("div.ui-inline-edit,div.ui-inline-del").hide();
                $actionsDiv.find("div.ui-inline-save,div.ui-inline-cancel").show();
                $grid.triggerHandler("jqGridAfterGridComplete");
                break;
            case 'save':
                if ($grid.jqGrid('saveRow', rid, actop)) {
                    $actionsDiv.find("div.ui-inline-edit,div.ui-inline-del").show();
                    $actionsDiv.find("div.ui-inline-save,div.ui-inline-cancel").hide();
                    $grid.triggerHandler("jqGridAfterGridComplete");
                }
                break;
            case 'cancel':
                $grid.jqGrid('restoreRow', rid, restorerow);
                $actionsDiv.find("div.ui-inline-edit,div.ui-inline-del").show();
                $actionsDiv.find("div.ui-inline-save,div.ui-inline-cancel").hide();
                $grid.triggerHandler("jqGridAfterGridComplete");
                break;
            case 'del':
                $grid.jqGrid('delGridRow', rid, op.delOptions);
                break;
            case 'formedit':
                $grid.jqGrid('setSelection', rid);
                $grid.jqGrid('editGridRow', rid, op.editOptions);
                break;
        }
    };
    $.fn.fmatter.actions = function (cellval, opts) {
        var op = {
            keys: false,
            editbutton: true,
            delbutton: true,
            editformbutton: false
        },
        rowid = opts.rowId,
                str = "",
                ocl;
        if (opts.colModel.formatoptions !== undefined) {
            op = $.extend(op, opts.colModel.formatoptions);
        }
        if (rowid === undefined || $.fmatter.isEmpty(rowid)) {
            return "";
        }
        if (op.editformbutton) {
            ocl = "id='jEditButton_" + rowid + "' onclick=jQuery.fn.fmatter.rowactions.call(this,'formedit'); onmouseover=jQuery(this).addClass('ui-state-hover'); onmouseout=jQuery(this).removeClass('ui-state-hover'); ";
            str += "<div title='" + $.jgrid.nav.edittitle + "' style='float:left;cursor:pointer;' class='ui-pg-div ui-inline-edit' " + ocl + "><span class='ui-icon ui-icon-pencil'></span></div>";
        } else if (op.editbutton) {
            ocl = "id='jEditButton_" + rowid + "' onclick=jQuery.fn.fmatter.rowactions.call(this,'edit'); onmouseover=jQuery(this).addClass('ui-state-hover'); onmouseout=jQuery(this).removeClass('ui-state-hover') ";
            str += "<div title='" + $.jgrid.nav.edittitle + "' style='float:left;cursor:pointer;' class='ui-pg-div ui-inline-edit' " + ocl + "><span class='ui-icon ui-icon-pencil'></span></div>";
        }
        if (op.delbutton) {
            ocl = "id='jDeleteButton_" + rowid + "' onclick=jQuery.fn.fmatter.rowactions.call(this,'del'); onmouseover=jQuery(this).addClass('ui-state-hover'); onmouseout=jQuery(this).removeClass('ui-state-hover'); ";
            str += "<div title='" + $.jgrid.nav.deltitle + "' style='float:left;margin-left:5px;' class='ui-pg-div ui-inline-del' " + ocl + "><span class='ui-icon ui-icon-trash'></span></div>";
        }
        ocl = "id='jSaveButton_" + rowid + "' onclick=jQuery.fn.fmatter.rowactions.call(this,'save'); onmouseover=jQuery(this).addClass('ui-state-hover'); onmouseout=jQuery(this).removeClass('ui-state-hover'); ";
        str += "<div title='" + $.jgrid.edit.bSubmit + "' style='float:left;display:none' class='ui-pg-div ui-inline-save' " + ocl + "><span class='ui-icon ui-icon-disk'></span></div>";
        ocl = "id='jCancelButton_" + rowid + "' onclick=jQuery.fn.fmatter.rowactions.call(this,'cancel'); onmouseover=jQuery(this).addClass('ui-state-hover'); onmouseout=jQuery(this).removeClass('ui-state-hover'); ";
        str += "<div title='" + $.jgrid.edit.bCancel + "' style='float:left;display:none;margin-left:5px;' class='ui-pg-div ui-inline-cancel' " + ocl + "><span class='ui-icon ui-icon-cancel'></span></div>";
        return "<div style='margin-left:8px;'>" + str + "</div>";
    };
    $.unformat = function (cellval, options, pos, cnt) {
        // specific for jqGrid only
        var ret, formatType = options.colModel.formatter,
                op = options.colModel.formatoptions || {},
                sep, re = /([\.\*\_\'\(\)\{\}\+\?\\])/g,
                unformatFunc = options.colModel.unformat || ($.fn.fmatter[formatType] && $.fn.fmatter[formatType].unformat);
        if (unformatFunc !== undefined && $.isFunction(unformatFunc)) {
            ret = unformatFunc.call(this, $(cellval).text(), options, cellval);
        } else if (formatType !== undefined && $.fmatter.isString(formatType)) {
            var opts = $.jgrid.formatter || {},
                    stripTag;
            switch (formatType) {
                case 'integer':
                    op = $.extend({}, opts.integer, op);
                    sep = op.thousandsSeparator.replace(re, "\\$1");
                    stripTag = new RegExp(sep, "g");
                    ret = $(cellval).text().replace(stripTag, '');
                    break;
                case 'number':
                    op = $.extend({}, opts.number, op);
                    sep = op.thousandsSeparator.replace(re, "\\$1");
                    stripTag = new RegExp(sep, "g");
                    ret = $(cellval).text().replace(stripTag, "").replace(op.decimalSeparator, '.');
                    break;
                case 'currency':
                    op = $.extend({}, opts.currency, op);
                    sep = op.thousandsSeparator.replace(re, "\\$1");
                    stripTag = new RegExp(sep, "g");
                    ret = $(cellval).text();
                    if (op.prefix && op.prefix.length) {
                        ret = ret.substr(op.prefix.length);
                    }
                    if (op.suffix && op.suffix.length) {
                        ret = ret.substr(0, ret.length - op.suffix.length);
                    }
                    ret = ret.replace(stripTag, '').replace(op.decimalSeparator, '.');
                    break;
                case 'checkbox':
                    var cbv = (options.colModel.editoptions) ? options.colModel.editoptions.value.split(":") : ["Yes", "No"];
                    ret = $('input', cellval).is(":checked") ? cbv[0] : cbv[1];
                    break;
                case 'select':
                    ret = $.unformat.select(cellval, options, pos, cnt);
                    break;
                case 'actions':
                    return "";
                default:
                    ret = $(cellval).text();
            }
        }
        return ret !== undefined ? ret : cnt === true ? $(cellval).text() : $.jgrid.htmlDecode($(cellval).html());
    };
    $.unformat.select = function (cellval, options, pos, cnt) {
        // Spacial case when we have local data and perform a sort
        // cnt is set to true only in sortDataArray
        var ret = [];
        var cell = $(cellval).text();
        if (cnt === true) {
            return cell;
        }
        var op = $.extend({}, options.colModel.formatoptions !== undefined ? options.colModel.formatoptions : options.colModel.editoptions),
                sep = op.separator === undefined ? ":" : op.separator,
                delim = op.delimiter === undefined ? ";" : op.delimiter;

        if (op.value) {
            var oSelect = op.value,
                    msl = op.multiple === true ? true : false,
                    scell = [],
                    sv;
            if (msl) {
                scell = (typeof cell === 'string') ? cell.split(",") : cell;
                if ($.isArray(scell)) {
                    scell = $.map(scell, function (n) {
                        return $.trim(n);
                    });
                }
            }
            if ($.fmatter.isString(oSelect)) {
                var so = oSelect.split(delim),
                        j = 0,
                        i;
                for (i = 0; i < so.length; i++) {
                    sv = so[i].split(sep);
                    if (sv.length > 2) {
                        sv[1] = $.map(sv, function (n, i) {
                            if (i > 0) {
                                return n;
                            }
                        }).join(sep);
                    }
                    if (msl) {
                        if ($.inArray(sv[1], scell) > -1) {
                            ret[j] = sv[0];
                            j++;
                        }
                    } else if ($.trim(sv[1]) === $.trim(cell)) {
                        ret[0] = sv[0];
                        break;
                    }
                }
            } else if ($.fmatter.isObject(oSelect) || $.isArray(oSelect)) {
                if (!msl) {
                    scell[0] = cell;
                }
                ret = $.map(scell, function (n) {
                    var rv;
                    $.each(oSelect, function (i, val) {
                        if (val === n) {
                            rv = i;
                            return false;
                        }
                    });
                    if (rv !== undefined) {
                        return rv;
                    }
                });
            }
            return ret.join(", ");
        }
        return cell || "";
    };
    $.unformat.date = function (cellval, opts) {
        var op = $.jgrid.formatter.date || {};
        if (opts.formatoptions !== undefined) {
            op = $.extend({}, op, opts.formatoptions);
        }
        if (!$.fmatter.isEmpty(cellval)) {
            return $.jgrid.parseDate(op.newformat, cellval, op.srcformat, op);
        }
        return $.fn.fmatter.defaultFormat(cellval, opts);
    };
})(jQuery); /*jshint eqeqeq:false */
/*global jQuery */
(function ($) {
    /*
     * jqGrid common function
     * Tony Tomov tony@trirand.com
     * http://trirand.com/blog/ 
     * Dual licensed under the MIT and GPL licenses:
     * http://www.opensource.org/licenses/mit-license.php
     * http://www.gnu.org/licenses/gpl-2.0.html
     */
    "use strict";
    $.extend($.jgrid, {
        // Modal functions
        showModal: function (h) {
            h.w.show();
        },
        closeModal: function (h) {
            h.w.hide().attr("aria-hidden", "true");
            if (h.o) {
                h.o.remove();
            }
        },
        hideModal: function (selector, o) {
            o = $.extend({
                jqm: true,
                gb: ''
            }, o || {});
            if (o.onClose) {
                var oncret = o.gb && typeof o.gb === "string" && o.gb.substr(0, 6) === "#gbox_" ? o.onClose.call($("#" + o.gb.substr(6))[0], selector) : o.onClose(selector);
                if (typeof oncret === 'boolean' && !oncret) {
                    return;
                }
            }
            if ($.fn.jqm && o.jqm === true) {
                $(selector).attr("aria-hidden", "true").jqmHide();
            } else {
                if (o.gb !== '') {
                    try {
                        $(".jqgrid-overlay:first", o.gb).hide();
                    } catch (e) {
                    }
                }
                $(selector).hide().attr("aria-hidden", "true");
            }
        },
        //Helper functions
        findPos: function (obj) {
            var curleft = 0,
                    curtop = 0;
            if (obj.offsetParent) {
                do {
                    curleft += obj.offsetLeft;
                    curtop += obj.offsetTop;
                } while (obj = obj.offsetParent);
                //do not change obj == obj.offsetParent
            }
            return [curleft, curtop];
        },
        createModal: function (aIDs, content, p, insertSelector, posSelector, appendsel, css) {
            p = $.extend(true, {}, $.jgrid.jqModal || {}, p);
            var mw = document.createElement('div'),
                    rtlsup, self = this;
            css = $.extend({}, css || {});
            rtlsup = $(p.gbox).attr("dir") === "rtl" ? true : false;
            mw.className = "ui-widget ui-widget-content ui-corner-all ui-jqdialog";
            mw.id = aIDs.themodal;
            var mh = document.createElement('div');
            mh.className = "ui-jqdialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix";
            mh.id = aIDs.modalhead;
            $(mh).append("<span class='ui-jqdialog-title'>" + p.caption + "</span>");
            var ahr = $("<a class='ui-jqdialog-titlebar-close ui-corner-all'></a>").hover(function () {
                ahr.addClass('ui-state-hover');
            }, function () {
                ahr.removeClass('ui-state-hover');
            }).append("<span class='ui-icon ui-icon-closethick'></span>");
            $(mh).append(ahr);
            if (rtlsup) {
                mw.dir = "rtl";
                $(".ui-jqdialog-title", mh).css("float", "right");
                $(".ui-jqdialog-titlebar-close", mh).css("left", 0.3 + "em");
            } else {
                mw.dir = "ltr";
                $(".ui-jqdialog-title", mh).css("float", "left");
                $(".ui-jqdialog-titlebar-close", mh).css("right", 0.3 + "em");
            }
            var mc = document.createElement('div');
            $(mc).addClass("ui-jqdialog-content ui-widget-content").attr("id", aIDs.modalcontent);
            $(mc).append(content);
            mw.appendChild(mc);
            $(mw).prepend(mh);
            if (appendsel === true) {
                $('body').append(mw);
            } //append as first child in body -for alert dialog
            else if (typeof appendsel === "string") {
                $(appendsel).append(mw);
            } else {
                $(mw).insertBefore(insertSelector);
            }
            $(mw).css(css);
            if (p.jqModal === undefined) {
                p.jqModal = true;
            } // internal use
            var coord = {};
            if ($.fn.jqm && p.jqModal === true) {
                if (p.left === 0 && p.top === 0 && p.overlay) {
                    var pos = [];
                    pos = $.jgrid.findPos(posSelector);
                    p.left = pos[0] + 4;
                    p.top = pos[1] + 4;
                }
                coord.top = p.top + "px";
                coord.left = p.left;
            } else if (p.left !== 0 || p.top !== 0) {
                coord.left = p.left;
                coord.top = p.top + "px";
            }
            $("a.ui-jqdialog-titlebar-close", mh).click(function () {
                var oncm = $("#" + $.jgrid.jqID(aIDs.themodal)).data("onClose") || p.onClose;
                var gboxclose = $("#" + $.jgrid.jqID(aIDs.themodal)).data("gbox") || p.gbox;
                self.hideModal("#" + $.jgrid.jqID(aIDs.themodal), {
                    gb: gboxclose,
                    jqm: p.jqModal,
                    onClose: oncm
                });
                return false;
            });
            if (p.width === 0 || !p.width) {
                p.width = 300;
            }
            if (p.height === 0 || !p.height) {
                p.height = 200;
            }
            if (!p.zIndex) {
                var parentZ = $(insertSelector).parents("*[role=dialog]").filter(':first').css("z-index");
                if (parentZ) {
                    p.zIndex = parseInt(parentZ, 10) + 2;
                } else {
                    p.zIndex = 950;
                }
            }
            var rtlt = 0;
            if (rtlsup && coord.left && !appendsel) {
                rtlt = $(p.gbox).width() - (!isNaN(p.width) ? parseInt(p.width, 10) : 0) - 8; // to do
                // just in case
                coord.left = parseInt(coord.left, 10) + parseInt(rtlt, 10);
            }
            if (coord.left) {
                coord.left += "px";
            }
            $(mw).css($.extend({
                width: isNaN(p.width) ? "auto" : p.width + "px",
                height: isNaN(p.height) ? "auto" : p.height + "px",
                zIndex: p.zIndex,
                overflow: 'hidden'
            }, coord)).attr({
                tabIndex: "-1",
                "role": "dialog",
                "aria-labelledby": aIDs.modalhead,
                "aria-hidden": "true"
            });
            if (p.drag === undefined) {
                p.drag = true;
            }
            if (p.resize === undefined) {
                p.resize = true;
            }
            if (p.drag) {
                $(mh).css('cursor', 'move');
                if ($.fn.jqDrag) {
                    $(mw).jqDrag(mh);
                } else {
                    try {
                        $(mw).draggable({
                            handle: $("#" + $.jgrid.jqID(mh.id))
                        });
                    } catch (e) {
                    }
                }
            }
            if (p.resize) {
                if ($.fn.jqResize) {
                    $(mw).append("<div class='jqResize ui-resizable-handle ui-resizable-se ui-icon ui-icon-gripsmall-diagonal-se'></div>");
                    $("#" + $.jgrid.jqID(aIDs.themodal)).jqResize(".jqResize", aIDs.scrollelm ? "#" + $.jgrid.jqID(aIDs.scrollelm) : false);
                } else {
                    try {
                        $(mw).resizable({
                            handles: 'se, sw',
                            alsoResize: aIDs.scrollelm ? "#" + $.jgrid.jqID(aIDs.scrollelm) : false
                        });
                    } catch (r) {
                    }
                }
            }
            if (p.closeOnEscape === true) {
                $(mw).keydown(function (e) {
                    if (e.which == 27) {
                        var cone = $("#" + $.jgrid.jqID(aIDs.themodal)).data("onClose") || p.onClose;
                        self.hideModal("#" + $.jgrid.jqID(aIDs.themodal), {
                            gb: p.gbox,
                            jqm: p.jqModal,
                            onClose: cone
                        });
                    }
                });
            }
        },
        viewModal: function (selector, o) {
            o = $.extend({
                toTop: true,
                overlay: 10,
                modal: false,
                overlayClass: 'ui-widget-overlay',
                onShow: $.jgrid.showModal,
                onHide: $.jgrid.closeModal,
                gbox: '',
                jqm: true,
                jqM: true
            }, o || {});
            if ($.fn.jqm && o.jqm === true) {
                if (o.jqM) {
                    $(selector).attr("aria-hidden", "false").jqm(o).jqmShow();
                } else {
                    $(selector).attr("aria-hidden", "false").jqmShow();
                }
            } else {
                if (o.gbox !== '') {
                    $(".jqgrid-overlay:first", o.gbox).show();
                    $(selector).data("gbox", o.gbox);
                }
                $(selector).show().attr("aria-hidden", "false");
                try {
                    $(':input:visible', selector)[0].focus();
                } catch (_) {
                }
            }
        },
        info_dialog: function (caption, content, c_b, modalopt) {
            var mopt = {
                width: 290,
                height: 'auto',
                dataheight: 'auto',
                drag: true,
                resize: false,
                left: 250,
                top: 170,
                zIndex: 9999,
                // HB Customization
                jqModal: true,
                modal: false,
                closeOnEscape: true,
                align: 'left',
                buttonalign: 'right',
                buttons: []
                        // {text:'textbutt', id:"buttid", onClick : function(){...}}
                        // if the id is not provided we set it like info_button_+ the index in the array - i.e info_button_0,info_button_1...
            };
            $.extend(true, mopt, $.jgrid.jqModal || {}, {
                caption: "<b>" + caption + "</b>"
            }, modalopt || {});
            var jm = mopt.jqModal,
                    self = this;
            if ($.fn.jqm && !jm) {
                jm = false;
            }
            // in case there is no jqModal
            var buttstr = "",
                    i;
            if (mopt.buttons.length > 0) {
                for (i = 0; i < mopt.buttons.length; i++) {
                    if (mopt.buttons[i].id === undefined) {
                        mopt.buttons[i].id = "info_button_" + i;
                    }
                    buttstr += "<a id='" + mopt.buttons[i].id + "' class='fm-button ui-state-default ui-corner-all'>" + mopt.buttons[i].text + "</a>";
                }
            }
            var dh = isNaN(mopt.dataheight) ? mopt.dataheight : mopt.dataheight + "px",
                    cn = "text-align:" + mopt.align + ";";
            var cnt = "<div id='info_id'>";
            cnt += "<div id='infocnt' style='margin:0px;padding:.5em 0.75em;width:auto;min-height:40px;overflow:auto;position:relative;height:" + dh + ";" + cn + "'>" + content + "</div>";
            cnt += c_b ? "<div class='ui-widget-content ui-helper-clearfix' style='text-align:" + mopt.buttonalign + ";padding-bottom:0.8em;padding-top:0.5em;background-image: none;border-width: 1px 0 0 0;'><a id='closedialog' class='fm-button ui-state-default ui-corner-all'>" + c_b + "</a>" + buttstr + "</div>" : buttstr !== "" ? "<div class='ui-widget-content ui-helper-clearfix' style='text-align:" + mopt.buttonalign + ";padding-bottom:0.8em;padding-top:0.5em;background-image: none;border-width: 1px 0 0 0;'>" + buttstr + "</div>" : "";
            cnt += "</div>";

            try {
                if ($("#info_dialog").attr("aria-hidden") === "false") {
                    $.jgrid.hideModal("#info_dialog", {
                        jqm: jm
                    });
                }
                $("#info_dialog").remove();
            } catch (e) {
            }
            $.jgrid.createModal({
                themodal: 'info_dialog',
                modalhead: 'info_head',
                modalcontent: 'info_content',
                scrollelm: 'infocnt'
            }, cnt, mopt, '', '', true);
            // attach onclick after inserting into the dom
            if (buttstr) {
                $.each(mopt.buttons, function (i) {
                    $("#" + $.jgrid.jqID(this.id), "#info_id").bind('click', function () {
                        mopt.buttons[i].onClick.call($("#info_dialog"));
                        return false;
                    });
                });
            }
            $("#closedialog", "#info_id").click(function () {
                self.hideModal("#info_dialog", {
                    jqm: jm,
                    onClose: $("#info_dialog").data("onClose") || mopt.onClose,
                    gb: $("#info_dialog").data("gbox") || mopt.gbox
                });
                return false;
            });
            $(".fm-button", "#info_dialog").hover(
                    function () {
                        $(this).addClass('ui-state-hover');
                    }, function () {
                $(this).removeClass('ui-state-hover');
            });
            if ($.isFunction(mopt.beforeOpen)) {
                mopt.beforeOpen();
            }
            $.jgrid.viewModal("#info_dialog", {
                onHide: function (h) {
                    h.w.hide().remove();
                    if (h.o) {
                        h.o.remove();
                    }
                },
                modal: mopt.modal,
                jqm: jm
            });
            if ($.isFunction(mopt.afterOpen)) {
                mopt.afterOpen();
            }
            try {
                $("#info_dialog").focus();
            } catch (m) {
            }
        },
        bindEv: function (el, opt) {
            var $t = this;
            if ($.isFunction(opt.dataInit)) {
                opt.dataInit.call($t, el, opt);
            } else if (opt.checkFunc && opt.checkFunc === true && $.isFunction(window[opt.dataInit])) {
                window[opt.dataInit].call($t, el, opt);
            }
            if (opt.dataEvents) {
                $.each(opt.dataEvents, function () {
                    if (this.data !== undefined) {
                        $(el).bind(this.type, this.data, this.fn);
                    } else {
                        $(el).bind(this.type, this.fn);
                    }
                });
            }
        },
        // Form Functions
        createEl: function (eltype, options, vl, autowidth, ajaxso, elerow) {
            var elem = "",
                    $t = this;
            // HB Customization << Start


            function bindEv(el, opt) {
                if ($.isFunction(opt.dataInit)) {
                    opt.dataInit.call($t, el, options);
                } else if (opt.checkFunc && opt.checkFunc === true && $.isFunction(window[opt.dataInit])) {
                    window[opt.dataInit].call($t, el, opt);
                }
                if (opt.dataEvents) {
                    $.each(opt.dataEvents, function () {
                        if (this.data !== undefined) {
                            $(el).bind(this.type, this.data, this.fn);
                        } else {
                            $(el).bind(this.type, this.fn);
                        }
                    });
                }
                return opt;
            }
            // HB Customization >> End


            function setAttributes(elm, atr, exl) {
                var exclude = ['dataInit', 'dataEvents', 'dataUrl', 'buildSelect', 'sopt', 'searchhidden', 'defaultValue', 'attr', 'custom_element', 'custom_value'];
                if (exl !== undefined && $.isArray(exl)) {
                    $.merge(exclude, exl);
                }
                $.each(atr, function (key, value) {
                    if ($.inArray(key, exclude) === -1) {
                        $(elm).attr(key, value);
                    }
                });
                if (!atr.hasOwnProperty('id')) {
                    $(elm).attr('id', $.jgrid.randId());
                }
            }
            switch (eltype) {
                case "textarea":
                    elem = document.createElement("textarea");
                    if (autowidth) {
                        if (!options.cols) {
                            $(elem).css({
                                width: "98%"
                            });
                        }
                    } else if (!options.cols) {
                        options.cols = 20;
                    }
                    if (!options.rows) {
                        options.rows = 2;
                    }
                    if (vl === '&nbsp;' || vl === '&#160;' || (vl.length === 1 && vl.charCodeAt(0) === 160)) {
                        vl = "";
                    }
                    elem.value = vl;
                    setAttributes(elem, options);
                    // HB Customization
                    options = bindEv(elem, options);
                    $(elem).attr({
                        "role": "textbox",
                        "multiline": "true"
                    });
                    break;
                case "checkbox":
                    //what code for simple checkbox
                    elem = document.createElement("input");
                    elem.type = "checkbox";
                    if (!options.value) {
                        var vl1 = (vl + "").toLowerCase();
                        if (vl1.search(/(false|f|0|no|n|off|undefined)/i) < 0 && vl1 !== "") {
                            elem.checked = true;
                            elem.defaultChecked = true;
                            elem.value = vl;
                        } else {
                            elem.value = "on";
                        }
                        $(elem).attr("offval", "off");
                    } else {
                        var cbval = options.value.split(":");
                        if (vl === cbval[0]) {
                            elem.checked = true;
                            elem.defaultChecked = true;
                        }
                        elem.value = cbval[0];
                        $(elem).attr("offval", cbval[1]);
                    }
                    setAttributes(elem, options, ['value']);
                    // HB Customization
                    options = bindEv(elem, options);
                    $(elem).attr("role", "checkbox");
                    break;
                case "select":
                    elem = document.createElement("select");
                    elem.setAttribute("role", "select");
                    var msl, ovm = [];
                    if (options.multiple === true) {
                        msl = true;
                        elem.multiple = "multiple";
                        $(elem).attr("aria-multiselectable", "true");
                    } else {
                        msl = false;
                    }
                    if (options.dataUrl) {
                        var rowid = options.name ? String(options.id).substring(0, String(options.id).length - String(options.name).length - 1) : String(options.id),
                                postData = options.postData || ajaxso.postData;

                        if ($t.p && $t.p.idPrefix) {
                            rowid = $.jgrid.stripPref($t.p.idPrefix, rowid);
                        }
                        // HB Customization << Start
                        var remotedropUrl = options.dataUrl;
                        if (elerow && elerow.id > 0) {
                            remotedropUrl += "&id=" + elerow.id;
                        }
                        // HB Customization >> End
                        $.ajax($.extend({
                            url: $.isFunction(options.dataUrl) ? options.dataUrl.call($t, rowid, vl, String(options.name)) : remotedropUrl,
                            type: "GET",
                            dataType: "html",
                            data: $.isFunction(postData) ? postData.call($t, rowid, vl, String(options.name)) : postData,
                            context: {
                                elem: elem,
                                options: options,
                                vl: vl
                            },
                            success: function (data) {
                                var ovm = [],
                                        elem = this.elem,
                                        vl = this.vl,
                                        options = $.extend({}, this.options),
                                        msl = options.multiple === true,
                                        a = $.isFunction(options.buildSelect) ? options.buildSelect.call($t, data) : data;
                                if (typeof a === 'string') {
                                    a = $($.trim(a)).html();
                                }
                                if (a) {
                                    $(elem).append(a);
                                    // HB Customization << Start
                                    if ($(data).attr("aria-ajax-call") == "Yes") {
                                        $(elem).attr("aria-ajax-call", $(data).attr("aria-ajax-call"));
                                        $(elem).attr("aria-ajax-field", $(data).attr("aria-ajax-field"));
                                    }
                                    // HB Customization >> End
                                    setAttributes(elem, options, postData ? ['postData'] : undefined);
                                    // HB Customization
                                    options = bindEv(elem, options);
                                    if (options.size === undefined) {
                                        options.size = msl ? 3 : 1;
                                    }
                                    if (msl) {
                                        // HB Customization
                                        ovm = (typeof vl === 'string') ? vl.split(",") : vl;
                                        if ($.isArray(ovm)) {
                                            ovm = $.map(ovm, function (n) {
                                                return $.trim(n);
                                            });
                                        }
                                    } else {
                                        ovm[0] = $.trim(vl);
                                    }
                                    //$(elem).attr(options);
                                    setTimeout(function () {
                                        $("option", elem).each(function (i) {
                                            //if(i===0) { this.selected = ""; }
                                            // fix IE8/IE7 problem with selecting of the first item on multiple=true
                                            if (i === 0 && elem.multiple) {
                                                this.selected = false;
                                            }
                                            $(this).attr("role", "option");
                                            if ($.inArray($.trim($(this).text()), ovm) > -1 || $.inArray($.trim($(this).val()), ovm) > -1) {
                                                this.selected = "selected";
                                            }
                                        });
                                        // HB Customization << Start
                                        if (elerow && elerow.id) {
                                            $(elem).trigger("chosen:updated");
                                            $('#' + $(elem).attr("id") + '_chosen').trigger('mousedown');
                                            $('#' + $(elem).attr("id") + '_chosen').find("input[type='text']").focus();
                                        } else {
                                            if ($(elem).attr("aria-default-val")) {
                                                $(elem).val($(elem).attr("aria-default-val"));
                                            }
                                            $(elem).trigger("chosen:updated");
                                        }
                                        // HB Customization >> End
                                    }, 0);
                                }
                            }
                        }, ajaxso || {}));
                    } else if (options.value) {
                        var i;
                        if (options.size === undefined) {
                            options.size = msl ? 3 : 1;
                        }
                        if (msl) {
                            // HB Customization
                            ovm = (typeof vl === 'string') ? vl.split(",") : vl;
                            if ($.isArray(ovm)) {
                                ovm = $.map(ovm, function (n) {
                                    return $.trim(n);
                                });
                            }
                        }
                        if (typeof options.value === 'function') {
                            options.value = options.value();
                        }
                        var so, sv, ov, sep = options.separator === undefined ? ":" : options.separator,
                                delim = options.delimiter === undefined ? ";" : options.delimiter;
                        if (typeof options.value === 'string') {
                            so = options.value.split(delim);
                            for (i = 0; i < so.length; i++) {
                                sv = so[i].split(sep);
                                if (sv.length > 2) {
                                    sv[1] = $.map(sv, function (n, ii) {
                                        if (ii > 0) {
                                            return n;
                                        }
                                    }).join(sep);
                                }
                                ov = document.createElement("option");
                                ov.setAttribute("role", "option");
                                ov.value = sv[0];
                                ov.innerHTML = sv[1];
                                elem.appendChild(ov);
                                if (!msl && ($.trim(sv[0]) === $.trim(vl) || $.trim(sv[1]) === $.trim(vl))) {
                                    ov.selected = "selected";
                                }
                                if (msl && ($.inArray($.trim(sv[1]), ovm) > -1 || $.inArray($.trim(sv[0]), ovm) > -1)) {
                                    ov.selected = "selected";
                                }
                            }
                        } else if (typeof options.value === 'object') {
                            var oSv = options.value,
                                    key;
                            for (key in oSv) {
                                if (oSv.hasOwnProperty(key)) {
                                    ov = document.createElement("option");
                                    ov.setAttribute("role", "option");
                                    ov.value = key;
                                    ov.innerHTML = oSv[key];
                                    elem.appendChild(ov);
                                    if (!msl && ($.trim(key) === $.trim(vl) || $.trim(oSv[key]) === $.trim(vl))) {
                                        ov.selected = "selected";
                                    }
                                    if (msl && ($.inArray($.trim(oSv[key]), ovm) > -1 || $.inArray($.trim(key), ovm) > -1)) {
                                        ov.selected = "selected";
                                    }
                                }
                            }
                        }
                        setAttributes(elem, options, ['value']);
                        // HB Customization
                        //options = bindEv(elem, options);
                    }
                    break;
                case "text":
                case "password":
                case "button":
                    var role;
                    if (eltype === "button") {
                        role = "button";
                    } else {
                        role = "textbox";
                    }
                    elem = document.createElement("input");
                    elem.type = eltype;
                    elem.value = vl;
                    setAttributes(elem, options);
                    // HB Customization
                    options = bindEv(elem, options);
                    if (eltype !== "button") {
                        if (autowidth) {
                            if (!options.size) {
                                $(elem).css({
                                    width: "98%"
                                });
                            }
                        } else if (!options.size) {
                            options.size = 20;
                        }
                    }
                    $(elem).attr("role", role);
                    break;
                case "image":
                case "file":
                    elem = document.createElement("input");
                    elem.type = eltype;
                    setAttributes(elem, options);
                    // HB Customization
                    options = bindEv(elem, options);
                    break;
                case "custom":
                    elem = document.createElement("span");
                    try {
                        if ($.isFunction(options.custom_element)) {
                            var celm = options.custom_element.call($t, vl, options);
                            if (celm) {
                                celm = $(celm).addClass("customelement").attr({
                                    id: options.id,
                                    name: options.name
                                });
                                $(elem).empty().append(celm);
                            } else {
                                throw "e2";
                            }
                        } else {
                            throw "e1";
                        }
                    } catch (e) {
                        if (e === "e1") {
                            $.jgrid.info_dialog($.jgrid.errors.errcap, "function 'custom_element' " + $.jgrid.edit.msg.nodefined, $.jgrid.edit.bClose);
                        }
                        if (e === "e2") {
                            $.jgrid.info_dialog($.jgrid.errors.errcap, "function 'custom_element' " + $.jgrid.edit.msg.novalue, $.jgrid.edit.bClose);
                        } else {
                            $.jgrid.info_dialog($.jgrid.errors.errcap, typeof e === "string" ? e : e.message, $.jgrid.edit.bClose);
                        }
                    }
                    break;
            }
            return elem;
        },
        // Date Validation Javascript
        checkDate: function (format, date) {
            var daysInFebruary = function (year) {
                // February has 29 days in any year evenly divisible by four,
                // EXCEPT for centurial years which are not also divisible by 400.
                return (((year % 4 === 0) && (year % 100 !== 0 || (year % 400 === 0))) ? 29 : 28);
            },
                    tsp = {},
                    sep;
            format = format.toLowerCase();
            //we search for /,-,. for the date separator
            if (format.indexOf("/") !== -1) {
                sep = "/";
            } else if (format.indexOf("-") !== -1) {
                sep = "-";
            } else if (format.indexOf(".") !== -1) {
                sep = ".";
            } else {
                sep = "/";
            }
            format = format.split(sep);
            date = date.split(sep);
            if (date.length !== 3) {
                return false;
            }
            var j = -1,
                    yln, dln = -1,
                    mln = -1,
                    i;
            for (i = 0; i < format.length; i++) {
                var dv = isNaN(date[i]) ? 0 : parseInt(date[i], 10);
                tsp[format[i]] = dv;
                yln = format[i];
                if (yln.indexOf("y") !== -1) {
                    j = i;
                }
                if (yln.indexOf("m") !== -1) {
                    mln = i;
                }
                if (yln.indexOf("d") !== -1) {
                    dln = i;
                }
            }
            if (format[j] === "y" || format[j] === "yyyy") {
                yln = 4;
            } else if (format[j] === "yy") {
                yln = 2;
            } else {
                yln = -1;
            }
            var daysInMonth = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
                    strDate;
            if (j === -1) {
                return false;
            }
            strDate = tsp[format[j]].toString();
            if (yln === 2 && strDate.length === 1) {
                yln = 1;
            }
            if (strDate.length !== yln || (tsp[format[j]] === 0 && date[j] !== "00")) {
                return false;
            }
            if (mln === -1) {
                return false;
            }
            strDate = tsp[format[mln]].toString();
            if (strDate.length < 1 || tsp[format[mln]] < 1 || tsp[format[mln]] > 12) {
                return false;
            }
            if (dln === -1) {
                return false;
            }
            strDate = tsp[format[dln]].toString();
            if (strDate.length < 1 || tsp[format[dln]] < 1 || tsp[format[dln]] > 31 || (tsp[format[mln]] === 2 && tsp[format[dln]] > daysInFebruary(tsp[format[j]])) || tsp[format[dln]] > daysInMonth[tsp[format[mln]]]) {
                return false;
            }
            return true;
        },
        isEmpty: function (val) {
            if (val.match(/^\s+$/) || val === "") {
                return true;
            }
            return false;
        },
        checkTime: function (time) {
            // checks only hh:ss (and optional am/pm)
            var re = /^(\d{1,2}):(\d{2})([apAP][Mm])?$/,
                    regs;
            if (!$.jgrid.isEmpty(time)) {
                regs = time.match(re);
                if (regs) {
                    if (regs[3]) {
                        if (regs[1] < 1 || regs[1] > 12) {
                            return false;
                        }
                    } else {
                        if (regs[1] > 23) {
                            return false;
                        }
                    }
                    if (regs[2] > 59) {
                        return false;
                    }
                } else {
                    return false;
                }
            }
            return true;
        },
        checkValues: function (val, valref, customobject, nam) {
            var edtrul, i, nm, dft, len, g = this,
                    cm = g.p.colModel;
            if (customobject === undefined) {
                if (typeof valref === 'string') {
                    for (i = 0, len = cm.length; i < len; i++) {
                        if (cm[i].name === valref) {
                            edtrul = cm[i].editrules;
                            valref = i;
                            if (cm[i].formoptions != null) {
                                nm = cm[i].formoptions.label;
                            }
                            break;
                        }
                    }
                } else if (valref >= 0) {
                    edtrul = cm[valref].editrules;
                }
            } else {
                edtrul = customobject;
                nm = nam === undefined ? "_" : nam;
            }
            if (edtrul) {
                if (!nm) {
                    nm = g.p.colNames != null ? g.p.colNames[valref] : cm[valref].label;
                }
                if (edtrul.required === true) {
                    if ($.jgrid.isEmpty(val)) {
                        // HB Customization << Start
                        if (edtrul.infoArr.required.message) {
                            return [false, nm + ": " + edtrul.infoArr.required.message, ""];
                        } else {
                            return [false, nm + ": " + $.jgrid.edit.msg.required, ""];
                        }
                        // HB Customization >> End
                    }
                }
                // force required
                var rqfield = edtrul.required === false ? false : true;
                if (edtrul.number === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        if (isNaN(val)) {
                            // HB Customization << Start
                            if (edtrul.infoArr.number.message) {
                                return [false, nm + ": " + edtrul.infoArr.number.message, ""];
                            } else {
                                return [false, nm + ": " + $.jgrid.edit.msg.number, ""];
                            }
                            // HB Customization >> End
                        }
                    }
                }
                if (edtrul.minValue !== undefined && !isNaN(edtrul.minValue)) {
                    if (parseFloat(val) < parseFloat(edtrul.minValue)) {
                        // HB Customization << Start
                        if (edtrul.infoArr.minValue.message) {
                            return [false, nm + ": " + edtrul.infoArr.minValue.message, ""];
                        } else {
                            return [false, nm + ": " + $.jgrid.edit.msg.minValue + " " + edtrul.minValue, ""];
                        }
                        // HB Customization >> End
                    }
                }
                if (edtrul.maxValue !== undefined && !isNaN(edtrul.maxValue)) {
                    if (parseFloat(val) > parseFloat(edtrul.maxValue)) {
                        // HB Customization << Start
                        if (edtrul.infoArr.maxValue.message) {
                            return [false, nm + ": " + edtrul.infoArr.maxValue.message, ""];
                        } else {
                            return [false, nm + ": " + $.jgrid.edit.msg.maxValue + " " + edtrul.maxValue, ""];
                        }
                        // HB Customization >> End
                    }
                }
                var filter;
                if (edtrul.email === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        // taken from $ Validate plugin
                        filter = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i;
                        if (!filter.test(val)) {
                            // HB Customization << Start
                            if (edtrul.infoArr.email.message) {
                                return [false, nm + ": " + edtrul.infoArr.email.message, ""];
                            } else {
                                return [false, nm + ": " + $.jgrid.edit.msg.email, ""];
                            }
                            // HB Customization >> End
                        }
                    }
                }
                // HB Customization << Start
                if (edtrul.range === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        // taken from $ Validate plugin
                        if (parseFloat(val) < parseFloat(edtrul.infoArr.range.lrange) || parseFloat(val) > parseFloat(edtrul.infoArr.range.hrange)) {
                            if (edtrul.infoArr.range.message) {
                                return [false, nm + ": " + edtrul.infoArr.range.message, ""];
                            } else {
                                return [false, nm + ": " + 'Range is from ' + edtrul.infoArr.range.lrange + ' to ' + edtrul.infoArr.range.hrange, ""];
                            }
                        }
                    }
                }
                if (edtrul.minlength === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        // taken from $ Validate plugin
                        len = val.length;
                        if (parseFloat(len) < parseFloat(edtrul.infoArr.minlength.minvalue)) {
                            if (edtrul.infoArr.minlength.message) {
                                return [false, nm + ": " + edtrul.infoArr.minlength.message, ""];
                            } else {
                                return [false, nm + ": " + 'Minimum limit is ' + edtrul.infoArr.minlength.minvalue, ""];
                            }
                        }
                    }
                }
                if (edtrul.maxlength === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        // taken from $ Validate plugin
                        len = val.length;
                        if (parseFloat(len) > parseFloat(edtrul.infoArr.maxlength.maxvalue)) {
                            if (edtrul.infoArr.maxlength.message) {
                                return [false, nm + ": " + edtrul.infoArr.maxlength.message, ""];
                            } else {
                                return [false, nm + ": " + 'Maximum limit is ' + edtrul.infoArr.maxlength.maxvalue, ""];
                            }
                        }
                    }
                }
                if (edtrul.rangelength === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        // taken from $ Validate plugin
                        len = val.length;
                        if (parseFloat(len) < parseFloat(edtrul.infoArr.rangelength.lrange) || parseFloat(len) > parseFloat(edtrul.infoArr.rangelength.hrange)) {
                            if (edtrul.infoArr.rangelength.message) {
                                return [false, nm + ": " + edtrul.infoArr.rangelength.message, ""];
                            } else {
                                return [false, nm + ": " + 'Range length is from ' + edtrul.infoArr.rangelength.lrange + ' to ' + edtrul.infoArr.rangelength.hrange, ""];
                            }
                        }
                    }
                }
                if (edtrul.alpha_with_spaces === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        // taken from $ Validate plugin
                        filter = eval(edtrul.infoArr.alpha_with_spaces.value);
                        if (!filter.test(val)) {
                            return [false, nm + ": " + edtrul.infoArr.alpha_with_spaces.message, ""];
                        }
                    }
                }
                if (edtrul.alpha_without_spaces === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        // taken from $ Validate plugin
                        filter = eval(edtrul.infoArr.alpha_without_spaces.value);
                        if (!filter.test(val)) {
                            return [false, nm + ": " + edtrul.infoArr.alpha_without_spaces.message, ""];
                        }
                    }
                }
                if (edtrul.alpha_numeric_with_spaces === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        // taken from $ Validate plugin
                        filter = eval(edtrul.infoArr.alpha_numeric_with_spaces.value);
                        if (!filter.test(val)) {
                            return [false, nm + ": " + edtrul.infoArr.alpha_numeric_with_spaces.message, ""];
                        }
                    }
                }
                if (edtrul.alpha_numeric_without_spaces === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        // taken from $ Validate plugin
                        filter = eval(edtrul.infoArr.alpha_numeric_without_spaces.value);
                        if (!filter.test(val)) {
                            return [false, nm + ": " + edtrul.infoArr.alpha_numeric_without_spaces.message, ""];
                        }
                    }
                }
                if (edtrul.zip_code === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        // taken from $ Validate plugin
                        filter = eval(edtrul.infoArr.zip_code.value);
                        if (!filter.test(val)) {
                            return [false, nm + ": " + edtrul.infoArr.zip_code.message, ""];
                        }
                    }
                }
                if (edtrul.regex === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        // taken from $ Validate plugin
                        filter = eval(edtrul.value);
                        if (!filter.test(val)) {
                            return [false, nm + ": " + edtrul.message, ""];
                        }
                    }
                }
                // HB Customization >> End
                if (edtrul.integer === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        if (isNaN(val)) {
                            // HB Customization << Start
                            if (edtrul.infoArr.integer.message) {
                                return [false, nm + ": " + edtrul.infoArr.integer.message, ""];
                            } else {
                                return [false, nm + ": " + $.jgrid.edit.msg.integer, ""];
                            }
                            // HB Customization >> End
                        }
                        if ((val % 1 !== 0) || (val.indexOf('.') !== -1)) {
                            // HB Customization << Start
                            if (edtrul.infoArr.integer.message) {
                                return [false, nm + ": " + edtrul.infoArr.integer.message, ""];
                            } else {
                                return [false, nm + ": " + $.jgrid.edit.msg.integer, ""];
                            }
                            // HB Customization >> End
                        }
                    }
                }
                if (edtrul.date === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        if (cm[valref].formatoptions && cm[valref].formatoptions.newformat) {
                            dft = cm[valref].formatoptions.newformat;
                            if ($.jgrid.formatter.date.masks.hasOwnProperty(dft)) {
                                dft = $.jgrid.formatter.date.masks[dft];
                            }
                        } else {
                            dft = cm[valref].datefmt || "Y-m-d";
                        }
                        if (!$.jgrid.checkDate(dft, val)) {
                            // HB Customization << Start
                            if (edtrul.infoArr.date.message) {
                                return [false, nm + ": " + edtrul.infoArr.date.message, ""];
                            } else {
                                return [false, nm + ": " + $.jgrid.edit.msg.date + " - " + dft, ""];
                            }
                            // HB Customization >> End
                        }
                    }
                }
                if (edtrul.time === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        if (!$.jgrid.checkTime(val)) {
                            // HB Customization << Start
                            if (edtrul.infoArr.time.message) {
                                return [false, nm + ": " + edtrul.infoArr.time.message, ""];
                            } else {
                                return [false, nm + ": " + $.jgrid.edit.msg.date + " - hh:mm (am/pm)", ""];
                            }
                            // HB Customization >> End
                        }
                    }
                }
                if (edtrul.url === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        filter = /^(((https?)|(ftp)):\/\/([\-\w]+\.)+\w{2,3}(\/[%\-\w]+(\.\w{2,})?)*(([\w\-\.\?\\\/+@&#;`~=%!]*)(\.\w{2,})?)*\/?)/i;
                        if (!filter.test(val)) {
                            // HB Customization << Start
                            if (edtrul.infoArr.url.message) {
                                return [false, nm + ": " + edtrul.infoArr.url.message, ""];
                            } else {
                                return [false, nm + ": " + $.jgrid.edit.msg.url, ""];
                            }
                            // HB Customization >> End
                        }
                    }
                }
                if (edtrul.custom === true) {
                    if (!(rqfield === false && $.jgrid.isEmpty(val))) {
                        if ($.isFunction(edtrul.custom_func)) {
                            var ret = edtrul.custom_func.call(g, val, nm, valref);
                            return $.isArray(ret) ? ret : [false, $.jgrid.edit.msg.customarray, ""];
                        }
                        return [false, $.jgrid.edit.msg.customfcheck, ""];
                    }
                }
            }
            return [true, "", ""];
        }
    });
})(jQuery);
/*
 * jqFilter  jQuery jqGrid filter addon.
 * Copyright (c) 2011, Tony Tomov, tony@trirand.com
 * Dual licensed under the MIT and GPL licenses
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl-2.0.html
 * 
 * The work is inspired from this Stefan Pirvu
 * http://www.codeproject.com/KB/scripting/json-filtering.aspx
 *
 * The filter uses JSON entities to hold filter rules and groups. Here is an example of a filter:
 
 { "groupOp": "AND",
 "groups" : [ 
 { "groupOp": "OR",
 "rules": [
 { "field": "name", "op": "eq", "data": "England" }, 
 { "field": "id", "op": "le", "data": "5"}
 ]
 } 
 ],
 "rules": [
 { "field": "name", "op": "eq", "data": "Romania" }, 
 { "field": "id", "op": "le", "data": "1"}
 ]
 }
 */
/*jshint eqeqeq:false, eqnull:true, devel:true */
/*global jQuery */

(function ($) {
    "use strict";

    $.fn.jqFilter = function (arg) {
        if (typeof arg === 'string') {

            var fn = $.fn.jqFilter[arg];
            if (!fn) {
                throw ("jqFilter - No such method: " + arg);
            }
            var args = $.makeArray(arguments).slice(1);
            return fn.apply(this, args);
        }

        var p = $.extend(true, {
            filter: null,
            columns: [],
            onChange: null,
            afterRedraw: null,
            checkValues: null,
            error: false,
            errmsg: "",
            errorcheck: true,
            showQuery: true,
            sopt: null,
            ops: [],
            operands: null,
            numopts: ['eq', 'ne', 'lt', 'le', 'gt', 'ge', 'nu', 'nn', 'in', 'ni'],
            stropts: ['eq', 'ne', 'bw', 'bn', 'ew', 'en', 'cn', 'nc', 'nu', 'nn', 'in', 'ni'],
            strarr: ['text', 'string', 'blob'],
            groupOps: [{
                    op: "AND",
                    text: "AND"
                }, {
                    op: "OR",
                    text: "OR"
                }],
            groupButton: true,
            ruleButtons: true,
            direction: "ltr"
        }, $.jgrid.filter, arg || {});
        return this.each(function () {
            if (this.filter) {
                return;
            }
            this.p = p;
            // setup filter in case if they is not defined
            if (this.p.filter === null || this.p.filter === undefined) {
                this.p.filter = {
                    groupOp: this.p.groupOps[0].op,
                    rules: [],
                    groups: []
                };
            }
            var i, len = this.p.columns.length,
                    cl, isIE = /msie/i.test(navigator.userAgent) && !window.opera;

            // translating the options
            this.p.initFilter = $.extend(true, {}, this.p.filter);

            // set default values for the columns if they are not set
            if (!len) {
                return;
            }
            for (i = 0; i < len; i++) {
                cl = this.p.columns[i];
                if (cl.stype) {
                    // grid compatibility
                    cl.inputtype = cl.stype;
                } else if (!cl.inputtype) {
                    cl.inputtype = 'text';
                }
                if (cl.sorttype) {
                    // grid compatibility
                    cl.searchtype = cl.sorttype;
                } else if (!cl.searchtype) {
                    cl.searchtype = 'string';
                }
                if (cl.hidden === undefined) {
                    // jqGrid compatibility
                    cl.hidden = false;
                }
                if (!cl.label) {
                    cl.label = cl.name;
                }
                if (cl.index) {
                    cl.name = cl.index;
                }
                if (!cl.hasOwnProperty('searchoptions')) {
                    cl.searchoptions = {};
                }
                if (!cl.hasOwnProperty('searchrules')) {
                    cl.searchrules = {};
                }

            }
            if (this.p.showQuery) {
                $(this).append("<table class='queryresult ui-widget ui-widget-content' style='display:block;max-width:440px;border:0px none;' dir='" + this.p.direction + "'><tbody><tr><td class='query'></td></tr></tbody></table>");
            }
            var getGrid = function () {
                return $("#" + $.jgrid.jqID(p.id))[0] || null;
            };
            /*
             *Perform checking.
             *
             */
            var checkData = function (val, colModelItem) {
                var ret = [true, ""],
                        $t = getGrid();
                if ($.isFunction(colModelItem.searchrules)) {
                    ret = colModelItem.searchrules.call($t, val, colModelItem);
                } else if ($.jgrid && $.jgrid.checkValues) {
                    try {
                        ret = $.jgrid.checkValues.call($t, val, -1, colModelItem.searchrules, colModelItem.label);
                    } catch (e) {
                    }
                }
                if (ret && ret.length && ret[0] === false) {
                    p.error = !ret[0];
                    p.errmsg = ret[1];
                }
            };
            /* moving to common
             randId = function() {
             return Math.floor(Math.random()*10000).toString();
             };
             */

            this.onchange = function () {
                // clear any error 
                this.p.error = false;
                this.p.errmsg = "";
                return $.isFunction(this.p.onChange) ? this.p.onChange.call(this, this.p) : false;
            };
            /*
             * Redraw the filter every time when new field is added/deleted
             * and field is  changed
             */
            this.reDraw = function () {
                $("table.group:first", this).remove();
                var t = this.createTableForGroup(p.filter, null);
                $(this).append(t);
                if ($.isFunction(this.p.afterRedraw)) {
                    this.p.afterRedraw.call(this, this.p);
                }
            };
            /*
             * Creates a grouping data for the filter
             * @param group - object
             * @param parentgroup - object
             */
            this.createTableForGroup = function (group, parentgroup) {
                var that = this,
                        i;
                // this table will hold all the group (tables) and rules (rows)
                var table = $("<table class='group ui-widget ui-widget-content adv-search-tbl' style='border:0px none;' width='100%' cellpadding='1' cellspacing='2'><tbody></tbody></table>"),
                        // create error message row
                        align = "left";
                if (this.p.direction === "rtl") {
                    align = "right";
                    table.attr("dir", "rtl");
                }
                if (parentgroup === null) {
                    table.append("<tr class='error' style='display:none;'><th colspan='5' class='ui-state-error' align='" + align + "'></th></tr>");
                }
                // HB Customization
                var tr = $("<tr><th></th></tr>");
                table.append(tr);
                // this header will hold the group operator type and group action buttons for
                // creating subgroup "+ {}", creating rule "+" or deleting the group "-"
                var th = $("<th colspan='5' align='" + align + "'></th>");
                tr.append(th);

                if (this.p.ruleButtons === true) {
                    // dropdown for: choosing group operator type
                    var groupOpSelect = $("<select class='opsel'></select>");
                    th.append(groupOpSelect);
                    // populate dropdown with all posible group operators: or, and
                    var str = "",
                            selected;
                    for (i = 0; i < p.groupOps.length; i++) {
                        selected = group.groupOp === that.p.groupOps[i].op ? " selected='selected'" : "";
                        str += "<option value='" + that.p.groupOps[i].op + "'" + selected + ">" + that.p.groupOps[i].text + "</option>";
                    }

                    groupOpSelect.append(str).bind('change', function () {
                        group.groupOp = $(groupOpSelect).val();
                        that.onchange(); // signals that the filter has changed
                    });
                }
                // button for adding a new subgroup
                var inputAddSubgroup = "<span></span>";
                if (this.p.groupButton) {
                    inputAddSubgroup = $("<input type='button' value='+ {}' title='Add subgroup' class='add-group'/>");
                    inputAddSubgroup.bind('click', function () {
                        if (group.groups === undefined) {
                            group.groups = [];
                        }

                        group.groups.push({
                            groupOp: p.groupOps[0].op,
                            rules: [],
                            groups: []
                        }); // adding a new group
                        that.reDraw(); // the html has changed, force reDraw
                        that.onchange(); // signals that the filter has changed
                        return false;
                    });
                }
                th.append(inputAddSubgroup);
                if (this.p.ruleButtons === true) {
                    // button for adding a new rule
                    var inputAddRule = $("<input type='button' value='+' title='Add rule' class='add-rule ui-add'/>"),
                            cm;
                    inputAddRule.bind('click', function () {
                        //if(!group) { group = {};}
                        if (group.rules === undefined) {
                            group.rules = [];
                        }
                        for (i = 0; i < that.p.columns.length; i++) {
                            // but show only serchable and serchhidden = true fields
                            var searchable = (that.p.columns[i].search === undefined) ? true : that.p.columns[i].search,
                                    hidden = (that.p.columns[i].hidden === true),
                                    ignoreHiding = (that.p.columns[i].searchoptions.searchhidden === true);
                            if ((ignoreHiding && searchable) || (searchable && !hidden)) {
                                cm = that.p.columns[i];
                                break;
                            }
                        }
                        if (typeof cm === "undefined") {
                            $.jgrid.info_dialog($.jgrid.errors.errcap, "No search field found..!", $.jgrid.edit.bClose);
                            return false;
                        }

                        var opr;
                        if (cm.searchoptions.sopt) {
                            opr = cm.searchoptions.sopt;
                        } else if (that.p.sopt) {
                            opr = that.p.sopt;
                        } else if ($.inArray(cm.searchtype, that.p.strarr) !== -1) {
                            opr = that.p.stropts;
                        } else {
                            opr = that.p.numopts;
                        }

                        group.rules.push({
                            field: cm.name,
                            op: opr[0],
                            data: ""
                        }); // adding a new rule
                        that.reDraw(); // the html has changed, force reDraw
                        // for the moment no change have been made to the rule, so
                        // this will not trigger onchange event
                        return false;
                    });
                    th.append(inputAddRule);
                }

                // button for delete the group
                if (parentgroup !== null) { // ignore the first group
                    var inputDeleteGroup = $("<input type='button' value='-' title='Delete group' class='delete-group'/>");
                    th.append(inputDeleteGroup);
                    inputDeleteGroup.bind('click', function () {
                        // remove group from parent
                        for (i = 0; i < parentgroup.groups.length; i++) {
                            if (parentgroup.groups[i] === group) {
                                parentgroup.groups.splice(i, 1);
                                break;
                            }
                        }

                        that.reDraw(); // the html has changed, force reDraw
                        that.onchange(); // signals that the filter has changed
                        return false;
                    });
                }

                // append subgroup rows
                if (group.groups !== undefined) {
                    for (i = 0; i < group.groups.length; i++) {
                        var trHolderForSubgroup = $("<tr></tr>");
                        table.append(trHolderForSubgroup);

                        var tdFirstHolderForSubgroup = $("<td class='first'></td>");
                        trHolderForSubgroup.append(tdFirstHolderForSubgroup);

                        var tdMainHolderForSubgroup = $("<td colspan='4'></td>");
                        tdMainHolderForSubgroup.append(this.createTableForGroup(group.groups[i], group));
                        trHolderForSubgroup.append(tdMainHolderForSubgroup);
                    }
                }
                if (group.groupOp === undefined) {
                    group.groupOp = that.p.groupOps[0].op;
                }

                // append rules rows
                if (group.rules !== undefined) {
                    for (i = 0; i < group.rules.length; i++) {
                        table.append(
                                this.createTableRowForRule(group.rules[i], group));
                    }
                }

                return table;
            };
            /*
             * Create the rule data for the filter
             */
            this.createTableRowForRule = function (rule, group) {
                // save current entity in a variable so that it could
                // be referenced in anonimous method calls
                var that = this,
                        $t = getGrid(),
                        tr = $("<tr></tr>"),
                        //document.createElement("tr"),
                        // first column used for padding
                        //tdFirstHolderForRule = document.createElement("td"),
                        i, op, trpar, cm, str = "",
                        selected;
                //tdFirstHolderForRule.setAttribute("class", "first");
                tr.append("<td class='first'></td>");


                // create field container
                var ruleFieldTd = $("<td class='columns'></td>");
                tr.append(ruleFieldTd);


                // dropdown for: choosing field
                var ruleFieldSelect = $("<select></select>"),
                        ina, aoprs = [];
                ruleFieldTd.append(ruleFieldSelect);
                ruleFieldSelect.bind('change', function () {
                    rule.field = $(ruleFieldSelect).val();

                    trpar = $(this).parents("tr:first");
                    for (i = 0; i < that.p.columns.length; i++) {
                        if (that.p.columns[i].name === rule.field) {
                            cm = that.p.columns[i];
                            break;
                        }
                    }
                    if (!cm) {
                        return;
                    }
                    cm.searchoptions.id = $.jgrid.randId();
                    if (isIE && cm.inputtype === "text") {
                        if (!cm.searchoptions.size) {
                            cm.searchoptions.size = 10;
                        }
                    }
                    var elm = $.jgrid.createEl.call($t, cm.inputtype, cm.searchoptions, "", true, that.p.ajaxSelectOptions || {}, true);
                    $(elm).addClass("input-elm");
                    //that.createElement(rule, "");
                    if (cm.searchoptions.sopt) {
                        op = cm.searchoptions.sopt;
                    } else if (that.p.sopt) {
                        op = that.p.sopt;
                    } else if ($.inArray(cm.searchtype, that.p.strarr) !== -1) {
                        op = that.p.stropts;
                    } else {
                        op = that.p.numopts;
                    }
                    // operators
                    var s = "",
                            so = 0;
                    aoprs = [];
                    $.each(that.p.ops, function () {
                        aoprs.push(this.oper);
                    });
                    for (i = 0; i < op.length; i++) {
                        ina = $.inArray(op[i], aoprs);
                        if (ina !== -1) {
                            if (so === 0) {
                                rule.op = that.p.ops[ina].oper;
                            }
                            s += "<option value='" + that.p.ops[ina].oper + "'>" + that.p.ops[ina].text + "</option>";
                            so++;
                        }
                    }
                    $(".selectopts", trpar).empty().append(s);
                    $(".selectopts", trpar)[0].selectedIndex = 0;
                    if ($.jgrid.msie && $.jgrid.msiever() < 9) {
                        var sw = parseInt($("select.selectopts", trpar)[0].offsetWidth, 10) + 1;
                        $(".selectopts", trpar).width(sw);
                        $(".selectopts", trpar).css("width", "auto");
                    }
                    // data
                    $(".data", trpar).empty().append(elm);
                    $.jgrid.bindEv.call($t, elm, cm.searchoptions);
                    $(".input-elm", trpar).bind('change', function (e) {
                        var tmo = $(this).hasClass("ui-autocomplete-input") ? 200 : 0;
                        setTimeout(function () {
                            var elem = e.target;
                            rule.data = elem.nodeName.toUpperCase() === "SPAN" && cm.searchoptions && $.isFunction(cm.searchoptions.custom_value) ? cm.searchoptions.custom_value.call($t, $(elem).children(".customelement:first"), 'get') : elem.value;
                            that.onchange(); // signals that the filter has changed
                        }, tmo);
                        // HB Customization << Start
                        setTimeout(function () { //IE, Opera, Chrome
                            rule.data = $(elm).val();
                            that.onchange(); // signals that the filter has changed
                        }, 0);
                        // HB Customization >> End
                    });
                });

                // populate drop down with user provided column definitions
                var j = 0;
                for (i = 0; i < that.p.columns.length; i++) {
                    // but show only serchable and serchhidden = true fields
                    var searchable = (that.p.columns[i].search === undefined) ? true : that.p.columns[i].search,
                            hidden = (that.p.columns[i].hidden === true),
                            ignoreHiding = (that.p.columns[i].searchoptions.searchhidden === true);
                    if ((ignoreHiding && searchable) || (searchable && !hidden)) {
                        selected = "";
                        if (rule.field === that.p.columns[i].name) {
                            selected = " selected='selected'";
                            j = i;
                        }
                        var searchlabel = (that.p.columns[i].labelSearch) ? that.p.columns[i].labelSearch : that.p.columns[i].label; //HB Customization
                        str += "<option value='" + that.p.columns[i].name + "'" + selected + ">" + searchlabel + "</option>";
                    }
                }
                ruleFieldSelect.append(str);


                // create operator container
                var ruleOperatorTd = $("<td class='operators'></td>");
                tr.append(ruleOperatorTd);
                cm = p.columns[j];
                // create it here so it can be referentiated in the onchange event
                //var RD = that.createElement(rule, rule.data);
                cm.searchoptions.id = $.jgrid.randId();
                if (isIE && cm.inputtype === "text") {
                    if (!cm.searchoptions.size) {
                        cm.searchoptions.size = 10;
                    }
                }
                var ruleDataInput = $.jgrid.createEl.call($t, cm.inputtype, cm.searchoptions, rule.data, true, that.p.ajaxSelectOptions || {}, true);
                if (rule.op === 'nu' || rule.op === 'nn') {
                    $(ruleDataInput).attr('readonly', 'true');
                    $(ruleDataInput).attr('disabled', 'true');
                } //retain the state of disabled text fields in case of null ops
                // dropdown for: choosing operator
                var ruleOperatorSelect = $("<select class='selectopts'></select>");
                ruleOperatorTd.append(ruleOperatorSelect);
                ruleOperatorSelect.bind('change', function () {
                    rule.op = $(ruleOperatorSelect).val();
                    trpar = $(this).parents("tr:first");
                    var rd = $(".input-elm", trpar)[0];
                    if (rule.op === "nu" || rule.op === "nn") { // disable for operator "is null" and "is not null"
                        rule.data = "";
                        if (rd.tagName.toUpperCase() !== 'SELECT')
                            rd.value = "";
                        rd.setAttribute("readonly", "true");
                        rd.setAttribute("disabled", "true");
                    } else {
                        if (rd.tagName.toUpperCase() === 'SELECT')
                            rule.data = rd.value;
                        rd.removeAttribute("readonly");
                        rd.removeAttribute("disabled");
                    }
                    //HB Customization << Start
                    if (rd.tagName.toUpperCase() === 'SELECT') {
                        $(rd).trigger("chosen:updated");
                    }
                    //HB Customization >> End

                    that.onchange(); // signals that the filter has changed
                });

                // populate drop down with all available operators
                if (cm.searchoptions.sopt) {
                    op = cm.searchoptions.sopt;
                } else if (that.p.sopt) {
                    op = that.p.sopt;
                } else if ($.inArray(cm.searchtype, that.p.strarr) !== -1) {
                    op = that.p.stropts;
                } else {
                    op = that.p.numopts;
                }
                str = "";
                $.each(that.p.ops, function () {
                    aoprs.push(this.oper);
                });
                for (i = 0; i < op.length; i++) {
                    ina = $.inArray(op[i], aoprs);
                    if (ina !== -1) {
                        selected = rule.op === that.p.ops[ina].oper ? " selected='selected'" : "";
                        str += "<option value='" + that.p.ops[ina].oper + "'" + selected + ">" + that.p.ops[ina].text + "</option>";
                    }
                }
                ruleOperatorSelect.append(str);
                // create data container
                var ruleDataTd = $("<td class='data'></td>");
                tr.append(ruleDataTd);

                // textbox for: data
                // is created previously
                //ruleDataInput.setAttribute("type", "text");
                ruleDataTd.append(ruleDataInput);
                // HB Customization << Start
                if (!cm.searchoptions.dataUrl) {
                    $.jgrid.bindEv.call($t, ruleDataInput, cm.searchoptions);
                }
                // HB Customization >> End
                $(ruleDataInput).addClass("input-elm").bind('change', function () {
                    rule.data = cm.inputtype === 'custom' ? cm.searchoptions.custom_value.call($t, $(this).children(".customelement:first"), 'get') : $(this).val();
                    that.onchange(); // signals that the filter has changed
                });

                // create action container
                var ruleDeleteTd = $("<td></td>");
                tr.append(ruleDeleteTd);

                // create button for: delete rule
                if (this.p.ruleButtons === true) {
                    var ruleDeleteInput = $("<input type='button' value='-' title='Delete rule' class='delete-rule ui-del'/>");
                    ruleDeleteTd.append(ruleDeleteInput);
                    //$(ruleDeleteInput).html("").height(20).width(30).button({icons: {  primary: "ui-icon-minus", text:false}});
                    ruleDeleteInput.bind('click', function () {
                        // remove rule from group
                        for (i = 0; i < group.rules.length; i++) {
                            if (group.rules[i] === rule) {
                                group.rules.splice(i, 1);
                                break;
                            }
                        }

                        that.reDraw(); // the html has changed, force reDraw
                        that.onchange(); // signals that the filter has changed
                        return false;
                    });
                }
                return tr;
            };

            this.getStringForGroup = function (group) {
                var s = "(",
                        index;
                if (group.groups !== undefined) {
                    for (index = 0; index < group.groups.length; index++) {
                        if (s.length > 1) {
                            s += " " + group.groupOp + " ";
                        }
                        try {
                            s += this.getStringForGroup(group.groups[index]);
                        } catch (eg) {
                            alert(eg);
                        }
                    }
                }

                if (group.rules !== undefined) {
                    try {
                        for (index = 0; index < group.rules.length; index++) {
                            if (s.length > 1) {
                                s += " " + group.groupOp + " ";
                            }
                            s += this.getStringForRule(group.rules[index]);
                        }
                    } catch (e) {
                        alert(e);
                    }
                }

                s += ")";

                if (s === "()") {
                    return ""; // ignore groups that don't have rules
                }
                return s;
            };
            this.getStringForRule = function (rule) {
                var opUF = "",
                        opC = "",
                        i, cm, ret, val, numtypes = ['int', 'integer', 'float', 'number', 'currency']; // jqGrid
                for (i = 0; i < this.p.ops.length; i++) {
                    if (this.p.ops[i].oper === rule.op) {
                        opUF = this.p.operands.hasOwnProperty(rule.op) ? this.p.operands[rule.op] : "";
                        opC = this.p.ops[i].oper;
                        break;
                    }
                }
                for (i = 0; i < this.p.columns.length; i++) {
                    if (this.p.columns[i].name === rule.field) {
                        cm = this.p.columns[i];
                        break;
                    }
                }
                if (cm == undefined) {
                    return "";
                }
                val = rule.data;
                if (opC === 'bw' || opC === 'bn') {
                    val = val + "%";
                }
                if (opC === 'ew' || opC === 'en') {
                    val = "%" + val;
                }
                if (opC === 'cn' || opC === 'nc') {
                    val = "%" + val + "%";
                }
                if (opC === 'in' || opC === 'ni') {
                    val = " (" + val + ")";
                }
                if (p.errorcheck) {
                    checkData(rule.data, cm);
                }
                if ($.inArray(cm.searchtype, numtypes) !== -1 || opC === 'nn' || opC === 'nu') {
                    ret = rule.field + " " + opUF + " " + val;
                } else {
                    ret = rule.field + " " + opUF + " \"" + val + "\"";
                }
                return ret;
            };
            this.resetFilter = function () {
                this.p.filter = $.extend(true, {}, this.p.initFilter);
                this.reDraw();
                this.onchange();
            };
            this.hideError = function () {
                $("th.ui-state-error", this).html("");
                $("tr.error", this).hide();
            };
            this.showError = function () {
                $("th.ui-state-error", this).html(this.p.errmsg);
                $("tr.error", this).show();
            };
            this.toUserFriendlyString = function () {
                return this.getStringForGroup(p.filter);
            };
            this.toString = function () {
                // this will obtain a string that can be used to match an item.
                var that = this;

                function getStringRule(rule) {
                    if (that.p.errorcheck) {
                        var i, cm;
                        for (i = 0; i < that.p.columns.length; i++) {
                            if (that.p.columns[i].name === rule.field) {
                                cm = that.p.columns[i];
                                break;
                            }
                        }
                        if (cm) {
                            checkData(rule.data, cm);
                        }
                    }
                    return rule.op + "(item." + rule.field + ",'" + rule.data + "')";
                }

                function getStringForGroup(group) {
                    var s = "(",
                            index;

                    if (group.groups !== undefined) {
                        for (index = 0; index < group.groups.length; index++) {
                            if (s.length > 1) {
                                if (group.groupOp === "OR") {
                                    s += " || ";
                                } else {
                                    s += " && ";
                                }
                            }
                            s += getStringForGroup(group.groups[index]);
                        }
                    }

                    if (group.rules !== undefined) {
                        for (index = 0; index < group.rules.length; index++) {
                            if (s.length > 1) {
                                if (group.groupOp === "OR") {
                                    s += " || ";
                                } else {
                                    s += " && ";
                                }
                            }
                            s += getStringRule(group.rules[index]);
                        }
                    }

                    s += ")";

                    if (s === "()") {
                        return ""; // ignore groups that don't have rules
                    }
                    return s;
                }

                return getStringForGroup(this.p.filter);
            };

            // Here we init the filter
            this.reDraw();

            if (this.p.showQuery) {
                this.onchange();
            }
            // mark is as created so that it will not be created twice on this element
            this.filter = true;
        });
    };
    $.extend($.fn.jqFilter, {
        /*
         * Return SQL like string. Can be used directly
         */
        toSQLString: function () {
            var s = "";
            this.each(function () {
                s = this.toUserFriendlyString();
            });
            return s;
        },
        /*
         * Return filter data as object.
         */
        filterData: function () {
            var s;
            this.each(function () {
                s = this.p.filter;
            });
            return s;

        },
        getParameter: function (param) {
            if (param !== undefined) {
                if (this.p.hasOwnProperty(param)) {
                    return this.p[param];
                }
            }
            return this.p;
        },
        resetFilter: function () {
            return this.each(function () {
                this.resetFilter();
            });
        },
        addFilter: function (pfilter) {
            if (typeof pfilter === "string") {
                pfilter = $.jgrid.parse(pfilter);
            }
            this.each(function () {
                this.p.filter = pfilter;
                this.reDraw();
                this.onchange();
            });
        }

    });
})(jQuery); /*jshint eqeqeq:false, eqnull:true, devel:true */
/*global xmlJsonClass, jQuery */
(function ($) {
    /**
     * jqGrid extension for form editing Grid Data
     * Tony Tomov tony@trirand.com
     * http://trirand.com/blog/
     * Dual licensed under the MIT and GPL licenses:
     * http://www.opensource.org/licenses/mit-license.php
     * http://www.gnu.org/licenses/gpl-2.0.html
     **/
    "use strict";
    var rp_ge = {};
    $.jgrid.extend({
        searchGrid: function (p) {
            p = $.extend(true, {
                recreateFilter: false,
                drag: true,
                sField: 'searchField',
                sValue: 'searchString',
                sOper: 'searchOper',
                sFilter: 'filters',
                loadDefaults: true,
                // this options activates loading of default filters from grid's postData for Multipe Search only.
                beforeShowSearch: null,
                afterShowSearch: null,
                onInitializeSearch: null,
                afterRedraw: null,
                afterChange: null,
                closeAfterSearch: false,
                closeAfterReset: false,
                closeOnEscape: false,
                searchOnEnter: false,
                multipleSearch: false,
                multipleGroup: false,
                //cloneSearchRowOnAdd: true,
                top: 0,
                left: 0,
                jqModal: true,
                modal: false,
                resize: true,
                width: 450,
                height: 'auto',
                dataheight: 'auto',
                showQuery: false,
                errorcheck: true,
                sopt: null,
                stringResult: undefined,
                onClose: null,
                onSearch: null,
                onReset: null,
                toTop: true,
                overlay: 30,
                columns: [],
                tmplNames: null,
                tmplFilters: null,
                tmplLabel: ' Template: ',
                showOnLoad: false,
                layer: null,
                operands: {
                    "eq": "=",
                    "ne": "<>",
                    "lt": "<",
                    "le": "<=",
                    "gt": ">",
                    "ge": ">=",
                    "bw": "LIKE",
                    "bn": "NOT LIKE",
                    "in": "IN",
                    "ni": "NOT IN",
                    "ew": "LIKE",
                    "en": "NOT LIKE",
                    "cn": "LIKE",
                    "nc": "NOT LIKE",
                    "nu": "IS NULL",
                    "nn": "ISNOT NULL"
                }
            }, $.jgrid.search, p || {});
            return this.each(function () {
                var $t = this;
                if (!$t.grid) {
                    return;
                }
                var fid = "fbox_" + $t.p.id,
                        showFrm = true,
                        mustReload = true,
                        IDs = {
                            themodal: 'searchmod' + fid,
                            modalhead: 'searchhd' + fid,
                            modalcontent: 'searchcnt' + fid,
                            scrollelm: fid
                        },
                defaultFilters = $t.p.postData[p.sFilter];
                if (typeof defaultFilters === "string") {
                    defaultFilters = $.jgrid.parse(defaultFilters);
                }
                if (p.recreateFilter === true) {
                    $("#" + $.jgrid.jqID(IDs.themodal)).remove();
                }

                function showFilter(_filter) {
                    showFrm = $($t).triggerHandler("jqGridFilterBeforeShow", [_filter]);
                    if (showFrm === undefined) {
                        showFrm = true;
                    }
                    if (showFrm && $.isFunction(p.beforeShowSearch)) {
                        showFrm = p.beforeShowSearch.call($t, _filter);
                    }
                    if (showFrm) {
                        $.jgrid.viewModal("#" + $.jgrid.jqID(IDs.themodal), {
                            gbox: "#gbox_" + $.jgrid.jqID(fid),
                            gid: $t.p.id, //HB Customization
                            jqm: p.jqModal,
                            modal: p.modal,
                            overlay: p.overlay,
                            toTop: p.toTop
                        });
                        $($t).triggerHandler("jqGridFilterAfterShow", [_filter]);
                        if ($.isFunction(p.afterShowSearch)) {
                            p.afterShowSearch.call($t, _filter);
                        }
                    }
                }
                if ($("#" + $.jgrid.jqID(IDs.themodal))[0] !== undefined) {
                    showFilter($("#fbox_" + $.jgrid.jqID(+$t.p.id)));
                } else {
                    // HB Customization << Start
                    var ad_search_ht = '';
                    if (p.height > 150) {
                        var preferred_ht = parseInt(p.height) - 90;
                        ad_search_ht = "height: " + preferred_ht + "px;";
                    }
                    var fil = $("<div><div id='" + fid + "' class='searchFilter' style='overflow:auto;" + ad_search_ht + "'></div></div>").insertBefore("#gview_" + $.jgrid.jqID($t.p.id)),
                            align = "left",
                            butleft = "";
                    // HB Customization >> End
                    if ($t.p.direction === "rtl") {
                        align = "right";
                        butleft = " style='text-align:left'";
                        fil.attr("dir", "rtl");
                    }
                    var columns = $.extend([], $t.p.colModel),
                            bS = "<a id='" + fid + "_search' class='fm-button ui-state-default ui-corner-all fm-button-icon-right ui-reset'><span class='ui-icon ui-icon-search'></span>" + p.Find + "</a>",
                            bC = "<a id='" + fid + "_reset' class='fm-button ui-state-default ui-corner-all fm-button-icon-left ui-search'><span class='ui-icon ui-icon-arrowreturnthick-1-w'></span>" + p.Reset + "</a>",
                            bQ = "",
                            tmpl = "",
                            colnm, found = false,
                            bt, cmi = -1;
                    if (p.showQuery) {
                        bQ = "<a id='" + fid + "_query' class='fm-button ui-state-default ui-corner-all fm-button-icon-left'><span class='ui-icon ui-icon-comment'></span>Query</a>";
                    }
                    if (!p.columns.length) {
                        $.each(columns, function (i, n) {
                            if (!n.label) {
                                n.label = $t.p.colNames[i];
                            }
                            // find first searchable column and set it if no default filter
                            if (!found) {
                                var searchable = (n.search === undefined) ? true : n.search,
                                        hidden = (n.hidden === true),
                                        ignoreHiding = (n.searchoptions && n.searchoptions.searchhidden === true);
                                if ((ignoreHiding && searchable) || (searchable && !hidden)) {
                                    found = true;
                                    colnm = n.index || n.name;
                                    cmi = i;
                                }
                            }
                        });
                    } else {
                        columns = p.columns;
                        cmi = 0;
                        colnm = columns[0].index || columns[0].name;
                    }
                    // old behaviour
                    if ((!defaultFilters && colnm) || p.multipleSearch === false) {
                        var cmop = "eq";
                        if (cmi >= 0 && columns[cmi].searchoptions && columns[cmi].searchoptions.sopt) {
                            cmop = columns[cmi].searchoptions.sopt[0];
                        } else if (p.sopt && p.sopt.length) {
                            cmop = p.sopt[0];
                        }
                        defaultFilters = {
                            groupOp: "AND",
                            rules: [{
                                    field: colnm,
                                    op: cmop,
                                    data: ""
                                }]
                        };
                    }
                    found = false;
                    if (p.tmplNames && p.tmplNames.length) {
                        found = true;
                        tmpl = p.tmplLabel;
                        tmpl += "<select class='ui-template'>";
                        tmpl += "<option value='default'>Default</option>";
                        $.each(p.tmplNames, function (i, n) {
                            tmpl += "<option value='" + i + "'>" + n + "</option>";
                        });
                        tmpl += "</select>";
                    }

                    bt = "<table class='EditTable' style='border:0px none;margin-top:5px' id='" + fid + "_2'><tbody><tr><td colspan='2'><hr class='ui-widget-content' style='margin:1px'/></td></tr><tr><td class='EditButton' style='text-align:" + align + "'>" + bC + tmpl + "</td><td class='EditButton' " + butleft + ">" + bQ + bS + "</td></tr></tbody></table>";
                    fid = $.jgrid.jqID(fid);
                    $("#" + fid).jqFilter({
                        columns: columns,
                        filter: p.loadDefaults ? defaultFilters : null,
                        showQuery: p.showQuery,
                        errorcheck: p.errorcheck,
                        sopt: p.sopt,
                        groupButton: p.multipleGroup,
                        ruleButtons: p.multipleSearch,
                        afterRedraw: p.afterRedraw,
                        ops: p.odata,
                        operands: p.operands,
                        ajaxSelectOptions: $t.p.ajaxSelectOptions,
                        groupOps: p.groupOps,
                        onChange: function () {
                            if (this.p.showQuery) {
                                $('.query', this).html(this.toUserFriendlyString());
                            }
                            if ($.isFunction(p.afterChange)) {
                                p.afterChange.call($t, $("#" + fid), p);
                            }
                        },
                        direction: $t.p.direction,
                        id: $t.p.id
                    });
                    fil.append(bt);
                    if (found && p.tmplFilters && p.tmplFilters.length) {
                        $(".ui-template", fil).bind('change', function () {
                            var curtempl = $(this).val();
                            if (curtempl === "default") {
                                $("#" + fid).jqFilter('addFilter', defaultFilters);
                            } else {
                                $("#" + fid).jqFilter('addFilter', p.tmplFilters[parseInt(curtempl, 10)]);
                            }
                            return false;
                        });
                    }
                    if (p.multipleGroup === true) {
                        p.multipleSearch = true;
                    }
                    $($t).triggerHandler("jqGridFilterInitialize", [$("#" + fid)]);
                    if ($.isFunction(p.onInitializeSearch)) {
                        p.onInitializeSearch.call($t, $("#" + fid));
                    }
                    p.gbox = "#gbox_" + fid;
                    if (p.layer) {
                        $.jgrid.createModal(IDs, fil, p, "#gview_" + $.jgrid.jqID($t.p.id), $("#gbox_" + $.jgrid.jqID($t.p.id))[0], "#" + $.jgrid.jqID(p.layer), {
                            position: "relative"
                        });
                    } else {
                        $.jgrid.createModal(IDs, fil, p, "#gview_" + $.jgrid.jqID($t.p.id), $("#gbox_" + $.jgrid.jqID($t.p.id))[0]);
                    }
                    if (p.searchOnEnter || p.closeOnEscape) {
                        $("#" + $.jgrid.jqID(IDs.themodal)).keydown(function (e) {
                            var $target = $(e.target);
                            if (p.searchOnEnter && e.which === 13 && // 13 === $.ui.keyCode.ENTER
                                    !$target.hasClass('add-group') && !$target.hasClass('add-rule') && !$target.hasClass('delete-group') && !$target.hasClass('delete-rule') && (!$target.hasClass("fm-button") || !$target.is("[id$=_query]"))) {
                                $("#" + fid + "_search").click();
                                return false;
                            }
                            if (p.closeOnEscape && e.which === 27) { // 27 === $.ui.keyCode.ESCAPE
                                $("#" + $.jgrid.jqID(IDs.modalhead)).find(".ui-jqdialog-titlebar-close").click();
                                return false;
                            }
                        });
                    }
                    if (bQ) {
                        $("#" + fid + "_query").bind('click', function () {
                            $(".queryresult", fil).toggle();
                            return false;
                        });
                    }
                    if (p.stringResult === undefined) {
                        // to provide backward compatibility, inferring stringResult value from multipleSearch
                        p.stringResult = p.multipleSearch;
                    }
                    $("#" + fid + "_search").bind('click', function () {
                        var fl = $("#" + fid),
                                sdata = {},
                                res, filters;
                        fl.find(".input-elm:focus").change();
                        filters = fl.jqFilter('filterData');
                        // HB Customization << Start
                        var exfilt = {};
                        try {
                            exfilt = ($t.p.postData && $t.p.postData.filters) ? JSON.parse($t.p.postData.filters) : {};
                        } catch (err) {

                        }
                        if (exfilt && exfilt.entrys) {
                            filters['entrys'] = exfilt.entrys;
                        }
                        if (exfilt && exfilt.range) {
                            filters['range'] = exfilt.range;
                        }
                        // HB Customization >> END
                        if (p.errorcheck) {
                            fl[0].hideError();
                            if (!p.showQuery) {
                                fl.jqFilter('toSQLString');
                            }
                            if (fl[0].p.error) {
                                fl[0].showError();
                                return false;
                            }
                        }

                        if (p.stringResult) {
                            try {
                                // xmlJsonClass or JSON.stringify
                                res = xmlJsonClass.toJson(filters, '', '', false);
                            } catch (e) {
                                try {
                                    res = JSON.stringify(filters);
                                } catch (e2) {
                                }
                            }
                            if (typeof res === "string") {
                                sdata[p.sFilter] = res;
                                $.each([p.sField, p.sValue, p.sOper], function () {
                                    sdata[this] = "";
                                });
                            }
                        } else {
                            if (p.multipleSearch) {
                                sdata[p.sFilter] = filters;
                                $.each([p.sField, p.sValue, p.sOper], function () {
                                    sdata[this] = "";
                                });
                            } else {
                                sdata[p.sField] = filters.rules[0].field;
                                sdata[p.sValue] = filters.rules[0].data;
                                sdata[p.sOper] = filters.rules[0].op;
                                sdata[p.sFilter] = "";
                            }
                        }
                        $t.p.search = true;
                        $.extend($t.p.postData, sdata);
                        mustReload = $($t).triggerHandler("jqGridFilterSearch");
                        if (mustReload === undefined) {
                            mustReload = true;
                        }
                        if (mustReload && $.isFunction(p.onSearch)) {
                            mustReload = p.onSearch.call($t, $t.p.filters);
                        }
                        if (mustReload !== false) {
                            $($t).trigger("reloadGrid", [{
                                    page: 1
                                }]);
                        }
                        if (p.closeAfterSearch) {
                            $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), {
                                gb: "#gbox_" + $.jgrid.jqID($t.p.id),
                                jqm: p.jqModal,
                                onClose: p.onClose
                            });
                        }
                        return false;
                    });
                    $("#" + fid + "_reset").bind('click', function () {
                        var sdata = {},
                                fl = $("#" + fid);
                        $t.p.search = false;
                        $t.p.resetsearch = true;
                        if (p.multipleSearch === false) {
                            sdata[p.sField] = sdata[p.sValue] = sdata[p.sOper] = "";
                        } else {
                            // HB Customization << Start
                            var exfilt = {};
                            try {
                                exfilt = ($t.p.postData && $t.p.postData.filters) ? JSON.parse($t.p.postData.filters) : {};
                            } catch (err) {

                            }
                            var rsfilt = {};
                            if (exfilt && exfilt.entrys) {
                                rsfilt['entrys'] = exfilt.entrys;
                            }
                            if (exfilt && exfilt.range) {
                                rsfilt['range'] = exfilt.range;
                            }
                            if ($.isEmptyObject(rsfilt)) {
                                sdata[p.sFilter] = "";
                            } else {
                                rsfilt['groupOp'] = "AND";
                                delete rsfilt['rules'];
                                sdata[p.sFilter] = JSON.stringify(rsfilt);
                            }
                            // HB Customization >> END
                        }
                        fl[0].resetFilter();
                        if (found) {
                            $(".ui-template", fil).val("default");
                        }
                        $.extend($t.p.postData, sdata);
                        mustReload = $($t).triggerHandler("jqGridFilterReset");
                        if (mustReload === undefined) {
                            mustReload = true;
                        }
                        if (mustReload && $.isFunction(p.onReset)) {
                            mustReload = p.onReset.call($t);
                        }
                        if (mustReload !== false) {
                            $($t).trigger("reloadGrid", [{
                                    page: 1
                                }]);
                        }
                        if (p.closeAfterReset) {
                            $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), {
                                gb: "#gbox_" + $.jgrid.jqID($t.p.id),
                                jqm: p.jqModal,
                                onClose: p.onClose
                            });
                        }
                        return false;
                    });
                    showFilter($("#" + fid));
                    $(".fm-button:not(.ui-state-disabled)", fil).hover(
                            function () {
                                $(this).addClass('ui-state-hover');
                            }, function () {
                        $(this).removeClass('ui-state-hover');
                    });
                }
            });
        },
        editGridRow: function (rowid, p) {
            p = $.extend(true, {
                top: 0,
                left: 0,
                width: 300,
                datawidth: 'auto',
                height: 'auto',
                dataheight: 'auto',
                modal: false,
                overlay: 30,
                drag: true,
                resize: true,
                url: null,
                mtype: "POST",
                clearAfterAdd: true,
                closeAfterEdit: false,
                reloadAfterSubmit: true,
                onInitializeForm: null,
                beforeInitData: null,
                beforeShowForm: null,
                afterShowForm: null,
                beforeSubmit: null,
                afterSubmit: null,
                onclickSubmit: null,
                afterComplete: null,
                onclickPgButtons: null,
                afterclickPgButtons: null,
                editData: {},
                recreateForm: false,
                jqModal: true,
                closeOnEscape: false,
                addedrow: "first",
                topinfo: '',
                bottominfo: '',
                saveicon: [],
                closeicon: [],
                savekey: [false, 13],
                navkeys: [false, 38, 40],
                checkOnSubmit: false,
                checkOnUpdate: false,
                _savedData: {},
                processing: false,
                onClose: null,
                ajaxEditOptions: {},
                serializeEditData: null,
                viewPagerButtons: true,
                overlayClass: 'ui-widget-overlay'
            }, $.jgrid.edit, p || {});
            rp_ge[$(this)[0].p.id] = p;
            return this.each(function () {
                var $t = this;
                if (!$t.grid || !rowid) {
                    return;
                }
                var gID = $t.p.id,
                        frmgr = "FrmGrid_" + gID,
                        frmtborg = "TblGrid_" + gID,
                        frmtb = "#" + $.jgrid.jqID(frmtborg),
                        IDs = {
                            themodal: 'editmod' + gID,
                            modalhead: 'edithd' + gID,
                            modalcontent: 'editcnt' + gID,
                            scrollelm: frmgr
                        },
                onBeforeShow = $.isFunction(rp_ge[$t.p.id].beforeShowForm) ? rp_ge[$t.p.id].beforeShowForm : false,
                        onAfterShow = $.isFunction(rp_ge[$t.p.id].afterShowForm) ? rp_ge[$t.p.id].afterShowForm : false,
                        onBeforeInit = $.isFunction(rp_ge[$t.p.id].beforeInitData) ? rp_ge[$t.p.id].beforeInitData : false,
                        onInitializeForm = $.isFunction(rp_ge[$t.p.id].onInitializeForm) ? rp_ge[$t.p.id].onInitializeForm : false,
                        showFrm = true,
                        maxCols = 1,
                        maxRows = 0,
                        postdata, diff, frmoper;
                frmgr = $.jgrid.jqID(frmgr);
                if (rowid === "new") {
                    rowid = "_empty";
                    frmoper = "add";
                    p.caption = rp_ge[$t.p.id].addCaption;
                } else {
                    p.caption = rp_ge[$t.p.id].editCaption;
                    frmoper = "edit";
                }
                if (!p.recreateForm) {
                    if ($($t).data("formProp")) {
                        $.extend(rp_ge[$(this)[0].p.id], $($t).data("formProp"));
                    }
                }
                var closeovrl = true;
                if (p.checkOnUpdate && p.jqModal && !p.modal) {
                    closeovrl = false;
                }

                function getFormData() {
                    $(frmtb + " > tbody > tr > td > .FormElement").each(function () {
                        var celm = $(".customelement", this);
                        if (celm.length) {
                            var elem = celm[0],
                                    nm = $(elem).attr('name');
                            $.each($t.p.colModel, function () {
                                if (this.name === nm && this.editoptions && $.isFunction(this.editoptions.custom_value)) {
                                    try {
                                        postdata[nm] = this.editoptions.custom_value.call($t, $("#" + $.jgrid.jqID(nm), frmtb), 'get');
                                        if (postdata[nm] === undefined) {
                                            throw "e1";
                                        }
                                    } catch (e) {
                                        if (e === "e1") {
                                            $.jgrid.info_dialog($.jgrid.errors.errcap, "function 'custom_value' " + $.jgrid.edit.msg.novalue, $.jgrid.edit.bClose);
                                        } else {
                                            $.jgrid.info_dialog($.jgrid.errors.errcap, e.message, $.jgrid.edit.bClose);
                                        }
                                    }
                                    return true;
                                }
                            });
                        } else {
                            switch ($(this).get(0).type) {
                                case "checkbox":
                                    if ($(this).is(":checked")) {
                                        postdata[this.name] = $(this).val();
                                    } else {
                                        var ofv = $(this).attr("offval");
                                        postdata[this.name] = ofv;
                                    }
                                    break;
                                case "select-one":
                                    postdata[this.name] = $("option:selected", this).val();
                                    break;
                                case "select-multiple":
                                    postdata[this.name] = $(this).val();
                                    if (postdata[this.name]) {
                                        postdata[this.name] = postdata[this.name].join(",");
                                    } else {
                                        postdata[this.name] = "";
                                    }
                                    var selectedText = [];
                                    $("option:selected", this).each(
                                            function (i, selected) {
                                                selectedText[i] = $(selected).text();
                                            });
                                    break;
                                case "password":
                                case "text":
                                case "textarea":
                                case "button":
                                    postdata[this.name] = $(this).val();

                                    break;
                            }
                            if ($t.p.autoencode) {
                                postdata[this.name] = $.jgrid.htmlEncode(postdata[this.name]);
                            }
                        }
                    });
                    return true;
                }

                function createData(rowid, obj, tb, maxcols) {
                    var nm, hc, trdata, cnt = 0,
                            tmp, dc, elc, retpos = [],
                            ind = false,
                            tdtmpl = "<td class='CaptionTD'>&#160;</td><td class='DataTD'>&#160;</td>",
                            tmpl = "",
                            i; //*2
                    for (i = 1; i <= maxcols; i++) {
                        tmpl += tdtmpl;
                    }
                    if (rowid !== '_empty') {
                        ind = $(obj).jqGrid("getInd", rowid);
                    }
                    $(obj.p.colModel).each(function (i) {
                        nm = this.name;
                        // hidden fields are included in the form
                        if (this.editrules && this.editrules.edithidden === true) {
                            hc = false;
                        } else {
                            hc = this.hidden === true ? true : false;
                        }
                        dc = hc ? "style='display:none'" : "";
                        if (nm !== 'cb' && nm !== 'subgrid' && this.editable === true && nm !== 'rn') {
                            if (ind === false) {
                                tmp = "";
                            } else {
                                if (nm === obj.p.ExpandColumn && obj.p.treeGrid === true) {
                                    tmp = $("td[role='gridcell']:eq(" + i + ")", obj.rows[ind]).text();
                                } else {
                                    try {
                                        tmp = $.unformat.call(obj, $("td[role='gridcell']:eq(" + i + ")", obj.rows[ind]), {
                                            rowId: rowid,
                                            colModel: this
                                        }, i);
                                    } catch (_) {
                                        tmp = (this.edittype && this.edittype === "textarea") ? $("td[role='gridcell']:eq(" + i + ")", obj.rows[ind]).text() : $("td[role='gridcell']:eq(" + i + ")", obj.rows[ind]).html();
                                    }
                                    if (!tmp || tmp === "&nbsp;" || tmp === "&#160;" || (tmp.length === 1 && tmp.charCodeAt(0) === 160)) {
                                        tmp = '';
                                    }
                                }
                            }
                            var opt = $.extend({}, this.editoptions || {}, {
                                id: nm,
                                name: nm
                            }),
                                    frmopt = $.extend({}, {
                                        elmprefix: '',
                                        elmsuffix: '',
                                        rowabove: false,
                                        rowcontent: ''
                                    }, this.formoptions || {}),
                                    rp = parseInt(frmopt.rowpos, 10) || cnt + 1,
                                    cp = parseInt((parseInt(frmopt.colpos, 10) || 1) * 2, 10);
                            if (rowid === "_empty" && opt.defaultValue) {
                                tmp = $.isFunction(opt.defaultValue) ? opt.defaultValue.call($t) : opt.defaultValue;
                            }
                            if (!this.edittype) {
                                this.edittype = "text";
                            }
                            if ($t.p.autoencode) {
                                tmp = $.jgrid.htmlDecode(tmp);
                            }
                            elc = $.jgrid.createEl.call($t, this.edittype, opt, tmp, false, $.extend({}, $.jgrid.ajaxOptions, obj.p.ajaxSelectOptions || {}));
                            //if(tmp === "" && this.edittype == "checkbox") {tmp = $(elc).attr("offval");}
                            //if(tmp === "" && this.edittype == "select") {tmp = $("option:eq(0)",elc).text();}
                            if (rp_ge[$t.p.id].checkOnSubmit || rp_ge[$t.p.id].checkOnUpdate) {
                                rp_ge[$t.p.id]._savedData[nm] = tmp;
                            }
                            $(elc).addClass("FormElement");
                            if ($.inArray(this.edittype, ['text', 'textarea', 'password', 'select']) > -1) {
                                $(elc).addClass("ui-widget-content ui-corner-all");
                            }
                            trdata = $(tb).find("tr[rowpos=" + rp + "]");
                            if (frmopt.rowabove) {
                                var newdata = $("<tr><td class='contentinfo' colspan='" + (maxcols * 2) + "'>" + frmopt.rowcontent + "</td></tr>");
                                $(tb).append(newdata);
                                newdata[0].rp = rp;
                            }
                            if (trdata.length === 0) {
                                trdata = $("<tr " + dc + " rowpos='" + rp + "'></tr>").addClass("FormData").attr("id", "tr_" + nm);
                                $(trdata).append(tmpl);
                                $(tb).append(trdata);
                                trdata[0].rp = rp;
                            }
                            $("td:eq(" + (cp - 2) + ")", trdata[0]).html(frmopt.label === undefined ? obj.p.colNames[i] : frmopt.label);
                            $("td:eq(" + (cp - 1) + ")", trdata[0]).append(frmopt.elmprefix).append(elc).append(frmopt.elmsuffix);
                            if (this.edittype === 'custom' && $.isFunction(opt.custom_value)) {
                                opt.custom_value.call($t, $("#" + nm, "#" + frmgr), 'set', tmp);
                            }
                            // HB Customization
                            //$.jgrid.bindEv.call($t, elc, opt);
                            retpos[cnt] = i;
                            cnt++;
                        }
                    });
                    if (cnt > 0) {
                        var idrow = $("<tr class='FormData' style='display:none'><td class='CaptionTD'></td><td colspan='" + (maxcols * 2 - 1) + "' class='DataTD'><input class='FormElement' id='id_g' type='text' name='" + obj.p.id + "_id' value='" + rowid + "'/></td></tr>");
                        idrow[0].rp = cnt + 999;
                        $(tb).append(idrow);
                        if (rp_ge[$t.p.id].checkOnSubmit || rp_ge[$t.p.id].checkOnUpdate) {
                            rp_ge[$t.p.id]._savedData[obj.p.id + "_id"] = rowid;
                        }
                    }
                    return retpos;
                }

                function fillData(rowid, obj, fmid) {
                    var nm, cnt = 0,
                            tmp, fld, opt, vl, vlc;
                    if (rp_ge[$t.p.id].checkOnSubmit || rp_ge[$t.p.id].checkOnUpdate) {
                        rp_ge[$t.p.id]._savedData = {};
                        rp_ge[$t.p.id]._savedData[obj.p.id + "_id"] = rowid;
                    }
                    var cm = obj.p.colModel;
                    if (rowid === '_empty') {
                        $(cm).each(function () {
                            nm = this.name;
                            opt = $.extend({}, this.editoptions || {});
                            fld = $("#" + $.jgrid.jqID(nm), "#" + fmid);
                            if (fld && fld.length && fld[0] !== null) {
                                vl = "";
                                if (this.edittype === 'custom' && $.isFunction(opt.custom_value)) {
                                    opt.custom_value.call($t, $("#" + nm, "#" + fmid), 'set', vl);
                                } else if (opt.defaultValue) {
                                    vl = $.isFunction(opt.defaultValue) ? opt.defaultValue.call($t) : opt.defaultValue;
                                    if (fld[0].type === 'checkbox') {
                                        vlc = vl.toLowerCase();
                                        if (vlc.search(/(false|f|0|no|n|off|undefined)/i) < 0 && vlc !== "") {
                                            fld[0].checked = true;
                                            fld[0].defaultChecked = true;
                                            fld[0].value = vl;
                                        } else {
                                            fld[0].checked = false;
                                            fld[0].defaultChecked = false;
                                        }
                                    } else {
                                        fld.val(vl);
                                    }
                                } else {
                                    if (fld[0].type === 'checkbox') {
                                        fld[0].checked = false;
                                        fld[0].defaultChecked = false;
                                        vl = $(fld).attr("offval");
                                    } else if (fld[0].type && fld[0].type.substr(0, 6) === 'select') {
                                        fld[0].selectedIndex = 0;
                                    } else {
                                        fld.val(vl);
                                    }
                                }
                                if (rp_ge[$t.p.id].checkOnSubmit === true || rp_ge[$t.p.id].checkOnUpdate) {
                                    rp_ge[$t.p.id]._savedData[nm] = vl;
                                }
                            }
                        });
                        $("#id_g", "#" + fmid).val(rowid);
                        return;
                    }
                    var tre = $(obj).jqGrid("getInd", rowid, true);
                    if (!tre) {
                        return;
                    }
                    $('td[role="gridcell"]', tre).each(function (i) {
                        nm = cm[i].name;
                        // hidden fields are included in the form
                        if (nm !== 'cb' && nm !== 'subgrid' && nm !== 'rn' && cm[i].editable === true) {
                            if (nm === obj.p.ExpandColumn && obj.p.treeGrid === true) {
                                tmp = $(this).text();
                            } else {
                                try {
                                    tmp = $.unformat.call(obj, $(this), {
                                        rowId: rowid,
                                        colModel: cm[i]
                                    }, i);
                                } catch (_) {
                                    tmp = cm[i].edittype === "textarea" ? $(this).text() : $(this).html();
                                }
                            }
                            if ($t.p.autoencode) {
                                tmp = $.jgrid.htmlDecode(tmp);
                            }
                            if (rp_ge[$t.p.id].checkOnSubmit === true || rp_ge[$t.p.id].checkOnUpdate) {
                                rp_ge[$t.p.id]._savedData[nm] = tmp;
                            }
                            nm = $.jgrid.jqID(nm);
                            switch (cm[i].edittype) {
                                case "password":
                                case "text":
                                case "button":
                                case "image":
                                case "textarea":
                                    if (tmp === "&nbsp;" || tmp === "&#160;" || (tmp.length === 1 && tmp.charCodeAt(0) === 160)) {
                                        tmp = '';
                                    }
                                    $("#" + nm, "#" + fmid).val(tmp);
                                    break;
                                case "select":
                                    var opv = (typeof tmp === 'string') ? tmp.split(",") : tmp;
                                    if ($.isArray(opv)) {
                                        opv = $.map(opv, function (n) {
                                            return $.trim(n);
                                        });
                                    }
                                    $("#" + nm + " option", "#" + fmid).each(function () {
                                        if (!cm[i].editoptions.multiple && ($.trim(tmp) === $.trim($(this).text()) || opv[0] === $.trim($(this).text()) || opv[0] === $.trim($(this).val()))) {
                                            this.selected = true;
                                        } else if (cm[i].editoptions.multiple) {
                                            if ($.inArray($.trim($(this).text()), opv) > -1 || $.inArray($.trim($(this).val()), opv) > -1) {
                                                this.selected = true;
                                            } else {
                                                this.selected = false;
                                            }
                                        } else {
                                            this.selected = false;
                                        }
                                    });
                                    break;
                                case "checkbox":
                                    tmp = String(tmp);
                                    if (cm[i].editoptions && cm[i].editoptions.value) {
                                        var cb = cm[i].editoptions.value.split(":");
                                        if (cb[0] === tmp) {
                                            $("#" + nm, "#" + fmid)[$t.p.useProp ? 'prop' : 'attr']({
                                                "checked": true,
                                                "defaultChecked": true
                                            });
                                        } else {
                                            $("#" + nm, "#" + fmid)[$t.p.useProp ? 'prop' : 'attr']({
                                                "checked": false,
                                                "defaultChecked": false
                                            });
                                        }
                                    } else {
                                        tmp = tmp.toLowerCase();
                                        if (tmp.search(/(false|f|0|no|n|off|undefined)/i) < 0 && tmp !== "") {
                                            $("#" + nm, "#" + fmid)[$t.p.useProp ? 'prop' : 'attr']("checked", true);
                                            $("#" + nm, "#" + fmid)[$t.p.useProp ? 'prop' : 'attr']("defaultChecked", true); //ie
                                        } else {
                                            $("#" + nm, "#" + fmid)[$t.p.useProp ? 'prop' : 'attr']("checked", false);
                                            $("#" + nm, "#" + fmid)[$t.p.useProp ? 'prop' : 'attr']("defaultChecked", false); //ie
                                        }
                                    }
                                    break;
                                case 'custom':
                                    try {
                                        if (cm[i].editoptions && $.isFunction(cm[i].editoptions.custom_value)) {
                                            cm[i].editoptions.custom_value.call($t, $("#" + nm, "#" + fmid), 'set', tmp);
                                        } else {
                                            throw "e1";
                                        }
                                    } catch (e) {
                                        if (e === "e1") {
                                            $.jgrid.info_dialog($.jgrid.errors.errcap, "function 'custom_value' " + $.jgrid.edit.msg.nodefined, $.jgrid.edit.bClose);
                                        } else {
                                            $.jgrid.info_dialog($.jgrid.errors.errcap, e.message, $.jgrid.edit.bClose);
                                        }
                                    }
                                    break;
                            }
                            cnt++;
                        }
                    });
                    if (cnt > 0) {
                        $("#id_g", frmtb).val(rowid);
                    }
                }

                function setNulls() {
                    $.each($t.p.colModel, function (i, n) {
                        if (n.editoptions && n.editoptions.NullIfEmpty === true) {
                            if (postdata.hasOwnProperty(n.name) && postdata[n.name] === "") {
                                postdata[n.name] = 'null';
                            }
                        }
                    });
                }

                function postIt() {
                    var copydata, ret = [true, "", ""],
                            onCS = {},
                            opers = $t.p.prmNames,
                            idname, oper, key, selr, i;

                    var retvals = $($t).triggerHandler("jqGridAddEditBeforeCheckValues", [$("#" + frmgr), frmoper]);
                    if (retvals && typeof retvals === 'object') {
                        postdata = retvals;
                    }

                    if ($.isFunction(rp_ge[$t.p.id].beforeCheckValues)) {
                        retvals = rp_ge[$t.p.id].beforeCheckValues.call($t, postdata, $("#" + frmgr), frmoper);
                        if (retvals && typeof retvals === 'object') {
                            postdata = retvals;
                        }
                    }
                    for (key in postdata) {
                        if (postdata.hasOwnProperty(key)) {
                            ret = $.jgrid.checkValues.call($t, postdata[key], key);
                            if (ret[0] === false) {
                                break;
                            }
                        }
                    }
                    setNulls();
                    if (ret[0]) {
                        onCS = $($t).triggerHandler("jqGridAddEditClickSubmit", [rp_ge[$t.p.id], postdata, frmoper]);
                        if (onCS === undefined && $.isFunction(rp_ge[$t.p.id].onclickSubmit)) {
                            onCS = rp_ge[$t.p.id].onclickSubmit.call($t, rp_ge[$t.p.id], postdata, frmoper) || {};
                        }
                        ret = $($t).triggerHandler("jqGridAddEditBeforeSubmit", [postdata, $("#" + frmgr), frmoper]);
                        if (ret === undefined) {
                            ret = [true, "", ""];
                        }
                        if (ret[0] && $.isFunction(rp_ge[$t.p.id].beforeSubmit)) {
                            ret = rp_ge[$t.p.id].beforeSubmit.call($t, postdata, $("#" + frmgr), frmoper);
                        }
                    }

                    if (ret[0] && !rp_ge[$t.p.id].processing) {
                        rp_ge[$t.p.id].processing = true;
                        $("#sData", frmtb + "_2").addClass('ui-state-active');
                        oper = opers.oper;
                        idname = opers.id;
                        // we add to pos data array the action - the name is oper
                        postdata[oper] = ($.trim(postdata[$t.p.id + "_id"]) === "_empty") ? opers.addoper : opers.editoper;
                        if (postdata[oper] !== opers.addoper) {
                            postdata[idname] = postdata[$t.p.id + "_id"];
                        } else {
                            // check to see if we have allredy this field in the form and if yes lieve it
                            if (postdata[idname] === undefined) {
                                postdata[idname] = postdata[$t.p.id + "_id"];
                            }
                        }
                        delete postdata[$t.p.id + "_id"];
                        postdata = $.extend(postdata, rp_ge[$t.p.id].editData, onCS);
                        if ($t.p.treeGrid === true) {
                            if (postdata[oper] === opers.addoper) {
                                selr = $($t).jqGrid("getGridParam", 'selrow');
                                var tr_par_id = $t.p.treeGridModel === 'adjacency' ? $t.p.treeReader.parent_id_field : 'parent_id';
                                postdata[tr_par_id] = selr;
                            }
                            for (i in $t.p.treeReader) {
                                if ($t.p.treeReader.hasOwnProperty(i)) {
                                    var itm = $t.p.treeReader[i];
                                    if (postdata.hasOwnProperty(itm)) {
                                        if (postdata[oper] === opers.addoper && i === 'parent_id_field') {
                                            continue;
                                        }
                                        delete postdata[itm];
                                    }
                                }
                            }
                        }

                        postdata[idname] = $.jgrid.stripPref($t.p.idPrefix, postdata[idname]);
                        var ajaxOptions = $.extend({
                            url: rp_ge[$t.p.id].url || $($t).jqGrid('getGridParam', 'editurl'),
                            type: rp_ge[$t.p.id].mtype,
                            data: $.isFunction(rp_ge[$t.p.id].serializeEditData) ? rp_ge[$t.p.id].serializeEditData.call($t, postdata) : postdata,
                            complete: function (data, status) {
                                var key;
                                postdata[idname] = $t.p.idPrefix + postdata[idname];
                                if (data.status >= 300 && data.status !== 304) {
                                    ret[0] = false;
                                    ret[1] = $($t).triggerHandler("jqGridAddEditErrorTextFormat", [data, frmoper]);
                                    if ($.isFunction(rp_ge[$t.p.id].errorTextFormat)) {
                                        ret[1] = rp_ge[$t.p.id].errorTextFormat.call($t, data, frmoper);
                                    } else {
                                        ret[1] = status + " Status: '" + data.statusText + "'. Error code: " + data.status;
                                    }
                                } else {
                                    // data is posted successful
                                    // execute aftersubmit with the returned data from server
                                    ret = $($t).triggerHandler("jqGridAddEditAfterSubmit", [data, postdata, frmoper]);
                                    if (ret === undefined) {
                                        ret = [true, "", ""];
                                    }
                                    if (ret[0] && $.isFunction(rp_ge[$t.p.id].afterSubmit)) {
                                        ret = rp_ge[$t.p.id].afterSubmit.call($t, data, postdata, frmoper);
                                    }
                                }
                                if (ret[0] === false) {
                                    $("#FormError>td", frmtb).html(ret[1]);
                                    $("#FormError", frmtb).show();
                                } else {
                                    if ($t.p.autoencode) {
                                        $.each(postdata, function (n, v) {
                                            postdata[n] = $.jgrid.htmlDecode(v);
                                        });
                                    }
                                    //rp_ge[$t.p.id].reloadAfterSubmit = rp_ge[$t.p.id].reloadAfterSubmit && $t.p.datatype != "local";
                                    // the action is add
                                    if (postdata[oper] === opers.addoper) {
                                        //id processing
                                        // user not set the id ret[2]
                                        if (!ret[2]) {
                                            ret[2] = $.jgrid.randId();
                                        }
                                        postdata[idname] = ret[2];
                                        if (rp_ge[$t.p.id].reloadAfterSubmit) {
                                            $($t).trigger("reloadGrid");
                                        } else {
                                            if ($t.p.treeGrid === true) {
                                                $($t).jqGrid("addChildNode", ret[2], selr, postdata);
                                            } else {
                                                $($t).jqGrid("addRowData", ret[2], postdata, p.addedrow);
                                            }
                                        }
                                        if (rp_ge[$t.p.id].closeAfterAdd) {
                                            if ($t.p.treeGrid !== true) {
                                                $($t).jqGrid("setSelection", ret[2]);
                                            }
                                            $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), {
                                                gb: "#gbox_" + $.jgrid.jqID(gID),
                                                jqm: p.jqModal,
                                                onClose: rp_ge[$t.p.id].onClose
                                            });
                                        } else if (rp_ge[$t.p.id].clearAfterAdd) {
                                            fillData("_empty", $t, frmgr);
                                        }
                                    } else {
                                        // the action is update
                                        if (rp_ge[$t.p.id].reloadAfterSubmit) {
                                            $($t).trigger("reloadGrid");
                                            if (!rp_ge[$t.p.id].closeAfterEdit) {
                                                setTimeout(function () {
                                                    $($t).jqGrid("setSelection", postdata[idname]);
                                                }, 1000);
                                            }
                                        } else {
                                            if ($t.p.treeGrid === true) {
                                                $($t).jqGrid("setTreeRow", postdata[idname], postdata);
                                            } else {
                                                $($t).jqGrid("setRowData", postdata[idname], postdata);
                                            }
                                        }
                                        if (rp_ge[$t.p.id].closeAfterEdit) {
                                            $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), {
                                                gb: "#gbox_" + $.jgrid.jqID(gID),
                                                jqm: p.jqModal,
                                                onClose: rp_ge[$t.p.id].onClose
                                            });
                                        }
                                    }
                                    if ($.isFunction(rp_ge[$t.p.id].afterComplete)) {
                                        copydata = data;
                                        setTimeout(function () {
                                            $($t).triggerHandler("jqGridAddEditAfterComplete", [copydata, postdata, $("#" + frmgr), frmoper]);
                                            rp_ge[$t.p.id].afterComplete.call($t, copydata, postdata, $("#" + frmgr), frmoper);
                                            copydata = null;
                                        }, 500);
                                    }
                                    if (rp_ge[$t.p.id].checkOnSubmit || rp_ge[$t.p.id].checkOnUpdate) {
                                        $("#" + frmgr).data("disabled", false);
                                        if (rp_ge[$t.p.id]._savedData[$t.p.id + "_id"] !== "_empty") {
                                            for (key in rp_ge[$t.p.id]._savedData) {
                                                if (rp_ge[$t.p.id]._savedData.hasOwnProperty(key) && postdata[key]) {
                                                    rp_ge[$t.p.id]._savedData[key] = postdata[key];
                                                }
                                            }
                                        }
                                    }
                                }
                                rp_ge[$t.p.id].processing = false;
                                $("#sData", frmtb + "_2").removeClass('ui-state-active');
                                try {
                                    $(':input:visible', "#" + frmgr)[0].focus();
                                } catch (e) {
                                }
                            }
                        }, $.jgrid.ajaxOptions, rp_ge[$t.p.id].ajaxEditOptions);

                        if (!ajaxOptions.url && !rp_ge[$t.p.id].useDataProxy) {
                            if ($.isFunction($t.p.dataProxy)) {
                                rp_ge[$t.p.id].useDataProxy = true;
                            } else {
                                ret[0] = false;
                                ret[1] += " " + $.jgrid.errors.nourl;
                            }
                        }
                        if (ret[0]) {
                            if (rp_ge[$t.p.id].useDataProxy) {
                                var dpret = $t.p.dataProxy.call($t, ajaxOptions, "set_" + $t.p.id);
                                if (dpret === undefined) {
                                    dpret = [true, ""];
                                }
                                if (dpret[0] === false) {
                                    ret[0] = false;
                                    ret[1] = dpret[1] || "Error deleting the selected row!";
                                } else {
                                    if (ajaxOptions.data.oper === opers.addoper && rp_ge[$t.p.id].closeAfterAdd) {
                                        $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), {
                                            gb: "#gbox_" + $.jgrid.jqID(gID),
                                            jqm: p.jqModal,
                                            onClose: rp_ge[$t.p.id].onClose
                                        });
                                    }
                                    if (ajaxOptions.data.oper === opers.editoper && rp_ge[$t.p.id].closeAfterEdit) {
                                        $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), {
                                            gb: "#gbox_" + $.jgrid.jqID(gID),
                                            jqm: p.jqModal,
                                            onClose: rp_ge[$t.p.id].onClose
                                        });
                                    }
                                }
                            } else {
                                $.ajax(ajaxOptions);
                            }
                        }
                    }
                    if (ret[0] === false) {
                        $("#FormError>td", frmtb).html(ret[1]);
                        $("#FormError", frmtb).show();
                        // return;
                    }
                }

                function compareData(nObj, oObj) {
                    var ret = false,
                            key;
                    for (key in nObj) {
                        if (nObj.hasOwnProperty(key) && nObj[key] != oObj[key]) {
                            ret = true;
                            break;
                        }
                    }
                    return ret;
                }

                function checkUpdates() {
                    var stat = true;
                    $("#FormError", frmtb).hide();
                    if (rp_ge[$t.p.id].checkOnUpdate) {
                        postdata = {};
                        getFormData();
                        diff = compareData(postdata, rp_ge[$t.p.id]._savedData);
                        if (diff) {
                            $("#" + frmgr).data("disabled", true);
                            $(".confirm", "#" + IDs.themodal).show();
                            stat = false;
                        }
                    }
                    return stat;
                }

                function restoreInline() {
                    var i;
                    if (rowid !== "_empty" && $t.p.savedRow !== undefined && $t.p.savedRow.length > 0 && $.isFunction($.fn.jqGrid.restoreRow)) {
                        for (i = 0; i < $t.p.savedRow.length; i++) {
                            if ($t.p.savedRow[i].id == rowid) {
                                $($t).jqGrid('restoreRow', rowid);
                                break;
                            }
                        }
                    }
                }

                function updateNav(cr, posarr) {
                    var totr = posarr[1].length - 1;
                    if (cr === 0) {
                        $("#pData", frmtb + "_2").addClass('ui-state-disabled');
                    } else if (posarr[1][cr - 1] !== undefined && $("#" + $.jgrid.jqID(posarr[1][cr - 1])).hasClass('ui-state-disabled')) {
                        $("#pData", frmtb + "_2").addClass('ui-state-disabled');
                    } else {
                        $("#pData", frmtb + "_2").removeClass('ui-state-disabled');
                    }

                    if (cr === totr) {
                        $("#nData", frmtb + "_2").addClass('ui-state-disabled');
                    } else if (posarr[1][cr + 1] !== undefined && $("#" + $.jgrid.jqID(posarr[1][cr + 1])).hasClass('ui-state-disabled')) {
                        $("#nData", frmtb + "_2").addClass('ui-state-disabled');
                    } else {
                        $("#nData", frmtb + "_2").removeClass('ui-state-disabled');
                    }
                }

                function getCurrPos() {
                    var rowsInGrid = $($t).jqGrid("getDataIDs"),
                            selrow = $("#id_g", frmtb).val(),
                            pos = $.inArray(selrow, rowsInGrid);
                    return [pos, rowsInGrid];
                }

                var dh = isNaN(rp_ge[$(this)[0].p.id].dataheight) ? rp_ge[$(this)[0].p.id].dataheight : rp_ge[$(this)[0].p.id].dataheight + "px",
                        dw = isNaN(rp_ge[$(this)[0].p.id].datawidth) ? rp_ge[$(this)[0].p.id].datawidth : rp_ge[$(this)[0].p.id].datawidth + "px",
                        frm = $("<form name='FormPost' id='" + frmgr + "' class='FormGrid' onSubmit='return false;' style='width:" + dw + ";overflow:auto;position:relative;height:" + dh + ";'></form>").data("disabled", false),
                        tbl = $("<table id='" + frmtborg + "' class='EditTable' cellspacing='0' cellpadding='0' border='0'><tbody></tbody></table>");
                showFrm = $($t).triggerHandler("jqGridAddEditBeforeInitData", [$("#" + frmgr), frmoper]);
                if (showFrm === undefined) {
                    showFrm = true;
                }
                if (showFrm && onBeforeInit) {
                    showFrm = onBeforeInit.call($t, $("#" + frmgr), frmoper);
                }
                if (showFrm === false) {
                    return;
                }
                restoreInline();
                $($t.p.colModel).each(function () {
                    var fmto = this.formoptions;
                    maxCols = Math.max(maxCols, fmto ? fmto.colpos || 0 : 0);
                    maxRows = Math.max(maxRows, fmto ? fmto.rowpos || 0 : 0);
                });
                $(frm).append(tbl);
                var flr = $("<tr id='FormError' style='display:none'><td class='ui-state-error' colspan='" + (maxCols * 2) + "'></td></tr>");
                flr[0].rp = 0;
                $(tbl).append(flr);
                //topinfo
                flr = $("<tr style='display:none' class='tinfo'><td class='topinfo' colspan='" + (maxCols * 2) + "'>" + rp_ge[$t.p.id].topinfo + "</td></tr>");
                flr[0].rp = 0;
                $(tbl).append(flr);
                // set the id.
                // use carefull only to change here colproperties.
                // create data
                var rtlb = $t.p.direction === "rtl" ? true : false,
                        bp = rtlb ? "nData" : "pData",
                        bn = rtlb ? "pData" : "nData";
                createData(rowid, $t, tbl, maxCols);
                // buttons at footer
                var bP = "<a id='" + bp + "' class='fm-button ui-state-default ui-corner-left'><span class='ui-icon ui-icon-triangle-1-w'></span></a>",
                        bN = "<a id='" + bn + "' class='fm-button ui-state-default ui-corner-right'><span class='ui-icon ui-icon-triangle-1-e'></span></a>",
                        bS = "<a id='sData' class='fm-button ui-state-default ui-corner-all'>" + p.bSubmit + "</a>",
                        bC = "<a id='cData' class='fm-button ui-state-default ui-corner-all'>" + p.bCancel + "</a>";
                var bt = "<table border='0' cellspacing='0' cellpadding='0' class='EditTable' id='" + frmtborg + "_2'><tbody><tr><td colspan='2'><hr class='ui-widget-content' style='margin:1px'/></td></tr><tr id='Act_Buttons'><td class='navButton'>" + (rtlb ? bN + bP : bP + bN) + "</td><td class='EditButton'>" + bS + bC + "</td></tr>";
                bt += "<tr style='display:none' class='binfo'><td class='bottominfo' colspan='2'>" + rp_ge[$t.p.id].bottominfo + "</td></tr>";
                bt += "</tbody></table>";
                if (maxRows > 0) {
                    var sd = [];
                    $.each($(tbl)[0].rows, function (i, r) {
                        sd[i] = r;
                    });
                    sd.sort(function (a, b) {
                        if (a.rp > b.rp) {
                            return 1;
                        }
                        if (a.rp < b.rp) {
                            return -1;
                        }
                        return 0;
                    });
                    $.each(sd, function (index, row) {
                        $('tbody', tbl).append(row);
                    });
                }
                p.gbox = "#gbox_" + $.jgrid.jqID(gID);
                var cle = false;
                if (p.closeOnEscape === true) {
                    p.closeOnEscape = false;
                    cle = true;
                }
                var tms = $("<div></div>").append(frm).append(bt);
                $.jgrid.createModal(IDs, tms, rp_ge[$(this)[0].p.id], "#gview_" + $.jgrid.jqID($t.p.id), $("#gbox_" + $.jgrid.jqID($t.p.id))[0]);
                if (rtlb) {
                    $("#pData, #nData", frmtb + "_2").css("float", "right");
                    $(".EditButton", frmtb + "_2").css("text-align", "left");
                }
                if (rp_ge[$t.p.id].topinfo) {
                    $(".tinfo", frmtb).show();
                }
                if (rp_ge[$t.p.id].bottominfo) {
                    $(".binfo", frmtb + "_2").show();
                }
                tms = null;
                bt = null;
                $("#" + $.jgrid.jqID(IDs.themodal)).keydown(function (e) {
                    var wkey = e.target;
                    if ($("#" + frmgr).data("disabled") === true) {
                        return false;
                    } //??
                    if (rp_ge[$t.p.id].savekey[0] === true && e.which === rp_ge[$t.p.id].savekey[1]) { // save
                        if (wkey.tagName !== "TEXTAREA") {
                            $("#sData", frmtb + "_2").trigger("click");
                            return false;
                        }
                    }
                    if (e.which === 27) {
                        if (!checkUpdates()) {
                            return false;
                        }
                        if (cle) {
                            $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), {
                                gb: p.gbox,
                                jqm: p.jqModal,
                                onClose: rp_ge[$t.p.id].onClose
                            });
                        }
                        return false;
                    }
                    if (rp_ge[$t.p.id].navkeys[0] === true) {
                        if ($("#id_g", frmtb).val() === "_empty") {
                            return true;
                        }
                        if (e.which === rp_ge[$t.p.id].navkeys[1]) { //up
                            $("#pData", frmtb + "_2").trigger("click");
                            return false;
                        }
                        if (e.which === rp_ge[$t.p.id].navkeys[2]) { //down
                            $("#nData", frmtb + "_2").trigger("click");
                            return false;
                        }
                    }
                });
                if (p.checkOnUpdate) {
                    $("a.ui-jqdialog-titlebar-close span", "#" + $.jgrid.jqID(IDs.themodal)).removeClass("jqmClose");
                    $("a.ui-jqdialog-titlebar-close", "#" + $.jgrid.jqID(IDs.themodal)).unbind("click").click(function () {
                        if (!checkUpdates()) {
                            return false;
                        }
                        $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), {
                            gb: "#gbox_" + $.jgrid.jqID(gID),
                            jqm: p.jqModal,
                            onClose: rp_ge[$t.p.id].onClose
                        });
                        return false;
                    });
                }
                p.saveicon = $.extend([true, "left", "ui-icon-disk"], p.saveicon);
                p.closeicon = $.extend([true, "left", "ui-icon-close"], p.closeicon);
                // beforeinitdata after creation of the form
                if (p.saveicon[0] === true) {
                    $("#sData", frmtb + "_2").addClass(p.saveicon[1] === "right" ? 'fm-button-icon-right' : 'fm-button-icon-left').append("<span class='ui-icon " + p.saveicon[2] + "'></span>");
                }
                if (p.closeicon[0] === true) {
                    $("#cData", frmtb + "_2").addClass(p.closeicon[1] === "right" ? 'fm-button-icon-right' : 'fm-button-icon-left').append("<span class='ui-icon " + p.closeicon[2] + "'></span>");
                }
                if (rp_ge[$t.p.id].checkOnSubmit || rp_ge[$t.p.id].checkOnUpdate) {
                    bS = "<a id='sNew' class='fm-button ui-state-default ui-corner-all' style='z-index:1002'>" + p.bYes + "</a>";
                    bN = "<a id='nNew' class='fm-button ui-state-default ui-corner-all' style='z-index:1002'>" + p.bNo + "</a>";
                    bC = "<a id='cNew' class='fm-button ui-state-default ui-corner-all' style='z-index:1002'>" + p.bExit + "</a>";
                    var zI = p.zIndex || 999;
                    zI++;
                    $("<div class='" + p.overlayClass + " jqgrid-overlay confirm' style='z-index:" + zI + ";display:none;'>&#160;" + "</div><div class='confirm ui-widget-content ui-jqconfirm' style='z-index:" + (zI + 1) + "'>" + p.saveData + "<br/><br/>" + bS + bN + bC + "</div>").insertAfter("#" + frmgr);
                    $("#sNew", "#" + $.jgrid.jqID(IDs.themodal)).click(function () {
                        postIt();
                        $("#" + frmgr).data("disabled", false);
                        $(".confirm", "#" + $.jgrid.jqID(IDs.themodal)).hide();
                        return false;
                    });
                    $("#nNew", "#" + $.jgrid.jqID(IDs.themodal)).click(function () {
                        $(".confirm", "#" + $.jgrid.jqID(IDs.themodal)).hide();
                        $("#" + frmgr).data("disabled", false);
                        setTimeout(function () {
                            $(":input:visible", "#" + frmgr)[0].focus();
                        }, 0);
                        return false;
                    });
                    $("#cNew", "#" + $.jgrid.jqID(IDs.themodal)).click(function () {
                        $(".confirm", "#" + $.jgrid.jqID(IDs.themodal)).hide();
                        $("#" + frmgr).data("disabled", false);
                        $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), {
                            gb: "#gbox_" + $.jgrid.jqID(gID),
                            jqm: p.jqModal,
                            onClose: rp_ge[$t.p.id].onClose
                        });
                        return false;
                    });
                }
                // here initform - only once
                $($t).triggerHandler("jqGridAddEditInitializeForm", [$("#" + frmgr), frmoper]);
                if (onInitializeForm) {
                    onInitializeForm.call($t, $("#" + frmgr), frmoper);
                }
                if (rowid === "_empty" || !rp_ge[$t.p.id].viewPagerButtons) {
                    $("#pData,#nData", frmtb + "_2").hide();
                } else {
                    $("#pData,#nData", frmtb + "_2").show();
                }
                $($t).triggerHandler("jqGridAddEditBeforeShowForm", [$("#" + frmgr), frmoper]);
                if (onBeforeShow) {
                    onBeforeShow.call($t, $("#" + frmgr), frmoper);
                }
                $("#" + $.jgrid.jqID(IDs.themodal)).data("onClose", rp_ge[$t.p.id].onClose);
                $.jgrid.viewModal("#" + $.jgrid.jqID(IDs.themodal), {
                    gbox: "#gbox_" + $.jgrid.jqID(gID),
                    gid: $t.p.id, //HB Customization
                    jqm: p.jqModal,
                    overlay: p.overlay,
                    modal: p.modal,
                    overlayClass: p.overlayClass,
                    onHide: function (h) {
                        $($t).data("formProp", {
                            top: parseFloat($(h.w).css("top")),
                            left: parseFloat($(h.w).css("left")),
                            width: $(h.w).width(),
                            height: $(h.w).height(),
                            dataheight: $("#" + frmgr).height(),
                            datawidth: $("#" + frmgr).width()
                        });
                        h.w.remove();
                        if (h.o) {
                            h.o.remove();
                        }
                    }
                });
                if (!closeovrl) {
                    $("." + $.jgrid.jqID(p.overlayClass)).click(function () {
                        if (!checkUpdates()) {
                            return false;
                        }
                        $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), {
                            gb: "#gbox_" + $.jgrid.jqID(gID),
                            jqm: p.jqModal,
                            onClose: rp_ge[$t.p.id].onClose
                        });
                        return false;
                    });
                }
                $(".fm-button", "#" + $.jgrid.jqID(IDs.themodal)).hover(
                        function () {
                            $(this).addClass('ui-state-hover');
                        }, function () {
                    $(this).removeClass('ui-state-hover');
                });
                $("#sData", frmtb + "_2").click(function () {
                    postdata = {};
                    $("#FormError", frmtb).hide();
                    // all depend on ret array
                    //ret[0] - succes
                    //ret[1] - msg if not succes
                    //ret[2] - the id  that will be set if reload after submit false
                    getFormData();
                    if (postdata[$t.p.id + "_id"] === "_empty") {
                        postIt();
                    } else if (p.checkOnSubmit === true) {
                        diff = compareData(postdata, rp_ge[$t.p.id]._savedData);
                        if (diff) {
                            $("#" + frmgr).data("disabled", true);
                            $(".confirm", "#" + $.jgrid.jqID(IDs.themodal)).show();
                        } else {
                            postIt();
                        }
                    } else {
                        postIt();
                    }
                    return false;
                });
                $("#cData", frmtb + "_2").click(function () {
                    if (!checkUpdates()) {
                        return false;
                    }
                    $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), {
                        gb: "#gbox_" + $.jgrid.jqID(gID),
                        jqm: p.jqModal,
                        onClose: rp_ge[$t.p.id].onClose
                    });
                    return false;
                });
                $("#nData", frmtb + "_2").click(function () {
                    if (!checkUpdates()) {
                        return false;
                    }
                    $("#FormError", frmtb).hide();
                    var npos = getCurrPos();
                    npos[0] = parseInt(npos[0], 10);
                    if (npos[0] !== -1 && npos[1][npos[0] + 1]) {
                        $($t).triggerHandler("jqGridAddEditClickPgButtons", ['next', $("#" + frmgr), npos[1][npos[0]]]);
                        var nposret;
                        if ($.isFunction(p.onclickPgButtons)) {
                            nposret = p.onclickPgButtons.call($t, 'next', $("#" + frmgr), npos[1][npos[0]]);
                            if (nposret !== undefined && nposret === false) {
                                return false;
                            }
                        }
                        if ($("#" + $.jgrid.jqID(npos[1][npos[0] + 1])).hasClass('ui-state-disabled')) {
                            return false;
                        }
                        fillData(npos[1][npos[0] + 1], $t, frmgr);
                        $($t).jqGrid("setSelection", npos[1][npos[0] + 1]);
                        $($t).triggerHandler("jqGridAddEditAfterClickPgButtons", ['next', $("#" + frmgr), npos[1][npos[0]]]);
                        if ($.isFunction(p.afterclickPgButtons)) {
                            p.afterclickPgButtons.call($t, 'next', $("#" + frmgr), npos[1][npos[0] + 1]);
                        }
                        updateNav(npos[0] + 1, npos);
                    }
                    return false;
                });
                $("#pData", frmtb + "_2").click(function () {
                    if (!checkUpdates()) {
                        return false;
                    }
                    $("#FormError", frmtb).hide();
                    var ppos = getCurrPos();
                    if (ppos[0] !== -1 && ppos[1][ppos[0] - 1]) {
                        $($t).triggerHandler("jqGridAddEditClickPgButtons", ['prev', $("#" + frmgr), ppos[1][ppos[0]]]);
                        var pposret;
                        if ($.isFunction(p.onclickPgButtons)) {
                            pposret = p.onclickPgButtons.call($t, 'prev', $("#" + frmgr), ppos[1][ppos[0]]);
                            if (pposret !== undefined && pposret === false) {
                                return false;
                            }
                        }
                        if ($("#" + $.jgrid.jqID(ppos[1][ppos[0] - 1])).hasClass('ui-state-disabled')) {
                            return false;
                        }
                        fillData(ppos[1][ppos[0] - 1], $t, frmgr);
                        $($t).jqGrid("setSelection", ppos[1][ppos[0] - 1]);
                        $($t).triggerHandler("jqGridAddEditAfterClickPgButtons", ['prev', $("#" + frmgr), ppos[1][ppos[0]]]);
                        if ($.isFunction(p.afterclickPgButtons)) {
                            p.afterclickPgButtons.call($t, 'prev', $("#" + frmgr), ppos[1][ppos[0] - 1]);
                        }
                        updateNav(ppos[0] - 1, ppos);
                    }
                    return false;
                });
                $($t).triggerHandler("jqGridAddEditAfterShowForm", [$("#" + frmgr), frmoper]);
                if (onAfterShow) {
                    onAfterShow.call($t, $("#" + frmgr), frmoper);
                }
                var posInit = getCurrPos();
                updateNav(posInit[0], posInit);
            });
        },
        viewGridRow: function (rowid, p) {
            p = $.extend(true, {
                top: 0,
                left: 0,
                width: 0,
                datawidth: 'auto',
                height: 'auto',
                dataheight: 'auto',
                modal: false,
                overlay: 30,
                drag: true,
                resize: true,
                jqModal: true,
                closeOnEscape: false,
                labelswidth: '30%',
                closeicon: [],
                navkeys: [false, 38, 40],
                onClose: null,
                beforeShowForm: null,
                beforeInitData: null,
                viewPagerButtons: true,
                recreateForm: false
            }, $.jgrid.view, p || {});
            rp_ge[$(this)[0].p.id] = p;
            return this.each(function () {
                var $t = this;
                if (!$t.grid || !rowid) {
                    return;
                }
                var gID = $t.p.id,
                        frmgr = "ViewGrid_" + $.jgrid.jqID(gID),
                        frmtb = "ViewTbl_" + $.jgrid.jqID(gID),
                        frmgr_id = "ViewGrid_" + gID,
                        frmtb_id = "ViewTbl_" + gID,
                        IDs = {
                            themodal: 'viewmod' + gID,
                            modalhead: 'viewhd' + gID,
                            modalcontent: 'viewcnt' + gID,
                            scrollelm: frmgr
                        },
                onBeforeInit = $.isFunction(rp_ge[$t.p.id].beforeInitData) ? rp_ge[$t.p.id].beforeInitData : false,
                        showFrm = true,
                        maxCols = 1,
                        maxRows = 0;
                if (!p.recreateForm) {
                    if ($($t).data("viewProp")) {
                        $.extend(rp_ge[$(this)[0].p.id], $($t).data("viewProp"));
                    }
                }

                function focusaref() { //Sfari 3 issues
                    if (rp_ge[$t.p.id].closeOnEscape === true || rp_ge[$t.p.id].navkeys[0] === true) {
                        setTimeout(function () {
                            $(".ui-jqdialog-titlebar-close", "#" + $.jgrid.jqID(IDs.modalhead)).focus();
                        }, 0);
                    }
                }

                function createData(rowid, obj, tb, maxcols) {
                    var nm, hc, trdata, cnt = 0,
                            tmp, dc, retpos = [],
                            ind = false,
                            i, tdtmpl = "<td class='CaptionTD form-view-label ui-widget-content' width='" + p.labelswidth + "'>&#160;</td><td class='DataTD form-view-data ui-helper-reset ui-widget-content'>&#160;</td>",
                            tmpl = "",
                            tdtmpl2 = "<td class='CaptionTD form-view-label ui-widget-content'>&#160;</td><td class='DataTD form-view-data ui-widget-content'>&#160;</td>",
                            fmtnum = ['integer', 'number', 'currency'],
                            max1 = 0,
                            max2 = 0,
                            maxw, setme, viewfld;
                    for (i = 1; i <= maxcols; i++) {
                        tmpl += i === 1 ? tdtmpl : tdtmpl2;
                    }
                    // find max number align rigth with property formatter
                    $(obj.p.colModel).each(function () {
                        if (this.editrules && this.editrules.edithidden === true) {
                            hc = false;
                        } else {
                            hc = this.hidden === true ? true : false;
                        }
                        if (!hc && this.align === 'right') {
                            if (this.formatter && $.inArray(this.formatter, fmtnum) !== -1) {
                                max1 = Math.max(max1, parseInt(this.width, 10));
                            } else {
                                max2 = Math.max(max2, parseInt(this.width, 10));
                            }
                        }
                    });
                    maxw = max1 !== 0 ? max1 : max2 !== 0 ? max2 : 0;
                    ind = $(obj).jqGrid("getInd", rowid);
                    $(obj.p.colModel).each(function (i) {
                        nm = this.name;
                        setme = false;
                        // hidden fields are included in the form
                        if (this.editrules && this.editrules.edithidden === true) {
                            hc = false;
                        } else {
                            hc = this.hidden === true ? true : false;
                        }
                        dc = hc ? "style='display:none'" : "";
                        viewfld = (typeof this.viewable !== 'boolean') ? true : this.viewable;
                        if (nm !== 'cb' && nm !== 'subgrid' && nm !== 'rn' && viewfld) {
                            if (ind === false) {
                                tmp = "";
                            } else {
                                if (nm === obj.p.ExpandColumn && obj.p.treeGrid === true) {
                                    tmp = $("td:eq(" + i + ")", obj.rows[ind]).text();
                                } else {
                                    tmp = $("td:eq(" + i + ")", obj.rows[ind]).html();
                                }
                            }
                            setme = this.align === 'right' && maxw !== 0 ? true : false;
                            var frmopt = $.extend({}, {
                                rowabove: false,
                                rowcontent: ''
                            }, this.formoptions || {}),
                                    rp = parseInt(frmopt.rowpos, 10) || cnt + 1,
                                    cp = parseInt((parseInt(frmopt.colpos, 10) || 1) * 2, 10);
                            if (frmopt.rowabove) {
                                var newdata = $("<tr><td class='contentinfo' colspan='" + (maxcols * 2) + "'>" + frmopt.rowcontent + "</td></tr>");
                                $(tb).append(newdata);
                                newdata[0].rp = rp;
                            }
                            trdata = $(tb).find("tr[rowpos=" + rp + "]");
                            if (trdata.length === 0) {
                                trdata = $("<tr " + dc + " rowpos='" + rp + "'></tr>").addClass("FormData").attr("id", "trv_" + nm);
                                $(trdata).append(tmpl);
                                $(tb).append(trdata);
                                trdata[0].rp = rp;
                            }
                            $("td:eq(" + (cp - 2) + ")", trdata[0]).html('<b>' + (frmopt.label === undefined ? obj.p.colNames[i] : frmopt.label) + '</b>');
                            $("td:eq(" + (cp - 1) + ")", trdata[0]).append("<span>" + tmp + "</span>").attr("id", "v_" + nm);
                            if (setme) {
                                $("td:eq(" + (cp - 1) + ") span", trdata[0]).css({
                                    'text-align': 'right',
                                    width: maxw + "px"
                                });
                            }
                            retpos[cnt] = i;
                            cnt++;
                        }
                    });
                    if (cnt > 0) {
                        var idrow = $("<tr class='FormData' style='display:none'><td class='CaptionTD'></td><td colspan='" + (maxcols * 2 - 1) + "' class='DataTD'><input class='FormElement' id='id_g' type='text' name='id' value='" + rowid + "'/></td></tr>");
                        idrow[0].rp = cnt + 99;
                        $(tb).append(idrow);
                    }
                    return retpos;
                }

                function fillData(rowid, obj) {
                    var nm, hc, cnt = 0,
                            tmp, trv;
                    trv = $(obj).jqGrid("getInd", rowid, true);
                    if (!trv) {
                        return;
                    }
                    $('td', trv).each(function (i) {
                        nm = obj.p.colModel[i].name;
                        // hidden fields are included in the form
                        if (obj.p.colModel[i].editrules && obj.p.colModel[i].editrules.edithidden === true) {
                            hc = false;
                        } else {
                            hc = obj.p.colModel[i].hidden === true ? true : false;
                        }
                        if (nm !== 'cb' && nm !== 'subgrid' && nm !== 'rn') {
                            if (nm === obj.p.ExpandColumn && obj.p.treeGrid === true) {
                                tmp = $(this).text();
                            } else {
                                tmp = $(this).html();
                            }
                            nm = $.jgrid.jqID("v_" + nm);
                            $("#" + nm + " span", "#" + frmtb).html(tmp);
                            if (hc) {
                                $("#" + nm, "#" + frmtb).parents("tr:first").hide();
                            }
                            cnt++;
                        }
                    });
                    if (cnt > 0) {
                        $("#id_g", "#" + frmtb).val(rowid);
                    }
                }

                function updateNav(cr, posarr) {
                    var totr = posarr[1].length - 1;
                    if (cr === 0) {
                        $("#pData", "#" + frmtb + "_2").addClass('ui-state-disabled');
                    } else if (posarr[1][cr - 1] !== undefined && $("#" + $.jgrid.jqID(posarr[1][cr - 1])).hasClass('ui-state-disabled')) {
                        $("#pData", frmtb + "_2").addClass('ui-state-disabled');
                    } else {
                        $("#pData", "#" + frmtb + "_2").removeClass('ui-state-disabled');
                    }
                    if (cr === totr) {
                        $("#nData", "#" + frmtb + "_2").addClass('ui-state-disabled');
                    } else if (posarr[1][cr + 1] !== undefined && $("#" + $.jgrid.jqID(posarr[1][cr + 1])).hasClass('ui-state-disabled')) {
                        $("#nData", frmtb + "_2").addClass('ui-state-disabled');
                    } else {
                        $("#nData", "#" + frmtb + "_2").removeClass('ui-state-disabled');
                    }
                }

                function getCurrPos() {
                    var rowsInGrid = $($t).jqGrid("getDataIDs"),
                            selrow = $("#id_g", "#" + frmtb).val(),
                            pos = $.inArray(selrow, rowsInGrid);
                    return [pos, rowsInGrid];
                }

                var dh = isNaN(rp_ge[$(this)[0].p.id].dataheight) ? rp_ge[$(this)[0].p.id].dataheight : rp_ge[$(this)[0].p.id].dataheight + "px",
                        dw = isNaN(rp_ge[$(this)[0].p.id].datawidth) ? rp_ge[$(this)[0].p.id].datawidth : rp_ge[$(this)[0].p.id].datawidth + "px",
                        frm = $("<form name='FormPost' id='" + frmgr_id + "' class='FormGrid' style='width:" + dw + ";overflow:auto;position:relative;height:" + dh + ";'></form>"),
                        tbl = $("<table id='" + frmtb_id + "' class='EditTable' cellspacing='1' cellpadding='2' border='0' style='table-layout:fixed'><tbody></tbody></table>");
                if (onBeforeInit) {
                    showFrm = onBeforeInit.call($t, $("#" + frmgr));
                    if (showFrm === undefined) {
                        showFrm = true;
                    }
                }
                if (showFrm === false) {
                    return;
                }
                $($t.p.colModel).each(function () {
                    var fmto = this.formoptions;
                    maxCols = Math.max(maxCols, fmto ? fmto.colpos || 0 : 0);
                    maxRows = Math.max(maxRows, fmto ? fmto.rowpos || 0 : 0);
                });
                // set the id.
                $(frm).append(tbl);
                createData(rowid, $t, tbl, maxCols);
                var rtlb = $t.p.direction === "rtl" ? true : false,
                        bp = rtlb ? "nData" : "pData",
                        bn = rtlb ? "pData" : "nData",
                        // buttons at footer
                        bP = "<a id='" + bp + "' class='fm-button ui-state-default ui-corner-left'><span class='ui-icon ui-icon-triangle-1-w'></span></a>",
                        bN = "<a id='" + bn + "' class='fm-button ui-state-default ui-corner-right'><span class='ui-icon ui-icon-triangle-1-e'></span></a>",
                        bC = "<a id='cData' class='fm-button ui-state-default ui-corner-all'>" + p.bClose + "</a>";
                if (maxRows > 0) {
                    var sd = [];
                    $.each($(tbl)[0].rows, function (i, r) {
                        sd[i] = r;
                    });
                    sd.sort(function (a, b) {
                        if (a.rp > b.rp) {
                            return 1;
                        }
                        if (a.rp < b.rp) {
                            return -1;
                        }
                        return 0;
                    });
                    $.each(sd, function (index, row) {
                        $('tbody', tbl).append(row);
                    });
                }
                p.gbox = "#gbox_" + $.jgrid.jqID(gID);
                var bt = $("<div></div>").append(frm).append("<table border='0' class='EditTable' id='" + frmtb + "_2'><tbody><tr id='Act_Buttons'><td class='navButton' width='" + p.labelswidth + "'>" + (rtlb ? bN + bP : bP + bN) + "</td><td class='EditButton'>" + bC + "</td></tr></tbody></table>");
                $.jgrid.createModal(IDs, bt, p, "#gview_" + $.jgrid.jqID($t.p.id), $("#gview_" + $.jgrid.jqID($t.p.id))[0]);
                if (rtlb) {
                    $("#pData, #nData", "#" + frmtb + "_2").css("float", "right");
                    $(".EditButton", "#" + frmtb + "_2").css("text-align", "left");
                }
                if (!p.viewPagerButtons) {
                    $("#pData, #nData", "#" + frmtb + "_2").hide();
                }
                bt = null;
                $("#" + IDs.themodal).keydown(function (e) {
                    if (e.which === 27) {
                        if (rp_ge[$t.p.id].closeOnEscape) {
                            $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), {
                                gb: p.gbox,
                                jqm: p.jqModal,
                                onClose: p.onClose
                            });
                        }
                        return false;
                    }
                    if (p.navkeys[0] === true) {
                        if (e.which === p.navkeys[1]) { //up
                            $("#pData", "#" + frmtb + "_2").trigger("click");
                            return false;
                        }
                        if (e.which === p.navkeys[2]) { //down
                            $("#nData", "#" + frmtb + "_2").trigger("click");
                            return false;
                        }
                    }
                });
                p.closeicon = $.extend([true, "left", "ui-icon-close"], p.closeicon);
                if (p.closeicon[0] === true) {
                    $("#cData", "#" + frmtb + "_2").addClass(p.closeicon[1] === "right" ? 'fm-button-icon-right' : 'fm-button-icon-left').append("<span class='ui-icon " + p.closeicon[2] + "'></span>");
                }
                if ($.isFunction(p.beforeShowForm)) {
                    p.beforeShowForm.call($t, $("#" + frmgr));
                }
                $.jgrid.viewModal("#" + $.jgrid.jqID(IDs.themodal), {
                    gbox: "#gbox_" + $.jgrid.jqID(gID),
                    gid: $t.p.id, //HB Customization
                    jqm: p.jqModal,
                    overlay: p.overlay,
                    modal: p.modal,
                    onHide: function (h) {
                        $($t).data("viewProp", {
                            top: parseFloat($(h.w).css("top")),
                            left: parseFloat($(h.w).css("left")),
                            width: $(h.w).width(),
                            height: $(h.w).height(),
                            dataheight: $("#" + frmgr).height(),
                            datawidth: $("#" + frmgr).width()
                        });
                        h.w.remove();
                        if (h.o) {
                            h.o.remove();
                        }
                    }
                });
                $(".fm-button:not(.ui-state-disabled)", "#" + frmtb + "_2").hover(
                        function () {
                            $(this).addClass('ui-state-hover');
                        }, function () {
                    $(this).removeClass('ui-state-hover');
                });
                focusaref();
                $("#cData", "#" + frmtb + "_2").click(function () {
                    $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), {
                        gb: "#gbox_" + $.jgrid.jqID(gID),
                        jqm: p.jqModal,
                        onClose: p.onClose
                    });
                    return false;
                });
                $("#nData", "#" + frmtb + "_2").click(function () {
                    $("#FormError", "#" + frmtb).hide();
                    var npos = getCurrPos();
                    npos[0] = parseInt(npos[0], 10);
                    if (npos[0] !== -1 && npos[1][npos[0] + 1]) {
                        if ($.isFunction(p.onclickPgButtons)) {
                            p.onclickPgButtons.call($t, 'next', $("#" + frmgr), npos[1][npos[0]]);
                        }
                        fillData(npos[1][npos[0] + 1], $t);
                        $($t).jqGrid("setSelection", npos[1][npos[0] + 1]);
                        if ($.isFunction(p.afterclickPgButtons)) {
                            p.afterclickPgButtons.call($t, 'next', $("#" + frmgr), npos[1][npos[0] + 1]);
                        }
                        updateNav(npos[0] + 1, npos);
                    }
                    focusaref();
                    return false;
                });
                $("#pData", "#" + frmtb + "_2").click(function () {
                    $("#FormError", "#" + frmtb).hide();
                    var ppos = getCurrPos();
                    if (ppos[0] !== -1 && ppos[1][ppos[0] - 1]) {
                        if ($.isFunction(p.onclickPgButtons)) {
                            p.onclickPgButtons.call($t, 'prev', $("#" + frmgr), ppos[1][ppos[0]]);
                        }
                        fillData(ppos[1][ppos[0] - 1], $t);
                        $($t).jqGrid("setSelection", ppos[1][ppos[0] - 1]);
                        if ($.isFunction(p.afterclickPgButtons)) {
                            p.afterclickPgButtons.call($t, 'prev', $("#" + frmgr), ppos[1][ppos[0] - 1]);
                        }
                        updateNav(ppos[0] - 1, ppos);
                    }
                    focusaref();
                    return false;
                });
                var posInit = getCurrPos();
                updateNav(posInit[0], posInit);
            });
        },
        delGridRow: function (rowids, p) {
            p = $.extend(true, {
                top: 0,
                left: 0,
                width: 240,
                height: 'auto',
                dataheight: 'auto',
                modal: false,
                overlay: 30,
                drag: true,
                resize: true,
                url: '',
                mtype: "POST",
                reloadAfterSubmit: true,
                beforeShowForm: null,
                beforeInitData: null,
                afterShowForm: null,
                beforeSubmit: null,
                onclickSubmit: null,
                afterSubmit: null,
                jqModal: true,
                closeOnEscape: false,
                delData: {},
                delicon: [],
                cancelicon: [],
                onClose: null,
                ajaxDelOptions: {},
                processing: false,
                serializeDelData: null,
                useDataProxy: false
            }, $.jgrid.del, p || {});
            rp_ge[$(this)[0].p.id] = p;
            return this.each(function () {
                var $t = this;
                if (!$t.grid) {
                    return;
                }
                if (!rowids) {
                    return;
                }
                var onBeforeShow = $.isFunction(rp_ge[$t.p.id].beforeShowForm),
                        onAfterShow = $.isFunction(rp_ge[$t.p.id].afterShowForm),
                        onBeforeInit = $.isFunction(rp_ge[$t.p.id].beforeInitData) ? rp_ge[$t.p.id].beforeInitData : false,
                        gID = $t.p.id,
                        onCS = {},
                        showFrm = true,
                        dtbl = "DelTbl_" + $.jgrid.jqID(gID),
                        postd, idname, opers, oper, dtbl_id = "DelTbl_" + gID,
                        IDs = {
                            themodal: 'delmod' + gID,
                            modalhead: 'delhd' + gID,
                            modalcontent: 'delcnt' + gID,
                            scrollelm: dtbl
                        };
                if ($.isArray(rowids)) {
                    rowids = rowids.join();
                }
                if ($("#" + $.jgrid.jqID(IDs.themodal))[0] !== undefined) {
                    if (onBeforeInit) {
                        showFrm = onBeforeInit.call($t, $("#" + dtbl));
                        if (showFrm === undefined) {
                            showFrm = true;
                        }
                    }
                    if (showFrm === false) {
                        return;
                    }
                    $("#DelData>td", "#" + dtbl).text(rowids);
                    $("#DelError", "#" + dtbl).hide();
                    if (rp_ge[$t.p.id].processing === true) {
                        rp_ge[$t.p.id].processing = false;
                        $("#dData", "#" + dtbl).removeClass('ui-state-active');
                    }
                    if (onBeforeShow) {
                        rp_ge[$t.p.id].beforeShowForm.call($t, $("#" + dtbl));
                    }
                    $.jgrid.viewModal("#" + $.jgrid.jqID(IDs.themodal), {
                        gbox: "#gbox_" + $.jgrid.jqID(gID),
                        gid: $t.p.id, //HB Customization
                        jqm: rp_ge[$t.p.id].jqModal,
                        jqM: false,
                        overlay: rp_ge[$t.p.id].overlay,
                        modal: rp_ge[$t.p.id].modal
                    });
                    if (onAfterShow) {
                        rp_ge[$t.p.id].afterShowForm.call($t, $("#" + dtbl));
                    }
                } else {
                    var dh = isNaN(rp_ge[$t.p.id].dataheight) ? rp_ge[$t.p.id].dataheight : rp_ge[$t.p.id].dataheight + "px",
                            dw = isNaN(p.datawidth) ? p.datawidth : p.datawidth + "px",
                            tbl = "<div id='" + dtbl_id + "' class='formdata' style='width:" + dw + ";overflow:auto;position:relative;height:" + dh + ";'>";
                    tbl += "<table class='DelTable'><tbody>";
                    // error data
                    tbl += "<tr id='DelError' style='display:none'><td class='ui-state-error'></td></tr>";
                    tbl += "<tr id='DelData' style='display:none'><td >" + rowids + "</td></tr>";
                    tbl += "<tr><td class=\"delmsg\" style=\"white-space:pre;\">" + rp_ge[$t.p.id].msg + "</td></tr><tr><td >&#160;</td></tr>";
                    // buttons at footer
                    tbl += "</tbody></table></div>";
                    var bS = "<a id='dData' class='fm-button ui-state-default ui-corner-all'>" + p.bSubmit + "</a>",
                            bC = "<a id='eData' class='fm-button ui-state-default ui-corner-all'>" + p.bCancel + "</a>";
                    tbl += "<table cellspacing='0' cellpadding='0' border='0' class='EditTable' id='" + dtbl + "_2'><tbody><tr><td><hr class='ui-widget-content' style='margin:1px'/></td></tr><tr><td class='DelButton EditButton'>" + bS + "&#160;" + bC + "</td></tr></tbody></table>";
                    p.gbox = "#gbox_" + $.jgrid.jqID(gID);
                    $.jgrid.createModal(IDs, tbl, p, "#gview_" + $.jgrid.jqID($t.p.id), $("#gview_" + $.jgrid.jqID($t.p.id))[0]);

                    if (onBeforeInit) {
                        showFrm = onBeforeInit.call($t, $("#" + dtbl));
                        if (showFrm === undefined) {
                            showFrm = true;
                        }
                    }
                    if (showFrm === false) {
                        return;
                    }

                    $(".fm-button", "#" + dtbl + "_2").hover(
                            function () {
                                $(this).addClass('ui-state-hover');
                            }, function () {
                        $(this).removeClass('ui-state-hover');
                    });
                    p.delicon = $.extend([true, "left", "ui-icon-scissors"], rp_ge[$t.p.id].delicon);
                    p.cancelicon = $.extend([true, "left", "ui-icon-cancel"], rp_ge[$t.p.id].cancelicon);
                    if (p.delicon[0] === true) {
                        $("#dData", "#" + dtbl + "_2").addClass(p.delicon[1] === "right" ? 'fm-button-icon-right' : 'fm-button-icon-left').append("<span class='ui-icon " + p.delicon[2] + "'></span>");
                    }
                    if (p.cancelicon[0] === true) {
                        $("#eData", "#" + dtbl + "_2").addClass(p.cancelicon[1] === "right" ? 'fm-button-icon-right' : 'fm-button-icon-left').append("<span class='ui-icon " + p.cancelicon[2] + "'></span>");
                    }
                    $("#dData", "#" + dtbl + "_2").click(function () {
                        var ret = [true, ""],
                                pk, postdata = $("#DelData>td", "#" + dtbl).text(); //the pair is name=val1,val2,...
                        onCS = {};
                        if ($.isFunction(rp_ge[$t.p.id].onclickSubmit)) {
                            onCS = rp_ge[$t.p.id].onclickSubmit.call($t, rp_ge[$t.p.id], postdata) || {};
                        }
                        if ($.isFunction(rp_ge[$t.p.id].beforeSubmit)) {
                            ret = rp_ge[$t.p.id].beforeSubmit.call($t, postdata);
                        }
                        if (ret[0] && !rp_ge[$t.p.id].processing) {
                            rp_ge[$t.p.id].processing = true;
                            opers = $t.p.prmNames;
                            postd = $.extend({}, rp_ge[$t.p.id].delData, onCS);
                            oper = opers.oper;
                            postd[oper] = opers.deloper;
                            idname = opers.id;
                            postdata = String(postdata).split(",");
                            if (!postdata.length) {
                                return false;
                            }
                            for (pk in postdata) {
                                if (postdata.hasOwnProperty(pk)) {
                                    postdata[pk] = $.jgrid.stripPref($t.p.idPrefix, postdata[pk]);
                                }
                            }
                            postd[idname] = postdata.join();
                            $(this).addClass('ui-state-active');
                            var ajaxOptions = $.extend({
                                url: rp_ge[$t.p.id].url || $($t).jqGrid('getGridParam', 'editurl'),
                                type: rp_ge[$t.p.id].mtype,
                                data: $.isFunction(rp_ge[$t.p.id].serializeDelData) ? rp_ge[$t.p.id].serializeDelData.call($t, postd) : postd,
                                complete: function (data, status) {
                                    var i;
                                    if (data.status >= 300 && data.status !== 304) {
                                        ret[0] = false;
                                        if ($.isFunction(rp_ge[$t.p.id].errorTextFormat)) {
                                            ret[1] = rp_ge[$t.p.id].errorTextFormat.call($t, data);
                                        } else {
                                            ret[1] = status + " Status: '" + data.statusText + "'. Error code: " + data.status;
                                        }
                                    } else {
                                        // data is posted successful
                                        // execute aftersubmit with the returned data from server
                                        if ($.isFunction(rp_ge[$t.p.id].afterSubmit)) {
                                            ret = rp_ge[$t.p.id].afterSubmit.call($t, data, postd);
                                        }
                                    }
                                    if (ret[0] === false) {
                                        $("#DelError>td", "#" + dtbl).html(ret[1]);
                                        $("#DelError", "#" + dtbl).show();
                                    } else {
                                        if (rp_ge[$t.p.id].reloadAfterSubmit && $t.p.datatype !== "local") {
                                            $($t).trigger("reloadGrid");
                                        } else {
                                            if ($t.p.treeGrid === true) {
                                                try {
                                                    $($t).jqGrid("delTreeNode", $t.p.idPrefix + postdata[0]);
                                                } catch (e) {
                                                }
                                            } else {
                                                for (i = 0; i < postdata.length; i++) {
                                                    $($t).jqGrid("delRowData", $t.p.idPrefix + postdata[i]);
                                                }
                                            }
                                            $t.p.selrow = null;
                                            $t.p.selarrrow = [];
                                        }
                                        if ($.isFunction(rp_ge[$t.p.id].afterComplete)) {
                                            setTimeout(function () {
                                                rp_ge[$t.p.id].afterComplete.call($t, data, postdata);
                                            }, 500);
                                        }
                                    }
                                    rp_ge[$t.p.id].processing = false;
                                    $("#dData", "#" + dtbl + "_2").removeClass('ui-state-active');
                                    if (ret[0]) {
                                        $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), {
                                            gb: "#gbox_" + $.jgrid.jqID(gID),
                                            jqm: p.jqModal,
                                            onClose: rp_ge[$t.p.id].onClose
                                        });
                                    }
                                }
                            }, $.jgrid.ajaxOptions, rp_ge[$t.p.id].ajaxDelOptions);


                            if (!ajaxOptions.url && !rp_ge[$t.p.id].useDataProxy) {
                                if ($.isFunction($t.p.dataProxy)) {
                                    rp_ge[$t.p.id].useDataProxy = true;
                                } else {
                                    ret[0] = false;
                                    ret[1] += " " + $.jgrid.errors.nourl;
                                }
                            }
                            if (ret[0]) {
                                if (rp_ge[$t.p.id].useDataProxy) {
                                    var dpret = $t.p.dataProxy.call($t, ajaxOptions, "del_" + $t.p.id);
                                    if (dpret === undefined) {
                                        dpret = [true, ""];
                                    }
                                    if (dpret[0] === false) {
                                        ret[0] = false;
                                        ret[1] = dpret[1] || "Error deleting the selected row!";
                                    } else {
                                        $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), {
                                            gb: "#gbox_" + $.jgrid.jqID(gID),
                                            jqm: p.jqModal,
                                            onClose: rp_ge[$t.p.id].onClose
                                        });
                                    }
                                } else {
                                    $.ajax(ajaxOptions);
                                }
                            }
                        }

                        if (ret[0] === false) {
                            $("#DelError>td", "#" + dtbl).html(ret[1]);
                            $("#DelError", "#" + dtbl).show();
                        }
                        return false;
                    });
                    $("#eData", "#" + dtbl + "_2").click(function () {
                        $.jgrid.hideModal("#" + $.jgrid.jqID(IDs.themodal), {
                            gb: "#gbox_" + $.jgrid.jqID(gID),
                            jqm: rp_ge[$t.p.id].jqModal,
                            onClose: rp_ge[$t.p.id].onClose
                        });
                        return false;
                    });
                    if (onBeforeShow) {
                        rp_ge[$t.p.id].beforeShowForm.call($t, $("#" + dtbl));
                    }
                    $.jgrid.viewModal("#" + $.jgrid.jqID(IDs.themodal), {
                        gbox: "#gbox_" + $.jgrid.jqID(gID),
                        gid: $t.p.id, //HB Customization
                        jqm: rp_ge[$t.p.id].jqModal,
                        overlay: rp_ge[$t.p.id].overlay,
                        modal: rp_ge[$t.p.id].modal
                    });
                    if (onAfterShow) {
                        rp_ge[$t.p.id].afterShowForm.call($t, $("#" + dtbl));
                    }
                }
                if (rp_ge[$t.p.id].closeOnEscape === true) {
                    setTimeout(function () {
                        $(".ui-jqdialog-titlebar-close", "#" + $.jgrid.jqID(IDs.modalhead)).focus();
                    }, 0);
                }
            });
        },
        navGrid: function (elem, o, pEdit, pAdd, pDel, pSearch, pView, pRefresh, pOrder) {
            o = $.extend({
                edit: true,
                editicon: "ui-icon-pencil",
                add: true,
                addicon: "ui-icon-plus",
                addicon_p: "uigrid-add-btn",
                // HB Customization
                del: true,
                delicon: "ui-icon-trash",
                delicon_p: "uigrid-del-btn",
                // HB Customization
                search: true,
                searchicon: "ui-icon-search",
                searchicon_p: "uigrid-search-btn",
                // HB Customization
                refresh: true,
                refreshicon: "ui-icon-refresh",
                refreshicon_p: "uigrid-refresh-btn",
                // HB Customization
                refreshstate: 'firstpage',
                view: false,
                viewicon: "ui-icon-document",
                viewicon_p: "ui-icon-refresh",
                // HB Customization
                position: "left",
                closeOnEscape: true,
                beforeRefresh: null,
                afterRefresh: null,
                cloneToTop: false,
                alertwidth: 200,
                alertheight: 'auto',
                alerttop: null,
                alertleft: null,
                alertzIndex: null
            }, $.jgrid.nav, o || {});
            return this.each(function () {
                if (this.nav) {
                    return;
                }
                var alertIDs = {
                    themodal: 'alertmod_' + this.p.id,
                    modalhead: 'alerthd_' + this.p.id,
                    modalcontent: 'alertcnt_' + this.p.id
                },
                $t = this, twd, tdw;
                if (!$t.grid || typeof elem !== 'string') {
                    return;
                }
                if ($("#" + alertIDs.themodal)[0] === undefined) {
                    if (!o.alerttop && !o.alertleft) {
                        if (window.innerWidth !== undefined) {
                            o.alertleft = window.innerWidth;
                            o.alerttop = window.innerHeight;
                        } else if (document.documentElement !== undefined && document.documentElement.clientWidth !== undefined && document.documentElement.clientWidth !== 0) {
                            o.alertleft = document.documentElement.clientWidth;
                            o.alerttop = document.documentElement.clientHeight;
                        } else {
                            o.alertleft = 1024;
                            o.alerttop = 768;
                        }
                        o.alertleft = o.alertleft / 2 - parseInt(o.alertwidth, 10) / 2;
                        o.alerttop = o.alerttop / 2 - 25;
                    }
                    $.jgrid.createModal(alertIDs, "<div>" + o.alerttext + "</div><span tabindex='0'><span tabindex='-1' id='jqg_alrt'></span></span>", {
                        gbox: "#gbox_" + $.jgrid.jqID($t.p.id),
                        jqModal: true,
                        drag: true,
                        resize: true,
                        caption: o.alertcap,
                        top: o.alerttop,
                        left: o.alertleft,
                        width: o.alertwidth,
                        height: o.alertheight,
                        closeOnEscape: o.closeOnEscape,
                        zIndex: o.alertzIndex
                    }, "#gview_" + $.jgrid.jqID($t.p.id), $("#gbox_" + $.jgrid.jqID($t.p.id))[0], true);
                }
                var clone = 1,
                        i, onHoverIn = function () {
                            if (!$(this).hasClass('ui-state-disabled')) {
                                $(this).addClass("ui-state-hover");
                            }
                        },
                        onHoverOut = function () {
                            $(this).removeClass("ui-state-hover");
                        };
                if (o.cloneToTop && $t.p.toppager) {
                    clone = 2;
                }
                var mOrder = ['add', 'edit', 'view', 'del', 'search', 'refresh'],
                        gOrder = (pOrder && $.isArray(pOrder.order)) ? pOrder.order : [];
                for (var b = 0; b < mOrder.length; b++) {
                    if ($.inArray(mOrder[b], gOrder) == -1) {
                        gOrder.push(mOrder[b]);
                    }
                }

                for (i = 0; i < clone; i++) {
                    var tbd,
                            // HB Customization << Start
                            //navtbl = $("<table cellspacing='0' cellpadding='0' border='0' class='ui-pg-table navtable' style='float:left;table-layout:auto;'><tbody><tr></tr></tbody></table>"),
                            //sep = "<td class='ui-pg-button ui-state-disabled' style='width:4px;'><span class='ui-separator'></span></td>",
                            navtbl = $("<table cellspacing='0' cellpadding='0' border='0' class='ui-pg-table navtable' style='float:left;table-layout:auto;'><tbody><tr><td class='pad-bot-none'></td></tr></tbody></table>"),
                            sep = '', add_id, edit_id, view_id, del_id, search_id, refresh_id,
                            // HB Customization >> End
                            pgid, elemids;
                    if (i === 0) {
                        pgid = elem;
                        elemids = $t.p.id;
                        if (pgid === $t.p.toppager) {
                            elemids += "_top";
                            clone = 1;
                        }
                    } else {
                        pgid = $t.p.toppager;
                        elemids = $t.p.id + "_top";
                    }
                    if ($t.p.direction === "rtl") {
                        $(navtbl).attr("dir", "rtl").css("float", "right");
                    }
                    var addButtonPrep = function () {
                        if (o.add) {
                            pAdd = pAdd || {};
                            // HB Customization << Start
                            if (pAdd.id) {
                                add_id = (i === 0) ? pAdd.id : pAdd.id + "_top";
                            } else {
                                add_id = "add_" + elemids;
                            }
                            tbd = $("<div class='ui-pg-button ui-grid-button ui-corner-all " + o.addicon_p + "'></div>");
                            $(tbd).append("<div class='btn'><span class='ui-icon " + o.addicon + "'></span>" + o.addtext + "</div>"); //ui-pg-div
                            // HB Customization >> End
                            $("td", navtbl).append(tbd);
                            $(tbd, navtbl).attr({
                                "title": o.addtitle || "",
                                id: add_id
                            }).click(function () {
                                if (!$(this).hasClass('ui-state-disabled')) {
                                    if ($.isFunction(o.addfunc)) {
                                        o.addfunc.call($t);
                                    } else {
                                        $($t).jqGrid("editGridRow", "new", pAdd);
                                    }
                                }
                                return false;
                            }).hover(onHoverIn, onHoverOut);
                            tbd = null;
                        }
                    }
                    var editButtonPrep = function () {
                        if (o.edit) {
                            tbd = $("<div class='ui-pg-button ui-grid-button ui-corner-all'></div>");
                            pEdit = pEdit || {};
                            // HB Customization << Start
                            if (pEdit.id) {
                                edit_id = (i === 0) ? pEdit.id : pEdit.id + "_top";
                            } else {
                                edit_id = "edit_" + elemids;
                            }
                            $(tbd).append("<div class='btn'><span class='ui-icon " + o.editicon + "'></span>" + o.edittext + "</div>");
                            // HB Customization >> End
                            $("td", navtbl).append(tbd);
                            $(tbd, navtbl).attr({
                                "title": o.edittitle || "",
                                id: edit_id
                            }).click(function () {
                                if (!$(this).hasClass('ui-state-disabled')) {
                                    var sr = $t.p.selrow;
                                    if (sr) {
                                        if ($.isFunction(o.editfunc)) {
                                            o.editfunc.call($t, sr);
                                        } else {
                                            $($t).jqGrid("editGridRow", sr, pEdit);
                                        }
                                    } else {
                                        $.jgrid.viewModal("#" + alertIDs.themodal, {
                                            gbox: "#gbox_" + $.jgrid.jqID($t.p.id),
                                            gid: $t.p.id, //HB Customization
                                            jqm: true
                                        });
                                        $("#jqg_alrt").focus();
                                    }
                                }
                                return false;
                            }).hover(onHoverIn, onHoverOut);
                            tbd = null;
                        }
                    }
                    var viewButtonPrep = function () {
                        if (o.view) {
                            // HB Customization << Start
                            tbd = $("<div class='ui-pg-button ui-grid-button ui-corner-all " + o.viewicon_p + "'></div>");
                            pView = pView || {};
                            if (pView.id) {
                                view_id = (i === 0) ? pView.id : pView.id + "_top";
                            } else {
                                view_id = "view_" + elemids;
                            }
                            $(tbd).append("<div class='btn'><span class='ui-icon " + o.viewicon + "'></span>" + o.viewtext + "</div>");
                            // HB Customization >> End
                            $("td", navtbl).append(tbd);
                            $(tbd, navtbl).attr({
                                "title": o.viewtitle || "",
                                id: view_id
                            }).click(function () {
                                if (!$(this).hasClass('ui-state-disabled')) {
                                    var sr = $t.p.selrow;
                                    if (sr) {
                                        if ($.isFunction(o.viewfunc)) {
                                            o.viewfunc.call($t, sr);
                                        } else {
                                            $($t).jqGrid("viewGridRow", sr, pView);
                                        }
                                    } else {
                                        $.jgrid.viewModal("#" + alertIDs.themodal, {
                                            gbox: "#gbox_" + $.jgrid.jqID($t.p.id),
                                            gid: $t.p.id, //HB Customization
                                            jqm: true
                                        });
                                        $("#jqg_alrt").focus();
                                    }
                                }
                                return false;
                            }).hover(onHoverIn, onHoverOut);
                            tbd = null;
                        }
                    }
                    var delButtonPrep = function () {
                        if (o.del) {
                            // HB Customization << Start
                            tbd = $("<div class='ui-pg-button ui-grid-button ui-corner-all " + o.delicon_p + "'></div>");
                            pDel = pDel || {};
                            if (pDel.id) {
                                del_id = (i === 0) ? pDel.id : pDel.id + "_top";
                            } else {
                                del_id = "del_" + elemids;
                            }
                            $(tbd).append("<div class='btn'><span class='ui-icon " + o.delicon + "'></span>" + o.deltext + "</div>");
                            // HB Customization >> End
                            $("td", navtbl).append(tbd);
                            $(tbd, navtbl).attr({
                                "title": o.deltitle || "",
                                id: del_id
                            }).click(function () {
                                if (!$(this).hasClass('ui-state-disabled')) {
                                    var dr;
                                    if ($t.p.multiselect) {
                                        dr = $t.p.selarrrow;
                                        if (dr.length === 0) {
                                            dr = null;
                                        }
                                    } else {
                                        dr = $t.p.selrow;
                                    }
                                    // HB Customization
                                    dr = ($.isArray($t.p.hiderecords) && $.isArray(dr)) ? $(dr).not($t.p.hiderecords).get() : dr;
                                    if (dr) {
                                        if ($.isFunction(o.delfunc)) {
                                            o.delfunc.call($t, dr);
                                        } else {
                                            $($t).jqGrid("delGridRow", dr, pDel);
                                        }
                                    } else {
                                        // HB Customization
                                        $.jgrid.info_dialog($.jgrid.del.caption, o.alerttext, o.alertbutton);
//                                        $.jgrid.viewModal("#" + alertIDs.themodal, {
//                                            gbox: "#gbox_" + $.jgrid.jqID($t.p.id),
//                                            gid: $t.p.id, //HB Customization
//                                            jqm: true
//                                        });
//                                        $("#jqg_alrt").focus();
                                    }
                                }
                                return false;
                            }).hover(onHoverIn, onHoverOut);
                            tbd = null;
                        }
                    }
                    //if (o.add || o.edit || o.del || o.view) {
                    //    $("td", navtbl).append(sep);
                    //}
                    var searchButtonPrep = function () {
                        if (o.search) {
                            // HB Customization << Start
                            tbd = $("<div class='ui-pg-button ui-grid-button ui-corner-all " + o.searchicon_p + "'></div>");
                            pSearch = pSearch || {};
                            if (pSearch.id) {
                                search_id = (i === 0) ? pSearch.id : pSearch.id + "_top";
                            } else {
                                search_id = "search_" + elemids;
                            }
                            $(tbd).append("<div class='btn'><span class='ui-icon " + o.searchicon + "'></span>" + o.searchtext + "</div>");
                            // HB Customization >> End
                            $("td", navtbl).append(tbd);
                            $(tbd, navtbl).attr({
                                "title": o.searchtitle || "",
                                id: search_id
                            }).click(function () {
                                if (!$(this).hasClass('ui-state-disabled')) {
                                    if ($.isFunction(o.searchfunc)) {
                                        o.searchfunc.call($t, pSearch);
                                    } else {
                                        $($t).jqGrid("searchGrid", pSearch);
                                    }
                                }
                                return false;
                            }).hover(onHoverIn, onHoverOut);
                            if (pSearch.showOnLoad && pSearch.showOnLoad === true) {
                                $(tbd, navtbl).click();
                            }
                            tbd = null;
                        }
                    }
                    var refreshButtonPrep = function () {
                        if (o.refresh) {
                            // HB Customization << Start
                            tbd = $("<div class='ui-pg-button ui-grid-button ui-corner-all " + o.refreshicon_p + "'></div>");
                            pRefresh = pRefresh || {};
                            if (pRefresh.id) {
                                refresh_id = (i === 0) ? pRefresh.id : pRefresh.id + "_top";
                            } else {
                                refresh_id = "refresh_" + elemids;
                            }
                            $(tbd).append("<div class='btn'><span class='ui-icon " + o.refreshicon + "'></span>" + o.refreshtext + "</div>");
                            // HB Customization >> End
                            $("td", navtbl).append(tbd);
                            $(tbd, navtbl).attr({
                                "title": o.refreshtitle || "",
                                id: refresh_id
                            }).click(function () {
                                if (!$(this).hasClass('ui-state-disabled')) {
                                    if ($.isFunction(o.beforeRefresh)) {
                                        o.beforeRefresh.call($t);
                                    }
                                    $t.p.search = false;
                                    $t.p.resetsearch = true;
                                    try {
                                        var gID = $t.p.id;
                                        $t.p.postData.filters = "";
                                        try {
                                            $("#fbox_" + $.jgrid.jqID(gID)).jqFilter('resetFilter');
                                        } catch (ef) {
                                        }
                                        if ($.isFunction($t.clearToolbar)) {
                                            $t.clearToolbar.call($t, false);
                                        }
                                    } catch (e) {
                                    }
                                    switch (o.refreshstate) {
                                        case 'firstpage':
                                            $($t).trigger("reloadGrid", [{
                                                    page: 1
                                                }]);
                                            break;
                                        case 'current':
                                            $($t).trigger("reloadGrid", [{
                                                    current: true
                                                }]);
                                            break;
                                    }
                                    if ($.isFunction(o.afterRefresh)) {
                                        o.afterRefresh.call($t);
                                    }
                                }
                                return false;
                            }).hover(onHoverIn, onHoverOut);
                            tbd = null;
                        }
                    }
                    // HB Customization << Start
                    for (var b = 0; b < gOrder.length; b++) {
                        switch (gOrder[b]) {
                            case 'add':
                                addButtonPrep();
                                break;
                            case 'edit':
                                editButtonPrep();
                                break;
                            case 'view':
                                viewButtonPrep();
                                break;
                            case 'del':
                                delButtonPrep();
                                break;
                            case 'search':
                                searchButtonPrep();
                                break;
                            case 'refresh':
                                refreshButtonPrep();
                                break;
                        }
                    }
                    // HB Customization >> End
                    tdw = $(".ui-jqgrid").css("font-size") || "11px";
                    $('body').append("<div id='testpg2' class='ui-jqgrid ui-widget ui-widget-content' style='font-size:" + tdw + ";visibility:hidden;' ></div>");
                    twd = $(navtbl).clone().appendTo("#testpg2").width();
                    $("#testpg2").remove();
                    $(pgid + "_" + o.position, pgid).append(navtbl);

                    // HB Customization << Start
                    if (i === 1) {
                        var globalFilt = ($t.p.searchGrid && $t.p.searchGrid.globalFilter) ? true : false;
                        var topFilt = ($t.p.searchGrid && $.isArray($t.p.searchGrid.topFilters) && $t.p.searchGrid.topFilters.length) ? true : false;
                        var viewPort = ($($t.p.viewtemplate).length || $($t.p.gridtemplate).length) ? true : false;
                        var searchTool = ($t.p.searchGrid && $t.p.searchGrid.searchToolbar) ? true : false;
                        var savedSearch = ($t.p.searchGrid && $t.p.searchGrid.savedSearch) ? true : false;
                        var topSearchContainer = function (te, tv) {
                            var tsele = $('<input type="text" />').attr({
                                name: 'topfilter_container_' + elemids,
                                id: 'topfilter_container_' + elemids,
                            }).addClass('topfilter-container');
                            if (te.className) {
                                $(tsele).addClass(te.className);
                            }
                            switch (te.type) {
                                case 'dropdown':
                                    tsele = '<select name="topfilter_container_' + elemids + '" id="topfilter_container_' + elemids + '" class="topfilter-container top-filter-chosen" multiple=true aria-parent-overflow="true">';
                                    if (te.options && te.options.value) {
                                        var tsdrp = te.options.value;
                                        for (var d in tsdrp) {
                                            tsele += '<option value="' + d + '">' + tsdrp[d] + '</option>';
                                        }
                                    }
                                    te.options.selected = tv;
                                    tsele += '</select>';
                                    break;
                                case 'autocomplete':
                                    $(tsele).addClass('top-filter-autocomplete');
                                    te.options.selected = tv;
                                    break;
                                default:
                                    $(tsele).val(tv);
                                    break;
                            }
                            $("#topfilter_container_box_" + elemids).html(tsele);
                            if (te.options) {
                                if ($.isFunction(te.options.dataInit)) {
                                    te.options.dataInit.call($t, $("#topfilter_container_" + elemids), te.options, te.name, te.unique, elemids, $t.p.id);
                                } else if ($.isFunction(window[te.options.dataInit])) {
                                    window[te.options.dataInit].call($t, $("#topfilter_container_" + elemids), te.options, te.name, te.unique, elemids, $t.p.id);
                                }
                            }
                        }
                        var timeoutHnd, tsd, gdv, ldv, sdv, lsv, ssf, ssv;
                        var srhtbl = $("<table cellspacing='0' cellpadding='0' border='0' class='ui-pg-table navtable' style='float:right;table-layout:auto;'><tbody><tr><td></td></tr></tbody></table>");
                        if (searchTool == true) {
                            sdv = $("<div class='listsearch-container' id='listsearch_" + elemids + "' title='" + $t.p.quicktext + "' />")
                                    .click(function () {
                                        $(this).addClass("active");
                                        if ($t.p.listview == "view" || $t.p.listview == "grid") {
                                            if ($("#hbox_" + $t.p.id + "_jqgrid").parent().is(":visible")) {
                                                $("#hbox_" + $t.p.id + "_jqgrid").parent().find(".ui-search-toolbar").hide();
                                            } else {
                                                $("#hbox_" + $t.p.id + "_jqgrid").parent().find(".ui-search-toolbar").show();
                                            }
                                            $("#hbox_" + $t.p.id + "_jqgrid").parent().toggle(400, function () {
                                                if ($t.p.afterSearchToggle && $.isFunction($t.p.afterSearchToggle)) {
                                                    $t.p.afterSearchToggle($t.p.id);
                                                }
                                            });
                                        } else {
                                            $("#hbox_" + $t.p.id + "_jqgrid").parent().find(".ui-search-toolbar").toggle(400, function () {
                                                if ($t.p.afterSearchToggle && $.isFunction($t.p.afterSearchToggle)) {
                                                    $t.p.afterSearchToggle($t.p.id);
                                                }
                                            });
                                        }
                                    });
                            $(sdv).append("<span class='icon15 brocco-icon-filter'></span>");
                            if ($t.p.searchGrid.showToolbarLabel) {
                                $(sdv).append($t.p.quicktext + " &nbsp;");
                            }
                            $("td", srhtbl).append(sdv);
                        }
                        if ($t.p.listview == "view" || $t.p.listview == "grid") {
                            $("#hbox_" + $t.p.id + "_jqgrid").parent().hide();
                        }

                        if (savedSearch == true) {
                            ssf = $("<div class='savesearch-container' id='savesearch_" + elemids + "' title='" + $t.p.savesearch + "' />")
                                    .click(function () {
                                        if ($t.p.searchGrid.savedSearchForm && $.isFunction($t.p.searchGrid.savedSearchForm)) {
                                            $t.p.searchGrid.savedSearchForm($t.p.id);
                                        }
                                    });
                            $(ssf).append("<span class='icon15 brocco-icon-bookmark-2'></span>");
                            if ($t.p.searchGrid.savedSearchLabel) {
                                $(ssf).append($t.p.savesearch + " &nbsp;");
                            }
                            $("td", srhtbl).append(ssf);

                            ssv = $("<div class='showsearch-container' id='showsearch_" + elemids + "' title='" + $t.p.searchlist + "' />")
                                    .click(function () {
                                        if ($t.p.searchGrid.savedSearchList && $.isFunction($t.p.searchGrid.savedSearchList)) {
                                            $t.p.searchGrid.savedSearchList($t.p.id);
                                        }
                                    });
                            $(ssv).append("<span class='icon15 brocco-icon-list'></span>");
                            if ($t.p.searchGrid.savedSearchLabel) {
                                $(ssv).append($t.p.searchlist + " &nbsp;");
                            }
                            $("td", srhtbl).append(ssv);
                        }

                        if (viewPort === true) {
                            //grid sort icon
                            lsv = $("<div class='listsort-container' id='listsort_" + elemids + "' title='" + $t.p.chsorttext + "'/>")
                                    .click(function () {
                                        var goffset, gwidth, gheight, scol, sord, sobj;
                                        goffset = $(this).offset();
                                        gwidth = $(this).outerWidth();
                                        gheight = $(this).outerHeight();
                                        scol = $t.p.sortname;
                                        sord = $t.p.sortorder;
                                        $('#listsort_block_' + elemids).find('.listsort-item').removeClass("active");
                                        $('#listsort_block_' + elemids).find('[aria-list-col="' + scol + '"]').addClass("active");
                                        $('#listsort_block_' + elemids).find('.listsort-item').find(".icon").removeClass("selected").addClass("disabled");
                                        sobj = $('#listsort_block_' + elemids).find('[aria-list-col="' + scol + '"]').find(".icon");
                                        $(sobj).addClass("selected").removeClass("disabled");
                                        if (sord == 'desc') {
                                            $(sobj).addClass("fa-sort-amount-desc").removeClass("fa-sort-amount-asc");
                                        } else {
                                            $(sobj).addClass("fa-sort-amount-asc").removeClass("fa-sort-amount-desc");
                                        }
                                        $('#listsort_block_' + elemids).css({
                                            "right": $(window).width() - goffset.left - gwidth - 8,
                                            "top": parseInt(goffset.top) + gheight
                                        }).addClass('active').show();
                                        $(document).on('mousedown', function (e) {
                                            if (!$(e.target).closest(".listsort-block").length) {
                                                $('#listsort_block_' + elemids).removeClass("active");
                                            }
                                        });
                                    });
                            var cm = $t.p.colModel;
                            var lstr = '', nm, slbl, sord, ocls;
                            slbl = $t.p.sortname;
                            sord = $t.p.sortorder;
                            for (var c = 0; c < cm.length; c++) {
                                nm = cm[c].name;
                                if (nm != 'cb' && nm != 'rn' && nm != 'subgrid' && nm != 'prec' && cm[c].sortable) {
                                    lstr += '<li><a href="javascript://" class="listsort-item" aria-list-num="' + c + '" aria-list-col="' + nm + '" aria-list-ord="asc"><span class="lv-label">' + cm[c].label + '</span><span class="fa fa-sort-amount-asc icon fa-14 disabled"></span></li>';
                                    if ($t.p.sortname == nm) {
                                        slbl = cm[c].label;
                                    }
                                }
                            }
                            if (sord == "desc") {
                                ocls = "fa-sort-amount-desc";
                            } else {
                                ocls = "fa-sort-amount-asc";
                            }
                            $(lsv).append("<span class='sort-item-label'>" + slbl + "</span><span class='fa " + ocls + " sort-item-icon fa-14'></span>");
                            $("td", srhtbl).append(lsv);
                            $("body").append('<ul class="listsort-block" id="listsort_block_' + elemids + '">' + lstr + '</ul>');
                            $('#listsort_block_' + elemids).find(".listsort-item").on('click', function () {
                                $('#listsort_block_' + elemids).find('.listsort-item').removeClass("active");
                                $(this).addClass("active");
                                $(this).find(".icon").removeClass("disabled").addClass("selected");
                                var lnum, lcol, lord, ci, r, d, elem;
                                lnum = $(this).attr("aria-list-num");
                                lcol = $(this).attr("aria-list-col");
                                lord = $(this).attr("aria-list-ord");
                                elem = $("#" + $t.p.id + "_" + lcol);
                                $t.sortData($('div', elem)[0].id, lnum, r, d, elem);
                                $('#listsort_block_' + elemids).removeClass("active");
                            });

                            //grid view icon
                            ldv = $("<div class='listgrid-container' id='listgrid_" + elemids + "' title='" + $t.p.chviewtext + "'/>")
                                    .click(function () {
                                        var goffset, gwidth, gheight;
                                        goffset = $(this).offset();
                                        gwidth = $(this).outerWidth();
                                        gheight = $(this).outerHeight();
                                        $('#listgrid_block_' + elemids).css({
                                            "right": $(window).width() - goffset.left - gwidth - 8,
                                            "top": parseInt(goffset.top) + gheight
                                        }).addClass('active').show();
                                        $(document).on('mousedown', function (e) {
                                            if (!$(e.target).closest(".listgrid-block").length) {
                                                $('#listgrid_block_' + elemids).removeClass("active");
                                            }
                                        });
                                    });
                            $(ldv).append("<span class='icon18 iconic-icon-eye'></span>");
                            if ($t.p.showListViewLabel) {
                                $(ldv).append($t.p.chviewtext + " &nbsp;");
                            }
                            $("td", srhtbl).append(ldv);
                            var lstr = '';
                            lstr += '<li><a href="javascript://" class="listgrid-item ' + (($t.p.listview != 'view' && $t.p.listview != 'grid') ? 'active' : '') + '" aria-list-type="list"><span class="lv-label">' + $t.p.lvtext.table + '</span><span class="icon16 lv-select-icon minia-icon-list-3"></span></li>';
                            if ($($t.p.viewtemplate).length) {
                                lstr += '<li><a href="javascript://" class="listgrid-item ' + ($t.p.listview == 'view' ? 'active' : '') + '" aria-list-type="view"><span class="lv-label">' + $t.p.lvtext.view + '</span><span class="icon16 lv-select-icon minia-icon-list-2"></span></li>';
                            }
                            if ($($t.p.gridtemplate).length) {
                                lstr += '<li><a href="javascript://" class="listgrid-item ' + ($t.p.listview == 'grid' ? 'active' : '') + '" aria-list-type="grid"><span class="lv-label">' + $t.p.lvtext.grid + '</span><span class="icon16 lv-select-icon icomoon-icon-grid-view-2"></span></li>';
                            }
                            $("body").append('<ul class="listgrid-block" id="listgrid_block_' + elemids + '">' + lstr + '</ul>');
                            $('#listgrid_block_' + elemids).find(".listgrid-item").on('click', function () {
                                if (!$(this).hasClass("active")) {
                                    $('#listgrid_block_' + elemids).find('.listgrid-item').removeClass("active");
                                    $(this).addClass("active");
                                    var altype = $(this).attr("aria-list-type")
                                    if ($t.p.listview != altype) {
                                        $t.p.listview = altype;
                                        if ($t.p.viewCallback && $.isFunction($t.p.viewCallback)) {
                                            $t.p.viewCallback($t.p.id, altype);
                                        }
                                    }
                                    if (altype == "view") {
                                        $("#" + $t.p.id + "_toppager_left").find("#del_" + elemids).show();
                                        $("#" + $t.p.id + "_toppager_left").find("div[id^='status'][id$='" + elemids + "']").show();
                                        $("#" + $t.p.id + "_toppager_left").find("#columns_" + elemids).hide();
                                        $("#" + $t.p.id + "_toppager_left").find("#groupfilter_" + elemids).hide();
                                        $("#hbox_" + $t.p.id + "_jqgrid").parent().hide();
                                    } else if (altype == "grid") {
                                        $("#" + $t.p.id + "_toppager_left").find("#del_" + elemids).hide();
                                        $("#" + $t.p.id + "_toppager_left").find("div[id^='status'][id$='" + elemids + "']").hide();
                                        $("#" + $t.p.id + "_toppager_left").find("#columns_" + elemids).hide();
                                        $("#" + $t.p.id + "_toppager_left").find("#groupfilter_" + elemids).hide();
                                        $("#hbox_" + $t.p.id + "_jqgrid").parent().hide();
                                    } else {
                                        $("#" + $t.p.id + "_toppager_left").find("#del_" + elemids).show();
                                        $("#" + $t.p.id + "_toppager_left").find("div[id^='status'][id$='" + elemids + "']").show();
                                        $("#" + $t.p.id + "_toppager_left").find("#columns_" + elemids).show();
                                        $("#" + $t.p.id + "_toppager_left").find("#groupfilter_" + elemids).show();
                                        if ($("#hbox_" + $t.p.id + "_jqgrid").parent().is(":hidden")) {
                                            $("#hbox_" + $t.p.id + "_jqgrid").parent().show();
                                            $("#hbox_" + $t.p.id + "_jqgrid").parent().find(".ui-search-toolbar").hide();
                                            $("#listsearch_" + $t.p.id + "_top").removeClass("active");
                                        }
                                    }
                                }
                                $('#listgrid_block_' + elemids).removeClass("active");
                            });

                            if ($t.p.listview == "view" || $t.p.listview == "grid") {
                                if ($t.p.listview == "view") {
                                    $("#" + $t.p.id + "_toppager_left").find("#del_" + elemids).show();
                                    $("#" + $t.p.id + "_toppager_left").find("div[id^='status'][id$=" + elemids + "]").show();
                                    $("#" + $t.p.id + "_toppager_left").find("#columns_" + elemids).hide();
                                    $("#" + $t.p.id + "_toppager_left").find("#groupfilter_" + elemids).hide();
                                } else if ($t.p.listview == "grid") {
                                    $("#" + $t.p.id + "_toppager_left").find("#del_" + elemids).hide();
                                    $("#" + $t.p.id + "_toppager_left").find("div[id^='status'][id$=" + elemids + "]").hide();
                                    $("#" + $t.p.id + "_toppager_left").find("#columns_" + elemids).hide();
                                    $("#" + $t.p.id + "_toppager_left").find("#groupfilter_" + elemids).hide();
                                }
                            }
                        }
                        if ($t.p.grouping === true) {
                            gdv = $("<div class='groupfilter-container' id='groupfilter_" + elemids + "' title='" + $t.p.chgrouptext + "'/>")
                                    .click(function () {
                                        var goffset, gwidth, gheight;
                                        goffset = $(this).offset();
                                        gwidth = $(this).outerWidth();
                                        gheight = $(this).outerHeight();
                                        $('#groupfilter_list_' + elemids).css({
                                            "right": $(window).width() - goffset.left - gwidth - 8,
                                            "top": parseInt(goffset.top) + gheight
                                        }).addClass('active').show();
                                        $(document).on('mousedown', function (e) {
                                            if (!$(e.target).closest(".groupfilter-list").length) {
                                                $('#groupfilter_list_' + elemids).removeClass("active");
                                            }
                                        });
                                    });
                            $(gdv).append("<span class='icon14 icomoon-icon-tree-view'></span>");
                            $("td", srhtbl).append(gdv);
                            var cm = $t.p.colModel, gstr = '', act_cls = '';
                            var garr = ($t.p.groupingView) ? $t.p.groupingView.groupField : [];
                            for (var c = 0; c < cm.length; c++) {
                                if (cm[c]['setgroup'] && cm[c]['setgroup'] === true || $.inArray(cm[c]['name'], garr) != -1) {
                                    act_cls = (cm[c]['name'] == $t.p.groupingView.groupField[0]) ? 'active' : '';
                                    gstr += '<li><a href="javascript://" class="groupfilter-item ' + act_cls + '" aria-group-name="' + cm[c]['name'] + '"><span class="gf-label">' + cm[c]['label'] + '</span><span class="icon14 gf-select-icon"></span></li>';
                                }
                            }
                            $("body").append('<ul class="groupfilter-list" id="groupfilter_list_' + elemids + '">' + gstr + '</ul>');
                            $('#groupfilter_list_' + elemids).find(".groupfilter-item").on('click', function () {
                                if ($(this).hasClass("active")) {
                                    $('#groupfilter_list_' + elemids).find('.groupfilter-item').removeClass("active");
                                    $($t).jqGrid('groupingRemove', true, true);
                                } else {
                                    $('#groupfilter_list_' + elemids).find('.groupfilter-item').removeClass("active");
                                    $(this).addClass("active");
                                    var darr = [$(this).attr("aria-group-name")];
                                    if ($t.p.groupingView.groupField.length > 1) {
                                        darr.push($t.p.groupingView.groupField[1]);
                                    }
                                    $($t).jqGrid('groupingGroupBy', darr);
                                }
                                $('#groupfilter_list_' + elemids).removeClass("active");
                            });
                        }
                        if (topFilt === true || globalFilt === true) {
                            tsd = $("<div class='topfilter-container' id='topfilter_" + elemids + "'></div>");
                            var tf = $t.p.searchGrid.topFilters, tsm, tsc, ctrl_css = '';
                            if (globalFilt === true) {
                                ctrl_css = 'display:none;';
                            }
                            tsm = '<div class="topfilter-ctrl-box" id="topfilter_ctrl_box_' + elemids + '" style="' + ctrl_css + '"><select name="topfilter_ctrl_' + elemids + '" id="topfilter_ctrl_' + elemids + '" class="topfilter-ctrl">';
                            if (globalFilt === true) {
                                tsm += '<option value="_global" aria-filter-name="_global"></option>'
                            } else {
                                for (var f = 0; f < tf.length; f++) {
                                    tsm += '<option value="' + tf[f].unique + '" aria-filter-name="' + tf[f].name + '">' + tf[f].label + '</option>'
                                }
                            }
                            tsm += '</select></div>';
                            tsm += '<div class="topfilter-container-box" id="topfilter_container_box_' + elemids + '"></div>';
                            $(tsd).append(tsm);
                            $("td", srhtbl).append(tsd);
                        }

                        $(pgid + "_" + o.position, pgid).append(srhtbl);

                        if (topFilt === true || globalFilt === true) {
                            if (globalFilt === true) {
                                topSearchContainer({'className': 'global-search-box'});
                            } else {
                                topSearchContainer($t.p.searchGrid.topFilters[0]);
                            }
                            $("select.topfilter-ctrl", tsd).change(function (e) {
                                var cf = $t.p.searchGrid.topFilters;
                                if ($(this).val() == "_global") {
                                    topSearchContainer({'className': 'global-search-box'}, $(this).attr("aria-top-val"));
                                    $(this).removeAttr("aria-top-val");
                                    $(this).removeAttr("aria-top-txt");
                                } else {
                                    for (var f = 0; f < cf.length; f++) {
                                        if (cf[f]['unique'] == $(this).val()) {
                                            if (cf[f].type == "autocomplete") {
                                                topSearchContainer(cf[f], $(this).attr("aria-top-txt"));
                                            } else if (cf[f].type == "dropdown") {
                                                topSearchContainer(cf[f], $(this).attr("aria-top-val"));
                                            } else {
                                                topSearchContainer(cf[f], $(this).attr("aria-top-val"));
                                            }
                                            $(this).removeAttr("aria-top-val");
                                            $(this).removeAttr("aria-top-txt");
                                            break;
                                        }
                                    }
                                }
                            });
                            $(document).on("keydown", "input.topfilter-container", function (e) {
                                var key = e.which, that = this;
                                if ((key == 8) || (key >= 46 && key <= 90) || (key >= 96 && key <= 111) || (key >= 188 && key <= 192) || (key >= 219 && key <= 221) || (key == 222 && e.shiftKey == true)) {
                                    if (timeoutHnd) {
                                        clearTimeout(timeoutHnd);
                                    }
                                    timeoutHnd = setTimeout(function () {
                                        if ($.isFunction($t.p.searchGrid.topDataInit)) {
                                            $t.p.searchGrid.topDataInit.call($t, $t.p.id, $('#topfilter_ctrl_' + elemids).val(), $(that).val());
                                        } else if ($.isFunction(window[$t.p.searchGrid.topDataInit])) {
                                            window[$t.p.searchGrid.topDataInit].call($t, $t.p.id, $('#topfilter_ctrl_' + elemids).val(), $(that).val());
                                        }
                                    }, 500);
                                }
                            });
                            $(document).on("change", "select.topfilter-container", function (e) {
                                var fkn = $('#topfilter_ctrl_' + elemids).find("option:selected").attr("aria-filter-name");
                                if ($.isFunction($t.p.searchGrid.topDataInit)) {
                                    $t.p.searchGrid.topDataInit.call($t, $t.p.id, fkn, $(this).val());
                                } else if ($.isFunction(window[$t.p.searchGrid.topDataInit])) {
                                    window[$t.p.searchGrid.topDataInit].call($t, $t.p.id, fkn, $(this).val());
                                }
                            });
                        }
                        // HB Customization >> End
                    }
                    if ($t.p._nvtd) {
                        if (twd > $t.p._nvtd[0]) {
                            $(pgid + "_" + o.position, pgid).width(twd);
                            $t.p._nvtd[0] = twd;
                        }
                        $t.p._nvtd[1] = twd;
                    }
                    tdw = null;
                    twd = null;
                    navtbl = null;
                    this.nav = true;
                }
            });
        },
        navButtonAdd: function (elem, p) {
            p = $.extend({
                caption: "newButton",
                title: '',
                buttonicon: 'ui-icon-newwin',
                buttonicon_p: 'uigrid-custom-btn',
                // HB Customization
                buttonname: false,
                // HB Customization
                onClickButton: null,
                position: "last",
                cursor: 'pointer',
                afterButtonId: '' // HB Customization
            }, p || {});
            return this.each(function () {
                if (!this.grid) {
                    return;
                }
                if (typeof elem === "string" && elem.indexOf("#") !== 0) {
                    elem = "#" + $.jgrid.jqID(elem);
                }
                var findnav = $(".navtable", elem)[0],
                        $t = this;
                if (findnav) {
                    if (p.id && $("#" + $.jgrid.jqID(p.id), findnav)[0] !== undefined) {
                        return;
                    }
                    // HB Customization << Start
                    var tbd = $("<div class='" + p.buttonicon_p + "'></div>");
                    if (p.buttonname) {
                        var div_cls = 'btn';
                        var span_cls = "ui-icon " + p.buttonicon;
                        var extra_atr = '';
                        switch (p.buttonname) {
                            case 'collapse':
                                //extra_atr = " aria-sg-exp='subgrid-collapse-all' "; 
                                div_cls = "btn subgrid-collapse-all";
                                span_cls = p.buttonicon;
                                break;
                            case 'expand':
                                //extra_atr = " aria-sg-col='subgrid-expand-all' "; 
                                div_cls = "btn subgrid-expand-all";
                                span_cls = p.buttonicon;
                                break;
                            case 'addnew':
                                //extra_atr = " aria-iadd-new='"+p.id+"' "; 
                                div_cls = "btn inline-add-new";
                                span_cls = p.buttonicon;
                                break;
                            case 'saveall':
                                //extra_atr = " aria-isave-all='"+p.id+"' "; 
                                div_cls = "btn inline-save-all";
                                span_cls = p.buttonicon;
                                break;
                            case 'cancelall':
                                //extra_atr = " aria-icancel-all='"+p.id+"' "; 
                                div_cls = "btn inline-cancel-all";
                                span_cls = p.buttonicon;
                                break;
                            case 'addexpence':
                                //extra_atr = " aria-icancel-all='"+p.id+"' "; 
                                div_cls = "btn inline-add-expence";
                                span_cls = p.buttonicon;
                                break;
                        }
                        $(tbd).addClass('ui-pg-button ui-grid-button ui-corner-all').append("<div " + extra_atr + " class='" + div_cls + "'><span class='" + span_cls + "'></span>" + p.caption + "</div>");
                    } else if (p.buttonicon.toString().toUpperCase() == "NONE") {
                        $(tbd).addClass('ui-pg-button ui-grid-button ui-corner-all').append("<div class='btn'>" + p.caption + "</div>");
                    } else {
                        $(tbd).addClass('ui-pg-button ui-grid-button ui-corner-all').append("<div class='btn'><span class='ui-icon " + p.buttonicon + "'></span>" + p.caption + "</div>");
                    }
                    if (p.id) {
                        $(tbd).attr("id", p.id);
                    }
                    if (p.afterButtonId != '' && $("#" + p.afterButtonId).length) {
                        $("#" + p.afterButtonId).after(tbd);
                    } else if (p.position == 'first') {
                        if ($("td", findnav).find("div.ui-grid-button").length === 0) {
                            $("td", findnav).append(tbd);
                        } else {
                            $("td div.ui-grid-button:eq(0)", findnav).before(tbd);
                        }
                    } else {
                        $("td", findnav).append(tbd);
                    }
                    if ($t.p.listview == "view" || $t.p.listview == "grid") {
                        if ($t.p.listview == "view") {
                            $("#" + $t.p.id + "_toppager_left").find("#del_" + $t.p.id + "_top").show();
                            $("#" + $t.p.id + "_toppager_left").find("div[id^='status'][id$=" + $t.p.id + "_top]").show();
                            $("#" + $t.p.id + "_toppager_left").find("#columns_" + $t.p.id + "_top").hide();
                            $("#" + $t.p.id + "_toppager_left").find("#groupfilter_" + $t.p.id + "_top").hide();
                        } else if ($t.p.listview == "grid") {
                            $("#" + $t.p.id + "_toppager_left").find("#del_" + $t.p.id + "_top").hide();
                            $("#" + $t.p.id + "_toppager_left").find("div[id^='status'][id$=" + $t.p.id + "_top]").hide();
                            $("#" + $t.p.id + "_toppager_left").find("#columns_" + $t.p.id + "_top").hide();
                            $("#" + $t.p.id + "_toppager_left").find("#groupfilter_" + $t.p.id + "_top").hide();
                        }
                    }
                    // HB Customization >> End
                    $(tbd, findnav).attr("title", p.title || "").attr("lang", p.lang || "") // HB Customization
                            .click(function (e) {
                                if (!$(this).hasClass('ui-state-disabled')) {
                                    if ($.isFunction(p.onClickButton)) {
                                        p.onClickButton.call($t, e, p);
                                    }
                                }
                                return false;
                            }).hover(
                            function () {
                                if (!$(this).hasClass('ui-state-disabled')) {
                                    $(this).addClass('ui-state-hover');
                                }
                            }, function () {
                        $(this).removeClass("ui-state-hover");
                    });
                }
            });
        },
        navSeparatorAdd: function (elem, p) {
            p = $.extend({
                sepclass: "ui-separator",
                sepcontent: '',
                position: "last"
            }, p || {});
            return this.each(function () {
                if (!this.grid) {
                    return;
                }
                if (typeof elem === "string" && elem.indexOf("#") !== 0) {
                    elem = "#" + $.jgrid.jqID(elem);
                }
                var findnav = $(".navtable", elem)[0];
                if (findnav) {
                    var sep = "<div class='ui-pg-button ui-grid-button ui-state-disabled' style='width:4px;'><span class='" + p.sepclass + "'></span>" + p.sepcontent + "</div>";
                    if (p.position === 'first') {
                        if ($("td", findnav).find("div.ui-grid-button").length === 0) {
                            $("td", findnav).append(sep);
                        } else {
                            $("td div.ui-grid-button:eq(0)", findnav).before(sep);
                        }
                    } else {
                        $("td", findnav).append(sep);
                    }
                }
            });
        },
        GridToForm: function (rowid, formid) {
            return this.each(function () {
                var $t = this,
                        i;
                if (!$t.grid) {
                    return;
                }
                var rowdata = $($t).jqGrid("getRowData", rowid);
                if (rowdata) {
                    for (i in rowdata) {
                        if (rowdata.hasOwnProperty(i)) {
                            if ($("[name=" + $.jgrid.jqID(i) + "]", formid).is("input:radio") || $("[name=" + $.jgrid.jqID(i) + "]", formid).is("input:checkbox")) {
                                $("[name=" + $.jgrid.jqID(i) + "]", formid).each(function () {
                                    if ($(this).val() == rowdata[i]) {
                                        $(this)[$t.p.useProp ? 'prop' : 'attr']("checked", true);
                                    } else {
                                        $(this)[$t.p.useProp ? 'prop' : 'attr']("checked", false);
                                    }
                                });
                            } else {
                                // this is very slow on big table and form.
                                $("[name=" + $.jgrid.jqID(i) + "]", formid).val(rowdata[i]);
                            }
                        }
                    }
                }
            });
        },
        FormToGrid: function (rowid, formid, mode, position) {
            return this.each(function () {
                var $t = this;
                if (!$t.grid) {
                    return;
                }
                if (!mode) {
                    mode = 'set';
                }
                if (!position) {
                    position = 'first';
                }
                var fields = $(formid).serializeArray();
                var griddata = {};
                $.each(fields, function (i, field) {
                    griddata[field.name] = field.value;
                });
                if (mode === 'add') {
                    $($t).jqGrid("addRowData", rowid, griddata, position);
                } else if (mode === 'set') {
                    $($t).jqGrid("setRowData", rowid, griddata);
                }
            });
        }
    });
})(jQuery); /*jshint eqeqeq:false, eqnull:true, devel:true */
/*global jQuery */
(function ($) {
    /**
     * jqGrid extension for manipulating Grid Data
     * Tony Tomov tony@trirand.com
     * http://trirand.com/blog/ 
     * Dual licensed under the MIT and GPL licenses:
     * http://www.opensource.org/licenses/mit-license.php
     * http://www.gnu.org/licenses/gpl-2.0.html
     **/
    "use strict";
    $.jgrid.inlineEdit = $.jgrid.inlineEdit || {};
    $.jgrid.extend({
        //Editing
        editRow: function (rowid, keys, oneditfunc, successfunc, url, extraparam, aftersavefunc, errorfunc, afterrestorefunc) {
            // Compatible mode old versions
            var o = {},
                    args = $.makeArray(arguments).slice(1);

            if ($.type(args[0]) === "object") {
                o = args[0];
            } else {
                if (keys !== undefined) {
                    o.keys = keys;
                }
                if ($.isFunction(oneditfunc)) {
                    o.oneditfunc = oneditfunc;
                }
                if ($.isFunction(successfunc)) {
                    o.successfunc = successfunc;
                }
                if (url !== undefined) {
                    o.url = url;
                }
                if (extraparam !== undefined) {
                    o.extraparam = extraparam;
                }
                if ($.isFunction(aftersavefunc)) {
                    o.aftersavefunc = aftersavefunc;
                }
                if ($.isFunction(errorfunc)) {
                    o.errorfunc = errorfunc;
                }
                if ($.isFunction(afterrestorefunc)) {
                    o.afterrestorefunc = afterrestorefunc;
                }
                // last two not as param, but as object (sorry)
                //if (restoreAfterError !== undefined) { o.restoreAfterError = restoreAfterError; }
                //if (mtype !== undefined) { o.mtype = mtype || "POST"; }			
            }
            o = $.extend(true, {
                keys: false,
                oneditfunc: null,
                successfunc: null,
                url: null,
                extraparam: {},
                aftersavefunc: null,
                errorfunc: null,
                afterrestorefunc: null,
                restoreAfterError: true,
                mtype: "POST"
            }, $.jgrid.inlineEdit, o);

            // End compatible
            return this.each(function () {
                var $t = this,
                        nm, tmp, editable, cnt = 0,
                        focus = null,
                        svr = {},
                        ind, cm, bfer;
                if (!$t.grid) {
                    return;
                }
                ind = $($t).jqGrid("getInd", rowid, true);
                if (ind === false) {
                    return;
                }
                bfer = $.isFunction(o.beforeEditRow) ? o.beforeEditRow.call($t, o, rowid) : undefined;
                if (bfer === undefined) {
                    bfer = true;
                }
                if (!bfer) {
                    return;
                }
                editable = $(ind).attr("editable") || "0";
                if (editable === "0" && !$(ind).hasClass("not-editable-row")) {
                    cm = $t.p.colModel;
                    $('td[role="gridcell"]', ind).each(function (i) {
                        nm = cm[i].name;
                        var treeg = $t.p.treeGrid === true && nm === $t.p.ExpandColumn;
                        if (treeg) {
                            tmp = $("span:first", this).html();
                        } else {
                            try {
                                tmp = $.unformat.call($t, this, {
                                    rowId: rowid,
                                    colModel: cm[i]
                                }, i);
                            } catch (_) {
                                tmp = (cm[i].edittype && cm[i].edittype === 'textarea') ? $(this).text() : $(this).html();
                            }
                        }
                        if (nm !== 'cb' && nm !== 'subgrid' && nm !== 'rn') {
                            if ($t.p.autoencode) {
                                tmp = $.jgrid.htmlDecode(tmp);
                            }
                            svr[nm] = tmp;
                            if (cm[i].editable === true) {
                                if (focus === null) {
                                    focus = i;
                                }
                                if (treeg) {
                                    $("span:first", this).html("");
                                } else {
                                    $(this).html("");
                                }
                                var opt = $.extend({}, cm[i].editoptions || {}, {
                                    id: rowid + "_" + nm,
                                    name: nm
                                });
                                if (!cm[i].edittype) {
                                    cm[i].edittype = "text";
                                }
                                if (tmp === "&nbsp;" || tmp === "&#160;" || (tmp.length === 1 && tmp.charCodeAt(0) === 160)) {
                                    tmp = '';
                                }
                                var elc = $.jgrid.createEl.call($t, cm[i].edittype, opt, tmp, true, $.extend({}, $.jgrid.ajaxOptions, $t.p.ajaxSelectOptions || {}));
                                $(elc).addClass("editable");
                                if (treeg) {
                                    $("span:first", this).append(elc);
                                } else {
                                    $(this).append(elc);
                                }
                                // HB Customization
                                //$.jgrid.bindEv.call($t, elc, opt);
                                //Again IE
                                if (cm[i].edittype === "select" && cm[i].editoptions !== undefined && cm[i].editoptions.multiple === true && cm[i].editoptions.dataUrl === undefined && $.jgrid.msie) {
                                    $(elc).width($(elc).width());
                                }
                                cnt++;
                            }
                        }
                    });
                    if (cnt > 0) {
                        svr.id = rowid;
                        $t.p.savedRow.push(svr);
                        $(ind).attr("editable", "1");
                        $("td:eq(" + focus + ") input", ind).focus();
                        if (o.keys === true) {
                            $(ind).bind("keydown", function (e) {
                                if (e.keyCode === 27) {
                                    $($t).jqGrid("restoreRow", rowid, o.afterrestorefunc);
                                    if ($t.p._inlinenav) {
                                        try {
                                            $($t).jqGrid('showAddEditButtons');
                                        } catch (eer1) {
                                        }
                                    }
                                    return false;
                                }
                                if (e.keyCode === 13) {
                                    var ta = e.target;
                                    if (ta.tagName === 'TEXTAREA') {
                                        return true;
                                    }
                                    if ($($t).jqGrid("saveRow", rowid, o)) {
                                        if ($t.p._inlinenav) {
                                            try {
                                                $($t).jqGrid('showAddEditButtons');
                                            } catch (eer2) {
                                            }
                                        }
                                    }
                                    return false;
                                }
                            });
                        }
                        $($t).triggerHandler("jqGridInlineEditRow", [rowid, o]);
                        if ($.isFunction(o.oneditfunc)) {
                            o.oneditfunc.call($t, rowid);
                        }
                    }
                }
            });
        },
        saveRow: function (rowid, successfunc, url, extraparam, aftersavefunc, errorfunc, afterrestorefunc) {
            // Compatible mode old versions
            var args = $.makeArray(arguments).slice(1),
                    o = {};

            if ($.type(args[0]) === "object") {
                o = args[0];
            } else {
                if ($.isFunction(successfunc)) {
                    o.successfunc = successfunc;
                }
                if (url !== undefined) {
                    o.url = url;
                }
                if (extraparam !== undefined) {
                    o.extraparam = extraparam;
                }
                if ($.isFunction(aftersavefunc)) {
                    o.aftersavefunc = aftersavefunc;
                }
                if ($.isFunction(errorfunc)) {
                    o.errorfunc = errorfunc;
                }
                if ($.isFunction(afterrestorefunc)) {
                    o.afterrestorefunc = afterrestorefunc;
                }
            }
            o = $.extend(true, {
                successfunc: null,
                url: null,
                extraparam: {},
                aftersavefunc: null,
                errorfunc: null,
                afterrestorefunc: null,
                restoreAfterError: true,
                mtype: "POST"
            }, $.jgrid.inlineEdit, o);
            // End compatible
            var success = false;
            var $t = this[0],
                    nm, tmp = {},
                    tmp2 = {},
                    tmp3 = {},
                    editable, fr, cv, ind;
            if (!$t.grid) {
                return success;
            }
            ind = $($t).jqGrid("getInd", rowid, true);
            if (ind === false) {
                return success;
            }
            var bfsr = $.isFunction(o.beforeSaveRow) ? o.beforeSaveRow.call($t, o, rowid) : undefined;
            if (bfsr === undefined) {
                bfsr = true;
            }
            if (!bfsr) {
                return;
            }
            editable = $(ind).attr("editable");
            o.url = o.url || $t.p.editurl;
            if (editable === "1") {
                var cm;
                $('td[role="gridcell"]', ind).each(function (i) {
                    cm = $t.p.colModel[i];
                    nm = cm.name;
                    if (nm !== 'cb' && nm !== 'subgrid' && cm.editable === true && nm !== 'rn' && !$(this).hasClass('not-editable-cell')) {
                        switch (cm.edittype) {
                            case "checkbox":
                                var cbv = ["Yes", "No"];
                                if (cm.editoptions) {
                                    cbv = cm.editoptions.value.split(":");
                                }
                                tmp[nm] = $("input", this).is(":checked") ? cbv[0] : cbv[1];
                                break;
                            case 'text':
                            case 'password':
                            case 'textarea':
                            case "button":
                                tmp[nm] = $("input, textarea", this).val();
                                break;
                            case 'select':
                                if (!cm.editoptions.multiple) {
                                    tmp[nm] = $("select option:selected", this).val();
                                    tmp2[nm] = $("select option:selected", this).text();
                                } else {
                                    var sel = $("select", this),
                                            selectedText = [];
                                    tmp[nm] = $(sel).val();
                                    if (tmp[nm]) {
                                        tmp[nm] = tmp[nm].join(",");
                                    } else {
                                        tmp[nm] = "";
                                    }
                                    $("select option:selected", this).each(
                                            function (i, selected) {
                                                selectedText[i] = $(selected).text();
                                            });
                                    tmp2[nm] = selectedText.join(",");
                                }
                                if (cm.formatter && cm.formatter === 'select') {
                                    tmp2 = {};
                                }
                                break;
                            case 'custom':
                                try {
                                    if (cm.editoptions && $.isFunction(cm.editoptions.custom_value)) {
                                        tmp[nm] = cm.editoptions.custom_value.call($t, $(".customelement", this), 'get');
                                        if (tmp[nm] === undefined) {
                                            throw "e2";
                                        }
                                    } else {
                                        throw "e1";
                                    }
                                } catch (e) {
                                    if (e === "e1") {
                                        $.jgrid.info_dialog($.jgrid.errors.errcap, "function 'custom_value' " + $.jgrid.edit.msg.nodefined, $.jgrid.edit.bClose);
                                    }
                                    if (e === "e2") {
                                        $.jgrid.info_dialog($.jgrid.errors.errcap, "function 'custom_value' " + $.jgrid.edit.msg.novalue, $.jgrid.edit.bClose);
                                    } else {
                                        $.jgrid.info_dialog($.jgrid.errors.errcap, e.message, $.jgrid.edit.bClose);
                                    }
                                }
                                break;
                        }
                        cv = $.jgrid.checkValues.call($t, tmp[nm], i);
                        if (cv[0] === false) {
                            return false;
                        }
                        if ($t.p.autoencode) {
                            tmp[nm] = $.jgrid.htmlEncode(tmp[nm]);
                        }
                        if (o.url !== 'clientArray' && cm.editoptions && cm.editoptions.NullIfEmpty === true) {
                            if (tmp[nm] === "") {
                                tmp3[nm] = 'null';
                            }
                        }
                    }
                });
                if (cv[0] === false) {
                    try {
                        var tr = $($t).jqGrid('getGridRowById', rowid),
                                positions = $.jgrid.findPos(tr);
                        $.jgrid.info_dialog($.jgrid.errors.errcap, cv[1], $.jgrid.edit.bClose, {
                            left: positions[0],
                            top: positions[1] + $(tr).outerHeight()
                        });
                    } catch (e) {
                        alert(cv[1]);
                    }
                    return success;
                }
                var idname, opers = $t.p.prmNames,
                        oldRowId = rowid;
                if ($t.p.keyIndex === false) {
                    idname = opers.id;
                } else {
                    idname = $t.p.colModel[$t.p.keyIndex + ($t.p.rownumbers === true ? 1 : 0) + ($t.p.multiselect === true ? 1 : 0) + ($t.p.subGrid === true ? 1 : 0)].name;
                }
                if (tmp) {
                    tmp[opers.oper] = opers.editoper;
                    if (tmp[idname] === undefined || tmp[idname] === "") {
                        tmp[idname] = rowid;
                    } else if (ind.id !== $t.p.idPrefix + tmp[idname]) {
                        // rename rowid
                        var oldid = $.jgrid.stripPref($t.p.idPrefix, rowid);
                        if ($t.p._index[oldid] !== undefined) {
                            $t.p._index[tmp[idname]] = $t.p._index[oldid];
                            delete $t.p._index[oldid];
                        }
                        rowid = $t.p.idPrefix + tmp[idname];
                        $(ind).attr("id", rowid);
                        if ($t.p.selrow === oldRowId) {
                            $t.p.selrow = rowid;
                        }
                        if ($.isArray($t.p.selarrrow)) {
                            var i = $.inArray(oldRowId, $t.p.selarrrow);
                            if (i >= 0) {
                                $t.p.selarrrow[i] = rowid;
                            }
                        }
                        if ($t.p.multiselect) {
                            var newCboxId = "jqg_" + $t.p.id + "_" + rowid;
                            $("input.cbox", ind).attr("id", newCboxId).attr("name", newCboxId);
                        }
                        // TODO: to test the case of frozen columns
                    }
                    if ($t.p.inlineData === undefined) {
                        $t.p.inlineData = {};
                    }
                    tmp = $.extend({}, tmp, $t.p.inlineData, o.extraparam);
                }
                if (o.url === 'clientArray') {
                    tmp = $.extend({}, tmp, tmp2);
                    if ($t.p.autoencode) {
                        $.each(tmp, function (n, v) {
                            tmp[n] = $.jgrid.htmlDecode(v);
                        });
                    }
                    var k, resp = $($t).jqGrid("setRowData", rowid, tmp);
                    $(ind).attr("editable", "0");
                    for (k = 0; k < $t.p.savedRow.length; k++) {
                        if (String($t.p.savedRow[k].id) === String(oldRowId)) {
                            fr = k;
                            break;
                        }
                    }
                    if (fr >= 0) {
                        $t.p.savedRow.splice(fr, 1);
                    }
                    $($t).triggerHandler("jqGridInlineAfterSaveRow", [rowid, resp, tmp, o]);
                    if ($.isFunction(o.aftersavefunc)) {
                        o.aftersavefunc.call($t, rowid, resp, o);
                    }
                    success = true;
                    $(ind).removeClass("jqgrid-new-row").unbind("keydown");
                } else {
                    $("#lui_" + $.jgrid.jqID($t.p.id)).show();
                    tmp3 = $.extend({}, tmp, tmp3);
                    tmp3[idname] = $.jgrid.stripPref($t.p.idPrefix, tmp3[idname]);
                    $.ajax($.extend({
                        url: o.url,
                        data: $.isFunction($t.p.serializeRowData) ? $t.p.serializeRowData.call($t, tmp3) : tmp3,
                        type: o.mtype,
                        async: false,
                        //?!?
                        complete: function (res, stat) {
                            $("#lui_" + $.jgrid.jqID($t.p.id)).hide();
                            if (stat === "success") {
                                var ret = true,
                                        sucret, k;
                                sucret = $($t).triggerHandler("jqGridInlineSuccessSaveRow", [res, rowid, o]);
                                if (!$.isArray(sucret)) {
                                    sucret = [true, tmp];
                                }
                                if (sucret[0] && $.isFunction(o.successfunc)) {
                                    sucret = o.successfunc.call($t, res);
                                }
                                if ($.isArray(sucret)) {
                                    // expect array - status, data, rowid
                                    ret = sucret[0];
                                    tmp = sucret[1] || tmp;
                                } else {
                                    ret = sucret;
                                }
                                if (ret === true) {
                                    if ($t.p.autoencode) {
                                        $.each(tmp, function (n, v) {
                                            tmp[n] = $.jgrid.htmlDecode(v);
                                        });
                                    }
                                    tmp = $.extend({}, tmp, tmp2);
                                    $($t).jqGrid("setRowData", rowid, tmp);
                                    $(ind).attr("editable", "0");
                                    for (k = 0; k < $t.p.savedRow.length; k++) {
                                        if (String($t.p.savedRow[k].id) === String(rowid)) {
                                            fr = k;
                                            break;
                                        }
                                    }
                                    if (fr >= 0) {
                                        $t.p.savedRow.splice(fr, 1);
                                    }
                                    $($t).triggerHandler("jqGridInlineAfterSaveRow", [rowid, res, tmp, o]);
                                    if ($.isFunction(o.aftersavefunc)) {
                                        o.aftersavefunc.call($t, rowid, res);
                                    }
                                    success = true;
                                    $(ind).removeClass("jqgrid-new-row").unbind("keydown");
                                } else {
                                    $($t).triggerHandler("jqGridInlineErrorSaveRow", [rowid, res, stat, null, o]);
                                    if ($.isFunction(o.errorfunc)) {
                                        o.errorfunc.call($t, rowid, res, stat, null);
                                    }
                                    if (o.restoreAfterError === true) {
                                        $($t).jqGrid("restoreRow", rowid, o.afterrestorefunc);
                                    }
                                }
                            }
                        },
                        error: function (res, stat, err) {
                            $("#lui_" + $.jgrid.jqID($t.p.id)).hide();
                            $($t).triggerHandler("jqGridInlineErrorSaveRow", [rowid, res, stat, err, o]);
                            if ($.isFunction(o.errorfunc)) {
                                o.errorfunc.call($t, rowid, res, stat, err);
                            } else {
                                var rT = res.responseText || res.statusText;
                                try {
                                    $.jgrid.info_dialog($.jgrid.errors.errcap, '<div class="ui-state-error">' + rT + '</div>', $.jgrid.edit.bClose, {
                                        buttonalign: 'right'
                                    });
                                } catch (e) {
                                    alert(rT);
                                }
                            }
                            if (o.restoreAfterError === true) {
                                $($t).jqGrid("restoreRow", rowid, o.afterrestorefunc);
                            }
                        }
                    }, $.jgrid.ajaxOptions, $t.p.ajaxRowOptions || {}));
                }
            }
            return success;
        },
        restoreRow: function (rowid, afterrestorefunc) {
            // Compatible mode old versions
            var args = $.makeArray(arguments).slice(1),
                    o = {};

            if ($.type(args[0]) === "object") {
                o = args[0];
            } else {
                if ($.isFunction(afterrestorefunc)) {
                    o.afterrestorefunc = afterrestorefunc;
                }
            }
            o = $.extend(true, {}, $.jgrid.inlineEdit, o);

            // End compatible
            return this.each(function () {
                var $t = this,
                        fr = -1,
                        ind, ares = {},
                        k;
                if (!$t.grid) {
                    return;
                }
                ind = $($t).jqGrid("getInd", rowid, true);
                if (ind === false) {
                    return;
                }
                var bfcr = $.isFunction(o.beforeCancelRow) ? o.beforeCancelRow.call($t, o, sr) : undefined;
                if (bfcr === undefined) {
                    bfcr = true;
                }
                if (!bfcr) {
                    return;
                }
                for (k = 0; k < $t.p.savedRow.length; k++) {
                    if (String($t.p.savedRow[k].id) === String(rowid)) {
                        fr = k;
                        break;
                    }
                }
                if (fr >= 0) {
                    if ($.isFunction($.fn.datepicker)) {
                        try {
                            $("input.hasDatepicker", "#" + $.jgrid.jqID(ind.id)).datepicker('hide');
                        } catch (e) {
                        }
                    }
                    $.each($t.p.colModel, function () {
                        if (this.editable === true && $t.p.savedRow[fr].hasOwnProperty(this.name)) {
                            ares[this.name] = $t.p.savedRow[fr][this.name];
                        }
                    });
                    $($t).jqGrid("setRowData", rowid, ares);
                    $(ind).attr("editable", "0").unbind("keydown");
                    $t.p.savedRow.splice(fr, 1);
                    if ($("#" + $.jgrid.jqID(rowid), "#" + $.jgrid.jqID($t.p.id)).hasClass("jqgrid-new-row")) {
                        setTimeout(function () {
                            $($t).jqGrid("delRowData", rowid);
                            $($t).jqGrid('showAddEditButtons');
                        }, 0);
                    }
                }
                $($t).triggerHandler("jqGridInlineAfterRestoreRow", [rowid]);
                if ($.isFunction(o.afterrestorefunc)) {
                    o.afterrestorefunc.call($t, rowid);
                }
            });
        },
        addRow: function (p) {
            p = $.extend(true, {
                rowID: null,
                initdata: {},
                position: "first",
                useDefValues: true,
                useFormatter: false,
                addRowParams: {
                    extraparam: {}
                }
            }, p || {});
            return this.each(function () {
                if (!this.grid) {
                    return;
                }
                var $t = this;
                var bfar = $.isFunction(p.beforeAddRow) ? p.beforeAddRow.call($t, p.addRowParams) : undefined;
                if (bfar === undefined) {
                    bfar = true;
                }
                if (!bfar) {
                    return;
                }
                p.rowID = $.isFunction(p.rowID) ? p.rowID.call($t, p) : ((p.rowID != null) ? p.rowID : $.jgrid.randId());
                if (p.useDefValues === true) {
                    $($t.p.colModel).each(function () {
                        if (this.editoptions && this.editoptions.defaultValue) {
                            var opt = this.editoptions.defaultValue,
                                    tmp = $.isFunction(opt) ? opt.call($t) : opt;
                            p.initdata[this.name] = tmp;
                        }
                    });
                }
                $($t).jqGrid('addRowData', p.rowID, p.initdata, p.position);
                p.rowID = $t.p.idPrefix + p.rowID;
                $("#" + $.jgrid.jqID(p.rowID), "#" + $.jgrid.jqID($t.p.id)).addClass("jqgrid-new-row");
                if (p.useFormatter) {
                    $("#" + $.jgrid.jqID(p.rowID) + " .ui-inline-edit", "#" + $.jgrid.jqID($t.p.id)).click();
                } else {
                    var opers = $t.p.prmNames,
                            oper = opers.oper;
                    p.addRowParams.extraparam[oper] = opers.addoper;
                    $($t).jqGrid('editRow', p.rowID, p.addRowParams);
                    $($t).jqGrid('setSelection', p.rowID);
                }
            });
        },
        inlineNav: function (elem, o) {
            o = $.extend(true, {
                edit: true,
                editicon: "ui-icon-pencil",
                add: true,
                addicon: "ui-icon-plus",
                save: true,
                saveicon: "ui-icon-disk",
                cancel: true,
                cancelicon: "ui-icon-cancel",
                addParams: {
                    addRowParams: {
                        extraparam: {}
                    }
                },
                editParams: {},
                restoreAfterSelect: true
            }, $.jgrid.nav, o || {});
            return this.each(function () {
                if (!this.grid) {
                    return;
                }
                var $t = this,
                        onSelect, gID = $.jgrid.jqID($t.p.id);
                $t.p._inlinenav = true;
                // detect the formatactions column
                if (o.addParams.useFormatter === true) {
                    var cm = $t.p.colModel,
                            i;
                    for (i = 0; i < cm.length; i++) {
                        if (cm[i].formatter && cm[i].formatter === "actions") {
                            if (cm[i].formatoptions) {
                                var defaults = {
                                    keys: false,
                                    onEdit: null,
                                    onSuccess: null,
                                    afterSave: null,
                                    onError: null,
                                    afterRestore: null,
                                    extraparam: {},
                                    url: null
                                },
                                ap = $.extend(defaults, cm[i].formatoptions);
                                o.addParams.addRowParams = {
                                    "keys": ap.keys,
                                    "oneditfunc": ap.onEdit,
                                    "successfunc": ap.onSuccess,
                                    "url": ap.url,
                                    "extraparam": ap.extraparam,
                                    "aftersavefunc": ap.afterSave,
                                    "errorfunc": ap.onError,
                                    "afterrestorefunc": ap.afterRestore
                                };
                            }
                            break;
                        }
                    }
                }
                if (o.add) {
                    $($t).jqGrid('navButtonAdd', elem, {
                        caption: o.addtext,
                        title: o.addtitle,
                        buttonicon: o.addicon,
                        id: $t.p.id + "_iladd",
                        onClickButton: function () {
                            $($t).jqGrid('addRow', o.addParams);
                            if (!o.addParams.useFormatter) {
                                $("#" + gID + "_ilsave").removeClass('ui-state-disabled');
                                $("#" + gID + "_ilcancel").removeClass('ui-state-disabled');
                                $("#" + gID + "_iladd").addClass('ui-state-disabled');
                                $("#" + gID + "_iledit").addClass('ui-state-disabled');
                            }
                        }
                    });
                }
                if (o.edit) {
                    $($t).jqGrid('navButtonAdd', elem, {
                        caption: o.edittext,
                        title: o.edittitle,
                        buttonicon: o.editicon,
                        id: $t.p.id + "_iledit",
                        onClickButton: function () {
                            var sr = $($t).jqGrid('getGridParam', 'selrow');
                            if (sr) {
                                $($t).jqGrid('editRow', sr, o.editParams);
                                $("#" + gID + "_ilsave").removeClass('ui-state-disabled');
                                $("#" + gID + "_ilcancel").removeClass('ui-state-disabled');
                                $("#" + gID + "_iladd").addClass('ui-state-disabled');
                                $("#" + gID + "_iledit").addClass('ui-state-disabled');
                            } else {
                                $.jgrid.viewModal("#alertmod", {
                                    gbox: "#gbox_" + gID,
                                    gid: $t.p.id, //HB Customization
                                    jqm: true
                                });
                                $("#jqg_alrt").focus();
                            }
                        }
                    });
                }
                if (o.save) {
                    $($t).jqGrid('navButtonAdd', elem, {
                        caption: o.savetext || '',
                        title: o.savetitle || 'Save row',
                        buttonicon: o.saveicon,
                        id: $t.p.id + "_ilsave",
                        onClickButton: function () {
                            var sr = $t.p.savedRow[0].id;
                            if (sr) {
                                var opers = $t.p.prmNames,
                                        oper = opers.oper,
                                        tmpParams = o.editParams;
                                if ($("#" + $.jgrid.jqID(sr), "#" + gID).hasClass("jqgrid-new-row")) {
                                    o.addParams.addRowParams.extraparam[oper] = opers.addoper;
                                    tmpParams = o.addParams.addRowParams;
                                } else {
                                    if (!o.editParams.extraparam) {
                                        o.editParams.extraparam = {};
                                    }
                                    o.editParams.extraparam[oper] = opers.editoper;
                                }
                                if ($($t).jqGrid('saveRow', sr, tmpParams)) {
                                    $($t).jqGrid('showAddEditButtons');
                                }
                            } else {
                                $.jgrid.viewModal("#alertmod", {
                                    gbox: "#gbox_" + gID,
                                    gid: $t.p.id, //HB Customization
                                    jqm: true
                                });
                                $("#jqg_alrt").focus();
                            }
                        }
                    });
                    $("#" + gID + "_ilsave").addClass('ui-state-disabled');
                }
                if (o.cancel) {
                    $($t).jqGrid('navButtonAdd', elem, {
                        caption: o.canceltext || '',
                        title: o.canceltitle || 'Cancel row editing',
                        buttonicon: o.cancelicon,
                        id: $t.p.id + "_ilcancel",
                        onClickButton: function () {
                            var sr = $t.p.savedRow[0].id,
                                    cancelPrm = o.editParams;
                            if (sr) {
                                if ($("#" + $.jgrid.jqID(sr), "#" + gID).hasClass("jqgrid-new-row")) {
                                    cancelPrm = o.addParams.addRowParams;
                                }
                                $($t).jqGrid('restoreRow', sr, cancelPrm);
                                $($t).jqGrid('showAddEditButtons');
                            } else {
                                $.jgrid.viewModal("#alertmod", {
                                    gbox: "#gbox_" + gID,
                                    gid: $t.p.id, //HB Customization
                                    jqm: true
                                });
                                $("#jqg_alrt").focus();
                            }
                        }
                    });
                    $("#" + gID + "_ilcancel").addClass('ui-state-disabled');
                }
                if (o.restoreAfterSelect === true) {
                    if ($.isFunction($t.p.beforeSelectRow)) {
                        onSelect = $t.p.beforeSelectRow;
                    } else {
                        onSelect = false;
                    }
                    $t.p.beforeSelectRow = function (id, stat) {
                        var ret = true;
                        if ($t.p.savedRow.length > 0 && $t.p._inlinenav === true && (id !== $t.p.selrow && $t.p.selrow !== null)) {
                            if ($t.p.selrow === o.addParams.rowID) {
                                $($t).jqGrid('delRowData', $t.p.selrow);
                            } else {
                                $($t).jqGrid('restoreRow', $t.p.selrow, o.editParams);
                            }
                            $($t).jqGrid('showAddEditButtons');
                        }
                        if (onSelect) {
                            ret = onSelect.call($t, id, stat);
                        }
                        return ret;
                    };
                }

            });
        },
        showAddEditButtons: function () {
            return this.each(function () {
                if (!this.grid) {
                    return;
                }
                var gID = $.jgrid.jqID(this.p.id);
                $("#" + gID + "_ilsave").addClass('ui-state-disabled');
                $("#" + gID + "_ilcancel").addClass('ui-state-disabled');
                $("#" + gID + "_iladd").removeClass('ui-state-disabled');
                $("#" + gID + "_iledit").removeClass('ui-state-disabled');
            });
        }
        //end inline edit
    });
})(jQuery); /*jshint eqeqeq:false */
/*global jQuery */
(function ($) {
    /*
     **
     * jqGrid extension for cellediting Grid Data
     * Tony Tomov tony@trirand.com
     * http://trirand.com/blog/ 
     * Dual licensed under the MIT and GPL licenses:
     * http://www.opensource.org/licenses/mit-license.php
     * http://www.gnu.org/licenses/gpl-2.0.html
     **/
    /**
     * all events and options here are aded anonynous and not in the base grid
     * since the array is to big. Here is the order of execution.
     * From this point we use jQuery isFunction
     * formatCell
     * beforeEditCell,
     * onSelectCell (used only for noneditable cels)
     * afterEditCell,
     * beforeSaveCell, (called before validation of values if any)
     * beforeSubmitCell (if cellsubmit remote (ajax))
     * afterSubmitCell(if cellsubmit remote (ajax)),
     * afterSaveCell,
     * errorCell,
     * serializeCellData - new
     * Options
     * cellsubmit (remote,clientArray) (added in grid options)
     * cellurl
     * ajaxCellOptions
     * */
    "use strict";
    $.jgrid.extend({
        editCell: function (iRow, iCol, ed) {
            return this.each(function () {
                var $t = this,
                        nm, tmp, cc, cm;
                if (!$t.grid || $t.p.cellEdit !== true) {
                    return;
                }
                iCol = parseInt(iCol, 10);
                // select the row that can be used for other methods
                $t.p.selrow = $t.rows[iRow].id;
                if (!$t.p.knv) {
                    $($t).jqGrid("GridNav");
                }
                // check to see if we have already edited cell
                if ($t.p.savedRow.length > 0) {
                    // prevent second click on that field and enable selects
                    if (ed === true) {
                        if (iRow == $t.p.iRow && iCol == $t.p.iCol) {
                            return;
                        }
                    }
                    // save the cell
                    $($t).jqGrid("saveCell", $t.p.savedRow[0].id, $t.p.savedRow[0].ic);
                } else {
                    window.setTimeout(function () {
                        $("#" + $.jgrid.jqID($t.p.knv)).attr("tabindex", "-1").focus();
                    }, 0);
                }
                cm = $t.p.colModel[iCol];
                nm = cm.name;
                if (nm === 'subgrid' || nm === 'cb' || nm === 'rn') {
                    return;
                }
                cc = $("td:eq(" + iCol + ")", $t.rows[iRow]);
                if (cm.editable === true && ed === true && !cc.hasClass("not-editable-cell")) {
                    if (parseInt($t.p.iCol, 10) >= 0 && parseInt($t.p.iRow, 10) >= 0) {
                        $("td:eq(" + $t.p.iCol + ")", $t.rows[$t.p.iRow]).removeClass("edit-cell ui-state-highlight");
                        $($t.rows[$t.p.iRow]).removeClass("selected-row ui-state-hover");
                    }
                    $(cc).addClass("edit-cell ui-state-highlight");
                    $($t.rows[iRow]).addClass("selected-row ui-state-hover");
                    try {
                        tmp = $.unformat.call($t, cc, {
                            rowId: $t.rows[iRow].id,
                            colModel: cm
                        }, iCol);
                    } catch (_) {
                        tmp = (cm.edittype && cm.edittype === 'textarea') ? $(cc).text() : $(cc).html();
                    }
                    if ($t.p.autoencode) {
                        tmp = $.jgrid.htmlDecode(tmp);
                    }
                    if (!cm.edittype) {
                        cm.edittype = "text";
                    }
                    $t.p.savedRow.push({
                        id: iRow,
                        ic: iCol,
                        name: nm,
                        v: tmp
                    });
                    if (tmp === "&nbsp;" || tmp === "&#160;" || (tmp.length === 1 && tmp.charCodeAt(0) === 160)) {
                        tmp = '';
                    }
                    if ($.isFunction($t.p.formatCell)) {
                        var tmp2 = $t.p.formatCell.call($t, $t.rows[iRow].id, nm, tmp, iRow, iCol);
                        if (tmp2 !== undefined) {
                            tmp = tmp2;
                        }
                    }
                    $($t).triggerHandler("jqGridBeforeEditCell", [$t.rows[iRow].id, nm, tmp, iRow, iCol]);
                    if ($.isFunction($t.p.beforeEditCell)) {
                        $t.p.beforeEditCell.call($t, $t.rows[iRow].id, nm, tmp, iRow, iCol);
                    }
                    var opt = $.extend({}, cm.editoptions || {}, {
                        id: iRow + "_" + nm,
                        name: nm
                    });
                    // HB Customization << Start
                    var elc = $.jgrid.createEl.call($t, cm.edittype, opt, tmp, true, $.extend({}, $.jgrid.ajaxOptions, $t.p.ajaxSelectOptions || {}), $t.rows[iRow]);
                    $(cc).html("").append(elc).attr("tabindex", "0");
                    //$.jgrid.bindEv.call($t, elc, opt);
                    var help_tip = $("<a />").attr("href", "javascript://").attr("title", "Press Enter to save<br>Press Esc to cancel").addClass("tipB icon12").html('<span class="icon-question-sign grid-inline-tip"></span>').qtip({
                        content: false,
                        position: {
                            my: 'top center',
                            at: 'bottom center',
                            viewport: $(window)
                        },
                        style: {
                            classes: 'ui-tooltip-tipsy'
                        }
                    });
                    //$(cc).append(help_tip);
                    // HB Customization >> End
                    window.setTimeout(function () {
                        $(elc).focus();
                    }, 0);
                    $("input, select, textarea", cc).bind("keydown", function (e) {
                        if (e.keyCode === 27) {
                            if ($("input.hasDatepicker", cc).length > 0) {
                                if ($(".ui-datepicker").is(":hidden")) {
                                    $($t).jqGrid("restoreCell", iRow, iCol);
                                } else {
                                    $("input.hasDatepicker", cc).datepicker('hide');
                                }
                            } else {
                                $($t).jqGrid("restoreCell", iRow, iCol);
                            }
                        } //ESC
                        if (e.keyCode === 13) {
                            $($t).jqGrid("saveCell", iRow, iCol);
                            // Prevent default action
                            return false;
                        } //Enter
                        if (e.keyCode === 9) {
                            if (!$t.grid.hDiv.loading) {
                                if (e.shiftKey) {
                                    $($t).jqGrid("prevCell", iRow, iCol);
                                } //Shift TAb
                                else {
                                    $($t).jqGrid("nextCell", iRow, iCol);
                                } //Tab
                            } else {
                                return false;
                            }
                        }
                        e.stopPropagation();
                    });
                    $($t).triggerHandler("jqGridAfterEditCell", [$t.rows[iRow].id, nm, tmp, iRow, iCol]);
                    if ($.isFunction($t.p.afterEditCell)) {
                        $t.p.afterEditCell.call($t, $t.rows[iRow].id, nm, tmp, iRow, iCol);
                    }
                } else {
                    if (parseInt($t.p.iCol, 10) >= 0 && parseInt($t.p.iRow, 10) >= 0) {
                        $("td:eq(" + $t.p.iCol + ")", $t.rows[$t.p.iRow]).removeClass("edit-cell ui-state-highlight");
                        $($t.rows[$t.p.iRow]).removeClass("selected-row ui-state-hover");
                    }
                    cc.addClass("edit-cell ui-state-highlight");
                    $($t.rows[iRow]).addClass("selected-row ui-state-hover");
                    tmp = cc.html().replace(/\&#160\;/ig, '');
                    $($t).triggerHandler("jqGridSelectCell", [$t.rows[iRow].id, nm, tmp, iRow, iCol]);
                    if ($.isFunction($t.p.onSelectCell)) {
                        $t.p.onSelectCell.call($t, $t.rows[iRow].id, nm, tmp, iRow, iCol);
                    }
                }
                $t.p.iCol = iCol;
                $t.p.iRow = iRow;
            });
        },
        saveCell: function (iRow, iCol) {
            return this.each(function () {
                var $t = this,
                        fr;
                if (!$t.grid || $t.p.cellEdit !== true) {
                    return;
                }
                if ($t.p.savedRow.length >= 1) {
                    fr = 0;
                } else {
                    fr = null;
                }
                if (fr !== null) {
                    var cc = $("td:eq(" + iCol + ")", $t.rows[iRow]),
                            v, v2, cm = $t.p.colModel[iCol],
                            nm = cm.name,
                            nmjq = $.jgrid.jqID(nm);
                    switch (cm.edittype) {
                        case "select":
                            if (!cm.editoptions.multiple) {
                                v = $("#" + iRow + "_" + nmjq + " option:selected", $t.rows[iRow]).val();
                                v2 = $("#" + iRow + "_" + nmjq + " option:selected", $t.rows[iRow]).text();
                            } else {
                                var sel = $("#" + iRow + "_" + nmjq, $t.rows[iRow]),
                                        selectedText = [];
                                v = $(sel).val();
                                if (v) {
                                    v.join(",");
                                } else {
                                    v = "";
                                }
                                $("option:selected", sel).each(
                                        function (i, selected) {
                                            selectedText[i] = $(selected).text();
                                        });
                                v2 = selectedText.join(",");
                            }
                            if (cm.formatter) {
                                v2 = v;
                            }
                            break;
                        case "checkbox":
                            var cbv = ["Yes", "No"];
                            if (cm.editoptions) {
                                cbv = cm.editoptions.value.split(":");
                            }
                            v = $("#" + iRow + "_" + nmjq, $t.rows[iRow]).is(":checked") ? cbv[0] : cbv[1];
                            v2 = v;
                            break;
                        case "password":
                        case "text":
                        case "textarea":
                        case "button":
                            v = $("#" + iRow + "_" + nmjq, $t.rows[iRow]).val();
                            v2 = v;
                            break;
                        case 'custom':
                            try {
                                if (cm.editoptions && $.isFunction(cm.editoptions.custom_value)) {
                                    v = cm.editoptions.custom_value.call($t, $(".customelement", cc), 'get');
                                    if (v === undefined) {
                                        throw "e2";
                                    } else {
                                        v2 = v;
                                    }
                                } else {
                                    throw "e1";
                                }
                            } catch (e) {
                                if (e === "e1") {
                                    $.jgrid.info_dialog($.jgrid.errors.errcap, "function 'custom_value' " + $.jgrid.edit.msg.nodefined, $.jgrid.edit.bClose);
                                }
                                if (e === "e2") {
                                    $.jgrid.info_dialog($.jgrid.errors.errcap, "function 'custom_value' " + $.jgrid.edit.msg.novalue, $.jgrid.edit.bClose);
                                } else {
                                    $.jgrid.info_dialog($.jgrid.errors.errcap, e.message, $.jgrid.edit.bClose);
                                }
                            }
                            break;
                    }
                    // The common approach is if nothing changed do not do anything
                    if (v2 !== $t.p.savedRow[fr].v) {
                        var vvv = $($t).triggerHandler("jqGridBeforeSaveCell", [$t.rows[iRow].id, nm, v, iRow, iCol]);
                        if (vvv) {
                            v = vvv;
                            v2 = vvv;
                        }
                        if ($.isFunction($t.p.beforeSaveCell)) {
                            var vv = $t.p.beforeSaveCell.call($t, $t.rows[iRow].id, nm, v, iRow, iCol);
                            if (vv) {
                                v = vv;
                                v2 = vv;
                            }
                        }
                        var cv = $.jgrid.checkValues.call($t, v, iCol);
                        if (cv[0] === true) {
                            var addpost = $($t).triggerHandler("jqGridBeforeSubmitCell", [$t.rows[iRow].id, nm, v, iRow, iCol]) || {};
                            if ($.isFunction($t.p.beforeSubmitCell)) {
                                addpost = $t.p.beforeSubmitCell.call($t, $t.rows[iRow].id, nm, v, iRow, iCol);
                                if (!addpost) {
                                    addpost = {};
                                }
                            }
                            if ($("input.hasDatepicker", cc).length > 0) {
                                $("input.hasDatepicker", cc).datepicker('hide');
                            }
                            if ($t.p.cellsubmit === 'remote') {
                                if ($t.p.cellurl) {
                                    var postdata = {};
                                    if ($t.p.autoencode) {
                                        v = $.jgrid.htmlEncode(v);
                                    }
                                    postdata[nm] = v;
                                    // HB Customization << Start
                                    postdata['name'] = nm;
                                    postdata['value'] = v;
                                    // HB Customization >> End
                                    var idname, oper, opers;
                                    opers = $t.p.prmNames;
                                    idname = opers.id;
                                    oper = opers.oper;
                                    postdata[idname] = $.jgrid.stripPref($t.p.idPrefix, $t.rows[iRow].id);
                                    postdata[oper] = opers.editoper;
                                    postdata = $.extend(addpost, postdata);
                                    $("#lui_" + $.jgrid.jqID($t.p.id)).show();
                                    $t.grid.hDiv.loading = true;
                                    $.ajax($.extend({
                                        url: $t.p.cellurl,
                                        data: $.isFunction($t.p.serializeCellData) ? $t.p.serializeCellData.call($t, postdata) : postdata,
                                        type: "POST",
                                        complete: function (result, stat) {
                                            $("#lui_" + $t.p.id).hide();
                                            $t.grid.hDiv.loading = false;
                                            if (stat === 'success') {
                                                var ret = $($t).triggerHandler("jqGridAfterSubmitCell", [$t, result, postdata.id, nm, v, iRow, iCol]) || [true, ''];
                                                if (ret[0] === true && $.isFunction($t.p.afterSubmitCell)) {
                                                    ret = $t.p.afterSubmitCell.call($t, result, postdata.id, nm, v, iRow, iCol);
                                                }
                                                if (ret[0] === true) {
                                                    $(cc).empty();
                                                    // HB Customization << Start
                                                    if (cm.edittype == "textarea") {
                                                        v2 = v2.replace(/\n/g, '<br />\n');
                                                    }
                                                    // HB Customization >> End
                                                    $($t).jqGrid("setCell", $t.rows[iRow].id, iCol, v2, false, false, true);
                                                    $(cc).addClass("dirty-cell");
                                                    $($t.rows[iRow]).addClass("edited");
                                                    $($t).triggerHandler("jqGridAfterSaveCell", [$t.rows[iRow].id, nm, v, iRow, iCol]);
                                                    if ($.isFunction($t.p.afterSaveCell)) {
                                                        $t.p.afterSaveCell.call($t, $t.rows[iRow].id, nm, v, iRow, iCol);
                                                    }
                                                    $t.p.savedRow.splice(0, 1);
                                                } else {
                                                    //$.jgrid.info_dialog($.jgrid.errors.errcap, ret[1], $.jgrid.edit.bClose);
                                                    $($t).jqGrid("restoreCell", iRow, iCol);
                                                }
                                            }
                                        },
                                        error: function (res, stat, err) {
                                            $("#lui_" + $.jgrid.jqID($t.p.id)).hide();
                                            $t.grid.hDiv.loading = false;
                                            $($t).triggerHandler("jqGridErrorCell", [res, stat, err]);
                                            if ($.isFunction($t.p.errorCell)) {
                                                $t.p.errorCell.call($t, res, stat, err);
                                                $($t).jqGrid("restoreCell", iRow, iCol);
                                            } else {
                                                $.jgrid.info_dialog($.jgrid.errors.errcap, res.status + " : " + res.statusText + "<br/>" + stat, $.jgrid.edit.bClose);
                                                $($t).jqGrid("restoreCell", iRow, iCol);
                                            }
                                        }
                                    }, $.jgrid.ajaxOptions, $t.p.ajaxCellOptions || {}));
                                } else {
                                    try {
                                        $.jgrid.info_dialog($.jgrid.errors.errcap, $.jgrid.errors.nourl, $.jgrid.edit.bClose);
                                        $($t).jqGrid("restoreCell", iRow, iCol);
                                    } catch (e) {
                                    }
                                }
                            }
                            if ($t.p.cellsubmit === 'clientArray') {
                                $(cc).empty();
                                $($t).jqGrid("setCell", $t.rows[iRow].id, iCol, v2, false, false, true);
                                $(cc).addClass("dirty-cell");
                                $($t.rows[iRow]).addClass("edited");
                                $($t).triggerHandler("jqGridAfterSaveCell", [$t.rows[iRow].id, nm, v, iRow, iCol]);
                                if ($.isFunction($t.p.afterSaveCell)) {
                                    $t.p.afterSaveCell.call($t, $t.rows[iRow].id, nm, v, iRow, iCol);
                                }
                                $t.p.savedRow.splice(0, 1);
                            }
                        } else {
                            try {
                                // HB Customization << Start
                                window.setTimeout(function () {
                                    //$.jgrid.info_dialog($.jgrid.errors.errcap, v + " " + cv[1], $.jgrid.edit.bClose);
                                    $('#err_msg_cnt').html(cv[1]).attr("class", "content-errorbox alert alert-error");
                                    $('#var_msg_cnt').fadeIn("fast");
                                    window.setTimeout(function () {
                                        $('#var_msg_cnt').fadeOut('slow');
                                    }, 3000);
                                }, 100);
                                $($t).jqGrid("restoreCell", iRow, iCol);
                                $($t).jqGrid("editCell", iRow, iCol, true);
                                $(cc).find("input").addClass("inline-input-error");
                                window.setTimeout(function () {
                                    $(cc).find("input").focus();
                                }, 10);
                                // HB Customization >> End
                            } catch (e) {
                            }
                        }
                    } else {
                        $($t).jqGrid("restoreCell", iRow, iCol);
                    }
                }
                window.setTimeout(function () {
                    $("#" + $.jgrid.jqID($t.p.knv)).attr("tabindex", "-1").focus();
                }, 0);
            });
        },
        restoreCell: function (iRow, iCol) {
            return this.each(function () {
                var $t = this,
                        fr;
                if (!$t.grid || $t.p.cellEdit !== true) {
                    return;
                }
                if ($t.p.savedRow.length >= 1) {
                    fr = 0;
                } else {
                    fr = null;
                }
                if (fr !== null) {
                    var cc = $("td:eq(" + iCol + ")", $t.rows[iRow]);
                    // datepicker fix
                    if ($.isFunction($.fn.datepicker)) {
                        try {
                            $("input.hasDatepicker", cc).datepicker('hide');
                        } catch (e) {
                        }
                    }
                    $(cc).empty().attr("tabindex", "-1");
                    $($t).jqGrid("setCell", $t.rows[iRow].id, iCol, $t.p.savedRow[fr].v, false, false, true);
                    $($t).triggerHandler("jqGridAfterRestoreCell", [$t.rows[iRow].id, $t.p.savedRow[fr].v, iRow, iCol]);
                    if ($.isFunction($t.p.afterRestoreCell)) {
                        $t.p.afterRestoreCell.call($t, $t.rows[iRow].id, $t.p.savedRow[fr].v, iRow, iCol);
                    }
                    $t.p.savedRow.splice(0, 1);
                }
                window.setTimeout(function () {
                    $("#" + $t.p.knv).attr("tabindex", "-1").focus();
                }, 0);
            });
        },
        nextCell: function (iRow, iCol) {
            return this.each(function () {
                var $t = this,
                        nCol = false,
                        i;
                if (!$t.grid || $t.p.cellEdit !== true) {
                    return;
                }
                // try to find next editable cell
                for (i = iCol + 1; i < $t.p.colModel.length; i++) {
                    if ($t.p.colModel[i].editable === true) {
                        nCol = i;
                        break;
                    }
                }
                if (nCol !== false) {
                    $($t).jqGrid("editCell", iRow, nCol, true);
                } else {
                    if ($t.p.savedRow.length > 0) {
                        $($t).jqGrid("saveCell", iRow, iCol);
                    }
                }
            });
        },
        prevCell: function (iRow, iCol) {
            return this.each(function () {
                var $t = this,
                        nCol = false,
                        i;
                if (!$t.grid || $t.p.cellEdit !== true) {
                    return;
                }
                // try to find next editable cell
                for (i = iCol - 1; i >= 0; i--) {
                    if ($t.p.colModel[i].editable === true) {
                        nCol = i;
                        break;
                    }
                }
                if (nCol !== false) {
                    $($t).jqGrid("editCell", iRow, nCol, true);
                } else {
                    if ($t.p.savedRow.length > 0) {
                        $($t).jqGrid("saveCell", iRow, iCol);
                    }
                }
            });
        },
        GridNav: function () {
            return this.each(function () {
                var $t = this;
                if (!$t.grid || $t.p.cellEdit !== true) {
                    return;
                }
                // trick to process keydown on non input elements
                $t.p.knv = $t.p.id + "_kn";
                var selection = $("<div style='position:fixed;top:0px;width:1px;height:1px;' tabindex='0'><div tabindex='-1' style='width:1px;height:1px;' id='" + $t.p.knv + "'></div></div>"),
                        i, kdir;

                function scrollGrid(iR, iC, tp) {
                    if (tp.substr(0, 1) === 'v') {
                        var ch = $($t.grid.bDiv)[0].clientHeight,
                                st = $($t.grid.bDiv)[0].scrollTop,
                                nROT = $t.rows[iR].offsetTop + $t.rows[iR].clientHeight,
                                pROT = $t.rows[iR].offsetTop;
                        if (tp === 'vd') {
                            if (nROT >= ch) {
                                $($t.grid.bDiv)[0].scrollTop = $($t.grid.bDiv)[0].scrollTop + $t.rows[iR].clientHeight;
                            }
                        }
                        if (tp === 'vu') {
                            if (pROT < st) {
                                $($t.grid.bDiv)[0].scrollTop = $($t.grid.bDiv)[0].scrollTop - $t.rows[iR].clientHeight;
                            }
                        }
                    }
                    if (tp === 'h') {
                        var cw = $($t.grid.bDiv)[0].clientWidth,
                                sl = $($t.grid.bDiv)[0].scrollLeft,
                                nCOL = $t.rows[iR].cells[iC].offsetLeft + $t.rows[iR].cells[iC].clientWidth,
                                pCOL = $t.rows[iR].cells[iC].offsetLeft;
                        if (nCOL >= cw + parseInt(sl, 10)) {
                            $($t.grid.bDiv)[0].scrollLeft = $($t.grid.bDiv)[0].scrollLeft + $t.rows[iR].cells[iC].clientWidth;
                        } else if (pCOL < sl) {
                            $($t.grid.bDiv)[0].scrollLeft = $($t.grid.bDiv)[0].scrollLeft - $t.rows[iR].cells[iC].clientWidth;
                        }
                    }
                }

                function findNextVisible(iC, act) {
                    var ind, i;
                    if (act === 'lft') {
                        ind = iC + 1;
                        for (i = iC; i >= 0; i--) {
                            if ($t.p.colModel[i].hidden !== true) {
                                ind = i;
                                break;
                            }
                        }
                    }
                    if (act === 'rgt') {
                        ind = iC - 1;
                        for (i = iC; i < $t.p.colModel.length; i++) {
                            if ($t.p.colModel[i].hidden !== true) {
                                ind = i;
                                break;
                            }
                        }
                    }
                    return ind;
                }

                $(selection).insertBefore($t.grid.cDiv);
                $("#" + $t.p.knv).focus().keydown(function (e) {
                    kdir = e.keyCode;
                    if ($t.p.direction === "rtl") {
                        if (kdir === 37) {
                            kdir = 39;
                        } else if (kdir === 39) {
                            kdir = 37;
                        }
                    }
                    switch (kdir) {
                        case 38:
                            if ($t.p.iRow - 1 > 0) {
                                scrollGrid($t.p.iRow - 1, $t.p.iCol, 'vu');
                                $($t).jqGrid("editCell", $t.p.iRow - 1, $t.p.iCol, false);
                            }
                            break;
                        case 40:
                            if ($t.p.iRow + 1 <= $t.rows.length - 1) {
                                scrollGrid($t.p.iRow + 1, $t.p.iCol, 'vd');
                                $($t).jqGrid("editCell", $t.p.iRow + 1, $t.p.iCol, false);
                            }
                            break;
                        case 37:
                            if ($t.p.iCol - 1 >= 0) {
                                i = findNextVisible($t.p.iCol - 1, 'lft');
                                scrollGrid($t.p.iRow, i, 'h');
                                $($t).jqGrid("editCell", $t.p.iRow, i, false);
                            }
                            break;
                        case 39:
                            if ($t.p.iCol + 1 <= $t.p.colModel.length - 1) {
                                i = findNextVisible($t.p.iCol + 1, 'rgt');
                                scrollGrid($t.p.iRow, i, 'h');
                                $($t).jqGrid("editCell", $t.p.iRow, i, false);
                            }
                            break;
                        case 13:
                            if (parseInt($t.p.iCol, 10) >= 0 && parseInt($t.p.iRow, 10) >= 0) {
                                $($t).jqGrid("editCell", $t.p.iRow, $t.p.iCol, true);
                            }
                            break;
                        default:
                            return true;
                    }
                    return false;
                });
            });
        },
        getChangedCells: function (mthd) {
            var ret = [];
            if (!mthd) {
                mthd = 'all';
            }
            this.each(function () {
                var $t = this,
                        nm;
                if (!$t.grid || $t.p.cellEdit !== true) {
                    return;
                }
                $($t.rows).each(function (j) {
                    var res = {};
                    if ($(this).hasClass("edited")) {
                        $('td', this).each(function (i) {
                            nm = $t.p.colModel[i].name;
                            if (nm !== 'cb' && nm !== 'subgrid') {
                                if (mthd === 'dirty') {
                                    if ($(this).hasClass('dirty-cell')) {
                                        try {
                                            res[nm] = $.unformat.call($t, this, {
                                                rowId: $t.rows[j].id,
                                                colModel: $t.p.colModel[i]
                                            }, i);
                                        } catch (e) {
                                            res[nm] = $.jgrid.htmlDecode($(this).html());
                                        }
                                    }
                                } else {
                                    try {
                                        res[nm] = $.unformat.call($t, this, {
                                            rowId: $t.rows[j].id,
                                            colModel: $t.p.colModel[i]
                                        }, i);
                                    } catch (e) {
                                        res[nm] = $.jgrid.htmlDecode($(this).html());
                                    }
                                }
                            }
                        });
                        res.id = this.id;
                        ret.push(res);
                    }
                });
            });
            return ret;
        }
        /// end  cell editing
    });
})(jQuery); /*jshint eqeqeq:false */
/*global jQuery */
(function ($) {
    /**
     * jqGrid extension for SubGrid Data
     * Tony Tomov tony@trirand.com
     * http://trirand.com/blog/ 
     * Dual licensed under the MIT and GPL licenses:
     * http://www.opensource.org/licenses/mit-license.php
     * http://www.gnu.org/licenses/gpl-2.0.html
     **/
    "use strict";
    $.jgrid.extend({
        setSubGrid: function () {
            return this.each(function () {
                var $t = this,
                        cm, i, suboptions = {
                            plusicon: "ui-icon-plus",
                            minusicon: "ui-icon-minus",
                            openicon: "ui-icon-carat-1-sw",
                            expandOnLoad: false,
                            delayOnLoad: 50,
                            selectOnExpand: false,
                            selectOnCollapse: false,
                            reloadOnExpand: true
                        };
                $t.p.subGridOptions = $.extend(suboptions, $t.p.subGridOptions || {});
                $t.p.colNames.unshift("");
                $t.p.colModel.unshift({
                    name: 'subgrid',
                    width: $.jgrid.cell_width ? $t.p.subGridWidth + $t.p.cellLayout : $t.p.subGridWidth,
                    sortable: false,
                    resizable: false,
                    hidedlg: true,
                    search: false,
                    fixed: true
                });
                cm = $t.p.subGridModel;
                if (cm[0]) {
                    cm[0].align = $.extend([], cm[0].align || []);
                    for (i = 0; i < cm[0].name.length; i++) {
                        cm[0].align[i] = cm[0].align[i] || 'left';
                    }
                }
            });
        },
        addSubGridCell: function (pos, iRow) {
            var prp = '',
                    ic, sid, cls, view;
            this.each(function () {
                prp = this.formatCol(pos, iRow);
                sid = this.p.id;
                ic = this.p.subGridOptions.plusicon;
                cls = (this.p.colModel[pos].classes) ? this.p.colModel[pos].classes : '';
                view = this.p.listview;
            });
            // HB Customization << Start
            if (view == "view") {
                if (!(cls && cls.match(/list-view-middle/gi))) {
                    cls = (cls) ? cls + " list-view-middle" : "list-view-middle";
                }
            } else {
                if (cls && cls.match(/list-view-middle/gi)) {
                    cls = cls.replace(/list-view-middle/gi, "");
                }
            }
            // HB Customization >> End
            return "<td role=\"gridcell\" aria-describedby=\"" + sid + "_subgrid\" class=\"ui-sgcollapsed sgcollapsed " + cls + "\" " + prp + "><a style='cursor:pointer;'><span class='ui-icon " + ic + "'></span></a></td>";
        },
        addSubGrid: function (pos, sind) {
            return this.each(function () {
                var ts = this;
                if (!ts.grid) {
                    return;
                }
                //-------------------------
                var subGridCell = function (trdiv, cell, pos) {
                    var tddiv = $("<td align='" + ts.p.subGridModel[0].align[pos] + "'></td>").html(cell);
                    $(trdiv).append(tddiv);
                };
                var subGridXml = function (sjxml, sbid) {
                    var tddiv, i, sgmap, dummy = $("<table cellspacing='0' cellpadding='0' border='0'><tbody></tbody></table>"),
                            trdiv = $("<tr></tr>");
                    for (i = 0; i < ts.p.subGridModel[0].name.length; i++) {
                        tddiv = $("<th class='ui-state-default ui-th-subgrid ui-th-column ui-th-" + ts.p.direction + "'></th>");
                        $(tddiv).html(ts.p.subGridModel[0].name[i]);
                        $(tddiv).width(ts.p.subGridModel[0].width[i]);
                        $(trdiv).append(tddiv);
                    }
                    $(dummy).append(trdiv);
                    if (sjxml) {
                        sgmap = ts.p.xmlReader.subgrid;
                        $(sgmap.root + " " + sgmap.row, sjxml).each(function () {
                            trdiv = $("<tr class='ui-widget-content ui-subtblcell'></tr>");
                            if (sgmap.repeatitems === true) {
                                $(sgmap.cell, this).each(function (i) {
                                    subGridCell(trdiv, $(this).text() || '&#160;', i);
                                });
                            } else {
                                var f = ts.p.subGridModel[0].mapping || ts.p.subGridModel[0].name;
                                if (f) {
                                    for (i = 0; i < f.length; i++) {
                                        subGridCell(trdiv, $(f[i], this).text() || '&#160;', i);
                                    }
                                }
                            }
                            $(dummy).append(trdiv);
                        });
                    }
                    var pID = $("table:first", ts.grid.bDiv).attr("id") + "_";
                    $("#" + $.jgrid.jqID(pID + sbid)).append(dummy);
                    ts.grid.hDiv.loading = false;
                    $("#load_" + $.jgrid.jqID(ts.p.id)).hide();
                    return false;
                };
                var subGridJson = function (sjxml, sbid) {
                    var tddiv, result, i, cur, sgmap, j, dummy = $("<table cellspacing='0' cellpadding='0' border='0'><tbody></tbody></table>"),
                            trdiv = $("<tr></tr>");
                    for (i = 0; i < ts.p.subGridModel[0].name.length; i++) {
                        tddiv = $("<th class='ui-state-default ui-th-subgrid ui-th-column ui-th-" + ts.p.direction + "'></th>");
                        $(tddiv).html(ts.p.subGridModel[0].name[i]);
                        $(tddiv).width(ts.p.subGridModel[0].width[i]);
                        $(trdiv).append(tddiv);
                    }
                    $(dummy).append(trdiv);
                    if (sjxml) {
                        sgmap = ts.p.jsonReader.subgrid;
                        result = $.jgrid.getAccessor(sjxml, sgmap.root);
                        if (result !== undefined) {
                            for (i = 0; i < result.length; i++) {
                                cur = result[i];
                                trdiv = $("<tr class='ui-widget-content ui-subtblcell'></tr>");
                                if (sgmap.repeatitems === true) {
                                    if (sgmap.cell) {
                                        cur = cur[sgmap.cell];
                                    }
                                    for (j = 0; j < cur.length; j++) {
                                        subGridCell(trdiv, cur[j] || '&#160;', j);
                                    }
                                } else {
                                    var f = ts.p.subGridModel[0].mapping || ts.p.subGridModel[0].name;
                                    if (f.length) {
                                        for (j = 0; j < f.length; j++) {
                                            subGridCell(trdiv, cur[f[j]] || '&#160;', j);
                                        }
                                    }
                                }
                                $(dummy).append(trdiv);
                            }
                        }
                    }
                    var pID = $("table:first", ts.grid.bDiv).attr("id") + "_";
                    $("#" + $.jgrid.jqID(pID + sbid)).append(dummy);
                    ts.grid.hDiv.loading = false;
                    $("#load_" + $.jgrid.jqID(ts.p.id)).hide();
                    return false;
                };
                var populatesubgrid = function (rd) {
                    var sid, dp, i, j;
                    sid = $(rd).attr("id");
                    dp = {
                        nd_: (new Date().getTime())
                    };
                    dp[ts.p.prmNames.subgridid] = sid;
                    if (!ts.p.subGridModel[0]) {
                        return false;
                    }
                    if (ts.p.subGridModel[0].params) {
                        for (j = 0; j < ts.p.subGridModel[0].params.length; j++) {
                            for (i = 0; i < ts.p.colModel.length; i++) {
                                if (ts.p.colModel[i].name === ts.p.subGridModel[0].params[j]) {
                                    dp[ts.p.colModel[i].name] = $("td:eq(" + i + ")", rd).text().replace(/\&#160\;/ig, '');
                                }
                            }
                        }
                    }
                    if (!ts.grid.hDiv.loading) {
                        ts.grid.hDiv.loading = true;
                        $("#load_" + $.jgrid.jqID(ts.p.id)).show();
                        if (!ts.p.subgridtype) {
                            ts.p.subgridtype = ts.p.datatype;
                        }
                        if ($.isFunction(ts.p.subgridtype)) {
                            ts.p.subgridtype.call(ts, dp);
                        } else {
                            ts.p.subgridtype = ts.p.subgridtype.toLowerCase();
                        }
                        switch (ts.p.subgridtype) {
                            case "xml":
                            case "json":
                                $.ajax($.extend({
                                    type: ts.p.mtype,
                                    url: ts.p.subGridUrl,
                                    dataType: ts.p.subgridtype,
                                    data: $.isFunction(ts.p.serializeSubGridData) ? ts.p.serializeSubGridData.call(ts, dp) : dp,
                                    complete: function (sxml) {
                                        if (ts.p.subgridtype === "xml") {
                                            subGridXml(sxml.responseXML, sid);
                                        } else {
                                            subGridJson($.jgrid.parse(sxml.responseText), sid);
                                        }
                                        sxml = null;
                                    }
                                }, $.jgrid.ajaxOptions, ts.p.ajaxSubgridOptions || {}));
                                break;
                        }
                    }
                    return false;
                };
                var _id, pID, atd, nhc = 0,
                        bfsc, r;
                $.each(ts.p.colModel, function () {
                    if (this.hidden === true || this.name === 'rn' || this.name === 'cb') {
                        nhc++;
                    }
                });
                var len = ts.rows.length,
                        i = 1;
                if (sind !== undefined && sind > 0) {
                    i = sind;
                    len = sind + 1;
                }
                while (i < len) {
                    if ($(ts.rows[i]).hasClass('jqgrow')) {
                        $(ts.rows[i].cells[pos]).bind('click', function () {
                            var tr = $(this).parent("tr")[0];
                            r = tr.nextSibling;
                            if ($(this).hasClass("sgcollapsed")) {
                                pID = ts.p.id;
                                _id = tr.id;
                                if (ts.p.subGridOptions.reloadOnExpand === true || (ts.p.subGridOptions.reloadOnExpand === false && !$(r).hasClass('ui-subgrid'))) {
                                    atd = pos >= 1 ? "<td colspan='" + pos + "'>&#160;</td>" : "";
                                    bfsc = $(ts).triggerHandler("jqGridSubGridBeforeExpand", [pID + "_" + _id, _id]);
                                    bfsc = (bfsc === false || bfsc === 'stop') ? false : true;
                                    if (bfsc && $.isFunction(ts.p.subGridBeforeExpand)) {
                                        bfsc = ts.p.subGridBeforeExpand.call(ts, pID + "_" + _id, _id);
                                    }
                                    if (bfsc === false) {
                                        return false;
                                    }
                                    $(tr).after("<tr role='row' class='ui-subgrid'>" + atd + "<td class='ui-widget-content subgrid-cell'><span class='ui-icon " + ts.p.subGridOptions.openicon + "'></span></td><td colspan='" + parseInt(ts.p.colNames.length - 1 - nhc, 10) + "' class='ui-widget-content subgrid-data'><div id=" + pID + "_" + _id + " class='tablediv'></div></td></tr>");
                                    $(ts).triggerHandler("jqGridSubGridRowExpanded", [pID + "_" + _id, _id]);
                                    if ($.isFunction(ts.p.subGridRowExpanded)) {
                                        ts.p.subGridRowExpanded.call(ts, pID + "_" + _id, _id);
                                    } else {
                                        populatesubgrid(tr);
                                    }
                                } else {
                                    $(r).show();
                                }
                                $(this).html("<a style='cursor:pointer;'><span class='ui-icon " + ts.p.subGridOptions.minusicon + "'></span></a>").removeClass("sgcollapsed").addClass("sgexpanded");
                                if (ts.p.subGridOptions.selectOnExpand) {
                                    $(ts).jqGrid('setSelection', _id);
                                }
                            } else if ($(this).hasClass("sgexpanded")) {
                                bfsc = $(ts).triggerHandler("jqGridSubGridRowColapsed", [pID + "_" + _id, _id]);
                                bfsc = (bfsc === false || bfsc === 'stop') ? false : true;
                                _id = tr.id;
                                if (bfsc && $.isFunction(ts.p.subGridRowColapsed)) {
                                    bfsc = ts.p.subGridRowColapsed.call(ts, pID + "_" + _id, _id);
                                }
                                if (bfsc === false) {
                                    return false;
                                }
                                if (ts.p.subGridOptions.reloadOnExpand === true) {
                                    $(r).remove(".ui-subgrid");
                                } else if ($(r).hasClass('ui-subgrid')) { // incase of dynamic deleting
                                    $(r).hide();
                                }
                                $(this).html("<a style='cursor:pointer;'><span class='ui-icon " + ts.p.subGridOptions.plusicon + "'></span></a>").removeClass("sgexpanded").addClass("sgcollapsed");
                                if (ts.p.subGridOptions.selectOnCollapse) {
                                    $(ts).jqGrid('setSelection', _id);
                                }
                            }
                            return false;
                        });
                    }
                    i++;
                }
                if (ts.p.subGridOptions.expandOnLoad === true) {
                    $(ts.rows).filter('.jqgrow').each(function (index, row) {
                        $(row.cells[0]).click();
                    });
                }
                ts.subGridXml = function (xml, sid) {
                    subGridXml(xml, sid);
                };
                ts.subGridJson = function (json, sid) {
                    subGridJson(json, sid);
                };
            });
        },
        expandSubGridRow: function (rowid) {
            return this.each(function () {
                var $t = this;
                if (!$t.grid && !rowid) {
                    return;
                }
                if ($t.p.subGrid === true) {
                    var rc = $(this).jqGrid("getInd", rowid, true);
                    if (rc) {
                        var sgc = $("td.sgcollapsed", rc)[0];
                        if (sgc) {
                            $(sgc).trigger("click");
                        }
                    }
                }
            });
        },
        collapseSubGridRow: function (rowid) {
            return this.each(function () {
                var $t = this;
                if (!$t.grid && !rowid) {
                    return;
                }
                if ($t.p.subGrid === true) {
                    var rc = $(this).jqGrid("getInd", rowid, true);
                    if (rc) {
                        var sgc = $("td.sgexpanded", rc)[0];
                        if (sgc) {
                            $(sgc).trigger("click");
                        }
                    }
                }
            });
        },
        toggleSubGridRow: function (rowid) {
            return this.each(function () {
                var $t = this;
                if (!$t.grid && !rowid) {
                    return;
                }
                if ($t.p.subGrid === true) {
                    var rc = $(this).jqGrid("getInd", rowid, true);
                    if (rc) {
                        var sgc = $("td.sgcollapsed", rc)[0];
                        if (sgc) {
                            $(sgc).trigger("click");
                        } else {
                            sgc = $("td.sgexpanded", rc)[0];
                            if (sgc) {
                                $(sgc).trigger("click");
                            }
                        }
                    }
                }
            });
        }
    });
})(jQuery);
/**
 * jqGrid extension - Tree Grid
 * Tony Tomov tony@trirand.com
 * http://trirand.com/blog/
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 **/

/*jshint eqeqeq:false */
/*global jQuery */
(function ($) {
    "use strict";
    $.jgrid.extend({
        setTreeNode: function (i, len) {
            return this.each(function () {
                var $t = this;
                if (!$t.grid || !$t.p.treeGrid) {
                    return;
                }
                var expCol = $t.p.expColInd,
                        expanded = $t.p.treeReader.expanded_field,
                        isLeaf = $t.p.treeReader.leaf_field,
                        level = $t.p.treeReader.level_field,
                        icon = $t.p.treeReader.icon_field,
                        loaded = $t.p.treeReader.loaded,
                        lft, rgt, curLevel, ident, lftpos, twrap, ldat, lf;
                while (i < len) {
                    var ind = $.jgrid.stripPref($t.p.idPrefix, $t.rows[i].id),
                            dind = $t.p._index[ind],
                            expan;
                    ldat = $t.p.data[dind];
                    //$t.rows[i].level = ldat[level];
                    if ($t.p.treeGridModel === 'nested') {
                        if (!ldat[isLeaf]) {
                            lft = parseInt(ldat[$t.p.treeReader.left_field], 10);
                            rgt = parseInt(ldat[$t.p.treeReader.right_field], 10);
                            // NS Model
                            ldat[isLeaf] = (rgt === lft + 1) ? 'true' : 'false';
                            $t.rows[i].cells[$t.p._treeleafpos].innerHTML = ldat[isLeaf];
                        }
                    }
                    //else {
                    //row.parent_id = rd[$t.p.treeReader.parent_id_field];
                    //}
                    curLevel = parseInt(ldat[level], 10);
                    if ($t.p.tree_root_level === 0) {
                        ident = curLevel + 1;
                        lftpos = curLevel;
                    } else {
                        ident = curLevel;
                        lftpos = curLevel - 1;
                    }
                    twrap = "<div class='tree-wrap tree-wrap-" + $t.p.direction + "' style='width:" + (ident * 18) + "px;'>";
                    twrap += "<div style='" + ($t.p.direction === "rtl" ? "right:" : "left:") + (lftpos * 18) + "px;' class='ui-icon ";


                    if (ldat[loaded] !== undefined) {
                        if (ldat[loaded] === "true" || ldat[loaded] === true) {
                            ldat[loaded] = true;
                        } else {
                            ldat[loaded] = false;
                        }
                    }
                    if (ldat[isLeaf] === "true" || ldat[isLeaf] === true) {
                        twrap += ((ldat[icon] !== undefined && ldat[icon] !== "") ? ldat[icon] : $t.p.treeIcons.leaf) + " tree-leaf treeclick";
                        ldat[isLeaf] = true;
                        lf = "leaf";
                    } else {
                        ldat[isLeaf] = false;
                        lf = "";
                    }
                    ldat[expanded] = ((ldat[expanded] === "true" || ldat[expanded] === true) ? true : false) && (ldat[loaded] || ldat[loaded] === undefined);
                    if (ldat[expanded] === false) {
                        twrap += ((ldat[isLeaf] === true) ? "'" : $t.p.treeIcons.plus + " tree-plus treeclick'");
                    } else {
                        twrap += ((ldat[isLeaf] === true) ? "'" : $t.p.treeIcons.minus + " tree-minus treeclick'");
                    }

                    twrap += "></div></div>";
                    $($t.rows[i].cells[expCol]).wrapInner("<span class='cell-wrapper" + lf + "'></span>").prepend(twrap);

                    if (curLevel !== parseInt($t.p.tree_root_level, 10)) {
                        var pn = $($t).jqGrid('getNodeParent', ldat);
                        expan = pn && pn.hasOwnProperty(expanded) ? pn[expanded] : true;
                        if (!expan) {
                            $($t.rows[i]).css("display", "none");
                        }
                    }
                    $($t.rows[i].cells[expCol]).find("div.treeclick").bind("click", function (e) {
                        var target = e.target || e.srcElement,
                                ind2 = $.jgrid.stripPref($t.p.idPrefix, $(target, $t.rows).closest("tr.jqgrow")[0].id),
                                pos = $t.p._index[ind2];
                        if (!$t.p.data[pos][isLeaf]) {
                            if ($t.p.data[pos][expanded]) {
                                $($t).jqGrid("collapseRow", $t.p.data[pos]);
                                $($t).jqGrid("collapseNode", $t.p.data[pos]);
                            } else {
                                $($t).jqGrid("expandRow", $t.p.data[pos]);
                                $($t).jqGrid("expandNode", $t.p.data[pos]);
                            }
                        }
                        return false;
                    });
                    if ($t.p.ExpandColClick === true) {
                        $($t.rows[i].cells[expCol]).find("span.cell-wrapper").css("cursor", "pointer").bind("click", function (e) {
                            var target = e.target || e.srcElement,
                                    ind2 = $.jgrid.stripPref($t.p.idPrefix, $(target, $t.rows).closest("tr.jqgrow")[0].id),
                                    pos = $t.p._index[ind2];
                            if (!$t.p.data[pos][isLeaf]) {
                                if ($t.p.data[pos][expanded]) {
                                    $($t).jqGrid("collapseRow", $t.p.data[pos]);
                                    $($t).jqGrid("collapseNode", $t.p.data[pos]);
                                } else {
                                    $($t).jqGrid("expandRow", $t.p.data[pos]);
                                    $($t).jqGrid("expandNode", $t.p.data[pos]);
                                }
                            }
                            $($t).jqGrid("setSelection", ind2);
                            return false;
                        });
                    }
                    i++;
                }

            });
        },
        setTreeGrid: function () {
            return this.each(function () {
                var $t = this,
                        i = 0,
                        pico, ecol = false,
                        nm, key, tkey, dupcols = [];
                if (!$t.p.treeGrid) {
                    return;
                }
                if (!$t.p.treedatatype) {
                    $.extend($t.p, {
                        treedatatype: $t.p.datatype
                    });
                }
                $t.p.subGrid = false;
                $t.p.altRows = false;
                $t.p.pgbuttons = false;
                $t.p.pginput = false;
                $t.p.gridview = true;
                if ($t.p.rowTotal === null) {
                    $t.p.rowNum = 10000;
                }
                $t.p.multiselect = false;
                $t.p.rowList = [];
                $t.p.expColInd = 0;
                pico = 'ui-icon-triangle-1-' + ($t.p.direction === "rtl" ? 'w' : 'e');
                $t.p.treeIcons = $.extend({
                    plus: pico,
                    minus: 'ui-icon-triangle-1-s',
                    leaf: 'ui-icon-radio-off'
                }, $t.p.treeIcons || {});
                if ($t.p.treeGridModel === 'nested') {
                    $t.p.treeReader = $.extend({
                        level_field: "level",
                        left_field: "lft",
                        right_field: "rgt",
                        leaf_field: "isLeaf",
                        expanded_field: "expanded",
                        loaded: "loaded",
                        icon_field: "icon"
                    }, $t.p.treeReader);
                } else if ($t.p.treeGridModel === 'adjacency') {
                    $t.p.treeReader = $.extend({
                        level_field: "level",
                        parent_id_field: "parent",
                        leaf_field: "isLeaf",
                        expanded_field: "expanded",
                        loaded: "loaded",
                        icon_field: "icon"
                    }, $t.p.treeReader);
                }
                for (key in $t.p.colModel) {
                    if ($t.p.colModel.hasOwnProperty(key)) {
                        nm = $t.p.colModel[key].name;
                        if (nm === $t.p.ExpandColumn && !ecol) {
                            ecol = true;
                            $t.p.expColInd = i;
                        }
                        i++;
                        //
                        for (tkey in $t.p.treeReader) {
                            if ($t.p.treeReader.hasOwnProperty(tkey) && $t.p.treeReader[tkey] === nm) {
                                dupcols.push(nm);
                            }
                        }
                    }
                }
                $.each($t.p.treeReader, function (j, n) {
                    if (n && $.inArray(n, dupcols) === -1) {
                        if (j === 'leaf_field') {
                            $t.p._treeleafpos = i;
                        }
                        i++;
                        $t.p.colNames.push(n);
                        $t.p.colModel.push({
                            name: n,
                            width: 1,
                            hidden: true,
                            sortable: false,
                            resizable: false,
                            hidedlg: true,
                            editable: true,
                            search: false
                        });
                    }
                });
            });
        },
        expandRow: function (record) {
            this.each(function () {
                var $t = this;
                if (!$t.grid || !$t.p.treeGrid) {
                    return;
                }
                var childern = $($t).jqGrid("getNodeChildren", record),
                        //if ($($t).jqGrid("isVisibleNode",record)) {
                        expanded = $t.p.treeReader.expanded_field;
                $(childern).each(function () {
                    var id = $t.p.idPrefix + $.jgrid.getAccessor(this, $t.p.localReader.id);
                    $($($t).jqGrid('getGridRowById', id)).css("display", "");
                    if (this[expanded]) {
                        $($t).jqGrid("expandRow", this);
                    }
                });
                //}
            });
        },
        collapseRow: function (record) {
            this.each(function () {
                var $t = this;
                if (!$t.grid || !$t.p.treeGrid) {
                    return;
                }
                var childern = $($t).jqGrid("getNodeChildren", record),
                        expanded = $t.p.treeReader.expanded_field;
                $(childern).each(function () {
                    var id = $t.p.idPrefix + $.jgrid.getAccessor(this, $t.p.localReader.id);
                    $($($t).jqGrid('getGridRowById', id)).css("display", "none");
                    if (this[expanded]) {
                        $($t).jqGrid("collapseRow", this);
                    }
                });
            });
        },
        // NS ,adjacency models
        getRootNodes: function () {
            var result = [];
            this.each(function () {
                var $t = this;
                if (!$t.grid || !$t.p.treeGrid) {
                    return;
                }
                switch ($t.p.treeGridModel) {
                    case 'nested':
                        var level = $t.p.treeReader.level_field;
                        $($t.p.data).each(function () {
                            if (parseInt(this[level], 10) === parseInt($t.p.tree_root_level, 10)) {
                                result.push(this);
                            }
                        });
                        break;
                    case 'adjacency':
                        var parent_id = $t.p.treeReader.parent_id_field;
                        $($t.p.data).each(function () {
                            if (this[parent_id] === null || String(this[parent_id]).toLowerCase() === "null") {
                                result.push(this);
                            }
                        });
                        break;
                }
            });
            return result;
        },
        getNodeDepth: function (rc) {
            var ret = null;
            this.each(function () {
                if (!this.grid || !this.p.treeGrid) {
                    return;
                }
                var $t = this;
                switch ($t.p.treeGridModel) {
                    case 'nested':
                        var level = $t.p.treeReader.level_field;
                        ret = parseInt(rc[level], 10) - parseInt($t.p.tree_root_level, 10);
                        break;
                    case 'adjacency':
                        ret = $($t).jqGrid("getNodeAncestors", rc).length;
                        break;
                }
            });
            return ret;
        },
        getNodeParent: function (rc) {
            var result = null;
            this.each(function () {
                var $t = this;
                if (!$t.grid || !$t.p.treeGrid) {
                    return;
                }
                switch ($t.p.treeGridModel) {
                    case 'nested':
                        var lftc = $t.p.treeReader.left_field,
                                rgtc = $t.p.treeReader.right_field,
                                levelc = $t.p.treeReader.level_field,
                                lft = parseInt(rc[lftc], 10),
                                rgt = parseInt(rc[rgtc], 10),
                                level = parseInt(rc[levelc], 10);
                        $(this.p.data).each(function () {
                            if (parseInt(this[levelc], 10) === level - 1 && parseInt(this[lftc], 10) < lft && parseInt(this[rgtc], 10) > rgt) {
                                result = this;
                                return false;
                            }
                        });
                        break;
                    case 'adjacency':
                        var parent_id = $t.p.treeReader.parent_id_field,
                                dtid = $t.p.localReader.id;
                        $(this.p.data).each(function () {
                            if (this[dtid] === $.jgrid.stripPref($t.p.idPrefix, rc[parent_id])) {
                                result = this;
                                return false;
                            }
                        });
                        break;
                }
            });
            return result;
        },
        getNodeChildren: function (rc) {
            var result = [];
            this.each(function () {
                var $t = this;
                if (!$t.grid || !$t.p.treeGrid) {
                    return;
                }
                switch ($t.p.treeGridModel) {
                    case 'nested':
                        var lftc = $t.p.treeReader.left_field,
                                rgtc = $t.p.treeReader.right_field,
                                levelc = $t.p.treeReader.level_field,
                                lft = parseInt(rc[lftc], 10),
                                rgt = parseInt(rc[rgtc], 10),
                                level = parseInt(rc[levelc], 10);
                        $(this.p.data).each(function () {
                            if (parseInt(this[levelc], 10) === level + 1 && parseInt(this[lftc], 10) > lft && parseInt(this[rgtc], 10) < rgt) {
                                result.push(this);
                            }
                        });
                        break;
                    case 'adjacency':
                        var parent_id = $t.p.treeReader.parent_id_field,
                                dtid = $t.p.localReader.id;
                        $(this.p.data).each(function () {
                            if (this[parent_id] == $.jgrid.stripPref($t.p.idPrefix, rc[dtid])) {
                                result.push(this);
                            }
                        });
                        break;
                }
            });
            return result;
        },
        getFullTreeNode: function (rc) {
            var result = [];
            this.each(function () {
                var $t = this,
                        len;
                if (!$t.grid || !$t.p.treeGrid) {
                    return;
                }
                switch ($t.p.treeGridModel) {
                    case 'nested':
                        var lftc = $t.p.treeReader.left_field,
                                rgtc = $t.p.treeReader.right_field,
                                levelc = $t.p.treeReader.level_field,
                                lft = parseInt(rc[lftc], 10),
                                rgt = parseInt(rc[rgtc], 10),
                                level = parseInt(rc[levelc], 10);
                        $(this.p.data).each(function () {
                            if (parseInt(this[levelc], 10) >= level && parseInt(this[lftc], 10) >= lft && parseInt(this[lftc], 10) <= rgt) {
                                result.push(this);
                            }
                        });
                        break;
                    case 'adjacency':
                        if (rc) {
                            result.push(rc);
                            var parent_id = $t.p.treeReader.parent_id_field,
                                    dtid = $t.p.localReader.id;
                            $(this.p.data).each(function (i) {
                                len = result.length;
                                for (i = 0; i < len; i++) {
                                    if ($.jgrid.stripPref($t.p.idPrefix, result[i][dtid]) === this[parent_id]) {
                                        result.push(this);
                                        break;
                                    }
                                }
                            });
                        }
                        break;
                }
            });
            return result;
        },
        // End NS, adjacency Model
        getNodeAncestors: function (rc) {
            var ancestors = [];
            this.each(function () {
                if (!this.grid || !this.p.treeGrid) {
                    return;
                }
                var parent = $(this).jqGrid("getNodeParent", rc);
                while (parent) {
                    ancestors.push(parent);
                    parent = $(this).jqGrid("getNodeParent", parent);
                }
            });
            return ancestors;
        },
        isVisibleNode: function (rc) {
            var result = true;
            this.each(function () {
                var $t = this;
                if (!$t.grid || !$t.p.treeGrid) {
                    return;
                }
                var ancestors = $($t).jqGrid("getNodeAncestors", rc),
                        expanded = $t.p.treeReader.expanded_field;
                $(ancestors).each(function () {
                    result = result && this[expanded];
                    if (!result) {
                        return false;
                    }
                });
            });
            return result;
        },
        isNodeLoaded: function (rc) {
            var result;
            this.each(function () {
                var $t = this;
                if (!$t.grid || !$t.p.treeGrid) {
                    return;
                }
                var isLeaf = $t.p.treeReader.leaf_field,
                        loaded = $t.p.treeReader.loaded;
                if (rc !== undefined) {
                    if (rc[loaded] !== undefined) {
                        result = rc[loaded];
                    } else if (rc[isLeaf] || $($t).jqGrid("getNodeChildren", rc).length > 0) {
                        result = true;
                    } else {
                        result = false;
                    }
                } else {
                    result = false;
                }
            });
            return result;
        },
        expandNode: function (rc) {
            return this.each(function () {
                if (!this.grid || !this.p.treeGrid) {
                    return;
                }
                var expanded = this.p.treeReader.expanded_field,
                        parent = this.p.treeReader.parent_id_field,
                        loaded = this.p.treeReader.loaded,
                        level = this.p.treeReader.level_field,
                        lft = this.p.treeReader.left_field,
                        rgt = this.p.treeReader.right_field;

                if (!rc[expanded]) {
                    var id = $.jgrid.getAccessor(rc, this.p.localReader.id);
                    var rc1 = $("#" + this.p.idPrefix + $.jgrid.jqID(id), this.grid.bDiv)[0];
                    var position = this.p._index[id];
                    if ($(this).jqGrid("isNodeLoaded", this.p.data[position])) {
                        rc[expanded] = true;
                        $("div.treeclick", rc1).removeClass(this.p.treeIcons.plus + " tree-plus").addClass(this.p.treeIcons.minus + " tree-minus");
                    } else if (!this.grid.hDiv.loading) {
                        rc[expanded] = true;
                        $("div.treeclick", rc1).removeClass(this.p.treeIcons.plus + " tree-plus").addClass(this.p.treeIcons.minus + " tree-minus");
                        this.p.treeANode = rc1.rowIndex;
                        this.p.datatype = this.p.treedatatype;
                        if (this.p.treeGridModel === 'nested') {
                            $(this).jqGrid("setGridParam", {
                                postData: {
                                    nodeid: id,
                                    n_left: rc[lft],
                                    n_right: rc[rgt],
                                    n_level: rc[level]
                                }
                            });
                        } else {
                            $(this).jqGrid("setGridParam", {
                                postData: {
                                    nodeid: id,
                                    parentid: rc[parent],
                                    n_level: rc[level]
                                }
                            });
                        }
                        $(this).trigger("reloadGrid");
                        rc[loaded] = true;
                        if (this.p.treeGridModel === 'nested') {
                            $(this).jqGrid("setGridParam", {
                                postData: {
                                    nodeid: '',
                                    n_left: '',
                                    n_right: '',
                                    n_level: ''
                                }
                            });
                        } else {
                            $(this).jqGrid("setGridParam", {
                                postData: {
                                    nodeid: '',
                                    parentid: '',
                                    n_level: ''
                                }
                            });
                        }
                    }
                }
            });
        },
        collapseNode: function (rc) {
            return this.each(function () {
                if (!this.grid || !this.p.treeGrid) {
                    return;
                }
                var expanded = this.p.treeReader.expanded_field;
                if (rc[expanded]) {
                    rc[expanded] = false;
                    var id = $.jgrid.getAccessor(rc, this.p.localReader.id);
                    var rc1 = $("#" + this.p.idPrefix + $.jgrid.jqID(id), this.grid.bDiv)[0];
                    $("div.treeclick", rc1).removeClass(this.p.treeIcons.minus + " tree-minus").addClass(this.p.treeIcons.plus + " tree-plus");
                }
            });
        },
        SortTree: function (sortname, newDir, st, datefmt) {
            return this.each(function () {
                if (!this.grid || !this.p.treeGrid) {
                    return;
                }
                var i, len, rec, records = [],
                        $t = this,
                        query, roots, rt = $(this).jqGrid("getRootNodes");
                // Sorting roots
                query = $.jgrid.from(rt);
                query.orderBy(sortname, newDir, st, datefmt);
                roots = query.select();

                // Sorting children
                for (i = 0, len = roots.length; i < len; i++) {
                    rec = roots[i];
                    records.push(rec);
                    $(this).jqGrid("collectChildrenSortTree", records, rec, sortname, newDir, st, datefmt);
                }
                $.each(records, function (index) {
                    var id = $.jgrid.getAccessor(this, $t.p.localReader.id);
                    $('#' + $.jgrid.jqID($t.p.id) + ' tbody tr:eq(' + index + ')').after($('tr#' + $.jgrid.jqID(id), $t.grid.bDiv));
                });
                query = null;
                roots = null;
                records = null;
            });
        },
        collectChildrenSortTree: function (records, rec, sortname, newDir, st, datefmt) {
            return this.each(function () {
                if (!this.grid || !this.p.treeGrid) {
                    return;
                }
                var i, len, child, ch, query, children;
                ch = $(this).jqGrid("getNodeChildren", rec);
                query = $.jgrid.from(ch);
                query.orderBy(sortname, newDir, st, datefmt);
                children = query.select();
                for (i = 0, len = children.length; i < len; i++) {
                    child = children[i];
                    records.push(child);
                    $(this).jqGrid("collectChildrenSortTree", records, child, sortname, newDir, st, datefmt);
                }
            });
        },
        // experimental 
        setTreeRow: function (rowid, data) {
            var success = false;
            this.each(function () {
                var t = this;
                if (!t.grid || !t.p.treeGrid) {
                    return;
                }
                success = $(t).jqGrid("setRowData", rowid, data);
            });
            return success;
        },
        delTreeNode: function (rowid) {
            return this.each(function () {
                var $t = this,
                        rid = $t.p.localReader.id,
                        i, left = $t.p.treeReader.left_field,
                        right = $t.p.treeReader.right_field,
                        myright, width, res, key;
                if (!$t.grid || !$t.p.treeGrid) {
                    return;
                }
                var rc = $t.p._index[rowid];
                if (rc !== undefined) {
                    // nested
                    myright = parseInt($t.p.data[rc][right], 10);
                    width = myright - parseInt($t.p.data[rc][left], 10) + 1;
                    var dr = $($t).jqGrid("getFullTreeNode", $t.p.data[rc]);
                    if (dr.length > 0) {
                        for (i = 0; i < dr.length; i++) {
                            $($t).jqGrid("delRowData", dr[i][rid]);
                        }
                    }
                    if ($t.p.treeGridModel === "nested") {
                        // ToDo - update grid data
                        res = $.jgrid.from($t.p.data).greater(left, myright, {
                            stype: 'integer'
                        }).select();
                        if (res.length) {
                            for (key in res) {
                                if (res.hasOwnProperty(key)) {
                                    res[key][left] = parseInt(res[key][left], 10) - width;
                                }
                            }
                        }
                        res = $.jgrid.from($t.p.data).greater(right, myright, {
                            stype: 'integer'
                        }).select();
                        if (res.length) {
                            for (key in res) {
                                if (res.hasOwnProperty(key)) {
                                    res[key][right] = parseInt(res[key][right], 10) - width;
                                }
                            }
                        }
                    }
                }
            });
        },
        addChildNode: function (nodeid, parentid, data, expandData) {
            //return this.each(function(){
            var $t = this[0];
            if (data) {
                // we suppose tha the id is autoincremet and
                var expanded = $t.p.treeReader.expanded_field,
                        isLeaf = $t.p.treeReader.leaf_field,
                        level = $t.p.treeReader.level_field,
                        //icon = $t.p.treeReader.icon_field,
                        parent = $t.p.treeReader.parent_id_field,
                        left = $t.p.treeReader.left_field,
                        right = $t.p.treeReader.right_field,
                        loaded = $t.p.treeReader.loaded,
                        method, parentindex, parentdata, parentlevel, i, len, max = 0,
                        rowind = parentid,
                        leaf, maxright;
                if (expandData === undefined) {
                    expandData = false;
                }
                if (nodeid === undefined || nodeid === null) {
                    i = $t.p.data.length - 1;
                    if (i >= 0) {
                        while (i >= 0) {
                            max = Math.max(max, parseInt($t.p.data[i][$t.p.localReader.id], 10));
                            i--;
                        }
                    }
                    nodeid = max + 1;
                }
                var prow = $($t).jqGrid('getInd', parentid);
                leaf = false;
                // if not a parent we assume root
                if (parentid === undefined || parentid === null || parentid === "") {
                    parentid = null;
                    rowind = null;
                    method = 'last';
                    parentlevel = $t.p.tree_root_level;
                    i = $t.p.data.length + 1;
                } else {
                    method = 'after';
                    parentindex = $t.p._index[parentid];
                    parentdata = $t.p.data[parentindex];
                    parentid = parentdata[$t.p.localReader.id];
                    parentlevel = parseInt(parentdata[level], 10) + 1;
                    var childs = $($t).jqGrid('getFullTreeNode', parentdata);
                    // if there are child nodes get the last index of it
                    if (childs.length) {
                        i = childs[childs.length - 1][$t.p.localReader.id];
                        rowind = i;
                        i = $($t).jqGrid('getInd', rowind) + 1;
                    } else {
                        i = $($t).jqGrid('getInd', parentid) + 1;
                    }
                    // if the node is leaf
                    if (parentdata[isLeaf]) {
                        leaf = true;
                        parentdata[expanded] = true;
                        //var prow = $($t).jqGrid('getInd', parentid);
                        $($t.rows[prow]).find("span.cell-wrapperleaf").removeClass("cell-wrapperleaf").addClass("cell-wrapper").end().find("div.tree-leaf").removeClass($t.p.treeIcons.leaf + " tree-leaf").addClass($t.p.treeIcons.minus + " tree-minus");
                        $t.p.data[parentindex][isLeaf] = false;
                        parentdata[loaded] = true;
                    }
                }
                len = i + 1;

                if (data[expanded] === undefined) {
                    data[expanded] = false;
                }
                if (data[loaded] === undefined) {
                    data[loaded] = false;
                }
                data[level] = parentlevel;
                if (data[isLeaf] === undefined) {
                    data[isLeaf] = true;
                }
                if ($t.p.treeGridModel === "adjacency") {
                    data[parent] = parentid;
                }
                if ($t.p.treeGridModel === "nested") {
                    // this method requiere more attention
                    var query, res, key;
                    //maxright = parseInt(maxright,10);
                    // ToDo - update grid data
                    if (parentid !== null) {
                        maxright = parseInt(parentdata[right], 10);
                        query = $.jgrid.from($t.p.data);
                        query = query.greaterOrEquals(right, maxright, {
                            stype: 'integer'
                        });
                        res = query.select();
                        if (res.length) {
                            for (key in res) {
                                if (res.hasOwnProperty(key)) {
                                    res[key][left] = res[key][left] > maxright ? parseInt(res[key][left], 10) + 2 : res[key][left];
                                    res[key][right] = res[key][right] >= maxright ? parseInt(res[key][right], 10) + 2 : res[key][right];
                                }
                            }
                        }
                        data[left] = maxright;
                        data[right] = maxright + 1;
                    } else {
                        maxright = parseInt($($t).jqGrid('getCol', right, false, 'max'), 10);
                        res = $.jgrid.from($t.p.data).greater(left, maxright, {
                            stype: 'integer'
                        }).select();
                        if (res.length) {
                            for (key in res) {
                                if (res.hasOwnProperty(key)) {
                                    res[key][left] = parseInt(res[key][left], 10) + 2;
                                }
                            }
                        }
                        res = $.jgrid.from($t.p.data).greater(right, maxright, {
                            stype: 'integer'
                        }).select();
                        if (res.length) {
                            for (key in res) {
                                if (res.hasOwnProperty(key)) {
                                    res[key][right] = parseInt(res[key][right], 10) + 2;
                                }
                            }
                        }
                        data[left] = maxright + 1;
                        data[right] = maxright + 2;
                    }
                }
                if (parentid === null || $($t).jqGrid("isNodeLoaded", parentdata) || leaf) {
                    $($t).jqGrid('addRowData', nodeid, data, method, rowind);
                    $($t).jqGrid('setTreeNode', i, len);
                }
                if (parentdata && !parentdata[expanded] && expandData) {
                    $($t.rows[prow]).find("div.treeclick").click();
                }
            }
            //});
        }
    });
})(jQuery); /*jshint eqeqeq:false, eqnull:true */
/*global jQuery */
// Grouping module
(function ($) {
    "use strict";
    $.extend($.jgrid, {
        template: function (format) { //jqgformat
            var args = $.makeArray(arguments).slice(1),
                    j, al = args.length;
            if (format == null) {
                format = "";
            }
            return format.replace(/\{([\w\-]+)(?:\:([\w\.]*)(?:\((.*?)?\))?)?\}/g, function (m, i) {
                if (!isNaN(parseInt(i, 10))) {
                    return args[parseInt(i, 10)];
                }
                for (j = 0; j < al; j++) {
                    if ($.isArray(args[j])) {
                        var nmarr = args[j],
                                k = nmarr.length;
                        while (k--) {
                            if (i === nmarr[k].nm) {
                                return nmarr[k].v;
                            }
                        }
                    }
                }
            });
        }
    });
    $.jgrid.extend({
        groupingSetup: function () {
            return this.each(function () {
                var $t = this,
                        i, j, cml, cm = $t.p.colModel,
                        grp = $t.p.groupingView;
                if (grp !== null && ((typeof grp === 'object') || $.isFunction(grp))) {
                    if (!grp.groupField.length) {
                        $t.p.grouping = false;
                    } else {
                        if (grp.visibiltyOnNextGrouping === undefined) {
                            grp.visibiltyOnNextGrouping = [];
                        }

                        grp.lastvalues = [];
                        if (!grp._locgr) {
                            grp.groups = [];
                        }
                        grp.counters = [];
                        for (i = 0; i < grp.groupField.length; i++) {
                            if (!grp.groupOrder[i]) {
                                grp.groupOrder[i] = 'asc';
                            }
                            if (!grp.groupText[i]) {
                                grp.groupText[i] = '{0}';
                            }
                            if (typeof grp.groupColumnShow[i] !== 'boolean') {
                                grp.groupColumnShow[i] = true;
                            }
                            if (typeof grp.groupSummary[i] !== 'boolean') {
                                grp.groupSummary[i] = false;
                            }
                            if (!grp.groupSummaryPos[i]) {
                                grp.groupSummaryPos[i] = 'footer';
                            }
                            if (grp.groupColumnShow[i] === true) {
                                grp.visibiltyOnNextGrouping[i] = true;
                                $($t).jqGrid('showCol', grp.groupField[i]);
                            } else {
                                grp.visibiltyOnNextGrouping[i] = $("#" + $.jgrid.jqID($t.p.id + "_" + grp.groupField[i])).is(":visible");
                                $($t).jqGrid('hideCol', grp.groupField[i]);
                            }
                        }
                        grp.summary = [];
                        if (grp.hideFirstGroupCol) {
                            grp.formatDisplayField[0] = function (v) {
                                return v;
                            };
                        }
                        for (j = 0, cml = cm.length; j < cml; j++) {
                            if (grp.hideFirstGroupCol) {
                                if (!cm[j].hidden && grp.groupField[0] === cm[j].name) {
                                    cm[j].formatter = function () {
                                        return '';
                                    };
                                }
                            }
                            if (cm[j].summaryType) {
                                if (cm[j].summaryDivider) {
                                    grp.summary.push({
                                        nm: cm[j].name,
                                        st: cm[j].summaryType,
                                        v: '',
                                        sd: cm[j].summaryDivider,
                                        vd: '',
                                        sr: cm[j].summaryRound,
                                        srt: cm[j].summaryRoundType || 'round'
                                    });
                                } else {
                                    grp.summary.push({
                                        nm: cm[j].name,
                                        st: cm[j].summaryType,
                                        v: '',
                                        sr: cm[j].summaryRound,
                                        srt: cm[j].summaryRoundType || 'round'
                                    });
                                }
                            }
                        }
                    }
                } else {
                    $t.p.grouping = false;
                }
            });
        },
        groupingPrepare: function (record, irow) {
            this.each(function () {
                var grp = this.p.groupingView,
                        $t = this,
                        i, grlen = grp.groupField.length,
                        fieldName, v, displayName, displayValue, changed = 0;
                for (i = 0; i < grlen; i++) {
                    fieldName = grp.groupField[i];
                    displayName = grp.displayField[i];
                    v = record[fieldName];
                    displayValue = displayName == null ? null : record[displayName];

                    if (displayValue == null) {
                        displayValue = v;
                    }
                    if (v !== undefined) {
                        if (irow === 0) {
                            // First record always starts a new group
                            grp.groups.push({
                                idx: i,
                                dataIndex: fieldName,
                                value: v,
                                displayValue: displayValue,
                                startRow: irow,
                                cnt: 1,
                                summary: []
                            });
                            grp.lastvalues[i] = v;
                            grp.counters[i] = {
                                cnt: 1,
                                pos: grp.groups.length - 1,
                                summary: $.extend(true, [], grp.summary)
                            };
                            $.each(grp.counters[i].summary, function () {
                                if ($.isFunction(this.st)) {
                                    this.v = this.st.call($t, this.v, this.nm, record);
                                } else {
                                    this.v = $($t).jqGrid('groupingCalculations.handler', this.st, this.v, this.nm, this.sr, this.srt, record);
                                    if (this.st.toLowerCase() === 'avg' && this.sd) {
                                        this.vd = $($t).jqGrid('groupingCalculations.handler', this.st, this.vd, this.sd, this.sr, this.srt, record);
                                    }
                                }
                            });
                            grp.groups[grp.counters[i].pos].summary = grp.counters[i].summary;
                        } else {
                            if (typeof v !== "object" && ($.isArray(grp.isInTheSameGroup) && $.isFunction(grp.isInTheSameGroup[i]) ? !grp.isInTheSameGroup[i].call($t, grp.lastvalues[i], v, i, grp) : grp.lastvalues[i] !== v)) {
                                // This record is not in same group as previous one
                                grp.groups.push({
                                    idx: i,
                                    dataIndex: fieldName,
                                    value: v,
                                    displayValue: displayValue,
                                    startRow: irow,
                                    cnt: 1,
                                    summary: []
                                });
                                grp.lastvalues[i] = v;
                                changed = 1;
                                grp.counters[i] = {
                                    cnt: 1,
                                    pos: grp.groups.length - 1,
                                    summary: $.extend(true, [], grp.summary)
                                };
                                $.each(grp.counters[i].summary, function () {
                                    if ($.isFunction(this.st)) {
                                        this.v = this.st.call($t, this.v, this.nm, record);
                                    } else {
                                        this.v = $($t).jqGrid('groupingCalculations.handler', this.st, this.v, this.nm, this.sr, this.srt, record);
                                        if (this.st.toLowerCase() === 'avg' && this.sd) {
                                            this.vd = $($t).jqGrid('groupingCalculations.handler', this.st, this.vd, this.sd, this.sr, this.srt, record);
                                        }
                                    }
                                });
                                grp.groups[grp.counters[i].pos].summary = grp.counters[i].summary;
                            } else {
                                if (changed === 1) {
                                    // This group has changed because an earlier group changed.
                                    grp.groups.push({
                                        idx: i,
                                        dataIndex: fieldName,
                                        value: v,
                                        displayValue: displayValue,
                                        startRow: irow,
                                        cnt: 1,
                                        summary: []
                                    });
                                    grp.lastvalues[i] = v;
                                    grp.counters[i] = {
                                        cnt: 1,
                                        pos: grp.groups.length - 1,
                                        summary: $.extend(true, [], grp.summary)
                                    };
                                    $.each(grp.counters[i].summary, function () {
                                        if ($.isFunction(this.st)) {
                                            this.v = this.st.call($t, this.v, this.nm, record);
                                        } else {
                                            this.v = $($t).jqGrid('groupingCalculations.handler', this.st, this.v, this.nm, this.sr, this.srt, record);
                                            if (this.st.toLowerCase() === 'avg' && this.sd) {
                                                this.vd = $($t).jqGrid('groupingCalculations.handler', this.st, this.vd, this.sd, this.sr, this.srt, record);
                                            }
                                        }
                                    });
                                    grp.groups[grp.counters[i].pos].summary = grp.counters[i].summary;
                                } else {
                                    grp.counters[i].cnt += 1;
                                    grp.groups[grp.counters[i].pos].cnt = grp.counters[i].cnt;
                                    $.each(grp.counters[i].summary, function () {
                                        if ($.isFunction(this.st)) {
                                            this.v = this.st.call($t, this.v, this.nm, record);
                                        } else {
                                            this.v = $($t).jqGrid('groupingCalculations.handler', this.st, this.v, this.nm, this.sr, this.srt, record);
                                            if (this.st.toLowerCase() === 'avg' && this.sd) {
                                                this.vd = $($t).jqGrid('groupingCalculations.handler', this.st, this.vd, this.sd, this.sr, this.srt, record);
                                            }
                                        }
                                    });
                                    grp.groups[grp.counters[i].pos].summary = grp.counters[i].summary;
                                }
                            }
                        }
                    }
                }
                //gdata.push( rData );
            });
            return this;
        },
        groupingToggle: function (hid) {
            this.each(function () {
                var $t = this,
                        grp = $t.p.groupingView,
                        strpos = hid.split('_'),
                        num = parseInt(strpos[strpos.length - 2], 10);
                strpos.splice(strpos.length - 2, 2);
                var uid = strpos.join("_"),
                        minus = grp.minusicon,
                        plus = grp.plusicon,
                        tar = $("#" + $.jgrid.jqID(hid)),
                        r = tar.length ? tar[0].nextSibling : null,
                        tarspan = $("#" + $.jgrid.jqID(hid) + " span." + "tree-wrap-" + $t.p.direction),
                        getGroupingLevelFromClass = function (className) {
                            var nums = $.map(className.split(" "), function (item) {
                                if (item.substring(0, uid.length + 1) === uid + "_") {
                                    return parseInt(item.substring(uid.length + 1), 10);
                                }
                            });
                            return nums.length > 0 ? nums[0] : undefined;
                        },
                        itemGroupingLevel, showData, collapsed = false,
                        frz = $t.p.frozenColumns ? $t.p.id + "_frozen" : false,
                        tar2 = frz ? $("#" + $.jgrid.jqID(hid), "#" + $.jgrid.jqID(frz)) : false,
                        r2 = (tar2 && tar2.length) ? tar2[0].nextSibling : null;
                if (tarspan.hasClass(minus)) {
                    if (grp.showSummaryOnHide) {
                        if (r) {
                            while (r) {
                                if ($(r).hasClass('jqfoot')) {
                                    var lv = parseInt($(r).attr("jqfootlevel"), 10);
                                    if (lv <= num) {
                                        break;
                                    }
                                }
                                $(r).hide();
                                r = r.nextSibling;
                                if (frz) {
                                    $(r2).hide();
                                    r2 = r2.nextSibling;
                                }
                                if ($(r).hasClass('jqgroup')) {
                                    var rpos = $(r).attr("id").split('_'),
                                            rnum = parseInt(rpos[rpos.length - 2], 10);
                                    if (rnum <= num) {
                                        break;
                                    }
                                }
                            }
                        }
                    } else {
                        if (r) {
                            while (r) {
                                itemGroupingLevel = getGroupingLevelFromClass(r.className);
                                if (itemGroupingLevel !== undefined && itemGroupingLevel <= num) {
                                    break;
                                }
                                $(r).hide();
                                r = r.nextSibling;
                                if (frz) {
                                    $(r2).hide();
                                    r2 = r2.nextSibling;
                                }
                            }
                        }
                    }
                    tarspan.removeClass(minus).addClass(plus);
                    collapsed = true;
                } else {
                    if (r) {
                        showData = undefined;
                        while (r) {
                            itemGroupingLevel = getGroupingLevelFromClass(r.className);
                            if (showData === undefined) {
                                showData = itemGroupingLevel === undefined; // if the first row after the opening group is data row then show the data rows
                            }
                            if (itemGroupingLevel !== undefined) {
                                if (itemGroupingLevel <= num) {
                                    break; // next item of the same lever are found
                                }
                                if (itemGroupingLevel === num + 1) {
                                    $(r).show().find(">td>span." + "tree-wrap-" + $t.p.direction).removeClass(minus).addClass(plus);
                                    if (frz) {
                                        $(r2).show().find(">td>span." + "tree-wrap-" + $t.p.direction).removeClass(minus).addClass(plus);
                                    }
                                }
                            } else if (showData) {
                                $(r).show();
                                if (frz) {
                                    $(r2).show();
                                }
                            }
                            r = r.nextSibling;
                            if (frz) {
                                r2 = r2.nextSibling;
                            }
                        }
                    }
                    tarspan.removeClass(plus).addClass(minus);
                }
                $($t).triggerHandler("jqGridGroupingClickGroup", [hid, collapsed]);
                if ($.isFunction($t.p.onClickGroup)) {
                    $t.p.onClickGroup.call($t, hid, collapsed);
                }

            });
            return false;
        },
        groupingRender: function (grdata, colspans, page, rn) {
            return this.each(function () {
                var $t = this,
                        grp = $t.p.groupingView,
                        str = "",
                        icon = "",
                        hid, clid, pmrtl = grp.groupCollapse ? grp.plusicon : grp.minusicon,
                        gv, cp = [],
                        len = grp.groupField.length;
                pmrtl += " tree-wrap-" + $t.p.direction;
                $.each($t.p.colModel, function (i, n) {
                    var ii;
                    for (ii = 0; ii < len; ii++) {
                        if (grp.groupField[ii] === n.name) {
                            cp[ii] = i;
                            break;
                        }
                    }
                });
                var toEnd = 0;

                function findGroupIdx(ind, offset, grp) {
                    var ret = false,
                            i;
                    if (offset === 0) {
                        ret = grp[ind];
                    } else {
                        var id = grp[ind].idx;
                        if (id === 0) {
                            ret = grp[ind];
                        } else {
                            for (i = ind; i >= 0; i--) {
                                if (grp[i].idx === id - offset) {
                                    ret = grp[i];
                                    break;
                                }
                            }
                        }
                    }
                    return ret;
                }

                function buildSummaryTd(i, ik, grp, foffset) {
                    var fdata = findGroupIdx(i, ik, grp),
                            cm = $t.p.colModel,
                            vv, grlen = fdata.cnt,
                            str = "",
                            k;
                    for (k = foffset; k < colspans; k++) {
                        var tmpdata = "<td " + $t.formatCol(k, 1, '') + ">&#160;</td>",
                                tplfld = "{0}";
                        $.each(fdata.summary, function () {
                            if (this.nm === cm[k].name) {
                                if (cm[k].summaryTpl) {
                                    tplfld = cm[k].summaryTpl;
                                }
                                if (typeof this.st === 'string' && this.st.toLowerCase() === 'avg') {
                                    if (this.sd && this.vd) {
                                        this.v = (this.v / this.vd);
                                    } else if (this.v && grlen > 0) {
                                        this.v = (this.v / grlen);
                                    }
                                }
                                try {
                                    this.groupCount = fdata.cnt;
                                    this.groupIndex = fdata.dataIndex;
                                    this.groupValue = fdata.value;
                                    vv = $t.formatter('', this.v, k, this);
                                } catch (ef) {
                                    vv = this.v;
                                }
                                tmpdata = "<td " + $t.formatCol(k, 1, '') + ">" + $.jgrid.format(tplfld, vv) + "</td>";
                                return false;
                            }
                        });
                        str += tmpdata;
                    }
                    return str;
                }
                var sumreverse = $.makeArray(grp.groupSummary);
                sumreverse.reverse();
                $.each(grp.groups, function (i, n) {
                    if (grp._locgr) {
                        if (!(n.startRow + n.cnt > (page - 1) * rn && n.startRow < page * rn)) {
                            return true;
                        }
                    }
                    toEnd++;
                    clid = $t.p.id + "ghead_" + n.idx;
                    hid = clid + "_" + i;
                    icon = "<span style='cursor:pointer;' class='ui-icon " + pmrtl + "' onclick=\"jQuery('#" + $.jgrid.jqID($t.p.id) + "').jqGrid('groupingToggle','" + hid + "');return false;\"></span>";
                    try {
                        if ($.isArray(grp.formatDisplayField) && $.isFunction(grp.formatDisplayField[n.idx])) {
                            n.displayValue = grp.formatDisplayField[n.idx].call($t, n.displayValue, n.value, $t.p.colModel[cp[n.idx]], n.idx, grp);
                            gv = n.displayValue;
                        } else {
                            gv = $t.formatter(hid, n.displayValue, cp[n.idx], n.value);
                        }
                    } catch (egv) {
                        gv = n.displayValue;
                    }
                    if (grp.groupSummaryPos[n.idx] === 'header') {
                        str += "<tr id=\"" + hid + "\"" + (grp.groupCollapse && n.idx > 0 ? " style=\"display:none;\" " : " ") + "role=\"row\" class= \"ui-widget-content jqgroup ui-row-" + $t.p.direction + " " + clid + "\"><td style=\"padding-left:" + (n.idx * 12) + "px;" + "\">" + icon + $.jgrid.template(grp.groupText[n.idx], gv, n.cnt, n.summary) + "</td>";
                        str += buildSummaryTd(i, n.idx - 1, grp.groups, 1);
                        str += "</tr>";
                    } else {
                        str += "<tr id=\"" + hid + "\"" + (grp.groupCollapse && n.idx > 0 ? " style=\"display:none;\" " : " ") + "role=\"row\" class= \"ui-widget-content jqgroup ui-row-" + $t.p.direction + " " + clid + "\"><td style=\"padding-left:" + (n.idx * 12) + "px;" + "\" colspan=\"" + colspans + "\">" + icon + $.jgrid.template(grp.groupText[n.idx], gv, n.cnt, n.summary) + "</td></tr>";
                    }
                    var leaf = len - 1 === n.idx;
                    if (leaf) {
                        var gg = grp.groups[i + 1],
                                kk, ik, offset = 0,
                                sgr = n.startRow,
                                end = gg !== undefined ? grp.groups[i + 1].startRow : grdata.length;
                        if (grp._locgr) {
                            offset = (page - 1) * rn;
                            if (offset > n.startRow) {
                                sgr = offset;
                            }
                        }
                        for (kk = sgr; kk < end; kk++) {
                            if (!grdata[kk - offset]) {
                                break;
                            }
                            str += grdata[kk - offset].join('');
                        }
                        if (grp.groupSummaryPos[n.idx] !== 'header') {
                            var jj;
                            if (gg !== undefined) {
                                for (jj = 0; jj < grp.groupField.length; jj++) {
                                    if (gg.dataIndex === grp.groupField[jj]) {
                                        break;
                                    }
                                }
                                toEnd = grp.groupField.length - jj;
                            }
                            for (ik = 0; ik < toEnd; ik++) {
                                if (!sumreverse[ik]) {
                                    continue;
                                }
                                var hhdr = "";
                                if (grp.groupCollapse && !grp.showSummaryOnHide) {
                                    hhdr = " style=\"display:none;\"";
                                }
                                str += "<tr" + hhdr + " jqfootlevel=\"" + (n.idx - ik) + "\" role=\"row\" class=\"ui-widget-content jqfoot ui-row-" + $t.p.direction + "\">";
                                str += buildSummaryTd(i, ik, grp.groups, 0);
                                str += "</tr>";
                            }
                            toEnd = jj;
                        }
                    }
                });
                $("#" + $.jgrid.jqID($t.p.id) + " tbody:first").append(str);
                // free up memory
                str = null;
            });
        },
        groupingGroupBy: function (name, options) {
            return this.each(function () {
                var $t = this;
                if (typeof name === "string") {
                    name = [name];
                }
                var grp = $t.p.groupingView;
                $t.p.grouping = true;

                //Set default, in case visibilityOnNextGrouping is undefined 
                if (grp.visibiltyOnNextGrouping === undefined) {
                    grp.visibiltyOnNextGrouping = [];
                }
                var i;
                // show previous hidden groups if they are hidden and weren't removed yet
                for (i = 0; i < grp.groupField.length; i++) {
                    if (!grp.groupColumnShow[i] && grp.visibiltyOnNextGrouping[i]) {
                        $($t).jqGrid('showCol', grp.groupField[i]);
                    }
                }
                // set visibility status of current group columns on next grouping
                for (i = 0; i < name.length; i++) {
                    grp.visibiltyOnNextGrouping[i] = $("#" + $.jgrid.jqID($t.p.id) + "_" + $.jgrid.jqID(name[i])).is(":visible");
                }
                $t.p.groupingView = $.extend($t.p.groupingView, options || {});
                grp.groupField = name;
                $($t).trigger("reloadGrid");
            });
        },
        groupingRemove: function (current, reload) {
            return this.each(function () {
                var $t = this;
                if (current === undefined) {
                    current = true;
                }
                $t.p.grouping = false;
                if (current === true) {
                    var grp = $t.p.groupingView,
                            i;
                    // show previous hidden groups if they are hidden and weren't removed yet
                    for (i = 0; i < grp.groupField.length; i++) {
                        if (!grp.groupColumnShow[i] && grp.visibiltyOnNextGrouping[i]) {
                            $($t).jqGrid('showCol', grp.groupField);
                        }
                    }
                    $("tr.jqgroup, tr.jqfoot", "#" + $.jgrid.jqID($t.p.id) + " tbody:first").remove();
                    $("tr.jqgrow:hidden", "#" + $.jgrid.jqID($t.p.id) + " tbody:first").show();
                    // HB Customization << Start
                    if (reload === true) {
                        $($t).trigger("reloadGrid");
                    }
                    // HB Customization >> End
                } else {
                    $($t).trigger("reloadGrid");
                }
            });
        },
        groupingCalculations: {
            handler: function (fn, v, field, round, roundType, rc) {
                var funcs = {
                    sum: function () {
                        return parseFloat(v || 0) + parseFloat((rc[field] || 0));
                    },
                    min: function () {
                        if (v === "") {
                            return parseFloat(rc[field] || 0);
                        }
                        return Math.min(parseFloat(v), parseFloat(rc[field] || 0));
                    },
                    max: function () {
                        if (v === "") {
                            return parseFloat(rc[field] || 0);
                        }
                        return Math.max(parseFloat(v), parseFloat(rc[field] || 0));
                    },
                    count: function () {
                        if (v === "") {
                            v = 0;
                        }
                        if (rc.hasOwnProperty(field)) {
                            return v + 1;
                        }
                        return 0;
                    },
                    avg: function () {
                        // the same as sum, but at end we divide it
                        // so use sum instead of duplicating the code (?)
                        return funcs.sum();
                    }
                };

                if (!funcs[fn]) {
                    throw ("jqGrid Grouping No such method: " + fn);
                }
                var res = funcs[fn]();

                if (round != null) {
                    if (roundType === 'fixed') {
                        res = res.toFixed(round);
                    } else {
                        var mul = Math.pow(10, round);
                        res = Math.round(res * mul) / mul;
                    }
                }

                return res;
            }
        }
    });
})(jQuery); /*jshint eqeqeq:false, eqnull:true, devel:true */
/*global jQuery, xmlJsonClass */
(function ($) {
    /*
     * jqGrid extension for constructing Grid Data from external file
     * Tony Tomov tony@trirand.com
     * http://trirand.com/blog/ 
     * Dual licensed under the MIT and GPL licenses:
     * http://www.opensource.org/licenses/mit-license.php
     * http://www.gnu.org/licenses/gpl-2.0.html
     **/

    "use strict";
    $.jgrid.extend({
        jqGridImport: function (o) {
            o = $.extend({
                imptype: "xml",
                // xml, json, xmlstring, jsonstring
                impstring: "",
                impurl: "",
                mtype: "GET",
                impData: {},
                xmlGrid: {
                    config: "roots>grid",
                    data: "roots>rows"
                },
                jsonGrid: {
                    config: "grid",
                    data: "data"
                },
                ajaxOptions: {}
            }, o || {});
            return this.each(function () {
                var $t = this;
                var xmlConvert = function (xml, o) {
                    var cnfg = $(o.xmlGrid.config, xml)[0];
                    var xmldata = $(o.xmlGrid.data, xml)[0],
                            jstr, jstr1, key;
                    if (xmlJsonClass.xml2json && $.jgrid.parse) {
                        jstr = xmlJsonClass.xml2json(cnfg, " ");
                        jstr = $.jgrid.parse(jstr);
                        for (key in jstr) {
                            if (jstr.hasOwnProperty(key)) {
                                jstr1 = jstr[key];
                            }
                        }
                        if (xmldata) {
                            // save the datatype
                            var svdatatype = jstr.grid.datatype;
                            jstr.grid.datatype = 'xmlstring';
                            jstr.grid.datastr = xml;
                            $($t).jqGrid(jstr1).jqGrid("setGridParam", {
                                datatype: svdatatype
                            });
                        } else {
                            $($t).jqGrid(jstr1);
                        }
                        jstr = null;
                        jstr1 = null;
                    } else {
                        alert("xml2json or parse are not present");
                    }
                };
                var jsonConvert = function (jsonstr, o) {
                    if (jsonstr && typeof jsonstr === 'string') {
                        var _jsonparse = false;
                        if ($.jgrid.useJSON) {
                            $.jgrid.useJSON = false;
                            _jsonparse = true;
                        }
                        var json = $.jgrid.parse(jsonstr);
                        if (_jsonparse) {
                            $.jgrid.useJSON = true;
                        }
                        var gprm = json[o.jsonGrid.config];
                        var jdata = json[o.jsonGrid.data];
                        if (jdata) {
                            var svdatatype = gprm.datatype;
                            gprm.datatype = 'jsonstring';
                            gprm.datastr = jdata;
                            $($t).jqGrid(gprm).jqGrid("setGridParam", {
                                datatype: svdatatype
                            });
                        } else {
                            $($t).jqGrid(gprm);
                        }
                    }
                };
                switch (o.imptype) {
                    case 'xml':
                        $.ajax($.extend({
                            url: o.impurl,
                            type: o.mtype,
                            data: o.impData,
                            dataType: "xml",
                            complete: function (xml, stat) {
                                if (stat === 'success') {
                                    xmlConvert(xml.responseXML, o);
                                    $($t).triggerHandler("jqGridImportComplete", [xml, o]);
                                    if ($.isFunction(o.importComplete)) {
                                        o.importComplete(xml);
                                    }
                                }
                                xml = null;
                            }
                        }, o.ajaxOptions));
                        break;
                    case 'xmlstring':
                        // we need to make just the conversion and use the same code as xml
                        if (o.impstring && typeof o.impstring === 'string') {
                            var xmld = $.parseXML(o.impstring);
                            if (xmld) {
                                xmlConvert(xmld, o);
                                $($t).triggerHandler("jqGridImportComplete", [xmld, o]);
                                if ($.isFunction(o.importComplete)) {
                                    o.importComplete(xmld);
                                }
                                o.impstring = null;
                            }
                            xmld = null;
                        }
                        break;
                    case 'json':
                        $.ajax($.extend({
                            url: o.impurl,
                            type: o.mtype,
                            data: o.impData,
                            dataType: "json",
                            complete: function (json) {
                                try {
                                    jsonConvert(json.responseText, o);
                                    $($t).triggerHandler("jqGridImportComplete", [json, o]);
                                    if ($.isFunction(o.importComplete)) {
                                        o.importComplete(json);
                                    }
                                } catch (ee) {
                                }
                                json = null;
                            }
                        }, o.ajaxOptions));
                        break;
                    case 'jsonstring':
                        if (o.impstring && typeof o.impstring === 'string') {
                            jsonConvert(o.impstring, o);
                            $($t).triggerHandler("jqGridImportComplete", [o.impstring, o]);
                            if ($.isFunction(o.importComplete)) {
                                o.importComplete(o.impstring);
                            }
                            o.impstring = null;
                        }
                        break;
                }
            });
        },
        jqGridExport: function (o) {
            o = $.extend({
                exptype: "xmlstring",
                root: "grid",
                ident: "\t"
            }, o || {});
            var ret = null;
            this.each(function () {
                if (!this.grid) {
                    return;
                }
                var key, gprm = $.extend(true, {}, $(this).jqGrid("getGridParam"));
                // we need to check for:
                // 1.multiselect, 2.subgrid  3. treegrid and remove the unneded columns from colNames
                if (gprm.rownumbers) {
                    gprm.colNames.splice(0, 1);
                    gprm.colModel.splice(0, 1);
                }
                if (gprm.multiselect) {
                    gprm.colNames.splice(0, 1);
                    gprm.colModel.splice(0, 1);
                }
                if (gprm.subGrid) {
                    gprm.colNames.splice(0, 1);
                    gprm.colModel.splice(0, 1);
                }
                gprm.knv = null;
                if (gprm.treeGrid) {
                    for (key in gprm.treeReader) {
                        if (gprm.treeReader.hasOwnProperty(key)) {
                            gprm.colNames.splice(gprm.colNames.length - 1);
                            gprm.colModel.splice(gprm.colModel.length - 1);
                        }
                    }
                }
                switch (o.exptype) {
                    case 'xmlstring':
                        ret = "<" + o.root + ">" + xmlJsonClass.json2xml(gprm, o.ident) + "</" + o.root + ">";
                        break;
                    case 'jsonstring':
                        ret = "{" + xmlJsonClass.toJson(gprm, o.root, o.ident, false) + "}";
                        if (gprm.postData.filters !== undefined) {
                            ret = ret.replace(/filters":"/, 'filters":');
                            ret = ret.replace(/}]}"/, '}]}');
                        }
                        break;
                }
            });
            return ret;
        },
        excelExport: function (o) {
            o = $.extend({
                exptype: "remote",
                url: null,
                oper: "oper",
                tag: "excel",
                exportOptions: {}
            }, o || {});
            return this.each(function () {
                if (!this.grid) {
                    return;
                }
                var url;
                if (o.exptype === "remote") {
                    var pdata = $.extend({}, this.p.postData);
                    pdata[o.oper] = o.tag;
                    var params = jQuery.param(pdata);
                    if (o.url.indexOf("?") !== -1) {
                        url = o.url + "&" + params;
                    } else {
                        url = o.url + "?" + params;
                    }
                    window.location = url;
                }
            });
        }
    });
})(jQuery); /*jshint evil:true, eqeqeq:false, eqnull:true, devel:true */
/*global jQuery */
(function ($) {
    /*
     **
     * jqGrid addons using jQuery UI 
     * Author: Mark Williams
     * Dual licensed under the MIT and GPL licenses:
     * http://www.opensource.org/licenses/mit-license.php
     * http://www.gnu.org/licenses/gpl-2.0.html
     * depends on jQuery UI 
     **/
    "use strict";
    if ($.jgrid.msie && $.jgrid.msiever() === 8) {
        $.expr[":"].hidden = function (elem) {
            return elem.offsetWidth === 0 || elem.offsetHeight === 0 || elem.style.display === "none";
        };
    }
    // requiere load multiselect before grid
    $.jgrid._multiselect = false;
    if ($.ui) {
        if ($.ui.multiselect) {
            if ($.ui.multiselect.prototype._setSelected) {
                var setSelected = $.ui.multiselect.prototype._setSelected;
                $.ui.multiselect.prototype._setSelected = function (item, selected) {
                    var ret = setSelected.call(this, item, selected);
                    if (selected && this.selectedList) {
                        var elt = this.element;
                        this.selectedList.find('li').each(function () {
                            if ($(this).data('optionLink')) {
                                $(this).data('optionLink').remove().appendTo(elt);
                            }
                        });
                    }
                    return ret;
                };
            }
            if ($.ui.multiselect.prototype.destroy) {
                $.ui.multiselect.prototype.destroy = function () {
                    this.element.show();
                    this.container.remove();
                    if ($.Widget === undefined) {
                        $.widget.prototype.destroy.apply(this, arguments);
                    } else {
                        $.Widget.prototype.destroy.apply(this, arguments);
                    }
                };
            }
            $.jgrid._multiselect = true;
        }
    }

    $.jgrid.extend({
        sortableColumns: function (tblrow) {
            return this.each(function () {
                var ts = this,
                        tid = $.jgrid.jqID(ts.p.id);

                function start() {
                    ts.p.disableClick = true;
                }
                var sortable_opts = {
                    "tolerance": "pointer",
                    "axis": "x",
                    "scrollSensitivity": "1",
                    "items": '>th:not(:has(#jqgh_' + tid + '_cb' + ',#jqgh_' + tid + '_rn' + ',#jqgh_' + tid + '_subgrid),:hidden)',
                    "placeholder": {
                        element: function (item) {
                            var el = $(document.createElement(item[0].nodeName)).addClass(item[0].className + " ui-sortable-placeholder ui-state-highlight").removeClass("ui-sortable-helper")[0];
                            return el;
                        },
                        update: function (self, p) {
                            p.height(self.currentItem.innerHeight() - parseInt(self.currentItem.css('paddingTop') || 0, 10) - parseInt(self.currentItem.css('paddingBottom') || 0, 10));
                            p.width(self.currentItem.innerWidth() - parseInt(self.currentItem.css('paddingLeft') || 0, 10) - parseInt(self.currentItem.css('paddingRight') || 0, 10));
                        }
                    },
                    "update": function (event, ui) {
                        var p = $(ui.item).parent(),
                                th = $(">th", p),
                                colModel = ts.p.colModel,
                                cmMap = {},
                                tid = ts.p.id + "_";
                        $.each(colModel, function (i) {
                            cmMap[this.name] = i;
                        });
                        var permutation = [];
                        th.each(function () {
                            var id = $(">div", this).get(0).id.replace(/^jqgh_/, "").replace(tid, "");
                            if (cmMap.hasOwnProperty(id)) {
                                permutation.push(cmMap[id]);
                            }
                        });

                        $(ts).jqGrid("remapColumns", permutation, true, true);
                        if ($.isFunction(ts.p.sortable.update)) {
                            ts.p.sortable.update(permutation);
                        }
                        setTimeout(function () {
                            ts.p.disableClick = false;
                        }, 50);
                    }
                };
                if (ts.p.sortable.options) {
                    $.extend(sortable_opts, ts.p.sortable.options);
                } else if ($.isFunction(ts.p.sortable)) {
                    ts.p.sortable = {
                        "update": ts.p.sortable
                    };
                }
                if (sortable_opts.start) {
                    var s = sortable_opts.start;
                    sortable_opts.start = function (e, ui) {
                        start();
                        s.call(this, e, ui);
                    };
                } else {
                    sortable_opts.start = start;
                }
                if (ts.p.sortable.exclude) {
                    sortable_opts.items += ":not(" + ts.p.sortable.exclude + ")";
                }
                tblrow.sortable(sortable_opts).data("sortable").floating = true;
            });
        },
        columnChooser: function (opts) {
            var self = this;
            if ($("#colchooser_" + $.jgrid.jqID(self[0].p.id)).length) {
                return;
            }
            var selector = $('<div id="colchooser_' + self[0].p.id + '" style="position:relative;overflow:hidden"><div><select multiple="multiple"></select></div></div>');
            var select = $('select', selector);

            function insert(perm, i, v) {
                if (i >= 0) {
                    var a = perm.slice();
                    var b = a.splice(i, Math.max(perm.length - i, i));
                    if (i > perm.length) {
                        i = perm.length;
                    }
                    a[i] = v;
                    return a.concat(b);
                }
            }
            opts = $.extend({
                "width": 420,
                "height": 270,
                "classname": null,
                "done": function (perm) {
                    if (perm) {
                        self.jqGrid("remapColumns", perm, true);
                    }
                },
                /* msel is either the name of a ui widget class that
                 extends a multiselect, or a function that supports
                 creating a multiselect object (with no argument,
                 or when passed an object), and destroying it (when
                 passed the string "destroy"). */
                "msel": "multiselect",
                /* "msel_opts" : {}, */

                /* dlog is either the name of a ui widget class that 
                 behaves in a dialog-like way, or a function, that
                 supports creating a dialog (when passed dlog_opts)
                 or destroying a dialog (when passed the string
                 "destroy")
                 */
                "dlog": "dialog",
                "dialog_opts": {
                    "minWidth": 470
                },
                /* dlog_opts is either an option object to be passed 
                 to "dlog", or (more likely) a function that creates
                 the options object.
                 The default produces a suitable options object for
                 ui.dialog */
                "dlog_opts": function (opts) {
                    var buttons = [];
                    // HB Customization << Start
                    buttons.push({
                        "text": opts.bSubmit,
                        "class": "columns-ok-btn",
                        "click": function () {
                            var beforeok = ""
                            if (opts.beforeSubmit) {
                                beforeok = opts.beforeSubmit.call(self, 'colchooser_' + self[0].p.id);
                            }

                            if (beforeok) {
                                opts.apply_perm();
                                opts.cleanup(false);
                            }
                        }
                    });
                    buttons.push({
                        "text": opts.bCancel,
                        "class": "columns-cancel-btn",
                        "click": function () {
                            opts.cleanup(true);
                        }
                    });
                    // HB Customization >> End
                    
                    return $.extend(true, {
                        "buttons": buttons,
                        "close": function () {
                            opts.cleanup(true);
                        },
                        "modal": opts.modal || false,
                        "resizable": opts.resizable || true,
                        "width": opts.width + 20
                    }, opts.dialog_opts || {});
                },
                /* Function to get the permutation array, and pass it to the
                 "done" function */
                // HB Customization << Start
                "beforeSubmit": function () {
                    return false;
                },
                // HB Customization >> End
                "apply_perm": function () {
                    $('option', select).each(function () {
                        if (this.selected) {
                            self.jqGrid("showCol", colModel[this.value].name);
                        } else {
                            self.jqGrid("hideCol", colModel[this.value].name);
                        }
                    });

                    var perm = [];
                    //fixedCols.slice(0);
                    $('option:selected', select).each(function () {
                        perm.push(parseInt(this.value, 10));
                    });
                    $.each(perm, function () {
                        delete colMap[colModel[parseInt(this, 10)].name];
                    });
                    $.each(colMap, function () {
                        var ti = parseInt(this, 10);
                        perm = insert(perm, ti, ti);
                    });
                    if (opts.done) {
                        opts.done.call(self, perm);
                    }
                },
                /* Function to cleanup the dialog, and select. Also calls the
                 done function with no permutation (to indicate that the
                 columnChooser was aborted */
                "cleanup": function (calldone) {
                    call(opts.dlog, selector, 'destroy');
                    call(opts.msel, select, 'destroy');
                    selector.remove();
                    if (calldone && opts.done) {
                        opts.done.call(self);
                    }
                },
                "msel_opts": {
                    autoOpen: true
                } // HB Customization
            }, $.jgrid.col, opts || {});
            if ($.ui) {
                if ($.ui.multiselect) {
                    if (opts.msel === "multiselect") {
                        if (!$.jgrid._multiselect) {
                            // should be in language file
                            alert("Multiselect plugin loaded after jqGrid. Please load the plugin before the jqGrid!");
                            return;
                        }
                        opts.msel_opts = $.extend($.ui.multiselect.defaults, opts.msel_opts);
                    }
                }
            }
            if (opts.caption) {
                selector.attr("title", opts.caption);
            }
            if (opts.classname) {
                selector.addClass(opts.classname);
                select.addClass(opts.classname);
            }
            if (opts.width) {
                $(">div", selector).css({
                    "width": opts.width,
                    "margin": "0 auto"
                });
                select.css("width", opts.width);
            }
            if (opts.height) {
                $(">div", selector).css("height", opts.height);
                select.css("height", opts.height - 10);
            }
            var colModel = self.jqGrid("getGridParam", "colModel");
            var colNames = self.jqGrid("getGridParam", "colNames");
            var colMap = {},
                    fixedCols = [];

            select.empty();
            $.each(colModel, function (i) {
                colMap[this.name] = i;
                if (this.hidedlg) {
                    if (!this.hidden) {
                        fixedCols.push(i);
                    }
                    return;
                }
                // HB Customization
                if (!this.hideme) {
                    select.append("<option value='" + i + "' " + (this.hidden ? "" : "selected='selected'") + ">" + $.jgrid.stripHtml(colNames[i]) + "</option>");
                }
            });

            function call(fn, obj) {
                if (!fn) {
                    return;
                }
                if (typeof fn === 'string') {
                    if ($.fn[fn]) {
                        $.fn[fn].apply(obj, $.makeArray(arguments).slice(2));
                        // HB Customization
                        if(fn == "multiselect"){
                            obj.multiselectfilter({placeholder: $.makeArray(arguments)[2]['filterPlaceholder']});
                        }
                    }
                } else if ($.isFunction(fn)) {
                    fn.apply(obj, $.makeArray(arguments).slice(2));
                }
            }

            var dopts = $.isFunction(opts.dlog_opts) ? opts.dlog_opts.call(self, opts) : opts.dlog_opts;
            call(opts.dlog, selector, dopts);
            var mopts = $.isFunction(opts.msel_opts) ? opts.msel_opts.call(self, opts) : opts.msel_opts;
            call(opts.msel, select, mopts);
        },
        sortableRows: function (opts) {
            // Can accept all sortable options and events
            return this.each(function () {
                var $t = this;
                if (!$t.grid) {
                    return;
                }
                // Currently we disable a treeGrid sortable
                if ($t.p.treeGrid) {
                    return;
                }
                if ($.fn.sortable) {
                    opts = $.extend({
                        "cursor": "move",
                        "axis": "y",
                        "items": ".jqgrow"
                    }, opts || {});
                    if (opts.start && $.isFunction(opts.start)) {
                        opts._start_ = opts.start;
                        delete opts.start;
                    } else {
                        opts._start_ = false;
                    }
                    if (opts.update && $.isFunction(opts.update)) {
                        opts._update_ = opts.update;
                        delete opts.update;
                    } else {
                        opts._update_ = false;
                    }
                    opts.start = function (ev, ui) {
                        $(ui.item).css("border-width", "0");
                        $("td", ui.item).each(function (i) {
                            this.style.width = $t.grid.cols[i].style.width;
                        });
                        if ($t.p.subGrid) {
                            var subgid = $(ui.item).attr("id");
                            try {
                                $($t).jqGrid('collapseSubGridRow', subgid);
                            } catch (e) {
                            }
                        }
                        if (opts._start_) {
                            opts._start_.apply(this, [ev, ui]);
                        }
                    };
                    opts.update = function (ev, ui) {
                        $(ui.item).css("border-width", "");
                        if ($t.p.rownumbers === true) {
                            $("td.jqgrid-rownum", $t.rows).each(function (i) {
                                $(this).html(i + 1 + (parseInt($t.p.page, 10) - 1) * parseInt($t.p.rowNum, 10));
                            });
                        }
                        if (opts._update_) {
                            opts._update_.apply(this, [ev, ui]);
                        }
                    };
                    $("tbody:first", $t).sortable(opts);
                    $("tbody:first", $t).disableSelection();
                }
            });
        },
        gridDnD: function (opts) {
            return this.each(function () {
                var $t = this,
                        i, cn;
                if (!$t.grid) {
                    return;
                }
                // Currently we disable a treeGrid drag and drop
                if ($t.p.treeGrid) {
                    return;
                }
                if (!$.fn.draggable || !$.fn.droppable) {
                    return;
                }

                function updateDnD() {
                    var datadnd = $.data($t, "dnd");
                    $("tr.jqgrow:not(.ui-draggable)", $t).draggable($.isFunction(datadnd.drag) ? datadnd.drag.call($($t), datadnd) : datadnd.drag);
                }
                var appender = "<table id='jqgrid_dnd' class='ui-jqgrid-dnd'></table>";
                if ($("#jqgrid_dnd")[0] === undefined) {
                    $('body').append(appender);
                }

                if (typeof opts === 'string' && opts === 'updateDnD' && $t.p.jqgdnd === true) {
                    updateDnD();
                    return;
                }
                opts = $.extend({
                    "drag": function (opts) {
                        return $.extend({
                            start: function (ev, ui) {
                                var i, subgid;
                                // if we are in subgrid mode try to collapse the node
                                if ($t.p.subGrid) {
                                    subgid = $(ui.helper).attr("id");
                                    try {
                                        $($t).jqGrid('collapseSubGridRow', subgid);
                                    } catch (e) {
                                    }
                                }
                                // hack
                                // drag and drop does not insert tr in table, when the table has no rows
                                // we try to insert new empty row on the target(s)
                                for (i = 0; i < $.data($t, "dnd").connectWith.length; i++) {
                                    if ($($.data($t, "dnd").connectWith[i]).jqGrid('getGridParam', 'reccount') === 0) {
                                        $($.data($t, "dnd").connectWith[i]).jqGrid('addRowData', 'jqg_empty_row', {});
                                    }
                                }
                                ui.helper.addClass("ui-state-highlight");
                                $("td", ui.helper).each(function (i) {
                                    this.style.width = $t.grid.headers[i].width + "px";
                                });
                                if (opts.onstart && $.isFunction(opts.onstart)) {
                                    opts.onstart.call($($t), ev, ui);
                                }
                            },
                            stop: function (ev, ui) {
                                var i, ids;
                                if (ui.helper.dropped && !opts.dragcopy) {
                                    ids = $(ui.helper).attr("id");
                                    if (ids === undefined) {
                                        ids = $(this).attr("id");
                                    }
                                    $($t).jqGrid('delRowData', ids);
                                }
                                // if we have a empty row inserted from start event try to delete it
                                for (i = 0; i < $.data($t, "dnd").connectWith.length; i++) {
                                    $($.data($t, "dnd").connectWith[i]).jqGrid('delRowData', 'jqg_empty_row');
                                }
                                if (opts.onstop && $.isFunction(opts.onstop)) {
                                    opts.onstop.call($($t), ev, ui);
                                }
                            }
                        }, opts.drag_opts || {});
                    },
                    "drop": function (opts) {
                        return $.extend({
                            accept: function (d) {
                                if (!$(d).hasClass('jqgrow')) {
                                    return d;
                                }
                                var tid = $(d).closest("table.ui-jqgrid-btable");
                                if (tid.length > 0 && $.data(tid[0], "dnd") !== undefined) {
                                    var cn = $.data(tid[0], "dnd").connectWith;
                                    return $.inArray('#' + $.jgrid.jqID(this.id), cn) !== -1 ? true : false;
                                }
                                return false;
                            },
                            drop: function (ev, ui) {
                                if (!$(ui.draggable).hasClass('jqgrow')) {
                                    return;
                                }
                                var accept = $(ui.draggable).attr("id");
                                var getdata = ui.draggable.parent().parent().jqGrid('getRowData', accept);
                                if (!opts.dropbyname) {
                                    var j = 0,
                                            tmpdata = {},
                                            nm, key;
                                    var dropmodel = $("#" + $.jgrid.jqID(this.id)).jqGrid('getGridParam', 'colModel');
                                    try {
                                        for (key in getdata) {
                                            if (getdata.hasOwnProperty(key)) {
                                                nm = dropmodel[j].name;
                                                if (!(nm === 'cb' || nm === 'rn' || nm === 'subgrid')) {
                                                    if (getdata.hasOwnProperty(key) && dropmodel[j]) {
                                                        tmpdata[nm] = getdata[key];
                                                    }
                                                }
                                                j++;
                                            }
                                        }
                                        getdata = tmpdata;
                                    } catch (e) {
                                    }
                                }
                                ui.helper.dropped = true;
                                if (opts.beforedrop && $.isFunction(opts.beforedrop)) {
                                    //parameters to this callback - event, element, data to be inserted, sender, reciever
                                    // should return object which will be inserted into the reciever
                                    var datatoinsert = opts.beforedrop.call(this, ev, ui, getdata, $('#' + $.jgrid.jqID($t.p.id)), $(this));
                                    if (datatoinsert !== undefined && datatoinsert !== null && typeof datatoinsert === "object") {
                                        getdata = datatoinsert;
                                    }
                                }
                                if (ui.helper.dropped) {
                                    var grid;
                                    if (opts.autoid) {
                                        if ($.isFunction(opts.autoid)) {
                                            grid = opts.autoid.call(this, getdata);
                                        } else {
                                            grid = Math.ceil(Math.random() * 1000);
                                            grid = opts.autoidprefix + grid;
                                        }
                                    }
                                    // NULL is interpreted as undefined while null as object
                                    $("#" + $.jgrid.jqID(this.id)).jqGrid('addRowData', grid, getdata, opts.droppos);
                                }
                                if (opts.ondrop && $.isFunction(opts.ondrop)) {
                                    opts.ondrop.call(this, ev, ui, getdata);
                                }
                            }
                        }, opts.drop_opts || {});
                    },
                    "onstart": null,
                    "onstop": null,
                    "beforedrop": null,
                    "ondrop": null,
                    "drop_opts": {
                        "activeClass": "ui-state-active",
                        "hoverClass": "ui-state-hover"
                    },
                    "drag_opts": {
                        "revert": "invalid",
                        "helper": "clone",
                        "cursor": "move",
                        "appendTo": "#jqgrid_dnd",
                        "zIndex": 5000
                    },
                    "dragcopy": false,
                    "dropbyname": false,
                    "droppos": "first",
                    "autoid": true,
                    "autoidprefix": "dnd_"
                }, opts || {});

                if (!opts.connectWith) {
                    return;
                }
                opts.connectWith = opts.connectWith.split(",");
                opts.connectWith = $.map(opts.connectWith, function (n) {
                    return $.trim(n);
                });
                $.data($t, "dnd", opts);

                if ($t.p.reccount !== 0 && !$t.p.jqgdnd) {
                    updateDnD();
                }
                $t.p.jqgdnd = true;
                for (i = 0; i < opts.connectWith.length; i++) {
                    cn = opts.connectWith[i];
                    $(cn).droppable($.isFunction(opts.drop) ? opts.drop.call($($t), opts) : opts.drop);
                }
            });
        },
        gridResize: function (opts) {
            return this.each(function () {
                var $t = this,
                        gID = $.jgrid.jqID($t.p.id);
                if (!$t.grid || !$.fn.resizable) {
                    return;
                }
                opts = $.extend({}, opts || {});
                if (opts.alsoResize) {
                    opts._alsoResize_ = opts.alsoResize;
                    delete opts.alsoResize;
                } else {
                    opts._alsoResize_ = false;
                }
                if (opts.stop && $.isFunction(opts.stop)) {
                    opts._stop_ = opts.stop;
                    delete opts.stop;
                } else {
                    opts._stop_ = false;
                }
                opts.stop = function (ev, ui) {
                    $($t).jqGrid('setGridParam', {
                        height: $("#gview_" + gID + " .ui-jqgrid-bdiv").height()
                    });
                    $($t).jqGrid('setGridWidth', ui.size.width, opts.shrinkToFit);
                    if (opts._stop_) {
                        opts._stop_.call($t, ev, ui);
                    }
                };
                if (opts._alsoResize_) {
                    var optstest = "{\'#gview_" + gID + " .ui-jqgrid-bdiv\':true,'" + opts._alsoResize_ + "':true}";
                    opts.alsoResize = eval('(' + optstest + ')'); // the only way that I found to do this
                } else {
                    opts.alsoResize = $(".ui-jqgrid-bdiv", "#gview_" + gID);
                }
                delete opts._alsoResize_;
                $("#gbox_" + gID).resizable(opts);
            });
        }
    });
})(jQuery);
/*
 Transform a table to a jqGrid.
 Peter Romianowski <peter.romianowski@optivo.de> 
 If the first column of the table contains checkboxes or
 radiobuttons then the jqGrid is made selectable.
 */
// Addition - selector can be a class or id


function tableToGrid(selector, options) {
    jQuery(selector).each(function () {
        if (this.grid) {
            return;
        } //Adedd from Tony Tomov
        // This is a small "hack" to make the width of the jqGrid 100%
        jQuery(this).width("99%");
        var w = jQuery(this).width();

        // Text whether we have single or multi select
        var inputCheckbox = jQuery('tr td:first-child input[type=checkbox]:first', jQuery(this));
        var inputRadio = jQuery('tr td:first-child input[type=radio]:first', jQuery(this));
        var selectMultiple = inputCheckbox.length > 0;
        var selectSingle = !selectMultiple && inputRadio.length > 0;
        var selectable = selectMultiple || selectSingle;
        //var inputName = inputCheckbox.attr("name") || inputRadio.attr("name");
        // Build up the columnModel and the data
        var colModel = [];
        var colNames = [];
        jQuery('th', jQuery(this)).each(function () {
            if (colModel.length === 0 && selectable) {
                colModel.push({
                    name: '__selection__',
                    index: '__selection__',
                    width: 0,
                    hidden: true
                });
                colNames.push('__selection__');
            } else {
                colModel.push({
                    name: jQuery(this).attr("id") || jQuery.trim(jQuery.jgrid.stripHtml(jQuery(this).html())).split(' ').join('_'),
                    index: jQuery(this).attr("id") || jQuery.trim(jQuery.jgrid.stripHtml(jQuery(this).html())).split(' ').join('_'),
                    width: jQuery(this).width() || 150
                });
                colNames.push(jQuery(this).html());
            }
        });
        var data = [];
        var rowIds = [];
        var rowChecked = [];
        jQuery('tbody > tr', jQuery(this)).each(function () {
            var row = {};
            var rowPos = 0;
            jQuery('td', jQuery(this)).each(function () {
                if (rowPos === 0 && selectable) {
                    var input = jQuery('input', jQuery(this));
                    var rowId = input.attr("value");
                    rowIds.push(rowId || data.length);
                    if (input.is(":checked")) {
                        rowChecked.push(rowId);
                    }
                    row[colModel[rowPos].name] = input.attr("value");
                } else {
                    row[colModel[rowPos].name] = jQuery(this).html();
                }
                rowPos++;
            });
            if (rowPos > 0) {
                data.push(row);
            }
        });

        // Clear the original HTML table
        jQuery(this).empty();

        // Mark it as jqGrid
        jQuery(this).addClass("scroll");

        jQuery(this).jqGrid(jQuery.extend({
            datatype: "local",
            width: w,
            colNames: colNames,
            colModel: colModel,
            multiselect: selectMultiple
                    //inputName: inputName,
                    //inputValueCol: imputName != null ? "__selection__" : null
        }, options || {}));

        // Add data
        var a;
        for (a = 0; a < data.length; a++) {
            var id = null;
            if (rowIds.length > 0) {
                id = rowIds[a];
                if (id && id.replace) {
                    // We have to do this since the value of a checkbox
                    // or radio button can be anything 
                    id = encodeURIComponent(id).replace(/[.\-%]/g, "_");
                }
            }
            if (id === null) {
                id = a + 1;
            }
            jQuery(this).jqGrid("addRowData", id, data[a]);
        }

        // Set the selection
        for (a = 0; a < rowChecked.length; a++) {
            jQuery(this).jqGrid("setSelection", rowChecked[a]);
        }
    });
}
; /*jshint eqeqeq:false */
/*global jQuery */
(function ($) {
    /**
     * jqGrid pivot functions
     * Tony Tomov tony@trirand.com
     * http://trirand.com/blog/
     * Dual licensed under the MIT and GPL licenses:
     * http://www.opensource.org/licenses/mit-license.php
     * http://www.gnu.org/licenses/gpl-2.0.html
     */
    "use strict";
    // To optimize the search we need custom array filter
    // This code is taken from
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter

    function _pivotfilter(fn, context) {
        var i, value, result = [],
                length;

        if (!this || typeof fn !== 'function' || (fn instanceof RegExp)) {
            throw new TypeError();
        }

        length = this.length;

        for (i = 0; i < length; i++) {
            if (this.hasOwnProperty(i)) {
                value = this[i];
                if (fn.call(context, value, i, this)) {
                    result.push(value);
                    // We need break in order to cancel loop 
                    // in case the row is found
                    break;
                }
            }
        }
        return result;
    }
    $.assocArraySize = function (obj) {
        // http://stackoverflow.com/a/6700/11236
        var size = 0,
                key;
        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                size++;
            }
        }
        return size;
    };

    $.jgrid.extend({
        pivotSetup: function (data, options) {
            // data should come in json format
            // The function return the new colModel and the transformed data
            // again with group setup options which then will be passed to the grid
            var columns = [],
                    pivotrows = [],
                    pivotcnts = {},
                    //HB Customization
                    pivotcols = [],
                    //HB Customization
                    pivotsums = [],
                    //HB Customization
                    summaries = [],
                    summaryarr = [],
                    //HB Customization
                    member = [],
                    groupOptions = {
                        grouping: true,
                        groupingView: {
                            groupField: [],
                            groupSummary: [],
                            groupSummaryPos: []
                        }
                    },
            headers = [],
                    o = $.extend({
                        rowTotals: false,
                        rowTotalsText: 'Total',
                        // summary columns
                        colTotals: false,
                        groupSummary: true,
                        groupSummaryPos: 'header',
                        frozenStaticCols: false
                    }, options || {});
            this.each(function () {

                var
                        row, rowindex, i, rowlen = data.length,
                        xlen, ylen, aggrlen, tmp, newObj, r = 0;
                // utility funcs
                /* 
                 * Filter the data to a given criteria. Return the firt occurance
                 */

                function find(ar, fun, extra) {
                    var res;
                    res = _pivotfilter.call(ar, fun, extra);
                    return res.length > 0 ? res[0] : null;
                }
                /*
                 * Check if the grouped row column exist (See find)
                 * If the row is not find in pivot rows retun null,
                 * otherviese the column
                 */

                function findGroup(item, index) {
                    var j = 0,
                            ret = true,
                            i;
                    for (i in item) {
                        if (item[i] != this[j]) {
                            ret = false;
                            break;
                        }
                        j++;
                        if (j >= this.length) {
                            break;
                        }
                    }
                    if (ret) {
                        rowindex = index;
                    }
                    return ret;
                }
                /*
                 * Perform calculations of the pivot values.
                 */

                function calculation(oper, v, field, rc) {
                    var ret;
                    switch (oper) {
                        case "sum":
                            ret = parseFloat(v || 0) + parseFloat((rc[field] || 0));
                            break;
                        case "avg":
                            ret = parseFloat(v || 0) + parseFloat((rc[field] || 0));
                            break;
                        case "count":
                            if (v === "" || v == null) {
                                v = 0;
                            }
                            if (rc.hasOwnProperty(field)) {
                                ret = v + 1;
                            } else {
                                ret = 0;
                            }
                            break;
                        case "min":
                            if (v === "" || v == null) {
                                ret = parseFloat(rc[field] || 0);
                            } else {
                                ret = Math.min(parseFloat(v), parseFloat(rc[field] || 0));
                            }
                            break;
                        case "max":
                            if (v === "" || v == null) {
                                ret = parseFloat(rc[field] || 0);
                            } else {
                                ret = Math.max(parseFloat(v), parseFloat(rc[field] || 0));
                            }
                            break;
                    }
                    return ret;
                }
                /*
                 * The function agragates the values of the pivot grid.
                 * Return the current row with pivot summary values
                 */

                function agregateFunc(row, aggr, value, curr) {
                    // default is sum
                    var arrln = aggr.length,
                            i, label, j, jv;
                    if ($.isArray(value)) {
                        jv = value.length;
                    } else {
                        jv = 1;
                    }
                    member = [];
                    member.root = 0;
                    for (j = 0; j < jv; j++) {
                        var tmpmember = [],
                                vl;
                        for (i = 0; i < arrln; i++) {
                            if (value == null) {
                                label = $.trim(aggr[i].member) + "_" + aggr[i].aggregator;
                                vl = label;
                            } else {
                                vl = value[j].replace(/\s+/g, '');
                                try {
                                    label = (arrln === 1 ? vl : vl + "_" + aggr[i].aggregator + "_" + i);
                                } catch (e) {
                                }
                            }
                            curr[label] = tmpmember[label] = calculation(aggr[i].aggregator, curr[label], aggr[i].member, row);
                        }
                        member[vl] = tmpmember;
                    }
                    return curr;
                }
                // Making the row totals without to add in yDimension
                if (o.rowTotals && o.yDimension.length > 0) {
                    var dn = o.yDimension[0].dataName;
                    o.yDimension.splice(0, 0, {
                        dataName: dn
                    });
                    o.yDimension[0].converter = function () {
                        return '_r_Totals';
                    };
                }
                // build initial columns (colModel) from xDimension
                xlen = $.isArray(o.xDimension) ? o.xDimension.length : 0;
                ylen = o.yDimension.length;
                aggrlen = $.isArray(o.aggregates) ? o.aggregates.length : 0;
                if (xlen === 0 || aggrlen === 0) {
                    throw ("xDimension or aggregates optiona are not set!");
                }
                var colc;
                for (i = 0; i < xlen; i++) {
                    colc = {
                        name: o.xDimension[i].dataName,
                        frozen: o.frozenStaticCols
                    };
                    colc = $.extend(true, colc, o.xDimension[i]);
                    columns.push(colc);
                }
                var groupfields = xlen - 1,
                        tree = {};
                //tree = { text: 'root', leaf: false, children: [] };
                //loop over alll the source data
                while (r < rowlen) {
                    row = data[r];
                    var xValue = [];
                    var yValue = [];
                    tmp = {};
                    i = 0;
                    // build the data from xDimension
                    do {
                        xValue[i] = $.trim(row[o.xDimension[i].dataName]);
                        tmp[o.xDimension[i].dataName] = xValue[i];
                        i++;
                    } while (i < xlen);

                    var k = 0, m = 0;
                    rowindex = -1;
                    // check to see if the row is in our new pivotrow set
                    newObj = find(pivotrows, findGroup, xValue);
                    if (!newObj) {
                        // if the row is not in our set
                        k = 0;
                        // if yDimension is set
                        if (ylen >= 1) {
                            // build the cols set in yDimension
                            for (k = 0; k < ylen; k++) {
                                yValue[k] = $.trim(row[o.yDimension[k].dataName]);
                                // Check to see if we have user defined conditions
                                if (o.yDimension[k].converter && $.isFunction(o.yDimension[k].converter)) {
                                    yValue[k] = o.yDimension[k].converter.call(this, yValue[k], xValue, yValue);
                                }
                            }
                            // make the colums based on aggregates definition 
                            // and return the members for late calculation
                            tmp = agregateFunc(row, o.aggregates, yValue, tmp);
                            //HB Customization << Start
                            for (m = 0; m < yValue.length; m++) {
                                if (!$.isArray(pivotcnts[yValue[m]])) {
                                    pivotcnts[yValue[m]] = [];
                                }
                                pivotcnts[yValue[m]].push(1);
                            }
                            //HB Customization >> End
                        } else if (ylen === 0) {
                            // if not set use direct the aggregates 
                            tmp = agregateFunc(row, o.aggregates, null, tmp);
                            //HB Customization << Start
                            pivotcnts['_r_Totals'] = [];
                            pivotcnts['_r_Totals'].push(1);
                            //HB Customization >> End
                        }
                        tmp.id = row.id;
                        // add the result in pivot rows
                        pivotrows.push(tmp);
                    } else {
                        // the pivot exists
                        if (rowindex >= 0) {
                            k = 0;
                            // make the recalculations 
                            if (ylen >= 1) {
                                for (k = 0; k < ylen; k++) {
                                    yValue[k] = $.trim(row[o.yDimension[k].dataName]);
                                    if (o.yDimension[k].converter && $.isFunction(o.yDimension[k].converter)) {
                                        yValue[k] = o.yDimension[k].converter.call(this, yValue[k], xValue, yValue);
                                    }
                                }
                                newObj = agregateFunc(row, o.aggregates, yValue, newObj);
                                //HB Customization << Start
                                for (m = 0; m < yValue.length; m++) {
                                    if (!$.isArray(pivotcnts[yValue[m]])) {
                                        pivotcnts[yValue[m]] = [];
                                    }
                                    pivotcnts[yValue[m]][rowindex] = parseInt(pivotcnts[yValue[m]][rowindex] || 0) + 1;
                                }
                                //HB Customization >> End
                            } else if (ylen === 0) {
                                newObj = agregateFunc(row, o.aggregates, null, newObj);
                                pivotcnts['_r_Totals'][rowindex] = parseInt(pivotcnts['_r_Totals'][rowindex] || 0) + 1;
                                //HB Customization
                            }
                            // update the row
                            pivotrows[rowindex] = newObj;
                        }
                    }
                    var kj = 0,
                            current = null,
                            existing = null,
                            kk;
                    // Build a JSON tree from the member (see aggregateFunc) 
                    // to make later the columns 
                    // 
                    for (kk in member) {
                        if (kj === 0) {
                            if (!tree.children || tree.children === undefined) {
                                tree = {
                                    text: kk,
                                    level: 0,
                                    children: []
                                };
                            }
                            current = tree.children;
                        } else {
                            existing = null;
                            for (i = 0; i < current.length; i++) {
                                if (current[i].text === kk) {
                                    //current[i].fields=member[kk];
                                    existing = current[i];
                                    break;
                                }
                            }
                            if (existing) {
                                current = existing.children;
                            } else {
                                current.push({
                                    children: [],
                                    text: kk,
                                    level: kj,
                                    fields: member[kk]
                                });
                                current = current[current.length - 1].children;
                            }
                        }
                        kj++;
                    }
                    r++;
                }
                var lastval = [],
                        initColLen = columns.length,
                        swaplen = initColLen;
                if (ylen > 0) {
                    headers[ylen - 1] = {
                        useColSpanStyle: false,
                        groupHeaders: []
                    };
                }
                /*
                 * Recursive function which uses the tree to build the 
                 * columns from the pivot values and set the group Headers
                 */

                function list(items) {
                    var l, j, key, k, col;
                    for (key in items) { // iterate
                        if (items.hasOwnProperty(key)) {
                            // write amount of spaces according to level
                            // and write name and newline
                            if (typeof items[key] !== "object") {
                                // If not a object build the header of the appropriate level
                                if (key === 'level') {
                                    if (lastval[items.level] === undefined) {
                                        lastval[items.level] = '';
                                        if (items.level > 0 && items.text !== '_r_Totals') {
                                            headers[items.level - 1] = {
                                                useColSpanStyle: false,
                                                groupHeaders: []
                                            };
                                        }
                                    }
                                    if (lastval[items.level] !== items.text && items.children.length && items.text !== '_r_Totals') {
                                        if (items.level > 0) {
                                            headers[items.level - 1].groupHeaders.push({
                                                titleText: items.text
                                            });
                                            var collen = headers[items.level - 1].groupHeaders.length,
                                                    colpos = collen === 1 ? swaplen : initColLen + (collen - 1) * aggrlen;
                                            headers[items.level - 1].groupHeaders[collen - 1].startColumnName = columns[colpos].name;
                                            headers[items.level - 1].groupHeaders[collen - 1].numberOfColumns = columns.length - colpos;
                                            initColLen = columns.length;
                                        }
                                    }
                                    lastval[items.level] = items.text;
                                }
                                // This is in case when the member contain more than one summary item
                                if (items.level === ylen && key === 'level' && ylen > 0) {
                                    if (aggrlen > 1) {
                                        var ll = 1;
                                        for (l in items.fields) {
                                            if (ll === 1) {
                                                headers[ylen - 1].groupHeaders.push({
                                                    startColumnName: l,
                                                    numberOfColumns: 1,
                                                    titleText: items.text
                                                });
                                            }
                                            ll++;
                                        }
                                        headers[ylen - 1].groupHeaders[headers[ylen - 1].groupHeaders.length - 1].numberOfColumns = ll - 1;
                                    } else {
                                        headers.splice(ylen - 1, 1);
                                    }
                                    //HB Customization << Start
                                    var il = 1, l_k = [];
                                    for (l in items.fields) {
                                        if (il === 1) {
                                            l_k.push(l);
                                        } else if (il === 2) {
                                            l_k.push(l);
                                        }
                                        il++;
                                    }
                                    pivotcols.push({
                                        columns: l_k,
                                        numberOfColumns: il - 1,
                                        titleText: items.text
                                    });
                                    //HB Customization >> End
                                }
                            }
                            // if object, call recursively
                            if (items[key] != null && typeof items[key] === "object") {
                                list(items[key]);
                            }
                            // Finally build the coulumns
                            if (key === 'level') {
                                if (items.level > 0) {
                                    j = 0;
                                    for (l in items.fields) {
                                        col = {};
                                        for (k in o.aggregates[j]) {
                                            if (o.aggregates[j].hasOwnProperty(k)) {
                                                switch (k) {
                                                    case 'member':
                                                    case 'label':
                                                    case 'aggregator':
                                                        break;
                                                    default:
                                                        col[k] = o.aggregates[j][k];
                                                }
                                            }
                                        }
                                        if (aggrlen > 1) {
                                            col.name = l;
                                            // HB Customization << Start
                                            if (items.text === '_r_Totals' && o.aggregates[j].rowTotalsText != '') {
                                                col.label = o.aggregates[j].rowTotalsText;
                                            } else {
                                                col.label = o.aggregates[j].label || l;
                                            }
                                            // HB Customization >> End
                                        } else {
                                            col.name = items.text;
                                            // HB Customization << Start
                                            if (o.yDimension.length < 1 && o.aggregates.length < 2) {
                                                col.label = items.text === '_r_Totals' ? o.rowTotalsText : o.rowTotalsText;
                                            } else {
                                                col.label = items.text === '_r_Totals' ? o.rowTotalsText : items.text;
                                            }
                                            // HB Customization >> End
                                        }
                                        // HB Customization << Start
                                        col.labelSearch = (items.text === '_r_Totals') ? col.label : items.text + ' - ' + col.label;
                                        col.labelColumn = items.text;
                                        if (items.level === 1) {
                                            pivotsums.push({
                                                "name": col.name,
                                                "label": col.label,
                                                "type": col.summaryType,
                                                "formatter": col.formatter
                                            });
                                        }
                                        // HB Customization >> End
                                        columns.push(col);
                                        j++;
                                    }
                                }
                            }
                        }
                    }
                }

                list(tree, 0);
                //HB Customization << Start
                var nm, oper, gtot, lc;
                // loop again trougth the pivot rows in order to build grand total 
                if (o.colTotals) {
                    var plen = pivotrows.length;
                    while (plen--) {
                        for (i = xlen; i < columns.length; i++) {
                            nm = columns[i].name;
                            lc = columns[i].labelColumn;
                            oper = columns[i].summaryType;
                            if (!$.isPlainObject(summaryarr[nm])) {
                                summaryarr[nm] = {};
                                summaryarr[nm]['type'] = oper;
                                if (o.yDimension.length >= 1) {
                                    summaryarr[nm]['label'] = lc;
                                } else {
                                    summaryarr[nm]['label'] = '_r_Totals';
                                }
                                summaryarr[nm]['data'] = [];
                            }
                            summaryarr[nm]['data'].push(parseFloat(pivotrows[plen][nm] || 0));
                            if (oper == 'avg') {
                                if (o.yDimension.length >= 1) {
                                    pivotrows[plen][nm] = parseFloat(pivotrows[plen][nm] || 0) / parseInt(pivotcnts[lc][plen] || 1);
                                } else {
                                    pivotrows[plen][nm] = parseFloat(pivotrows[plen][nm] || 0) / parseInt(pivotcnts['_r_Totals'][plen] || 1);
                                }
                            }
                        }
                    }
                    for (var i in summaryarr) {
                        if (!summaryarr[i]['type']) {
                            summaryarr[i]['type'] = "sum";
                        }
                        gtot = 0;
                        if ($.isArray(summaryarr[i]['data'])) {
                            switch (summaryarr[i]['type']) {
                                case "sum":
                                    gtot = getpivotSum(summaryarr[i]['data']);
                                    break;
                                case "avg":
                                    gtot = getpivotAvg(summaryarr[i]['data'], pivotcnts[summaryarr[i]['label']]);
                                    break;
                                case "count":
                                    gtot = getpivotSum(summaryarr[i]['data']);
                                    break;
                                case "min":
                                    gtot = getpivotMin(summaryarr[i]['data']);
                                    break;
                                case "max":
                                    gtot = getpivotMax(summaryarr[i]['data']);
                                    break;

                            }
                        }
                        summaries[i] = gtot;
                    }
                }
                //HB Customization >> End
                //HB Customization << Start
                /*
                 * Min value
                 */
                function getpivotMin(arr) {
                    if (!arr || arr.length == 0) {
                        return 0;
                    }
                    var min = false, temp;
                    for (var i = 0; i < arr.length; i++) {
                        temp = parseFloat(arr[i] || 0);
                        min = (min === false) ? temp : Math.min(min, temp);
                    }
                    return min;
                }
                /*
                 * Max calculation
                 */
                function getpivotMax(arr) {
                    if (!arr || arr.length == 0) {
                        return 0;
                    }
                    var max = false, temp;
                    for (var i = 0; i < arr.length; i++) {
                        temp = parseFloat(arr[i] || 0);
                        max = (max === false) ? temp : Math.max(max, temp);
                    }
                    return max;
                }
                /*
                 * Sum calculation
                 */
                function getpivotSum(arr) {
                    if (!arr || arr.length == 0) {
                        return 0;
                    }
                    var sum = 0;
                    for (var i = 0; i < arr.length; i++) {
                        sum += parseFloat(arr[i] || 0);
                    }
                    return sum;
                }

                /*
                 * Sum calculation
                 */
                function getpivotAvg(sarr, slen) {
                    if (!sarr || sarr.length == 0) {
                        return 0;
                    }
                    var sum, avg, len;
                    sum = getpivotSum(sarr);
                    len = getpivotSum(slen);
                    if (!len) {
                        return 0;
                    }
                    avg = sum / len;
                    return avg;
                }
                //HB Customization >> End
                // based on xDimension  levels build grouping 
                if (groupfields > 0) {
                    for (i = 0; i < groupfields; i++) {
                        groupOptions.groupingView.groupField[i] = columns[i].name;
                        groupOptions.groupingView.groupSummary[i] = o.groupSummary;
                        groupOptions.groupingView.groupSummaryPos[i] = o.groupSummaryPos;
                    }
                } else {
                    // no grouping is needed
                    groupOptions.grouping = false;
                }
                groupOptions.sortname = columns[groupfields].name;
                groupOptions.groupingView.hideFirstGroupCol = true;
                //groupOptions.groupingView.groupCollapse = true;
                //HB Customization
            });
            // return the final result.
            return {
                "colModel": columns,
                "rows": pivotrows,
                "cols": pivotcols,
                //HB Customization
                "sums": pivotsums,
                //HB Customization
                "groupOptions": groupOptions,
                "groupHeaders": headers,
                "summary": summaries
            };
        },
        jqPivot: function (data, pivotOpt, gridOpt, ajaxOpt) {
            return this.each(function () {
                var $t = this;

                //HB Customization << Start
                function pivotChart(r, rk, rv, rdata, pivotGrid, tree) {
                    var cv, ev, rv, pc, pv, pt, tp, psums, pcols, j, m, n, ctxt, cnum, aggr = [];
                    if (!$.isPlainObject(rdata[rk])) {
                        rdata[rk] = {};
                        rdata[rk]['titleText'] = rv;
                        rdata[rk]['values'] = [];
                        rdata[rk]['columns'] = {};
                        rdata[rk]['children'] = {};
                    }
                    psums = pivotGrid.sums;
                    for (j = 0; j < psums.length; j++) {
                        tp = psums[j]['type'];
                        if (!tp) {
                            tp = "sum";
                        }
                        cv = r[psums[j]['name']];
                        ev = rdata[rk]['values'][j];
                        if (tree == 0) {
                            rv = pivotChartCalc(tp, cv, ev);
                            if (tp == "avg") {
                                if (!$.isArray(rdata[rk]['values'][j])) {
                                    rdata[rk]['values'][j] = [];
                                }
                                rdata[rk]['values'][j].push(rv);
                            } else {
                                rdata[rk]['values'][j] = rv;
                            }
                        } else {
                            rv = parseFloat(cv || 0) + parseFloat(ev || 0);
                            rdata[rk]['values'][j] = rv;
                        }
                        //rdata[rk]['values'][j] = cv + ev; //?????
                        aggr[j] = tp;
                    }
                    if (pivotGrid.cols && pivotGrid.cols.length) {
                        pcols = pivotGrid.cols;
                        for (m = 0; m < pcols.length; m++) {
                            ctxt = pcols[m]['titleText'];
                            cnum = pcols[m]['numberOfColumns'];
                            if (!$.isPlainObject(rdata[rk]['columns'][ctxt])) {
                                rdata[rk]['columns'][ctxt] = {};
                            }
                            for (n = 0; n < cnum; n++) {
                                pc = r[pcols[m].columns[n]];
                                pv = rdata[rk]['columns'][ctxt][n];
                                if (tree == 0) {
                                    pt = pivotChartCalc(aggr[n], pc, pv);
                                    if (aggr[n] == "avg") {
                                        if (!$.isArray(rdata[rk]['columns'][ctxt][n])) {
                                            rdata[rk]['columns'][ctxt][n] = [];
                                        }
                                        rdata[rk]['columns'][ctxt][n].push(pt);
                                    } else {
                                        rdata[rk]['columns'][ctxt][n] = pt;
                                    }
                                } else {
                                    pt = parseFloat(pc || 0) + parseFloat(pv || 0);
                                    rdata[rk]['columns'][ctxt][n] = pt;
                                }
                                //rdata[rk]['columns'][ctxt][n] = pc + pv; //?????
                            }
                        }
                    }
                    return rdata;
                }

                function pivotChartCalc(oper, cv, ev) {
                    var ret;
                    switch (oper) {
                        case "sum":
                        case "count":
                            ret = parseFloat(cv || 0) + parseFloat(ev || 0);
                            break;
                        case "avg":
                            ret = parseFloat(cv || 0);
                            break;
                        case "min":
                            if (ev === "" || ev == null) {
                                ret = parseFloat(cv || 0);
                            } else {
                                ret = Math.min(parseFloat(ev), parseFloat(cv || 0));
                            }
                            break;
                        case "max":
                            if (ev === "" || ev == null) {
                                ret = parseFloat(cv || 0);
                            } else {
                                ret = Math.max(parseFloat(ev), parseFloat(cv || 0));
                            }
                            break;
                    }
                    return ret;
                }
                function pivotChartSum(arr) {
                    if (!arr || arr.length == 0) {
                        return 0;
                    }
                    var sum = 0;
                    for (var i = 0; i < arr.length; i++) {
                        sum += parseFloat(arr[i] || 0);
                    }
                    return sum;
                }

                function pivotChartAvg(arr) {
                    if (!arr || arr.length == 0) {
                        return 0;
                    }
                    var sum, avg;
                    sum = pivotChartSum(arr);
                    avg = sum / arr.length;
                    return avg;
                }
                //HB Customization >> End

                function pivot(data) {
                    var pivotGrid = jQuery($t).jqGrid('pivotSetup', data, pivotOpt),
                            footerrow = $.assocArraySize(pivotGrid.summary) > 0 ? true : false,
                            query = $.jgrid.from(pivotGrid.rows),
                            i;
                    //HB Customization << Start
                    var dataSet = {}, rdata = {}, rkeys = [], summaries = [], rc, crc = false;
                    if (pivotOpt.xDimension[0]) {
                        rc = pivotOpt.xDimension[0].dataName;
                    }
                    if (pivotOpt.xDimension[1]) {
                        crc = pivotOpt.xDimension[1].dataName;
                    }
                    dataSet.columns = [], dataSet.rows = [], dataSet.sums = [], dataSet.summary = {};
                    if (pivotGrid.cols && pivotGrid.cols.length) {
                        dataSet.columns = pivotGrid.cols;
                    }
                    dataSet.summary = pivotGrid.summary;
                    dataSet.sums = summaries = pivotGrid.sums;
                    var r, rv, rk, crv, crk, i, j, k, tp, nm;
                    if (pivotGrid.rows && pivotGrid.rows.length) {
                        r = pivotGrid.rows;
                        for (i = 0; i < r.length; i++) {
                            rv = r[i][rc];
                            if ($.inArray(rv, rkeys) == '-1') {
                                rkeys.push(rv);
                            }
                            rk = rkeys.indexOf(rv);
                            rdata = pivotChart(r[i], rk, rv, rdata, pivotGrid, 0);
                            if (crc !== false) {
                                if (!$.isArray(rdata[rk]['ckeys'])) {
                                    rdata[rk]['ckeys'] = [];
                                }
                                crv = r[i][crc];
                                if ($.inArray(crv, rdata[rk]['ckeys']) == '-1') {
                                    rdata[rk]['ckeys'].push(crv);
                                }
                                crk = rdata[rk]['ckeys'].indexOf(crv);
                                rdata[rk]['children'] = pivotChart(r[i], crk, crv, rdata[rk]['children'], pivotGrid, 1);
                            }
                        }
                        for (i in rdata) {
                            for (j = 0; j < summaries.length; j++) {
                                tp = summaries[j]['type'];
                                nm = summaries[j]['name'];
                                if (tp == "avg") {
                                    rdata[i]['values'][j] = pivotChartAvg(rdata[i]['values'][j]);
                                    if (rdata[i].columns) {
                                        for (k in rdata[i].columns) {
                                            rdata[i]['columns'][k][j] = pivotChartAvg(rdata[i]['columns'][k][j]);
                                        }
                                    }
                                }
                            }
                        }
                        dataSet.rows = rdata;
                    }
                    //HB Customization >> End
                    for (i = 0; i < pivotGrid.groupOptions.groupingView.groupField.length; i++) {
                        query.orderBy(pivotGrid.groupOptions.groupingView.groupField[i], "a", 'text', '');
                    }
                    jQuery($t).jqGrid($.extend({
                        datastr: $.extend(query.select(), footerrow ? {
                            userdata: pivotGrid.summary
                        } : {}),
                        datatype: "jsonstring",
                        footerrow: footerrow,
                        userDataOnFooter: footerrow,
                        colModel: pivotGrid.colModel,
                        dataSet: dataSet,
                        //HB Customization 
                        viewrecords: true,
                        sortname: pivotOpt.xDimension[0].dataName // ?????
                    }, gridOpt || {}, pivotGrid.groupOptions));
                    var gHead = pivotGrid.groupHeaders;
                    if (gHead.length) {
                        for (i = 0; i < gHead.length; i++) {
                            if (gHead[i] && gHead[i].groupHeaders.length) {
                                jQuery($t).jqGrid('setGroupHeaders', gHead[i]);
                            }
                        }
                    }
                    if (pivotOpt.frozenStaticCols) {
                        //HB Customization << Start
                        if (pivotOpt.frozenShrinkToFit) {
                            var calc_width = 0, gwidth, col_model = {};
                            col_model = jQuery($t).jqGrid("getGridParam", "colModel");
                            gwidth = jQuery($t).jqGrid("getGridParam", "width");
                            for (var i in col_model) {
                                calc_width += parseInt(col_model[i]['width'] || 0);
                            }
                            if (calc_width > gwidth) {
                                jQuery($t).jqGrid("setFrozenColumns");
                            } else {
                                jQuery($t).jqGrid("setGridParam", {autowidth: true, shrinkToFit: true});
                            }
                        } else {
                            jQuery($t).jqGrid("setFrozenColumns");
                        }
                        //HB Customization >> End
                    }
                }

                if (typeof data === "string") {
                    $.ajax($.extend({
                        url: data,
                        dataType: 'json',
                        success: function (response) {
                            pivot($.jgrid.getAccessor(response, ajaxOpt && ajaxOpt.reader ? ajaxOpt.reader : 'rows'));
                        }
                    }, ajaxOpt || {}));
                } else {
                    pivot(data);
                }
            });
        }
    });
})(jQuery);
;
(function(d){var k=0;d.widget("ech.multiselect",{options:{header:!0,height:175,minWidth:150,classes:"",checkAllText:"Check all",uncheckAllText:"Uncheck all",noneSelectedText:"Select options",selectedText:"# selected",selectedList:0,show:null,hide:null,autoOpen:!1,multiple:!0,filterBtn:false,position:{}},_create:function(){var a=this.element.hide(),b=this.options;this.speed=d.fx.speeds._default;this._isOpen=!1;a=(this.button=d('<button type="button"><span class="ui-icon ui-icon-triangle-2-n-s"></span></button>')).addClass("ui-multiselect ui-widget ui-state-default ui-corner-all").addClass(b.classes).attr({title:a.attr("title"),"aria-haspopup":!0,tabIndex:a.attr("tabIndex")}).insertAfter(a);(this.buttonlabel=d("<span />")).addClass("selected-label").html(b.noneSelectedText).appendTo(a);var a=(this.menu=d("<div />")).addClass("ui-multiselect-menu ui-widget ui-widget-content ui-corner-all").addClass(b.classes).appendTo(document.body),c=(this.header=d("<div />")).addClass("ui-widget-header ui-corner-all ui-multiselect-header ui-helper-clearfix").appendTo(a);(this.headerLinkContainer=d("<ul />")).addClass("ui-helper-reset").html(function(){return!0===b.header?'<li><a class="ui-multiselect-all" href="#"><span class="ui-icon ui-icon-check"></span><span>'+b.checkAllText+'</span></a></li><li><a class="ui-multiselect-none" href="#"><span class="ui-icon ui-icon-closethick"></span><span>'+b.uncheckAllText+"</span></a></li>":"string"===typeof b.header?"<li>"+b.header+"</li>":""}).append('<li class="ui-multiselect-close"><a href="#" class="ui-multiselect-close"><span class="ui-icon ui-icon-circle-close"></span></a></li>').appendTo(c);(this.checkboxContainer=d("<ul />")).addClass("ui-multiselect-checkboxes ui-helper-reset").appendTo(a);this._bindEvents();this.refresh(!0);if(b.filterBtn===true){var that=$(this);(this.filterDiv=d("<div />")).addClass("multiselect-filter-btn").attr("align","right").html('<button type="button" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" role="button" aria-disabled="false"><span class="ui-button-text">Filter</span></button>').appendTo(a).click(function(a){that[0].close();that[0].filterData();});}
b.multiple||a.addClass("ui-multiselect-single")},_init:function(){!1===this.options.header&&this.header.hide();this.options.multiple||this.headerLinkContainer.find(".ui-multiselect-all, .ui-multiselect-none").hide();this.options.autoOpen&&this.open();this.element.is(":disabled")&&this.disable()},refresh:function(a){var b=this.element,c=this.options,f=this.menu,h=this.checkboxContainer,g=[],e="",i=b.attr("id")||k++;b.find("option").each(function(b){d(this);var a=this.parentNode,f=this.innerHTML,h=this.title,k=this.value,b="ui-multiselect-"+(this.id||i+"-option-"+b),l=this.disabled,n=this.selected,m=["ui-corner-all"],o=(l?"ui-multiselect-disabled ":" ")+this.className,j;"OPTGROUP"===a.tagName&&(j=a.getAttribute("label"),-1===d.inArray(j,g)&&(e+='<li class="ui-multiselect-optgroup-label '+a.className+'"><a href="#">'+j+"</a></li>",g.push(j)));l&&m.push("ui-state-disabled");n&&!c.multiple&&m.push("ui-state-active");e+='<li class="'+o+'">';e+='<label for="'+b+'" title="'+h+'" class="'+m.join(" ")+'">';e+='<input class="regular-checkbox" id="'+b+'" name="multiselect_'+i+'" type="'+(c.multiple?"checkbox":"radio")+'" value="'+k+'" title="'+f+'"';n&&(e+=' checked="checked"',e+=' aria-selected="true"');l&&(e+=' disabled="disabled"',e+=' aria-disabled="true"');e+=" /><label for='"+b+"'></label><span>"+f+"</span></label></li>"});h.html(e);this.labels=f.find("label");this.inputs=this.labels.children("input");this._setButtonWidth();this._setMenuWidth();this.button[0].defaultValue=this.update();a||this._trigger("refresh")},update:function(){var a=this.options,b=this.inputs,c=b.filter(":checked"),f=c.length,a=0===f?a.noneSelectedText:d.isFunction(a.selectedText)?a.selectedText.call(this,f,b.length,c.get()):/\d/.test(a.selectedList)&&0<a.selectedList&&f<=a.selectedList?c.map(function(){return d(this).next().html()}).get().join(", "):a.selectedText.replace("#",f).replace("#",b.length);this.buttonlabel.html(a);return a},_bindEvents:function(){function a(){b[b._isOpen?"close":"open"]();return!1}
var b=this,c=this.button;c.find("span").bind("click.multiselect",a);c.bind({click:a,keypress:function(a){switch(a.which){case 27:case 38:case 37:b.close();break;case 39:case 40:b.open()}},mouseenter:function(){c.hasClass("ui-state-disabled")||d(this).addClass("ui-state-hover")},mouseleave:function(){d(this).removeClass("ui-state-hover")},focus:function(){c.hasClass("ui-state-disabled")||d(this).addClass("ui-state-focus")},blur:function(){d(this).removeClass("ui-state-focus")}});this.header.delegate("a","click.multiselect",function(a){if(d(this).hasClass("ui-multiselect-close"))b.close();else b[d(this).hasClass("ui-multiselect-all")?"checkAll":"uncheckAll"]();a.preventDefault()});this.menu.delegate("li.ui-multiselect-optgroup-label a","click.multiselect",function(a){a.preventDefault();var c=d(this),g=c.parent().nextUntil("li.ui-multiselect-optgroup-label").find("input:visible:not(:disabled)"),e=g.get(),c=c.parent().text();!1!==b._trigger("beforeoptgrouptoggle",a,{inputs:e,label:c})&&(b._toggleChecked(g.filter(":checked").length!==g.length,g),b._trigger("optgrouptoggle",a,{inputs:e,label:c,checked:e[0].checked}))}).delegate("label","mouseenter.multiselect",function(){d(this).hasClass("ui-state-disabled")||(b.labels.removeClass("ui-state-hover"),d(this).addClass("ui-state-hover").find("input").focus())}).delegate("label","keydown.multiselect",function(a){a.preventDefault();switch(a.which){case 9:case 27:b.close();break;case 38:case 40:case 37:case 39:b._traverse(a.which,this);break;case 13:d(this).find("input")[0].click()}}).delegate('input[type="checkbox"], input[type="radio"]',"click.multiselect",function(a){var c=d(this),g=this.value,e=this.checked,i=b.element.find("option");this.disabled||!1===b._trigger("click",a,{value:g,text:this.title,checked:e})?a.preventDefault():(c.focus(),c.attr("aria-selected",e),i.each(function(){this.value===g?this.selected=e:b.options.multiple||(this.selected=!1)}),b.options.multiple||(b.labels.removeClass("ui-state-active"),c.closest("label").toggleClass("ui-state-active",e),b.close()),b.element.trigger("change"),setTimeout(d.proxy(b.update,b),10))});d(document).bind("mousedown.multiselect",function(a){b._isOpen&&(!d.contains(b.menu[0],a.target)&&!d.contains(b.button[0],a.target)&&a.target!==b.button[0])&&b.close()});d(this.element[0].form).bind("reset.multiselect",function(){setTimeout(d.proxy(b.refresh,b),10)})},_setButtonWidth:function(){var a=this.element.outerWidth(),b=this.options;if(b.filterBtn===true){this.button.width(a);}else{/\d/.test(b.minWidth)&&a<b.minWidth&&(a=b.minWidth);this.button.width(a)}},_setMenuWidth:function(){var a=this.menu,b=this.button.outerWidth()-parseInt(a.css("padding-left"),10)-parseInt(a.css("padding-right"),10)-parseInt(a.css("border-right-width"),10)-parseInt(a.css("border-left-width"),10);if(this.options.filterBtn===true){a.width("auto");}else{a.width(b||this.button.outerWidth())}},_traverse:function(a,b){var c=d(b),f=38===a||37===a,c=c.parent()[f?"prevAll":"nextAll"]("li:not(.ui-multiselect-disabled, .ui-multiselect-optgroup-label)")[f?"last":"first"]();c.length?c.find("label").trigger("mouseover"):(c=this.menu.find("ul").last(),this.menu.find("label")[f?"last":"first"]().trigger("mouseover"),c.scrollTop(f?c.height():0))},_toggleState:function(a,b){return function(){this.disabled||(this[a]=b);b?this.setAttribute("aria-selected",!0):this.removeAttribute("aria-selected")}},_toggleChecked:function(a,b){var c=b&&b.length?b:this.inputs,f=this;c.each(this._toggleState("checked",a));c.eq(0).focus();this.update();var h=c.map(function(){return this.value}).get();this.element.find("option").each(function(){!this.disabled&&-1<d.inArray(this.value,h)&&f._toggleState("selected",a).call(this)});c.length&&this.element.trigger("change")},_toggleDisabled:function(a){this.button.attr({disabled:a,"aria-disabled":a})[a?"addClass":"removeClass"]("ui-state-disabled");var b=this.menu.find("input"),b=a?b.filter(":enabled").data("ech-multiselect-disabled",!0):b.filter(function(){return!0===d.data(this,"ech-multiselect-disabled")}).removeData("ech-multiselect-disabled");b.attr({disabled:a,"arial-disabled":a}).parent()[a?"addClass":"removeClass"]("ui-state-disabled");this.element.attr({disabled:a,"aria-disabled":a})},open:function(){var a=this.button,b=this.menu,c=this.speed,f=this.options,h=[];if(!(!1===this._trigger("beforeopen")||a.hasClass("ui-state-disabled")||this._isOpen)){var g=b.find("ul").last(),e=f.show,i=a.offset();d.isArray(f.show)&&(e=f.show[0],c=f.show[1]||this.speed);e&&(h=[e,c]);g.scrollTop(0).height(f.height);d.ui.position&&!d.isEmptyObject(f.position)?(f.position.of=f.position.of||a,b.show().position(f.position).hide()):b.css({top:i.top+a.outerHeight(),left:i.left});d.fn.show.apply(b,h);this.labels.eq(0).trigger("mouseover").trigger("mouseenter").find("input").trigger("focus");a.addClass("ui-state-active");this._isOpen=!0;this._trigger("open")}},close:function(){if(!1!==this._trigger("beforeclose")){var a=this.options,b=a.hide,c=this.speed,f=[];d.isArray(a.hide)&&(b=a.hide[0],c=a.hide[1]||this.speed);b&&(f=[b,c]);d.fn.hide.apply(this.menu,f);this.button.removeClass("ui-state-active").trigger("blur").trigger("mouseleave");this._isOpen=!1;this._trigger("close")}},filterData:function(){this._trigger("filterData");},enable:function(){this._toggleDisabled(!1)},disable:function(){this._toggleDisabled(!0)},checkAll:function(){this._toggleChecked(!0);this._trigger("checkAll")},uncheckAll:function(){this._toggleChecked(!1);this._trigger("uncheckAll")},getChecked:function(){return this.menu.find("input").filter(":checked")},destroy:function(){d.Widget.prototype.destroy.call(this);this.button.remove();this.menu.remove();this.element.show();return this},isOpen:function(){return this._isOpen},widget:function(){return this.menu},getButton:function(){return this.button},_setOption:function(a,b){var c=this.menu;switch(a){case"header":c.find("div.ui-multiselect-header")[b?"show":"hide"]();break;case"checkAllText":c.find("a.ui-multiselect-all span").eq(-1).text(b);break;case"uncheckAllText":c.find("a.ui-multiselect-none span").eq(-1).text(b);break;case"height":c.find("ul").last().height(parseInt(b,10));break;case"minWidth":this.options[a]=parseInt(b,10);this._setButtonWidth();this._setMenuWidth();break;case"selectedText":case"selectedList":case"noneSelectedText":this.options[a]=b;this.update();break;case"classes":c.add(this.button).removeClass(this.options.classes).addClass(b);break;case"multiple":c.toggleClass("ui-multiselect-single",!b),this.options.multiple=b,this.element[0].multiple=b,this.refresh()}
d.Widget.prototype._setOption.apply(this,arguments)}})})(jQuery);;
(function(a){var f=/[\-\[\]{}()*+?.,\\\^$|#\s]/g;a.widget("ech.multiselectfilter",{options:{label:false,width:null,placeholder:"Search here",autoReset:!1},_create:function(){var e;var b=this,c=this.options,d=this.instance=a(this.element).data("multiselect");this.header=d.menu.find(".ui-multiselect-header").addClass("ui-multiselect-hasfilter");e=this.wrapper=a('<div class="ui-multiselect-filter">'+(c.label.length?c.label:"")+'<input placeholder="'+c.placeholder+'" type="search"'+(/\d/.test(c.width)?'style="width:'+c.width+'px"':"")+" /></div>").prependTo(this.header),c=e;this.inputs=d.menu.find('input[type="checkbox"], input[type="radio"]');this.input=c.find("input").bind({keydown:function(a){13===a.which&&a.preventDefault()},keyup:a.proxy(b._handler,b),click:a.proxy(b._handler,b)});this.updateCache();d._toggleChecked=function(c,d){var e=d&&d.length?d:this.labels.find("input"),i=this,e=e.not(b.instance._isOpen?":disabled,.search-match-fail":":disabled").each(this._toggleState("checked",c));this.update();var j=e.map(function(){return this.value}).get();this.element.find("option").filter(function(){!this.disabled&&-1<a.inArray(this.value,j)&&i._toggleState("selected",c).call(this)})};d=a(document).bind("multiselectrefresh",function(){b.updateCache();b._handler()});this.options.autoReset&&d.bind("multiselectclose",a.proxy(this._reset,this))},_handler:function(b){var c=a.trim(this.input[0].value.toLowerCase()),d=this.rows,g=this.inputs,h=this.cache;if(c){d.hide();var e=RegExp(c.replace(f,"\\$&"),"gi");this._trigger("filter",b,a.map(h,function(a,b){if(-1!==a.search(e)){$(d.eq(b).find("input[type='checkbox']").removeClass("search-match-fail"));}else{$(d.eq(b).find("input[type='checkbox']").addClass("search-match-fail"))}
return-1!==a.search(e)?(d.eq(b).show(),g.get(b)):null}))}else{$(d).find("input[type='checkbox']").removeClass("search-match-fail");d.show();}
this.instance.menu.find(".ui-multiselect-optgroup-label").each(function(){var b=a(this),c=b.nextUntil(".ui-multiselect-optgroup-label").filter(function(){return"none"!==a.css(this,"display")}).length;b[c?"show":"hide"]()})},_reset:function(){this.input.val("").trigger("keyup")},updateCache:function(){this.rows=this.instance.menu.find(".ui-multiselect-checkboxes li:not(.ui-multiselect-optgroup-label)");this.cache=this.element.children().map(function(){var b=a(this);"optgroup"===this.tagName.toLowerCase()&&(b=b.children());return b.map(function(){return this.innerHTML.toLowerCase()}).get()}).get()},widget:function(){return this.wrapper},destroy:function(){a.Widget.prototype.destroy.call(this);this.input.val("").trigger("keyup");this.wrapper.remove()}})})(jQuery);;
$(function() {
    //currencyFmatter
    $.extend($.fn.fmatter, {
        currencyFmatter: function(cellvalue, options, rowObject) {
            return "$ " + cellvalue;
        }
    });
    $.extend($.fn.fmatter.currencyFmatter, {
        unformat: function(cellvalue, options, cell) {
            return cellvalue.replace("$", "");
        }
    });
});;
/* jQuery validation plug-in 1.7 | http://bassistance.de/jquery-plugins/jquery-plugin-validation/  | $Id: jquery.validate.js 6403 2009-06-17 14:27:16Z joern.zaefferer */
(function($) {

    $.extend($.fn, {
        validate: function( options ) {

            // if nothing is selected, return nothing; can't chain anyway
            if (!this.length) {
                options && options.debug && window.console && console.warn( "nothing selected, can't validate, returning nothing" );
                return;
            }

            // check if a validator for this form was already created
            var validator = $.data(this[0], 'validator');
            if ( validator ) {
                return validator;
            }

            validator = new $.validator( options, this[0] );
            $.data(this[0], 'validator', validator);

            if ( validator.settings.onsubmit ) {

                // allow suppresing validation by adding a cancel class to the submit button
                this.find("input, button").filter(".cancel").click(function() {
                    validator.cancelSubmit = true;
                });

                // when a submitHandler is used, capture the submitting button
                if (validator.settings.submitHandler) {
                    this.find("input, button").filter(":submit").click(function() {
                        validator.submitButton = this;
                    });
                }

                // validate the form on submit
                this.submit( function( event ) {

                    if ( validator.settings.debug )
                        // prevent form submit to be able to see console output
                        event.preventDefault();

                    function handle() {
                        if ( validator.settings.submitHandler ) {
                            if (validator.submitButton) {
                                // insert a hidden input as a replacement for the missing submit button
                                var hidden = $("<input type='hidden'/>").attr("name", validator.submitButton.name).val(validator.submitButton.value).appendTo(validator.currentForm);
                            }
                            validator.settings.submitHandler.call( validator, validator.currentForm );

                            if (validator.submitButton) {
                                // and clean up afterwards; thanks to no-block-scope, hidden can be referenced
                                hidden.remove();
                            }
                            return false;
                        }
                        return true;
                    }

                    // prevent submit for invalid forms or custom submit handlers
                    if ( validator.cancelSubmit ) {
                        validator.cancelSubmit = false;
                        return handle();
                    }
                    if ( validator.form() ) {

                        if ( validator.pendingRequest ) {
                            validator.formSubmitted = true;
                            return false;
                        }
                        return handle();
                    } else {
                        validator.focusInvalid();
                        return false;
                    }
                });
            }

            return validator;
        },
        // http://docs.jquery.com/Plugins/Validation/valid
        valid: function() {
            if ( $(this[0]).is('form')) {
                return this.validate().form();
            } else {

                var valid = true;
                var validator = $(this[0].form).validate();
                this.each(function() {
                    valid &= validator.element(this);
                });
                return valid;
            }
        },
        // attributes: space seperated list of attributes to retrieve and remove
        removeAttrs: function(attributes) {
            var result = {},
            $element = this;
            $.each(attributes.split(/\s/), function(index, value) {
                result[value] = $element.attr(value);
                $element.removeAttr(value);
            });
            return result;
        },
        
        // http://docs.jquery.com/Plugins/Validation/rules
        rules: function(command, argument) {
            var element = this[0];

            if (command) {
                var settings = $.data(element.form, 'validator').settings;
                var staticRules = settings.rules;
                var existingRules = $.validator.staticRules(element);
                switch(command) {
                    case "add":
                        $.extend(existingRules, $.validator.normalizeRule(argument));
                        staticRules[element.name] = existingRules;
                        if (argument.messages)
                            settings.messages[element.name] = $.extend( settings.messages[element.name], argument.messages );
                        break;
                    case "remove":
                        if (!argument) {
                            delete staticRules[element.name];
                            return existingRules;
                        }
                        var filtered = {};
                        $.each(argument.split(/\s/), function(index, method) {
                            filtered[method] = existingRules[method];
                            delete existingRules[method];
                        });
                        return filtered;
                }
            }

            var data = $.validator.normalizeRules(
                $.extend(
                {},
                    $.validator.metadataRules(element),
                    $.validator.classRules(element),
                    $.validator.attributeRules(element),
                    $.validator.staticRules(element)
                    ), element);

            // make sure required is at front
            if (data.required) {
                var param = data.required;
                delete data.required;
                data = $.extend({
                    required: param
                }, data);
            }

            return data;
        }
    });

    // Custom selectors
    $.extend($.expr[":"], {
        // http://docs.jquery.com/Plugins/Validation/blank
        blank: function(a) {
            return !$.trim("" + a.value);
        },
        // http://docs.jquery.com/Plugins/Validation/filled
        filled: function(a) {
            return !!$.trim("" + a.value);
        },
        // http://docs.jquery.com/Plugins/Validation/unchecked
        unchecked: function(a) {
            return !a.checked;
        }
    });

    // constructor for validator
    $.validator = function( options, form ) {
        this.settings = $.extend( true, {}, $.validator.defaults, options );
        this.currentForm = form;
        this.init();
    };

    $.validator.format = function(source, params) {

        if ( arguments.length == 1 )
            return function() {
                var args = $.makeArray(arguments);
                args.unshift(source);
                return $.validator.format.apply( this, args );
            };
        if ( arguments.length > 2 && params.constructor != Array  ) {
            params = $.makeArray(arguments).slice(1);
        }
        if ( params.constructor != Array ) {
            params = [ params ];
        }
        $.each(params, function(i, n) {
            source = source.replace(new RegExp("\\{" + i + "\\}", "g"), n);
        });
        return source;
    };

    $.extend($.validator, {

        defaults: {
            messages: {},
            groups: {},
            rules: {},
            errorClass: "err",
            validClass: "valid",
            errorElement: "div",
            focusInvalid: true,
            errorContainer: $( [] ),
            errorLabelContainer: $( [] ),
            onsubmit: true,
            ignore: [],
            ignoreTitle: false,
            onfocusin: function(element) {
                this.lastActive = element;

                // hide error label and remove error class on focus if enabled
                if ( this.settings.focusCleanup && !this.blockFocusCleanup ) {
                    this.settings.unhighlight && this.settings.unhighlight.call( this, element, this.settings.errorClass, this.settings.validClass );
                    this.errorsFor(element).hide();
                }
            },
            onfocusout: function(element) {
                if ( !this.checkable(element) && (element.name in this.submitted || !this.optional(element)) ) {
                    this.element(element);
                }
            },
            onkeyup: function(element) {
                if ( element.name in this.submitted || element == this.lastElement ) {
                    this.element(element);
                }
            },
            onclick: function(element) {
                // click on selects, radiobuttons and checkboxes
                if ( element.name in this.submitted )
                    this.element(element);
                // or option elements, check parent select in that case
                else if (element.parentNode.name in this.submitted)
                    this.element(element.parentNode);
            },
            highlight: function( element, errorClass, validClass ) {
                $(element).addClass(errorClass).removeClass(validClass);
                if($(element).closest(".form-right-div").hasClass("frm-controls-merge")){
                    if($(element).closest(".frm-controls-merge").parent().find(".frm-labels-merge").length){
                        var ind = $(element).closest(".frm-merge-ctrl-block").index();
                        $(element).closest(".frm-controls-merge").parent().find(".frm-labels-merge").find(".form-label:eq("+ind+")").addClass(errorClass).removeClass(validClass);
                    } else {
                        $(element).closest(".form-right-div").parent().find(".form-label").addClass(errorClass).removeClass(validClass);
                    }
                } else {
                    $(element).closest(".form-right-div").parent().find(".form-label").addClass(errorClass).removeClass(validClass);
                }
            },
            unhighlight: function( element, errorClass, validClass ) {
                $(element).removeClass(errorClass).addClass(validClass);
                if($(element).closest(".form-right-div").hasClass("frm-controls-merge")){
                    if($(element).closest(".frm-controls-merge").parent().find(".frm-labels-merge").length){
                        var ind = $(element).closest(".frm-merge-ctrl-block").index();
                        $(element).closest(".frm-controls-merge").parent().find(".frm-labels-merge").find(".form-label:eq("+ind+")").removeClass(errorClass).addClass(validClass);
                    } else {
                        $(element).closest(".form-right-div").parent().find(".form-label").removeClass(errorClass).addClass(validClass);
                    }
                } else {
                    $(element).closest(".form-right-div").parent().find(".form-label").removeClass(errorClass).addClass(validClass);
                }
            }
        },

        // http://docs.jquery.com/Plugins/Validation/Validator/setDefaults
        setDefaults: function(settings) {
            $.extend( $.validator.defaults, settings );
        },

        messages: {
            required: "This field is required.",
            firstname: "Please enter a valid firstname.",
            lastname: "Please enter a valid lastname.",
            namewithdot:"Please enter a valid name",
            phonenumber:"Please enter a valid phone number.",
            cellnumber:"Please enter a valid cell number(minimum 10 digits).",
            username:"Please enter a valid user number.",
            fullname:"Please enter a valid full name.",
            notStartWithSpace:"Please enter a value which not started from space.",
            nonzeronumber:"Please enter a number greater than zero",
            code:"Please enter a valid code.",
            password:"Please enter a valid password.",
            remote: "Please fix this field.",
            email: "Please enter a valid email address.",
            nospace:"No space please and don't leave it empty",
            url: "Please enter a valid URL.",
            date: "Please enter a valid date.",
            dateISO: "Please enter a valid date (ISO).",
            maxdate: $.validator.format("Please enter date smaller or equal to {0}."),
            mindate: $.validator.format("Please enter date greater or equal to {0}."),
            number: "Please enter a valid number.",
            positive_number:"Please enter a valid Positive Number.",
            phone:"Please enter a valid Phone Number",
            digits: "Please enter only digits.",
            nondecimal: "Please enter only digital number.",
            decimals: "Number has wrong format.",
            specialcharacters:"Please enter valid name",
            creditcard: "Please enter a valid credit card number.",
            equalTo: "Please enter the same value again.",
            accept: "Please upload a image with valid extension.",
            maxlength: $.validator.format("Please enter no more than {0} characters."),
            minlength: $.validator.format("Please enter at least {0} characters."),
            rangelength: $.validator.format("Please enter a value between {0} and {1} characters long."),
            range: $.validator.format("Please enter a value between {0} and {1}."),
            max: $.validator.format("Please enter a value less than or equal to {0}."),
            min: $.validator.format("Please enter a value greater than or equal to {0}."),
            alphaspace: "No space please and don't leave it empty.",
            alphaOnly: "Alphabets are allowed only.",
            countryTitle: "Please enter valid name.",
            newsTitle: "Please enter valid title.",
            alphaCode:"Alphabets are allowed only.",
            zipCode:"Please enter valid zipcode.",
            faxCode:"Please enter valid fax number.",
            tollFreeCode:"Please enter valid toll free number.",
            url_host:"Please enter a valid URL.",
            price:"Please enter a valid Price.",
            latlong:"Please enter valid latitude/longitude",
            categoryname:"Please enter valid category name"
        },

        autoCreateRanges: false,

        prototype: {

            init: function() {
                this.labelContainer = $(this.settings.errorLabelContainer);
                this.errorContext = this.labelContainer.length && this.labelContainer || $(this.currentForm);
                this.containers = $(this.settings.errorContainer).add( this.settings.errorLabelContainer );
                this.submitted = {};
                this.valueCache = {};
                this.pendingRequest = 0;
                this.pending = {};
                this.invalid = {};
                this.reset();

                var groups = (this.groups = {});
                $.each(this.settings.groups, function(key, value) {
                    $.each(value.split(/\s/), function(index, name) {
                        groups[name] = key;
                    });
                });
                var rules = this.settings.rules;
                $.each(rules, function(key, value) {
                    rules[key] = $.validator.normalizeRule(value);
                });

                function delegate(event) {
                    var validator = $.data(this[0].form, "validator"),
                    eventType = "on" + event.type.replace(/^validate/, "");
                    validator.settings[eventType] && validator.settings[eventType].call(validator, this[0] );
                }
                $(this.currentForm)
                .validateDelegate(":text, :password, :file, select, textarea", "focusin focusout keyup", delegate)
                .validateDelegate(":radio, :checkbox, select, option", "click", delegate);

                if (this.settings.invalidHandler)
                    $(this.currentForm).bind("invalid-form.validate", this.settings.invalidHandler);
            },

            // http://docs.jquery.com/Plugins/Validation/Validator/form
            form: function() {
                this.checkForm();
                $.extend(this.submitted, this.errorMap);
                this.invalid = $.extend({}, this.errorMap);
                if (!this.valid())
                    $(this.currentForm).triggerHandler("invalid-form", [this]);
                this.showErrors();
                return this.valid();
            },

            checkForm: function() {
                this.prepareForm();
                /*for ( var i = 0, elements = (this.currentElements = this.elements()); elements[i]; i++ ) {
                    this.check( elements[i] );
                }*/
                for ( var i = 0, elements = (this.currentElements = this.elements()); elements[i]; i++ ) {
                    if (this.findByName( elements[i].name ).length != undefined && this.findByName( elements[i].name ).length > 1) {
                        for (var cnt = 0; cnt < this.findByName( elements[i].name ).length; cnt++) {
                            this.check( this.findByName( elements[i].name )[cnt] );
                        }
                    } else {
                        this.check( elements[i] );
                    }
                }
                return this.valid();
            },

            // http://docs.jquery.com/Plugins/Validation/Validator/element
            element: function( element ) {
                element = this.clean( element );
                this.lastElement = element;
                this.prepareElement( element );
                this.currentElements = $(element);
                var result = this.check( element );
                if ( result ) {
                    delete this.invalid[element.name];
                } else {
                    this.invalid[element.name] = true;
                }
                if ( !this.numberOfInvalids() ) {
                    // Hide error containers on last error
                    this.toHide = this.toHide.add( this.containers );
                }
                this.showErrors();
                return result;
            },

            // http://docs.jquery.com/Plugins/Validation/Validator/showErrors
            showErrors: function(errors) {
                if(errors) {
                    // add items to error list and map
                    $.extend( this.errorMap, errors );
                    this.errorList = [];
                    for ( var name in errors ) {
                        this.errorList.push({
                            message: errors[name],
                            element: this.findByName(name)[0]
                        });
                    }
                    // remove items from success list
                    this.successList = $.grep( this.successList, function(element) {
                        return !(element.name in errors);
                    });
                }
                this.settings.showErrors
                ? this.settings.showErrors.call( this, this.errorMap, this.errorList )
                : this.defaultShowErrors();
            },

            // http://docs.jquery.com/Plugins/Validation/Validator/resetForm
            resetForm: function() {
                if ( $.fn.resetForm )
                    $( this.currentForm ).resetForm();
                this.submitted = {};
                this.prepareForm();
                this.hideErrors();
                this.elements().removeClass( this.settings.errorClass );
            },

            numberOfInvalids: function() {
                return this.objectLength(this.invalid);
            },

            objectLength: function( obj ) {
                var count = 0;
                for ( var i in obj )
                    count++;
                return count;
            },

            hideErrors: function() {
                this.addWrapper( this.toHide ).hide();
            },

            valid: function() {
                return this.size() == 0;
            },

            size: function() {
                return this.errorList.length;
            },

            focusInvalid: function() {
                if( this.settings.focusInvalid ) {
                    try {
                        $(this.findLastActive() || this.errorList.length && this.errorList[0].element || [])
                        .filter(":visible")
                        .focus()
                        // manually trigger focusin event; without it, focusin handler isn't called, findLastActive won't have anything to find
                        .trigger("focusin");
                    } catch(e) {
                    // ignore IE throwing errors when focusing hidden elements
                    }
                }
            },

            findLastActive: function() {
                var lastActive = this.lastActive;
                return lastActive && $.grep(this.errorList, function(n) {
                    return n.element.name == lastActive.name;
                }).length == 1 && lastActive;
            },

            elements: function() {
                var validator = this,
                rulesCache = {};

                // select all valid inputs inside the form (no submit or reset buttons)
                // workaround $Query([]).add until http://dev.jquery.com/ticket/2114 is solved
                return $([]).add(this.currentForm.elements)
                .filter(":input")
                .not(":submit, :reset, :image, [disabled]")
                .not( this.settings.ignore )
                .filter(function() {
                    !this.name && validator.settings.debug && window.console && console.error( "%o has no name assigned", this);

                    // select only the first element for each name, and only those with rules specified
                    if ( this.name in rulesCache || !validator.objectLength($(this).rules()) )
                        return false;

                    rulesCache[this.name] = true;
                    return true;
                });
            },

            clean: function( selector ) {
                return $( selector )[0];
            },

            errors: function() {
                return $( this.settings.errorElement + "." + this.settings.errorClass, this.errorContext );
            },

            reset: function() {
                this.successList = [];
                this.errorList = [];
                this.errorMap = {};
                this.toShow = $([]);
                this.toHide = $([]);
                this.currentElements = $([]);
            },

            prepareForm: function() {
                this.reset();
                this.toHide = this.errors().add( this.containers );
            },

            prepareElement: function( element ) {
                this.reset();
                this.toHide = this.errorsFor(element);
            },

            check: function( element ) {
                element = this.clean( element );

                // if radio/checkbox, validate first element in group instead
                if (this.checkable(element)) {
                    element = this.findByName( element.name )[0];
                }

                var rules = $(element).rules();
                var dependencyMismatch = false;
                for( method in rules ) {
                    var rule = {
                        method: method,
                        parameters: rules[method]
                    };
                    try {
                        var result = $.validator.methods[method].call( this, element.value.replace(/\r/g, ""), element, rule.parameters );

                        // if a method indicates that the field is optional and therefore valid,
                        // don't mark it as valid when there are no other rules
                        if ( result == "dependency-mismatch" ) {
                            dependencyMismatch = true;
                            continue;
                        }
                        dependencyMismatch = false;

                        if ( result == "pending" ) {
                            this.toHide = this.toHide.not( this.errorsFor(element) );
                            return;
                        }

                        if( !result ) {
                            this.formatAndAdd( element, rule );
                            return false;
                        }
                    } catch(e) {
                        this.settings.debug && window.console && console.log("exception occured when checking element " + element.id
                            + ", check the '" + rule.method + "' method", e);
                        throw e;
                    }
                }
                if (dependencyMismatch)
                    return;
                if ( this.objectLength(rules) )
                    this.successList.push(element);
                return true;
            },

            // return the custom message for the given element and validation method
            // specified in the element's "messages" metadata
            customMetaMessage: function(element, method) {
                if (!$.metadata)
                    return;

                var meta = this.settings.meta
                ? $(element).metadata()[this.settings.meta]
                : $(element).metadata();

                return meta && meta.messages && meta.messages[method];
            },

            // return the custom message for the given element name and validation method
            customMessage: function( name, method ) {
                var m = this.settings.messages[name];
                return m && (m.constructor == String
                    ? m
                    : m[method]);
            },

            // return the first defined argument, allowing empty strings
            findDefined: function() {
                for(var i = 0; i < arguments.length; i++) {
                    if (arguments[i] !== undefined)
                        return arguments[i];
                }
                return undefined;
            },

            defaultMessage: function( element, method) {
                return this.findDefined(
                    this.customMessage( element.name, method ),
                    this.customMetaMessage( element, method ),
                    // title is never undefined, so handle empty string as undefined
                    !this.settings.ignoreTitle && element.title || undefined,
                    $.validator.messages[method],
                    "<strong>Warning: No message defined for " + element.name + "</strong>"
                    );
            },

            formatAndAdd: function( element, rule ) {
                var message = this.defaultMessage( element, rule.method ),
                theregex = /\$?\{(\d+)\}/g;
                if ( typeof message == "function" ) {
                    message = message.call(this, rule.parameters, element);
                } else if (theregex.test(message)) {
                    message = jQuery.format(message.replace(theregex, '{$1}'), rule.parameters);
                }
                this.errorList.push({
                    message: message,
                    element: element
                });

                this.errorMap[element.name] = message;
                this.submitted[element.name] = message;
            },

            addWrapper: function(toToggle) {
                if ( this.settings.wrapper )
                    toToggle = toToggle.add( toToggle.parent( this.settings.wrapper ) );
                return toToggle;
            },

            defaultShowErrors: function() {
                for ( var i = 0; this.errorList[i]; i++ ) {
                    var error = this.errorList[i];
                    this.settings.highlight && this.settings.highlight.call( this, error.element, this.settings.errorClass, this.settings.validClass );
                    this.showLabel( error.element, error.message );
                }
                if( this.errorList.length ) {
                    this.toShow = this.toShow.add( this.containers );
                }
                if (this.settings.success) {
                    for ( var i = 0; this.successList[i]; i++ ) {
                        this.showLabel( this.successList[i] );
                    }
                }
                if (this.settings.unhighlight) {
                    for ( var i = 0, elements = this.validElements(); elements[i]; i++ ) {
                        this.settings.unhighlight.call( this, elements[i], this.settings.errorClass, this.settings.validClass );
                    }
                }
                this.toHide = this.toHide.not( this.toShow );
                this.hideErrors();
                this.addWrapper( this.toShow ).show();
            },

            validElements: function() {
                return this.currentElements.not(this.invalidElements());
            },

            invalidElements: function() {
                return $(this.errorList).map(function() {
                    return this.element;
                });
            },

            showLabel: function(element, message) {
                var label = this.errorsFor( element );
                if ( label.length ) {
                    // refresh error/success class
                    label.removeClass().addClass( this.settings.errorClass );
                    // check if we have a generated label, replace the message then
                    label.attr("generated") && label.html(message);
                } else {
                    // create label
                    label = $("<" + this.settings.errorElement + "/>")
                    .attr({
                        "for":  this.idOrName(element),
                        generated: true
                    })
                    .addClass(this.settings.errorClass)
                    .html(message || "");
                    if ( this.settings.wrapper ) {
                        // make sure the element is visible, even in IE
                        // actually showing the wrapped element is handled elsewhere
                        label = label.hide().show().wrap("<" + this.settings.wrapper + "/>").parent();
                    }
                    var setpos = "";
                    if (element.type== 'radio' || element.type== 'checkbox'){
                        setpos = $(element).parent().after(label);
                    } else {
                        setpos = label.insertAfter(element);
                    }
                    if ( !this.labelContainer.append(label).length )
                        this.settings.errorPlacement
                        ? this.settings.errorPlacement(label, $(element) )
                        : setpos;

                }
                if ( !message && this.settings.success ) {
                    label.text("");
                    typeof this.settings.success == "string"
                    ? label.addClass( this.settings.success )
                    : this.settings.success( label );
                }
                var lft = ($(element).position().left - $(element).parent().position().left);
                if((lft < 0))
                {
                    if($(element).offset().left >0)
                        lft = $(element).offset().left-30;
                    else
                        lft = 0;
                }
                label.css('padding-left',lft+'px');
                this.toShow = this.toShow.add(label);
            },

            errorsFor: function(element) {
                var name = this.idOrName(element);
                return this.errors().filter(function() {
                    return $(this).attr('for') == name;
                });
            },

            idOrName: function(element) {
                return this.groups[element.name] || (this.checkable(element) ? element.name : element.id || element.name);
            },

            checkable: function( element ) {
                return /radio|checkbox/i.test(element.type);
            },

            findByName: function( name ) {
                // select by name and filter by form for performance over form.find("[name=...]")
                var form = this.currentForm;
                return $(document.getElementsByName(name)).map(function(index, element) {
                    return element.form == form && element.name == name && element  || null;
                });
            },

            getLength: function(value, element) {
                switch( element.nodeName.toLowerCase() ) {
                    case 'select':
                        return $("option:selected", element).length;
                    case 'input':
                        if( this.checkable( element) )
                            return this.findByName(element.name).filter(':checked').length;
                }
                return value.length;
            },

            depend: function(param, element) {
                return this.dependTypes[typeof param]
                ? this.dependTypes[typeof param](param, element)
                : true;
            },

            dependTypes: {
                "boolean": function(param, element) {
                    return param;
                },
                "string": function(param, element) {
                    return !!$(param, element.form).length;
                },
                "function": function(param, element) {
                    return param(element);
                }
            },

            optional: function(element) {
                return !$.validator.methods.required.call(this, $.trim(element.value), element) && "dependency-mismatch";
            },

            startRequest: function(element) {
                if (!this.pending[element.name]) {
                    this.pendingRequest++;
                    this.pending[element.name] = true;
                }
            },

            stopRequest: function(element, valid) {
                this.pendingRequest--;
                // sometimes synchronization fails, make sure pendingRequest is never < 0
                if (this.pendingRequest < 0)
                    this.pendingRequest = 0;
                delete this.pending[element.name];
                if ( valid && this.pendingRequest == 0 && this.formSubmitted && this.form() ) {
                    $(this.currentForm).submit();
                    this.formSubmitted = false;
                } else if (!valid && this.pendingRequest == 0 && this.formSubmitted) {
                    $(this.currentForm).triggerHandler("invalid-form", [this]);
                    this.formSubmitted = false;
                }
            },

            previousValue: function(element) {
                return $.data(element, "previousValue") || $.data(element, "previousValue", {
                    old: null,
                    valid: true,
                    message: this.defaultMessage( element, "remote" )
                });
            }

        },

        classRuleSettings: {
            required: {
                required: true
            },
            firstname: {
                firstname: true
            },
            lastname: {
                lastname: true
            },
            specialcharacters:{
                specialcharacters:true
            },
            namewithdot:{
                namewithdot:true
            },
            phonenumber:{
                phonenumber:true
            },
            cellnumber:{
                cellnumber:true
            },
            username:{
                username:true
            },
            fullname:{
                fullname:true
            },
            notStartWithSpace:{
                notStartWithSpace:true
            },
            nonzeronumber:{
                nonzeronumber:true
            },
            code:{
                code:true
            },
            password:{
                password:true
            },
            email: {
                email: true
            },
            nospace: {
                nospace: true
            },
            url: {
                url: true
            },
            date: {
                date: true
            },
            dateISO: {
                dateISO: true
            },
            maxdate: {
                maxdate: true
            },
            mindate: {
                mindate: true
            },
            dateDE: {
                dateDE: true
            },
            number: {
                number: true
            },
            numberDE: {
                numberDE: true
            },
            digits: {
                digits: true
            },
            nondecimal: {
                nondecimal:true  
            },
            alphaspace: {
                digits: true
            },
            alphaOnly:{
                alphaOnly:true
            },
            countryTitle:{
                countryTitle:true
            },
            newsTitle:{
                newsTitle:true  
            },
            alphaCode:{
                alphaCode:true
            },
            zipCode:{
                zipCode:true
            },
            faxCode:{
                faxCode:true
            },
            tollFreeCode:{
                tollFreeCode:true
            },
            url_host:{
                url_host : true  
            },
            decimals: {
                decimals: true
            },
            creditcard: {
                creditcard: true
            },
            price: {
                price: true
            },
            latlong:{
                latlong:true
            },
            categoryname:{
                categoryname:true
            }
        },

        addClassRules: function(className, rules) {
            className.constructor == String ?
            this.classRuleSettings[className] = rules :
            $.extend(this.classRuleSettings, className);
        },

        classRules: function(element) {
            var rules = {};
            var classes = $(element).attr('class');
            classes && $.each(classes.split(' '), function() {
                if (this in $.validator.classRuleSettings) {
                    $.extend(rules, $.validator.classRuleSettings[this]);
                }
            });
            return rules;
        },

        attributeRules: function(element) {
            var rules = {};
            var $element = $(element);

            for (method in $.validator.methods) {
                var value = $element.attr(method);
                if (value) {
                    rules[method] = value;
                }
            }

            // maxlength may be returned as -1, 2147483647 (IE) and 524288 (safari) for text inputs
            if (rules.maxlength && /-1|2147483647|524288/.test(rules.maxlength)) {
                delete rules.maxlength;
            }

            return rules;
        },

        metadataRules: function(element) {
            if (!$.metadata) return {};

            var meta = $.data(element.form, 'validator').settings.meta;
            return meta ?
            $(element).metadata()[meta] :
            $(element).metadata();
        },

        staticRules: function(element) {
            var rules = {};
            var validator = $.data(element.form, 'validator');
            if (validator.settings.rules) {
                rules = $.validator.normalizeRule(validator.settings.rules[element.name]) || {};
            }
            return rules;
        },

        normalizeRules: function(rules, element) {
            // handle dependency check
            $.each(rules, function(prop, val) {
                // ignore rule when param is explicitly false, eg. required:false
                if (val === false) {
                    delete rules[prop];
                    return;
                }
                if (val.param || val.depends) {
                    var keepRule = true;
                    switch (typeof val.depends) {
                        case "string":
                            keepRule = !!$(val.depends, element.form).length;
                            break;
                        case "function":
                            keepRule = val.depends.call(element, element);
                            break;
                    }
                    if (keepRule) {
                        rules[prop] = val.param !== undefined ? val.param : true;
                    } else {
                        delete rules[prop];
                    }
                }
            });

            // evaluate parameters
            $.each(rules, function(rule, parameter) {
                rules[rule] = $.isFunction(parameter) ? parameter(element) : parameter;
            });

            // clean number parameters
            $.each(['minlength', 'maxlength', 'min', 'max'], function() {
                if (rules[this]) {
                    rules[this] = Number(rules[this]);
                }
            });
            $.each(['rangelength', 'range'], function() {
                if (rules[this]) {
                    rules[this] = [Number(rules[this][0]), Number(rules[this][1])];
                }
            });

            if ($.validator.autoCreateRanges) {
                // auto-create ranges
                if (rules.min && rules.max) {
                    rules.range = [rules.min, rules.max];
                    delete rules.min;
                    delete rules.max;
                }
                if (rules.minlength && rules.maxlength) {
                    rules.rangelength = [rules.minlength, rules.maxlength];
                    delete rules.minlength;
                    delete rules.maxlength;
                }
            }

            // To support custom messages in metadata ignore rule methods titled "messages"
            if (rules.messages) {
                delete rules.messages;
            }

            return rules;
        },

        // Converts a simple string to a {string: true} rule, e.g., "required" to {required:true}
        normalizeRule: function(data) {
            if( typeof data == "string" ) {
                var transformed = {};
                $.each(data.split(/\s/), function() {
                    transformed[this] = true;
                });
                data = transformed;
            }
            return data;
        },

        // http://docs.jquery.com/Plugins/Validation/Validator/addMethod
        addMethod: function(name, method, message) {
            $.validator.methods[name] = method;
            $.validator.messages[name] = message != undefined ? message : $.validator.messages[name];
            if (method.length < 3) {
                $.validator.addClassRules(name, $.validator.normalizeRule(name));
            }
        },

        methods: {

            // http://docs.jquery.com/Plugins/Validation/Methods/required
            required: function(value, element, param) {
                // check if dependency is met
                if ( !this.depend(param, element) )
                    return "dependency-mismatch";
                switch( element.nodeName.toLowerCase() ) {
                    case 'select':
                        // could be an array for select-multiple or a string, both are fine this way
                        var val = $(element).val();
                        /* ADDED LAST CONDITION BY SNEHASIS */
                        return val && val.length > 0 && val != '';
                    case 'input':
                        if ( this.checkable(element) )
                            return this.getLength(value, element) > 0;
                    default:
                        return $.trim(value).length > 0;
                }
            },

            // http://docs.jquery.com/Plugins/Validation/Methods/remote
            remote: function(value, element, param) {
                // alert(value,element,param);
                if ( this.optional(element) )
                    return "dependency-mismatch";

                var previous = this.previousValue(element);
                if (!this.settings.messages[element.name] )
                    this.settings.messages[element.name] = {};
                previous.originalMessage = this.settings.messages[element.name].remote;
                this.settings.messages[element.name].remote = previous.message;

                param = typeof param == "string" && {
                    url:param
                } || param;

                if ( previous.old !== value ) {
                    previous.old = value;
                    var validator = this;
                    this.startRequest(element);
                    var data = {};
                    data[element.name] = value;
                    //alert(param+data);
                    $.ajax($.extend(true, {
                        url: param,
                        mode: "abort",
                        port: "validate" + element.name,
                        dataType: "json",
                        data: data,
                        success: function(response) {
                            validator.settings.messages[element.name].remote = previous.originalMessage;
                            var valid = response === true;
                            if ( valid ) {
                                var submitted = validator.formSubmitted;
                                validator.prepareElement(element);
                                validator.formSubmitted = submitted;
                                validator.successList.push(element);
                                validator.showErrors();
                            } else {
                                var errors = {};
                                var message = (previous.message = response || validator.defaultMessage( element, "remote" ));
                                errors[element.name] = $.isFunction(message) ? message(value) : message;
                                validator.showErrors(errors);
                            }
                            previous.valid = valid;
                            validator.stopRequest(element, valid);
                        }
                    }, param));
                    return "pending";
                } else if( this.pending[element.name] ) {
                    return "pending";
                }
                return previous.valid;
            },
            firstname: function(value, element) {
                if((value).length > 0) {
                    return this.optional(element) || value === "NA" ||value.match(/^[a-zA-Z ]+$/);
                } else {
                    return false;
                }
            },
            lastname: function(value, element) {
                if((value).length > 0) {
                    return this.optional(element) || value === "NA" ||
                    value.match(/^[a-zA-Z' ]+$/);
                } else {
                    return false;
                }
            },
            namewithdot: function(value, element) {
                if((value).length > 0) {
                    return this.optional(element) || value === "NA" ||
                    value.match(/^[a-zA-Z.\' ]+$/);
                } else {
                    return false;
                }
            },
            specialcharacters: function(value, element) {
                if((value).length > 0) {
                    return this.optional(element) || value === "NA" ||
                    value.match(/^[^!@#$%<>+=*`~"^\\?:;|/]+$/);
                } else {
                    return false;
                }
            },
            phonenumber: function(value, element) {
                return this.optional(element) || value === "NA" ||
                value.match(/^[0-9\+)(\[\]{}-]+$/);
            },
            cellnumber: function(value, element) {
                return this.optional(element) || value === "NA" ||
                value.match(/^[0-9]+$/) && (value).length >= 10;
            },
            username: function(value, element) {
                if((value).length >= 5) {
                    return this.optional(element) || value === "NA" ||
                    value.match(/^[a-zA-Z0-9]+$/);
                } else {
                    return false;
                }
            },
            fullname: function(value, element) {
                if((value).length > 0) {
                    return this.optional(element) || value === "NA" ||
                    value.match(/^[a-zA-Z\' ]+$/);
                } else {
                    return false;
                }
            },
            notStartWithSpace: function(value, element) {
                if((value).length > 0) {
                    return this.optional(element) || value === "NA" ||
                    value.match(/^([\S])+.*$/);
                } else {
                    return false;
                }
            },
            nonzeronumber: function(value, element) {
                if(value > 0) {
                    return this.optional(element) || value === "NA" ||
                    value.match(/^\+?[0-9]*\.?[0-9]+$/);
                } else {
                    return false;
                }
            },
            code: function(value, element) {
                if((value).length > 0) {
                    return this.optional(element) || value === "NA" ||
                    value.match(/^[a-zA-Z]+$/);
                } else {
                    return false;
                }
            },
            password: function(value, element) {
                if((value).length >= 5) {
                    return this.optional(element) || value === "NA" ||
                    value.match(/^[^ ]+$/);
                } else {
                    return false;
                }
            },

            // http://docs.jquery.com/Plugins/Validation/Methods/minlength
            minlength: function(value, element, param) {
                return this.optional(element) || this.getLength($.trim(value), element) >= param;
            },

            // http://docs.jquery.com/Plugins/Validation/Methods/maxlength
            maxlength: function(value, element, param) {
                return this.optional(element) || this.getLength($.trim(value), element) <= param;
            },

            // http://docs.jquery.com/Plugins/Validation/Methods/rangelength
            rangelength: function(value, element, param) {
                var length = this.getLength($.trim(value), element);
                return this.optional(element) || ( length >= param[0] && length <= param[1] );
            },

            // http://docs.jquery.com/Plugins/Validation/Methods/min
            min: function( value, element, param ) {
                return this.optional(element) || value >= param;
            },

            // http://docs.jquery.com/Plugins/Validation/Methods/max
            max: function( value, element, param ) {
                return this.optional(element) || value <= param;
            },

            // http://docs.jquery.com/Plugins/Validation/Methods/range
            range: function( value, element, param ) {
                return this.optional(element) || ( value >= param[0] && value <= param[1] );
            },

            // http://docs.jquery.com/Plugins/Validation/Methods/email
            email: function(value, element) {
                // contributed by Scott Gonzalez: http://projects.scottsplayground.com/email_address_validation/
                //return this.optional(element) || /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i.test(value);
                // return this.optional( element ) || /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test( value );
                // HB Customization
                return this.optional( element ) || /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.[a-zA-Z]{2}(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test( value );
            },
            nospace: function(value, element) {
                // contributed by Scott Gonzalez: http://projects.scottsplayground.com/email_address_validation/
                return value.indexOf(" ") < 0 && value != "";
            },

            // http://docs.jquery.com/Plugins/Validation/Methods/url
            //            url: function(value, element) {
            //                // contributed by Scott Gonzalez: http://projects.scottsplayground.com/iri/
            //                return this.optional(element) || /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(value);
            //            },


            /*url: function(value, element) {
                // contributed by Scott Gonzalez: http://projects.scottsplayground.com/iri/
                //return this.optional(element) || /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(value);
                //                return this.optional(element) || /[-a-zA-Z0-9@:%_\+.~#?&//=]{2,256}\.[a-z]{2,4}\b(\/[-a-zA-Z0-9@:%_\+.~#?&//=]*)?/gi.test(value);
                return this.optional(element) ||
                value.match(/^(http|https|ftp)\:\/\/[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(:[a-zA-Z0-9]*)?\/?([a-zA-Z0-9\-\._\?\,\'/\\\+&amp;%\$#\=~])*[^\.\,\)\(\s]$/) ||
                value.match(/^(((ht|f)tp(s?))\:\/\/)?(www.|[a-zA-Z].)[a-zA-Z0-9\-\.]+[a-zA-Z0-9/]+$/);
            },*/

            url: function(value, element) {
                // contributed by Scott Gonzalez: http://projects.scottsplayground.com/iri/
                //return this.optional(element) || /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(value);
                //return this.optional(element) || /[-a-zA-Z0-9@:%_\+.~#?&//=]{2,256}\.[a-z]{2,4}\b(\/[-a-zA-Z0-9@:%_\+.~#?&//=]*)?/gi.test(value);
                return this.optional( element ) || /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test( value );
            },


            // http://docs.jquery.com/Plugins/Validation/Methods/date
            date: function(value, element) {
                return this.optional(element) || !/Invalid|NaN/.test(new Date(value));
            },

            // http://docs.jquery.com/Plugins/Validation/Methods/dateISO
            dateISO: function(value, element) {
                return this.optional(element) || /^\d{4}[\/-]\d{1,2}[\/-]\d{1,2}$/.test(value);
            },

            // check max limit of date
            maxdate: function(value, element, param)
            {
                var val = value.toString();
                var vl = val.split('-');
                var vdt = vl[2]+'/'+vl[1]+'/'+vl[0];
                vl[0] = parseInt(vl[0],10);
                vl[1] = parseInt(vl[1],10);
                vl[2] = parseInt(vl[2],10);
                vl[1] = vl[1] - 1;
                var vdate = new Date(vl[0],vl[1],vl[2]);

                // var tday = new Date();
                var mval = $('#'+param).val().toString();
                var mvl = mval.split('-');
                var mvdt = mvl[2]+'/'+mvl[1]+'/'+mvl[0];
                mvl[0] = parseInt(mvl[0],10);
                mvl[1] = parseInt(mvl[1],10);
                mvl[2] = parseInt(mvl[2],10);
                mvl[1] = mvl[1] - 1;
                var mdate = new Date(mvl[0],mvl[1],mvl[2]);

                // alert(vdate.getTime()+'>'+mdate.getTime());
                if(vdate.getTime() < mdate.getTime()) {
                    return true;
                } else {
                    return false;
                }
            },

            // check min limit of date
            mindate: function(value, element, param)
            {
                if($.trim(value)=='' || $.trim($('#'+param).val())=='') {
                    return true;
                }

                var val = value.toString();
                var vl = val.split('-');
                var vdt = vl[2]+'/'+vl[1]+'/'+vl[0];
                vl[0] = parseInt(vl[0],10);
                vl[1] = parseInt(vl[1],10);
                vl[2] = parseInt(vl[2],10);
                vl[1] = vl[1] - 1;
                var vdate = new Date(vl[0],vl[1],vl[2]);

                // var tday = new Date();
                var mval = $('#'+param).val().toString();
                var mvl = mval.split('-');
                var mvdt = mvl[2]+'/'+mvl[1]+'/'+mvl[0];
                mvl[0] = parseInt(mvl[0],10);
                mvl[1] = parseInt(mvl[1],10);
                mvl[2] = parseInt(mvl[2],10);
                mvl[1] = mvl[1] - 1;
                var mdate = new Date(mvl[0],mvl[1],mvl[2]);

                // alert(vdate.getTime()+'>'+mdate.getTime());
                if(vdate.getTime() > mdate.getTime()) {
                    return true;
                } else {
                    return false;
                }
            },

            // http://docs.jquery.com/Plugins/Validation/Methods/number
            number: function(value, element) {
                return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:,\d{3})+)(?:\.\d+)?$/.test(value);
            },
            positive_number:function(value){
                return Number(value) > 0;
            },
            phone: function(value, element) {
                return this.optional(element) || /^[0-9\+)(-]+$/.test(value);
            //return this.optional(element) || /^\d{10,15}$/.test(value);
            },


            // http://docs.jquery.com/Plugins/Validation/Methods/digits
            digits: function(value, element) {
                return this.optional(element) || /^\d+$/.test(value);
            },
            nondecimal: function(value, element) {
                return this.optional(element) || value === "NA" ||
                value.match(/^[0-9]+$/);
            },
            alphaspace: function(value, element) {
                // contributed by Chittaranjan Nayak:
                return this.optional(element) || /^[A-Za-z0-9][A-Za-z0-9\.\-_]*$/.test(value);
            },


            alphaOnly: function(value, element) {
                return this.optional(element) || value === "NA" ||
                value.match(/^[a-zA-Z ]+$/);
            },
            countryTitle: function(value, element) {
                return this.optional(element) || value === "NA" ||
                value.match(/^[^0-9!@#$%_<>+=*`~"^\\?:;|/]+$/);
            },
            newsTitle: function(value, element) {
                return this.optional(element) || value === "NA" ||
                value.match(/^[^-!@#$%_<>+=*`~"^\\?:;|/]+$/);
            },
            alphaCode: function(value, element) {
                return this.optional(element) || value === "NA" ||
                value.match(/^[a-zA-Z]+$/);
            },

            zipCode: function(value, element) {
                return this.optional(element) || value === "NA" ||
                value.match(/^[0-9a-zA-Z ]+$/) && (value).length >= 3 && (value).length <= 10;
            },
            faxCode: function(value, element) {
                return this.optional(element) || value === "NA" ||
                value.match(/^[0-9\+)(\[\]{}-]+$/);
            },
            tollFreeCode: function(value, element) {
                return this.optional(element) || value === "NA" ||
                value.match(/^[0-9\+)(-]+$/);
            },
            url_host: function(value, element) {
                if($.trim(value)!=''){
                    url = site_url+'tools/settings/get_host';
                    $.getJSON(url,{
                        validate_url: ""+value+""
                    }, function(data) {
                        response = data.response;
                        return response;
                    });                
                }else{
                    return true;
                }
            },


            // added from outside (http://igorgladkov.com/resources/demos/jquery.validator/demos/decimal_validation.html)
            decimals: function(value, element) {
                return this.optional(element) || /^[0-9\.,]+$/.test(value);
            },

            // http://docs.jquery.com/Plugins/Validation/Methods/creditcard
            // based on http://en.wikipedia.org/wiki/Luhn
            creditcard: function(value, element) {
                if ( this.optional(element) )
                    return "dependency-mismatch";
                // accept only digits and dashes
                if (/[^0-9-]+/.test(value))
                    return false;
                var nCheck = 0,
                nDigit = 0,
                bEven = false;

                value = value.replace(/\D/g, "");

                for (var n = value.length - 1; n >= 0; n--) {
                    var cDigit = value.charAt(n);
                    var nDigit = parseInt(cDigit, 10);
                    if (bEven) {
                        if ((nDigit *= 2) > 9)
                            nDigit -= 9;
                    }
                    nCheck += nDigit;
                    bEven = !bEven;
                }

                return (nCheck % 10) == 0;
            },

            // http://docs.jquery.com/Plugins/Validation/Methods/accept
            accept: function(value, element, param) {
                param = typeof param == "string" ? param.replace(/,/g, '|') : "png|jpe?g|gif";
                return this.optional(element) || value.match(new RegExp(".(" + param + ")$", "i"));
            },

            // http://docs.jquery.com/Plugins/Validation/Methods/equalTo
            equalTo: function(value, element, param) {
                // bind to the blur event of the target in order to revalidate whenever the target field is updated
                // TODO find a way to bind the event just once, avoiding the unbind-rebind overhead
                var target = $(param).unbind(".validate-equalTo").bind("blur.validate-equalTo", function() {
                    $(element).valid();
                });
                return value == target.val();
            },
            price:function(value){
                if(Number(value) > 0) {
                    return  value.match(/^[0-9]+.[0-9]+$/)||value.match(/^[0-9]+$/);
                }
                
            },
            latlong: function(value, element) {
                return this.optional(element) || /^[0-9\.,-]+$/.test(value);
            },
            categoryname: function(value, element) {
                if((value).length > 0) {
                    return this.optional(element) || value === "NA" ||
                    value.match(/^[&a-zA-Z' ]+$/ );
                } else {
                    return false;
                }
            }

        }
    });

    // deprecated, use $.validator.format instead
    $.format = $.validator.format;

})(jQuery);

// ajax mode: abort
// usage: $.ajax({ mode: "abort"[, port: "uniqueport"]});
// if mode:"abort" is used, the previous request on that port (port can be undefined) is aborted via XMLHttpRequest.abort()
;
(function($) {
    var ajax = $.ajax;
    var pendingRequests = {};
    $.ajax = function(settings) {
        // create settings for compatibility with ajaxSetup
        settings = $.extend(settings, $.extend({}, $.ajaxSettings, settings));
        var port = settings.port;
        if (settings.mode == "abort") {
            if ( pendingRequests[port] ) {
                pendingRequests[port].abort();
            }
            return (pendingRequests[port] = ajax.apply(this, arguments));
        }
        return ajax.apply(this, arguments);
    };
})(jQuery);

// provides cross-browser focusin and focusout events
// IE has native support, in other browsers, use event caputuring (neither bubbles)

// provides delegate(type: String, delegate: Selector, handler: Callback) plugin for easier event delegation
// handler is only called when $(event.target).is(delegate), in the scope of the jquery-object for event.target
;
(function($) {
    // only implement if not provided by jQuery core (since 1.4)
    // TODO verify if jQuery 1.4's implementation is compatible with older jQuery special-event APIs
    if (!jQuery.event.special.focusin && !jQuery.event.special.focusout && document.addEventListener) {
        $.each({
            focus: 'focusin',
            blur: 'focusout'
        }, function( original, fix ){
            $.event.special[fix] = {
                setup:function() {
                    this.addEventListener( original, handler, true );
                },
                teardown:function() {
                    this.removeEventListener( original, handler, true );
                },
                handler: function(e) {
                    arguments[0] = $.event.fix(e);
                    arguments[0].type = fix;
                    return $.event.handle.apply(this, arguments);
                }
            };
            function handler(e) {
                e = $.event.fix(e);
                e.type = fix;
                return $.event.handle.call(this, e);
            }
        });
    };
    $.extend($.fn, {
        validateDelegate: function(delegate, type, handler) {

            return this.bind(type, function(event) {
                var target = $(event.target);
                if (target.is(delegate)) {
                    return handler.apply(target, arguments);
                }
            });
        }
    });
})(jQuery);
;
$(function() {
    $.validator.addMethod( "notEqualTo", function( value, element, param ) {
        return this.optional(element) || !$.validator.methods.equalTo.call( this, value, element, param );
    }, "Please enter a different value, values must not be the same." );
    $.validator.addMethod("nowhitespace", function(value, element) {
        return this.optional(element) || /^\S+$/i.test(value);
    }, "No white space please");
    
    $.validator.addMethod("alpha_with_spaces", function(value, element) {
        return this.optional(element) || /^[a-zA-Z ]+$/.test(value);
    }, "Please enter valid characters data.(space allowed)");
    $.validator.addMethod("alpha_without_spaces", function(value, element) {
        return this.optional(element) || /^[a-zA-Z]+$/.test(value);
    }, "Please enter valid characters only.");

    $.validator.addMethod("alpha_numeric_with_spaces", function(value, element) {
        return this.optional(element) || /^[0-9a-zA-Z ]+$/.test(value);
    }, "Please enter alpha numeric characters (space allowed).");
    $.validator.addMethod("alpha_numeric_without_spaces", function(value, element) {
        return this.optional(element) || /^[0-9a-zA-Z]+$/.test(value);
    }, "Please enter alpha numeric characters only.");

    $.validator.addMethod("alpha_without_special_chars", function(value, element) {
        return this.optional(element) || /^[a-zA-Z _-]+$/.test(value);
    }, "Please enter valid characters without special characters.");
    $.validator.addMethod("alpha_numeric_without_special_chars", function(value, element) {
        return this.optional(element) || /^[0-9a-zA-Z _-]+$/.test(value);
    }, "Please enter alpha numeric characters without special character.");
    
    $.validator.addMethod("phone_number", function(value, element) {
        return this.optional(element) || /^([(]{1}[0-9]{3}[)]{1}[.| |-]{0,1}|^[0-9]{3}[.|-| ]?)?[0-9]{3}(.|-| )?[0-9]{4}$/.test(value);
    }, "Please enter valid phone numer.");
    $.validator.addMethod("zip_code", function(value, element) {
        return this.optional(element) || /^(?:[A-Z0-9]+([- ]?[A-Z0-9]+)*)?$/.test(value);
    }, "Please enter valid zip code.");
    $.validator.addMethod("credit_card", function(value, element) {
        return this.optional(element) || /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35d{3})d{11})$/.test(value);
    }, "Please enter valid credit card number.");
    
    $.validator.addMethod("maxWords", function(value, element, params) {
        return this.optional(element) || stripHtml(value).match(/\b\w+\b/g).length <= params;
    }, $.validator.format("Please enter {0} words or less."));
    $.validator.addMethod("minWords", function(value, element, params) {
        return this.optional(element) || stripHtml(value).match(/\b\w+\b/g).length >= params;
    }, $.validator.format("Please enter at least {0} words."));
    $.validator.addMethod("rangeWords", function(value, element, params) {
        var valueStripped = stripHtml(value),
            regex = /\b\w+\b/g;
        return this.optional(element) || valueStripped.match(regex).length >= params[0] && valueStripped.match(regex).length <= params[1];
    }, $.validator.format("Please enter between {0} and {1} words."));

    $.validator.addMethod("ip_address", function(value, element) {
        return this.optional(element) || /^(1?d{1,2}|2([0-4]d|5[0-5]))(.(1?d{1,2}|2([0-4]d|5[0-5]))){3}$/.test(value);
    }, "Please enter valid ip address.");
    $.validator.addMethod("ipv4", function(value, element) {
        return this.optional(element) || /^(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)$/i.test(value);
    }, "Please enter a valid IP v4 address.");
    $.validator.addMethod("ipv6", function(value, element) {
        return this.optional(element) || /^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$/i.test(value);
    }, "Please enter a valid IP v6 address.");
});;
(function(n){jQuery.fn.extend({elastic:function(){var e="paddingTop paddingRight paddingBottom paddingLeft fontSize lineHeight fontFamily width fontWeight border-top-width border-right-width border-bottom-width border-left-width borderTopStyle borderTopColor borderRightStyle borderRightColor borderBottomStyle borderBottomColor borderLeftStyle borderLeftColor".split(" ");return this.each(function(){function l(){var d=Math.floor(parseInt(a.width(),10));b.width()!==d&&(b.css({width:d+"px"}),c(!0))}function g(d,
b){var c=Math.floor(parseInt(d,10));a.height()!==c&&a.css({height:c+"px",overflow:b})}function c(d){var c=a.val().replace(/&/g,"&amp;").replace(/ {2}/g,"&nbsp;").replace(/<|>/g,"&gt;").replace(/\n/g,"<br />"),e=b.html().replace(/<br>/ig,"<br />");if(d||c+"&nbsp;"!==e)b.html(c+"&nbsp;"),3<Math.abs(b.height()+h-a.height())&&(d=b.height()+h,d>=f?g(f,"auto"):d<=m?g(m,"hidden"):g(d,"hidden"))}if("textarea"!==this.type)return!1;var a=jQuery(this),b=jQuery("<div />").css({position:"absolute",display:"none",
"word-wrap":"break-word","white-space":"pre-wrap"}),h=parseInt(a.css("line-height"),10)||parseInt(a.css("font-size"),"10"),m=parseInt(a.css("height"),10)||3*h,f=parseInt(a.css("max-height"),10)||Number.MAX_VALUE;0>f&&(f=Number.MAX_VALUE);b.appendTo(a.parent());for(var k=e.length;k--;)b.css(e[k].toString(),a.css(e[k].toString()));a.css({overflow:"hidden"});a.bind("keyup change cut paste",function(){c()});n(window).bind("resize",l);a.bind("resize",l);a.bind("update",c);a.bind("blur",function(){b.height()<
f&&b.height()});a.bind("input paste",function(a){setTimeout(c,250)});c()})}})})(jQuery);;
(function(l,e,b){function m(a){var d={},c=/^jQuery\d+$/;b.each(a.attributes,function(a,b){b.specified&&!c.test(b.name)&&(d[b.name]=b.value)});return d}function f(){var a=b(this);a.val()===a.attr("placeholder")&&a.hasClass("placeholder")&&(a.data("placeholder-password")?a.hide().next().show().focus().attr("id",a.removeAttr("id").data("placeholder-id")):a.val("").removeClass("placeholder"))}function h(){var a,d=b(this),c=this.id;if(""===d.val()){if(d.is(":password")){if(!d.data("placeholder-textinput")){try{a=
d.clone().attr({type:"text"})}catch(e){a=b("<input>").attr(b.extend(m(this),{type:"text"}))}a.removeAttr("name").data("placeholder-password",!0).data("placeholder-id",c).bind("focus.placeholder",f);d.data("placeholder-textinput",a).data("placeholder-id",c).before(a)}d=d.removeAttr("id").hide().prev().attr("id",c).show()}d.addClass("placeholder").val(d.attr("placeholder"))}else d.removeClass("placeholder")}var g="placeholder"in e.createElement("input"),k="placeholder"in e.createElement("textarea"),
c=b.fn;g&&k?(c=c.placeholder=function(){return this},c.input=c.textarea=!0):(c=c.placeholder=function(){return this.filter((g?"textarea":":input")+"[placeholder]").not(".placeholder").bind("focus.placeholder",f).bind("blur.placeholder",h).trigger("blur.placeholder").end()},c.input=g,c.textarea=k,b(function(){b(e).delegate("form","submit.placeholder",function(){var a=b(".placeholder",this).each(f);setTimeout(function(){a.each(h)},10)})}),b(l).bind("unload.placeholder",function(){b(".placeholder").val("")}))})(this,
document,jQuery);;
(function(c){c.fn.inputlimiter=function(d){var a=c.extend({},c.fn.inputlimiter.defaults,d);c(this);a.boxAttach&&!c("#"+a.boxId).length&&(c("<div/>").appendTo("body").attr({id:a.boxId,"class":a.boxClass}).css({position:"absolute"}).hide(),c.fn.bgiframe&&c("#"+a.boxId).bgiframe());var e=function(b){b=c(this);var d=f(b.val());!a.allowExceed&&d>a.limit&&b.val(g(b.val()));a.boxAttach&&c("#"+a.boxId).css({width:b.outerWidth()-(c("#"+a.boxId).outerWidth()-c("#"+a.boxId).width())+"px",left:b.offset().left+
"px",top:b.offset().top+b.outerHeight()-1+"px","z-index":2E3});b=a.remTextFilter(a,0<a.limit-d?a.limit-d:0);d=a.limitTextFilter(a);if(a.limitTextShow){c("#"+a.boxId).html(b+" "+d);var e=c("<span/>").appendTo("body").attr({id:"19cc9195583bfae1fad88e19d443be7a","class":a.boxClass}).html(b+" "+d).innerWidth();c("#19cc9195583bfae1fad88e19d443be7a").remove();e>c("#"+a.boxId).innerWidth()&&c("#"+a.boxId).html(b+"<br />"+d);c("#"+a.boxId).show()}else c("#"+a.boxId).html(b).show()},h=function(b){var d=f(c(this).val());
if(!a.allowExceed&&d>a.limit&&!(b.ctrlKey||b.altKey||b.metaKey)&&32<=b.which&&122>=b.which&&this.selectionStart===this.selectionEnd)return!1},k=function(){var b=c(this);count=f(b.val());!a.allowExceed&&count>a.limit&&b.val(g(b.val()));a.boxAttach?c("#"+a.boxId).fadeOut("fast"):a.remTextHideOnBlur&&(b=a.limitText,b=b.replace(/\%n/g,a.limit),b=b.replace(/\%s/g,1===a.limit?"":"s"),c("#"+a.boxId).html(b))},f=function(b){return"words"===a.limitBy.toLowerCase()?0<b.length?c.trim(b).replace(/\ +(?= )/g,
"").split(" ").length:0:b.length},g=function(b){return"words"===a.limitBy.toLowerCase()?c.trim(b).replace(/\ +(?= )/g,"").split(" ").splice(0,a.limit).join(" ")+" ":b.substring(0,a.limit)};c(this).each(function(b){b=c(this);(!d||!d.limit)&&a.useMaxlength&&0<parseInt(b.attr("maxlength"))&&parseInt(b.attr("maxlength"))!=a.limit?b.inputlimiter(c.extend({},a,{limit:parseInt(b.attr("maxlength"))})):(!a.allowExceed&&a.useMaxlength&&"characters"===a.limitBy.toLowerCase()&&b.attr("maxlength",a.limit),b.unbind(".inputlimiter"),
b.bind("keyup.inputlimiter",e),b.bind("keypress.inputlimiter",h),b.bind("blur.inputlimiter",k))})};c.fn.inputlimiter.remtextfilter=function(c,a){var e=c.remText;0===a&&null!==c.remFullText&&(e=c.remFullText);e=e.replace(/\%n/g,a);return e=e.replace(/\%s/g,c.zeroPlural?1===a?"":"s":1>=a?"":"s")};c.fn.inputlimiter.limittextfilter=function(c){var a=c.limitText,a=a.replace(/\%n/g,c.limit);return a=a.replace(/\%s/g,1>=c.limit?"":"s")};c.fn.inputlimiter.defaults={limit:255,boxAttach:!0,boxId:"limiterBox",
boxClass:"limiterBox",remText:"%n character%s remaining.",remTextFilter:c.fn.inputlimiter.remtextfilter,remTextHideOnBlur:!0,remFullText:null,limitTextShow:!0,limitText:"Field limited to %n character%s.",limitTextFilter:c.fn.inputlimiter.limittextfilter,zeroPlural:!0,allowExceed:!1,useMaxlength:!0,limitBy:"characters"}})(jQuery);;
(function(c){c.widget("ui.pattern",c.ui.mouse,{widgetEventPrefix:"pattern",options:{arrowCorrectImage:"",arrowIncorrectImage:"",clearDelay:200,gridSize:3,lineColor:"#888",lineOpacity:.5,lineWidth:20,multiSelect:!1,showPattern:!0,preDefinedPattern:[],showLines:!0},_create:function(){var a;this.element.addClass("ui-pattern ui-widget");!0===this.options.disabled?this.element.addClass("ui-state-disabled"):this.element.addClass("ui-state-default");(a=c("<canvas></canvas>"))&&a[0].getContext&&(a.addClass("ui-patter-line-container").css({opacity:this.options.lineOpacity}).appendTo(this.element),
this._linecontainer=a,this._canvasSupported=!0);this._nodecontainer=c("<div></div>").addClass("ui-patter-node-container").appendTo(this.element);!0===this._canvasSupported&&(this._arrowcontainer=c("<canvas></canvas>").addClass("ui-patter-arrow-container").appendTo(this.element));this._pattern=[];this._cachedCoordinates=[];this._previousNode=this._timer=null;this._createGrid();this._setArrowCorrect();this._setArrowIncorrect();this.options.distance=0;this._mouseInit()},destroy:function(){this.element.unbind("."+
this.widgetName).removeClass("ui-pattern ui-widget ui-state-default ui-state-disabled").children().remove();this._mouseDestroy();return this},_setOption:function(a,b){c.Widget.prototype._setOption.apply(this,arguments);switch(a){case "lineOpacity":!0===this._canvasSupported&&this._linecontainer.css("opacity",this.options.lineOpacity);break;case "gridSize":this._clear();this._createGrid();break;case "disabled":!0===b?(this._clear(),this.element.addClass("ui-state-disabled").removeClass("ui-state-default")):
this.element.addClass("ui-state-default").removeClass("ui-state-disabled");break;case "arrowCorrectImage":this._setArrowCorrect();break;case "arrowIncorrectImage":this._setArrowIncorrect()}},_mouseDrag:function(a){var b,d=this;if(!0!==this._started)return!1;b=this.element.find(".ui-pattern-node").filter(function(){return this!==d._previousNode[0]&&(!0===d.options.multiSelect||"selected"!==c(this).attr("selected"))}).hitTest(a.pageX-this._nodecontainer.offset().left,a.pageY-this._nodecontainer.offset().top);
b.length&&this._selectNode(c(b[0]),a);!0===this.options.showPattern&&this._drawLines(a);return!1},_mouseStart:function(a){this._clear();var b;if(!0===this.options.disabled||!0===this._waitingForClear)return!1;b=this.element.find(".ui-pattern-node").hitTest(a.pageX-this._nodecontainer.offset().left,a.pageY-this._nodecontainer.offset().top);b.length&&(this._start(),this._selectNode(c(b[0]),a));return!0},_mouseStop:function(a){this._stop(a)},_clear:function(){null!==this._timer&&(clearTimeout(this._timer),
this._timer=null);this._waitingForClear=this._started=!1;this._pattern=[];this._cachedCoordinates=[];this._previousNode=null;this.element.find(".ui-pattern-node").filter(function(){return"selected"===c(this).attr("selected")}).removeClass("ui-pattern-selected ui-pattern-correct ui-pattern-incorrect").removeAttr("selected");this._clearLines();this._clearArrows();this._setCanvasWidth()},_clearArrows:function(){var a;!0===this._canvasSupported&&(a=this._arrowcontainer[0].getContext("2d"),a.clearRect(0,
0,this._arrowcontainer[0].width,this._arrowcontainer[0].height))},_clearLines:function(){var a;!0===this._canvasSupported&&(a=this._linecontainer[0].getContext("2d"),a.clearRect(0,0,this._linecontainer[0].width,this._linecontainer[0].height))},_createGrid:function(){var a,b,d;this.temp_node=[];this._nodecontainer.children().remove();for(a=0;a<this.options.gridSize;a++){d=c("<div></div>").addClass("ui-pattern-row");for(b=0;b<this.options.gridSize;b++)this.temp_node.push(this._createNode(b,a).appendTo(d));
this._nodecontainer.append(d)}},drawPredefinedPattern:function(){var a=this.temp_node;for(y=0;y<this.options.preDefinedPattern.length;y++)node_no=this.options.preDefinedPattern[y]-1,this._cachedCoordinates.push({x:a[node_no].position().left+a[node_no].outerWidth(!0)/2,y:a[node_no].position().top+a[node_no].outerHeight(!0)/2}),a[node_no].addClass("ui-pattern-selected"),a[node_no].attr("selected","selected");this._clearLines();this._drawLines(!0)},_createNode:function(a,b){var d=this;return c("<a></a>").attr("href",
"#").data("x.ui-pattern-node",a).data("y.ui-pattern-node",b).addClass("ui-pattern-node").click(function(a){a.preventDefault()}).hover(function(){!0!==d.options.disabled&&c(this).addClass("ui-state-hover")},function(){c(this).removeClass("ui-state-hover")}).focus(function(){!0!==d.options.disabled?(c(".ui-pattern-node .ui-state-focus").removeClass("ui-state-focus"),c(this).addClass("ui-state-focus")):c(this).blur()}).blur(function(){c(this).removeClass("ui-state-focus")}).keydown(function(a){var b,
g=parseInt(c(this).data("x.ui-pattern-node"),10),f=parseInt(c(this).data("y.ui-pattern-node"),10);a.keyCode===c.ui.keyCode.UP?0<f&&(b=d.element.find(".ui-pattern-node").filter(function(){return parseInt(c(this).data("x.ui-pattern-node"),10)===g&&parseInt(c(this).data("y.ui-pattern-node"),10)===f-1}),b.focus(),a.preventDefault()):a.keyCode===c.ui.keyCode.DOWN?f<d.options.gridSize-1&&(b=d.element.find(".ui-pattern-node").filter(function(){return parseInt(c(this).data("x.ui-pattern-node"),10)===g&&parseInt(c(this).data("y.ui-pattern-node"),
10)===f+1}),b.focus(),a.preventDefault()):a.keyCode===c.ui.keyCode.LEFT?0<g&&(b=d.element.find(".ui-pattern-node").filter(function(){return parseInt(c(this).data("x.ui-pattern-node"),10)===g-1&&parseInt(c(this).data("y.ui-pattern-node"),10)===f}),b.focus(),a.preventDefault()):a.keyCode===c.ui.keyCode.RIGHT?g<d.options.gridSize-1&&(b=d.element.find(".ui-pattern-node").filter(function(){return parseInt(c(this).data("x.ui-pattern-node"),10)===g+1&&parseInt(c(this).data("y.ui-pattern-node"),10)===f}),
b.focus(),a.preventDefault()):a.keyCode===c.ui.keyCode.SPACE?!0!==d.options.disabled&&!0!==d._waitingForClear&&(b=d.element.find(".ui-pattern-node").filter(function(){return"selected"===c(this).attr("selected")}),b.length||d._start(),d._previousNode&&this===d._previousNode[0]||!0!==d.options.multiSelect&&"selected"===c(this).attr("selected")||(d._selectNode(c(this),a),!0===d.options.showPattern&&d._drawLines(null),a.preventDefault())):a.keyCode===c.ui.keyCode.ENTER&&!0!==d.options.disabled&&!0!==
d._waitingForClear&&(b=d.element.find(".ui-pattern-node").filter(function(){return"selected"===c(this).attr("selected")}),b.length&&d._stop(a))})},_drawArrow:function(a,b,d){var h=-Math.atan2(-(b.x-a.x),-(b.y-a.y));!0!==this._canvasSupported||null===d||void 0===d||!0===d&&null===this._arrowCorrect||!1===d&&null===this._arrowIncorrect||(b=this._arrowcontainer[0].getContext("2d"),d=!0===d?c(this._arrowCorrect):c(this._arrowIncorrect),b.translate(a.x,a.y),b.rotate(h),b.drawImage(d[0],-(d.attr("width")/
2),-(d.attr("height")/2)),b.rotate(-h),b.translate(-a.x,-a.y))},_drawArrows:function(a){var b;if(!0===this._canvasSupported&&(this._clearArrows(),!(null===a||void 0===a||!0===a&&null===this._arrowCorrect||!1===a&&null===this._arrowIncorrect)))for(b=1;b<this._cachedCoordinates.length;b++)this._drawArrow(this._cachedCoordinates[b-1],this._cachedCoordinates[b],a)},_drawLines:function(a){var b,d,c,e;if(!0===this._canvasSupported&&(this._clearLines(),this._cachedCoordinates.length)){b=this._linecontainer[0].getContext("2d");
b.beginPath();for(d=1;d<this._cachedCoordinates.length;d++)c=this._cachedCoordinates[d-1],e=this._cachedCoordinates[d],b.moveTo(c.x,c.y),b.lineTo(e.x,e.y);a&&(b.moveTo(this._cachedCoordinates[this._cachedCoordinates.length-1].x,this._cachedCoordinates[this._cachedCoordinates.length-1].y),b.lineTo(a.pageX-this._linecontainer.offset().left,a.pageY-this._linecontainer.offset().top));b.lineCap="round";b.lineJoin="round";b.lineWidth=this.options.lineWidth;b.strokeStyle=this.options.lineColor;b.stroke();
b.closePath()}},_getNode:function(a,b,d,h){var e;a+=d;b+=h;e=this.element.find(".ui-pattern-node").filter(function(){return parseInt(c(this).data("x.ui-pattern-node"),10)===a&&parseInt(c(this).data("y.ui-pattern-node"),10)===b});return!0!==this.options.multiSelect&&"selected"===e.attr("selected")?this._getNode(a,b,d,h):e},_selectNode:function(a,b){var d,c,e,g=this._previousNode,f=parseInt(a.data("x.ui-pattern-node"),10),k=parseInt(a.data("y.ui-pattern-node"),10);null!==g&&(d=parseInt(g.data("x.ui-pattern-node"),
10),c=parseInt(g.data("y.ui-pattern-node"),10),f===d?e=k>c?this._getNode(f,c,0,1):this._getNode(f,c,0,-1):k===c?e=f>d?this._getNode(d,k,1,0):this._getNode(d,k,-1,0):k-f===c-d?e=k>c?this._getNode(d,c,1,1):this._getNode(d,c,-1,-1):k+f===c+d&&(e=f>d?this._getNode(d,c,1,-1):this._getNode(d,c,-1,1)),e&&e[0]!==a[0]&&this._selectNode(e,b));g!==this._previousNode?this._selectNode(a,b):(this._previousNode=a,a.attr("selected","selected"),this._pattern.push(k*this.options.gridSize+f+1),!0===this.options.showPattern&&
a.addClass("ui-pattern-selected"),this._cachedCoordinates.length&&!0===this.options.showPattern&&this._drawArrow(this._cachedCoordinates[this._cachedCoordinates.length-1],{x:a.position().left+a.outerWidth(!0)/2,y:a.position().top+a.outerHeight(!0)/2},!0),this._cachedCoordinates.push({x:a.position().left+a.outerWidth(!0)/2,y:a.position().top+a.outerHeight(!0)/2}),this._trigger("change",b,{pattern:this._pattern}))},_setArrowCorrect:function(){this._arrowCorrect=null!==this.options.arrowCorrectImage&&
void 0!==this.options.arrowCorrectImage?c("<img/>").attr("src",this.options.arrowCorrectImage):null},_setArrowIncorrect:function(){this._arrowIncorrect=null!==this.options.arrowIncorrectImage&&void 0!==this.options.arrowIncorrectImage?c("<img/>").attr("src",this.options.arrowIncorrectImage):null},_setCanvasWidth:function(){var a,b=200,d=200;!0===this._canvasSupported&&(a=this.element.find(".ui-pattern-node"),a.length&&(b=c(a[0]).outerWidth(!0)*this.options.gridSize,d=c(a[0]).outerHeight(!0)*this.options.gridSize),
this._arrowcontainer[0].width=this._linecontainer[0].width=b,this._arrowcontainer[0].height=this._linecontainer[0].height=d)},_start:function(a){this._clear();this._trigger("start",a);this._started=!0},_stop:function(a){this._waitingForClear=!0;this._started=!1;!0===this.options.showPattern&&this._drawLines();this._trigger("stop",a,{pattern:this._pattern})},clearPattern:function(a){var b,d=this;this._waitingForClear=!1;if(!1===a||!0===this.options.showPattern)b=!0===a?"ui-pattern-correct":"ui-pattern-incorrect",
this.element.find(".ui-pattern-node").filter(function(){return"selected"===c(this).attr("selected")}).removeClass("ui-pattern-selected").addClass(b),this._drawLines(),this._drawArrows(a);this._cachedCoordinates=[];this._timer=setTimeout(function(){!0!==d._started&&d._clear()},this.options.clearDelay)},pattern:function(){return this._pattern},getPreDefinedPattern:function(){return this.options.preDefinedPattern}});c.extend(c.ui.pattern,{version:"@VERSION"});c.fn.hitTest=function(a,b){var d=[];this.each(function(){var h=
c(this).position(),e=parseInt(c(this).css("margin-left"),10)||0,g=parseInt(c(this).css("margin-top"),10)||0;h.left+e<=a&&h.left+e+c(this).outerWidth()>=a&&h.top+g<=b&&h.top+g+c(this).outerHeight()>=b&&d.push(this)});return d}})(jQuery);;
(function(b){function w(a){var h=a.data;a.isDefaultPrevented()||(a.preventDefault(),b(this).ajaxSubmit(h))}function C(a){var h=a.target,d=b(h);if(!d.is("[type=submit],[type=image]")){h=d.closest("[type=submit]");if(0===h.length)return;h=h[0]}var c=this;c.clk=h;"image"==h.type&&(void 0!==a.offsetX?(c.clk_x=a.offsetX,c.clk_y=a.offsetY):"function"==typeof b.fn.offset?(d=d.offset(),c.clk_x=a.pageX-d.left,c.clk_y=a.pageY-d.top):(c.clk_x=a.pageX-h.offsetLeft,c.clk_y=a.pageY-h.offsetTop));setTimeout(function(){c.clk=
c.clk_x=c.clk_y=null},100)}function t(){if(b.fn.ajaxSubmit.debug){var a="[jquery.form] "+Array.prototype.join.call(arguments,"");window.console&&window.console.log?window.console.log(a):window.opera&&window.opera.postError&&window.opera.postError(a)}}var D=void 0!==b("<input type='file'/>").get(0).files;var F=void 0!==window.FormData;b.fn.ajaxSubmit=function(a){function h(a){a=b.param(a).split("&");var c=a.length,h=[],d;for(d=0;d<c;d++){a[d]=a[d].replace(/\+/g," ");var e=a[d].split("=");h.push([decodeURIComponent(e[0]),
decodeURIComponent(e[1])])}return h}function d(c){for(var d=new FormData,e=0;e<c.length;e++)d.append(c[e].name,c[e].value);if(a.extraData)for(c=h(a.extraData),e=0;e<c.length;e++)c[e]&&d.append(c[e][0],c[e][1]);a.data=null;e=b.extend(!0,{},b.ajaxSettings,a,{contentType:!1,processData:!1,cache:!1,type:m||"POST"});a.uploadProgress&&(e.xhr=function(){var b=jQuery.ajaxSettings.xhr();b.upload&&b.upload.addEventListener("progress",function(b){var c=0,e=b.loaded||b.position,d=b.total;b.lengthComputable&&
(c=Math.ceil(e/d*100));a.uploadProgress(b,e,d,c)},!1);return b});e.data=null;var g=e.beforeSend;e.beforeSend=function(a,b){b.data=d;g&&g.call(this,a,b)};return b.ajax(e)}function c(c){function d(){function a(){try{var b=(r.contentWindow?r.contentWindow.document:r.contentDocument?r.contentDocument:r.document).readyState;t("state = "+b);b&&"uninitialized"==b.toLowerCase()&&setTimeout(a,50)}catch(H){t("Server abort: ",H," (",H.name,")"),h(2),v&&clearTimeout(v),v=void 0}}var c=e.attr("target"),d=e.attr("action");
g.setAttribute("target",w);m||g.setAttribute("method","POST");d!=f.url&&g.setAttribute("action",f.url);f.skipEncodingOverride||m&&!/post/i.test(m)||e.attr({encoding:"multipart/form-data",enctype:"multipart/form-data"});f.timeout&&(v=setTimeout(function(){q=!0;h(1)},f.timeout));var k=[];try{if(f.extraData)for(var l in f.extraData)f.extraData.hasOwnProperty(l)&&(b.isPlainObject(f.extraData[l])&&f.extraData[l].hasOwnProperty("name")&&f.extraData[l].hasOwnProperty("value")?k.push(b('<input type="hidden" name="'+
f.extraData[l].name+'">').val(f.extraData[l].value).appendTo(g)[0]):k.push(b('<input type="hidden" name="'+l+'">').val(f.extraData[l]).appendTo(g)[0]));f.iframeTarget||(z.appendTo("body"),r.attachEvent?r.attachEvent("onload",h):r.addEventListener("load",h,!1));setTimeout(a,15);try{g.submit()}catch(J){document.createElement("form").submit.apply(g)}}finally{g.setAttribute("action",d),c?g.setAttribute("target",c):e.removeAttr("target"),b(k).remove()}}function h(a){if(!k.aborted&&!G){try{u=r.contentWindow?
r.contentWindow.document:r.contentDocument?r.contentDocument:r.document}catch(B){t("cannot access response document: ",B),a=2}if(1===a&&k)k.abort("timeout"),y.reject(k,"timeout");else if(2==a&&k)k.abort("server abort"),y.reject(k,"error","server abort");else if(u&&u.location.href!=f.iframeSrc||q){r.detachEvent?r.detachEvent("onload",h):r.removeEventListener("load",h,!1);a="success";var c;try{if(q)throw"timeout";var d="xml"==f.dataType||u.XMLDocument||b.isXMLDoc(u);t("isXml="+d);if(!d&&window.opera&&
(null===u.body||!u.body.innerHTML)&&--C){t("requeing onLoad callback, DOM not available");setTimeout(h,250);return}var e=u.body?u.body:u.documentElement;k.responseText=e?e.innerHTML:null;k.responseXML=u.XMLDocument?u.XMLDocument:u;d&&(f.dataType="xml");k.getResponseHeader=function(a){return{"content-type":f.dataType}[a]};e&&(k.status=Number(e.getAttribute("status"))||k.status,k.statusText=e.getAttribute("statusText")||k.statusText);var g=(f.dataType||"").toLowerCase(),l=/(json|script|text)/.test(g);
if(l||f.textarea){var m=u.getElementsByTagName("textarea")[0];if(m)k.responseText=m.value,k.status=Number(m.getAttribute("status"))||k.status,k.statusText=m.getAttribute("statusText")||k.statusText;else if(l){var E=u.getElementsByTagName("pre")[0],p=u.getElementsByTagName("body")[0];E?k.responseText=E.textContent?E.textContent:E.innerText:p&&(k.responseText=p.textContent?p.textContent:p.innerText)}}else"xml"==g&&!k.responseXML&&k.responseText&&(k.responseXML=D(k.responseText));try{A=I(k,g,f)}catch(B){a=
"parsererror",k.error=c=B||a}}catch(B){t("error caught: ",B),a="error",k.error=c=B||a}k.aborted&&(t("upload aborted"),a=null);k.status&&(a=200<=k.status&&300>k.status||304===k.status?"success":"error");"success"===a?(f.success&&f.success.call(f.context,A,"success",k),y.resolve(k.responseText,"success",k),n&&b.event.trigger("ajaxSuccess",[k,f])):a&&(void 0===c&&(c=k.statusText),f.error&&f.error.call(f.context,k,a,c),y.reject(k,"error",c),n&&b.event.trigger("ajaxError",[k,f,c]));n&&b.event.trigger("ajaxComplete",
[k,f]);n&&!--b.active&&b.event.trigger("ajaxStop");f.complete&&f.complete.call(f.context,k,a);G=!0;f.timeout&&clearTimeout(v);setTimeout(function(){f.iframeTarget||z.remove();k.responseXML=null},100)}}}var g=e[0],l,n,q,v;var x=!!b.fn.prop;var y=b.Deferred();if(c)for(l=0;l<p.length;l++)c=b(p[l]),x?c.prop("disabled",!1):c.removeAttr("disabled");var f=b.extend(!0,{},b.ajaxSettings,a);f.context=f.context||f;var w="jqFormIO"+(new Date).getTime();if(f.iframeTarget){var z=b(f.iframeTarget);(c=z.attr("name"))?
w=c:z.attr("name",w)}else z=b('<iframe name="'+w+'" src="'+f.iframeSrc+'" />'),z.css({position:"absolute",top:"-1000px",left:"-1000px"});var r=z[0];var k={aborted:0,responseText:null,responseXML:null,status:0,statusText:"n/a",getAllResponseHeaders:function(){},getResponseHeader:function(){},setRequestHeader:function(){},abort:function(a){var c="timeout"===a?"timeout":"aborted";t("aborting upload... "+c);this.aborted=1;try{r.contentWindow.document.execCommand&&r.contentWindow.document.execCommand("Stop")}catch(K){}z.attr("src",
f.iframeSrc);k.error=c;f.error&&f.error.call(f.context,k,c,a);n&&b.event.trigger("ajaxError",[k,f,c]);f.complete&&f.complete.call(f.context,k,c)}};(n=f.global)&&0===b.active++&&b.event.trigger("ajaxStart");n&&b.event.trigger("ajaxSend",[k,f]);if(f.beforeSend&&!1===f.beforeSend.call(f.context,k,f))return f.global&&b.active--,y.reject(),y;if(k.aborted)return y.reject(),y;(x=g.clk)&&(c=x.name)&&!x.disabled&&(f.extraData=f.extraData||{},f.extraData[c]=x.value,"image"==x.type&&(f.extraData[c+".x"]=g.clk_x,
f.extraData[c+".y"]=g.clk_y));x=b("meta[name=csrf-token]").attr("content");(c=b("meta[name=csrf-param]").attr("content"))&&x&&(f.extraData=f.extraData||{},f.extraData[c]=x);f.forceSync?d():setTimeout(d,10);var A,u,C=50,G,D=b.parseXML||function(a,b){window.ActiveXObject?(b=new ActiveXObject("Microsoft.XMLDOM"),b.async="false",b.loadXML(a)):b=(new DOMParser).parseFromString(a,"text/xml");return b&&b.documentElement&&"parsererror"!=b.documentElement.nodeName?b:null},F=b.parseJSON||function(a){return window.eval("("+
a+")")},I=function(a,c,e){var f=a.getResponseHeader("content-type")||"",d="xml"===c||!c&&0<=f.indexOf("xml");a=d?a.responseXML:a.responseText;d&&"parsererror"===a.documentElement.nodeName&&b.error&&b.error("parsererror");e&&e.dataFilter&&(a=e.dataFilter(a,c));"string"===typeof a&&("json"===c||!c&&0<=f.indexOf("json")?a=F(a):("script"===c||!c&&0<=f.indexOf("javascript"))&&b.globalEval(a));return a};return y}if(!this.length)return t("ajaxSubmit: skipping submit process - no element selected"),this;
var e=this;"function"==typeof a&&(a={success:a});var m=this.attr("method");var g=this.attr("action");(g=(g="string"===typeof g?b.trim(g):"")||window.location.href||"")&&(g=(g.match(/^([^#]+)/)||[])[1]);a=b.extend(!0,{url:g,success:b.ajaxSettings.success,type:m||"GET",iframeSrc:/^https/i.test(window.location.href||"")?"javascript:false":"about:blank"},a);g={};this.trigger("form-pre-serialize",[this,a,g]);if(g.veto)return t("ajaxSubmit: submit vetoed via form-pre-serialize trigger"),this;if(a.beforeSerialize&&
!1===a.beforeSerialize(this,a))return t("ajaxSubmit: submit aborted via beforeSerialize callback"),this;var n=a.traditional;void 0===n&&(n=b.ajaxSettings.traditional);var p=[],l=this.formToArray(a.semantic,p);if(a.data){a.extraData=a.data;var q=b.param(a.data,n)}if(a.beforeSubmit&&!1===a.beforeSubmit(l,this,a))return t("ajaxSubmit: submit aborted via beforeSubmit callback"),this;this.trigger("form-submit-validate",[l,this,a,g]);if(g.veto)return t("ajaxSubmit: submit vetoed via form-submit-validate trigger"),
this;g=b.param(l,n);q&&(g=g?g+"&"+q:q);"GET"==a.type.toUpperCase()?(a.url+=(0<=a.url.indexOf("?")?"&":"?")+g,a.data=null):a.data=g;var v=[];a.resetForm&&v.push(function(){e.resetForm()});a.clearForm&&v.push(function(){e.clearForm(a.includeHidden)});if(!a.dataType&&a.target){var w=a.success||function(){};v.push(function(c){var e=a.replaceTarget?"replaceWith":"html";b(a.target)[e](c).each(w,arguments)})}else a.success&&v.push(a.success);a.success=function(b,c,d){"1"!==d.getResponseHeader("Cit-auth-requires")&&
"1"!==d.getResponseHeader("Cit-db-error")||handleAjaxSubmitErrors(d);for(var h=a.context||this,g=0,l=v.length;g<l;g++)v[g].apply(h,[b,c,d||e,e])};q=0<b('input[type=file]:enabled[value!=""]',this).length;g="multipart/form-data"==e.attr("enctype")||"multipart/form-data"==e.attr("encoding");n=D&&F;t("fileAPI :"+n);var A;!1!==a.iframe&&(a.iframe||(q||g)&&!n)?a.closeKeepAlive?b.get(a.closeKeepAlive,function(){A=c(l)}):A=c(l):A=(q||g)&&n?d(l):b.ajax(a);e.removeData("jqxhr").data("jqxhr",A);for(q=0;q<p.length;q++)p[q]=
null;this.trigger("form-submit-notify",[this,a]);return this};b.fn.ajaxForm=function(a){a=a||{};a.delegation=a.delegation&&b.isFunction(b.fn.on);if(!a.delegation&&0===this.length){var h=this.selector,d=this.context;if(!b.isReady&&h)return t("DOM not ready, queuing ajaxForm"),b(function(){b(h,d).ajaxForm(a)}),this;t("terminating; zero elements found by selector"+(b.isReady?"":" (DOM not ready)"));return this}return a.delegation?(b(document).off("submit.form-plugin",this.selector,w).off("click.form-plugin",
this.selector,C).on("submit.form-plugin",this.selector,a,w).on("click.form-plugin",this.selector,a,C),this):this.ajaxFormUnbind().bind("submit.form-plugin",a,w).bind("click.form-plugin",a,C)};b.fn.ajaxFormUnbind=function(){return this.unbind("submit.form-plugin click.form-plugin")};b.fn.formToArray=function(a,h){var d=[];if(0===this.length)return d;var c=this[0],e=a?c.getElementsByTagName("*"):c.elements;if(!e)return d;var m,g,n;var p=0;for(n=e.length;p<n;p++){var l=e[p];if(m=l.name)if(a&&c.clk&&
"image"==l.type)l.disabled||c.clk!=l||(d.push({name:m,value:b(l).val(),type:l.type}),d.push({name:m+".x",value:c.clk_x},{name:m+".y",value:c.clk_y}));else if((g=b.fieldValue(l,!0))&&g.constructor==Array){h&&h.push(l);var q=0;for(l=g.length;q<l;q++)d.push({name:m,value:g[q]})}else if(D&&"file"==l.type&&!l.disabled)if(h&&h.push(l),g=l.files,g.length)for(q=0;q<g.length;q++)d.push({name:m,value:g[q],type:l.type});else d.push({name:m,value:"",type:l.type});else null!==g&&"undefined"!=typeof g&&(h&&h.push(l),
d.push({name:m,value:g,type:l.type,required:l.required}))}!a&&c.clk&&(e=b(c.clk),p=e[0],(m=p.name)&&!p.disabled&&"image"==p.type&&(d.push({name:m,value:e.val()}),d.push({name:m+".x",value:c.clk_x},{name:m+".y",value:c.clk_y})));return d};b.fn.formSerialize=function(a){return b.param(this.formToArray(a))};b.fn.fieldSerialize=function(a){var h=[];this.each(function(){var d=this.name;if(d){var c=b.fieldValue(this,a);if(c&&c.constructor==Array)for(var e=0,m=c.length;e<m;e++)h.push({name:d,value:c[e]});
else null!==c&&"undefined"!=typeof c&&h.push({name:this.name,value:c})}});return b.param(h)};b.fn.fieldValue=function(a){for(var h=[],d=0,c=this.length;d<c;d++){var e=b.fieldValue(this[d],a);null===e||"undefined"==typeof e||e.constructor==Array&&!e.length||(e.constructor==Array?b.merge(h,e):h.push(e))}return h};b.fieldValue=function(a,h){var d=a.name,c=a.type,e=a.tagName.toLowerCase();void 0===h&&(h=!0);if(h&&(!d||a.disabled||"reset"==c||"button"==c||("checkbox"==c||"radio"==c)&&!a.checked||("submit"==
c||"image"==c)&&a.form&&a.form.clk!=a||"select"==e&&-1==a.selectedIndex))return null;if("select"==e){var m=a.selectedIndex;if(0>m)return null;for(var d=[],e=a.options,g=(c="select-one"==c)?m+1:e.length,m=c?m:0;m<g;m++){var n=e[m];if(n.selected){var p=n.value;p||(p=n.attributes&&n.attributes.value&&!n.attributes.value.specified?n.text:n.value);if(c)return p;d.push(p)}}return d}return b(a).val()};b.fn.clearForm=function(a){return this.each(function(){b("input,select,textarea",this).clearFields(a)})};
b.fn.clearFields=b.fn.clearInputs=function(a){var h=/^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i;return this.each(function(){var d=this.type,c=this.tagName.toLowerCase();h.test(d)||"textarea"==c?this.value="":"checkbox"==d||"radio"==d?this.checked=!1:"select"==c?this.selectedIndex=-1:"file"==d?/MSIE/.test(navigator.userAgent)?b(this).replaceWith(b(this).clone()):b(this).val(""):a&&(!0===a&&/hidden/.test(d)||"string"==typeof a&&b(this).is(a))&&(this.value=
"")})};b.fn.resetForm=function(){return this.each(function(){("function"==typeof this.reset||"object"==typeof this.reset&&!this.reset.nodeType)&&this.reset()})};b.fn.enable=function(a){void 0===a&&(a=!0);return this.each(function(){this.disabled=!a})};b.fn.selected=function(a){void 0===a&&(a=!0);return this.each(function(){var h=this.type;"checkbox"==h||"radio"==h?this.checked=a:"option"==this.tagName.toLowerCase()&&(h=b(this).parent("select"),a&&h[0]&&"select-one"==h[0].type&&h.find("option").selected(!1),
this.selected=a)})};b.fn.ajaxSubmit.debug=!1})(jQuery);;
(function(c){var m=function(){var d={showEvent:"click",onShow:function(){},onBeforeShow:function(){},onHide:function(){},onChange:function(){},onSubmit:function(){},colorScheme:"light",color:"3289c7",livePreview:!0,flat:!1,layout:"full",submit:1,submitText:"OK",height:156},p=function(a,b){var l=n(a);c(b).data("colpick").fields.eq(1).val(l.r).end().eq(2).val(l.g).end().eq(3).val(l.b).end()},g=function(a,b){c(b).data("colpick").fields.eq(4).val(Math.round(a.h)).end().eq(5).val(Math.round(a.s)).end().eq(6).val(Math.round(a.b)).end()},
f=function(a,b){c(b).data("colpick").fields.eq(0).val(e(a))},h=function(a,b){c(b).data("colpick").selector.css("backgroundColor","#"+e({h:a.h,s:100,b:100}));c(b).data("colpick").selectorIndic.css({left:parseInt(c(b).data("colpick").height*a.s/100,10),top:parseInt(c(b).data("colpick").height*(100-a.b)/100,10)})},t=function(a,b){c(b).data("colpick").hue.css("top",parseInt(c(b).data("colpick").height-c(b).data("colpick").height*a.h/360,10))},m=function(a,b){c(b).data("colpick").currentColor.css("backgroundColor",
"#"+e(a))},u=function(a,b){c(b).data("colpick").newColor.css("backgroundColor","#"+e(a))},q=function(a){a=c(this).parent().parent();var b;if(0<this.parentNode.className.indexOf("_hex")){b=a.data("colpick");var l=this.value,d=6-l.length;if(0<d){for(var k=[],m=0;m<d;m++)k.push("0");k.push(l);l=k.join("")}b.color=b=v(l);p(b,a.get(0));g(b,a.get(0))}else 0<this.parentNode.className.indexOf("_hsb")?(a.data("colpick").color=b=y({h:parseInt(a.data("colpick").fields.eq(4).val(),10),s:parseInt(a.data("colpick").fields.eq(5).val(),
10),b:parseInt(a.data("colpick").fields.eq(6).val(),10)}),p(b,a.get(0)),f(b,a.get(0))):(b=a.data("colpick"),l=parseInt(a.data("colpick").fields.eq(1).val(),10),d=parseInt(a.data("colpick").fields.eq(2).val(),10),k=parseInt(a.data("colpick").fields.eq(3).val(),10),l={r:Math.min(255,Math.max(0,l)),g:Math.min(255,Math.max(0,d)),b:Math.min(255,Math.max(0,k))},b.color=b=r(l),f(b,a.get(0)),g(b,a.get(0)));h(b,a.get(0));t(b,a.get(0));u(b,a.get(0));a.data("colpick").onChange.apply(a.parent(),[b,e(b),n(b),
a.data("colpick").el,0])},w=function(a){c(this).parent().removeClass("colpick_focus")},x=function(){c(this).parent().parent().data("colpick").fields.parent().removeClass("colpick_focus");c(this).parent().addClass("colpick_focus")},H=function(a){a.preventDefault?a.preventDefault():a.returnValue=!1;var b=c(this).parent().find("input").focus();a={el:c(this).parent().addClass("colpick_slider"),max:0<this.parentNode.className.indexOf("_hsb_h")?360:0<this.parentNode.className.indexOf("_hsb")?100:255,y:a.pageY,
field:b,val:parseInt(b.val(),10),preview:c(this).parent().parent().data("colpick").livePreview};c(document).mouseup(a,z);c(document).mousemove(a,A)},A=function(a){a.data.field.val(Math.max(0,Math.min(a.data.max,parseInt(a.data.val-a.pageY+a.data.y,10))));a.data.preview&&q.apply(a.data.field.get(0),[!0]);return!1},z=function(a){q.apply(a.data.field.get(0),[!0]);a.data.el.removeClass("colpick_slider").find("input").focus();c(document).off("mouseup",z);c(document).off("mousemove",A);return!1},I=function(a){a.preventDefault?
a.preventDefault():a.returnValue=!1;var b={cal:c(this).parent(),y:c(this).offset().top};c(document).on("mouseup touchend",b,B);c(document).on("mousemove touchmove",b,C);a="touchstart"==a.type?a.originalEvent.changedTouches[0].pageY:a.pageY;q.apply(b.cal.data("colpick").fields.eq(4).val(parseInt(360*(b.cal.data("colpick").height-(a-b.y))/b.cal.data("colpick").height,10)).get(0),[b.cal.data("colpick").livePreview]);return!1},C=function(a){var b="touchmove"==a.type?a.originalEvent.changedTouches[0].pageY:
a.pageY;q.apply(a.data.cal.data("colpick").fields.eq(4).val(parseInt(360*(a.data.cal.data("colpick").height-Math.max(0,Math.min(a.data.cal.data("colpick").height,b-a.data.y)))/a.data.cal.data("colpick").height,10)).get(0),[a.data.preview]);return!1},B=function(a){p(a.data.cal.data("colpick").color,a.data.cal.get(0));f(a.data.cal.data("colpick").color,a.data.cal.get(0));c(document).off("mouseup touchend",B);c(document).off("mousemove touchmove",C);return!1},J=function(a){a.preventDefault?a.preventDefault():
a.returnValue=!1;var b={cal:c(this).parent(),pos:c(this).offset()};b.preview=b.cal.data("colpick").livePreview;c(document).on("mouseup touchend",b,D);c(document).on("mousemove touchmove",b,E);"touchstart"==a.type?(pageX=a.originalEvent.changedTouches[0].pageX,a=a.originalEvent.changedTouches[0].pageY):(pageX=a.pageX,a=a.pageY);q.apply(b.cal.data("colpick").fields.eq(6).val(parseInt(100*(b.cal.data("colpick").height-(a-b.pos.top))/b.cal.data("colpick").height,10)).end().eq(5).val(parseInt(100*(pageX-
b.pos.left)/b.cal.data("colpick").height,10)).get(0),[b.preview]);return!1},E=function(a){var b;"touchmove"==a.type?(pageX=a.originalEvent.changedTouches[0].pageX,b=a.originalEvent.changedTouches[0].pageY):(pageX=a.pageX,b=a.pageY);q.apply(a.data.cal.data("colpick").fields.eq(6).val(parseInt(100*(a.data.cal.data("colpick").height-Math.max(0,Math.min(a.data.cal.data("colpick").height,b-a.data.pos.top)))/a.data.cal.data("colpick").height,10)).end().eq(5).val(parseInt(100*Math.max(0,Math.min(a.data.cal.data("colpick").height,
pageX-a.data.pos.left))/a.data.cal.data("colpick").height,10)).get(0),[a.data.preview]);return!1},D=function(a){p(a.data.cal.data("colpick").color,a.data.cal.get(0));f(a.data.cal.data("colpick").color,a.data.cal.get(0));c(document).off("mouseup touchend",D);c(document).off("mousemove touchmove",E);return!1},K=function(a){a=c(this).parent();var b=a.data("colpick").color;a.data("colpick").origColor=b;m(b,a.get(0));a.data("colpick").onSubmit(b,e(b),n(b),a.data("colpick").el)},G=function(a){a&&a.stopPropagation();
a=c("#"+c(this).data("colpickId"));a.data("colpick").onBeforeShow.apply(this,[a.get(0)]);var b=c(this).offset(),d=b.top+this.offsetHeight,b=b.left,p=L(),f=a.width();b+f>p.l+p.w&&(b-=f);a.css({left:b+"px",top:d+"px"});0!=a.data("colpick").onShow.apply(this,[a.get(0)])&&a.show();c("html").mousedown({cal:a},F);a.mousedown(function(a){a.stopPropagation()})},F=function(a){0!=a.data.cal.data("colpick").onHide.apply(this,[a.data.cal.get(0)])&&a.data.cal.hide();c("html").off("mousedown",F)},L=function(){var a=
"CSS1Compat"==document.compatMode;return{l:window.pageXOffset||(a?document.documentElement.scrollLeft:document.body.scrollLeft),w:window.innerWidth||(a?document.documentElement.clientWidth:document.body.clientWidth)}},y=function(a){return{h:Math.min(360,Math.max(0,a.h)),s:Math.min(100,Math.max(0,a.s)),b:Math.min(100,Math.max(0,a.b))}},M=function(){var a=c(this).parent(),b=a.data("colpick").origColor;a.data("colpick").color=b;p(b,a.get(0));f(b,a.get(0));g(b,a.get(0));h(b,a.get(0));t(b,a.get(0));u(b,
a.get(0))};return{init:function(a){a=c.extend({},d,a||{});if("string"==typeof a.color)a.color=v(a.color);else if(void 0!=a.color.r&&void 0!=a.color.g&&void 0!=a.color.b)a.color=r(a.color);else if(void 0!=a.color.h&&void 0!=a.color.s&&void 0!=a.color.b)a.color=y(a.color);else return this;return this.each(function(){if(!c(this).data("colpickId")){var b=c.extend({},a);b.origColor=a.color;var d="collorpicker_"+parseInt(1E3*Math.random());c(this).data("colpickId",d);d=c('<div class="colpick"><div class="colpick_color"><div class="colpick_color_overlay1"><div class="colpick_color_overlay2"><div class="colpick_selector_outer"><div class="colpick_selector_inner"></div></div></div></div></div><div class="colpick_hue"><div class="colpick_hue_arrs"><div class="colpick_hue_larr"></div><div class="colpick_hue_rarr"></div></div></div><div class="colpick_new_color"></div><div class="colpick_current_color"></div><div class="colpick_hex_field"><div class="colpick_field_letter">#</div><input type="text" maxlength="6" size="6" /></div><div class="colpick_rgb_r colpick_field"><div class="colpick_field_letter">R</div><input type="text" maxlength="3" size="3" /><div class="colpick_field_arrs"><div class="colpick_field_uarr"></div><div class="colpick_field_darr"></div></div></div><div class="colpick_rgb_g colpick_field"><div class="colpick_field_letter">G</div><input type="text" maxlength="3" size="3" /><div class="colpick_field_arrs"><div class="colpick_field_uarr"></div><div class="colpick_field_darr"></div></div></div><div class="colpick_rgb_b colpick_field"><div class="colpick_field_letter">B</div><input type="text" maxlength="3" size="3" /><div class="colpick_field_arrs"><div class="colpick_field_uarr"></div><div class="colpick_field_darr"></div></div></div><div class="colpick_hsb_h colpick_field"><div class="colpick_field_letter">H</div><input type="text" maxlength="3" size="3" /><div class="colpick_field_arrs"><div class="colpick_field_uarr"></div><div class="colpick_field_darr"></div></div></div><div class="colpick_hsb_s colpick_field"><div class="colpick_field_letter">S</div><input type="text" maxlength="3" size="3" /><div class="colpick_field_arrs"><div class="colpick_field_uarr"></div><div class="colpick_field_darr"></div></div></div><div class="colpick_hsb_b colpick_field"><div class="colpick_field_letter">B</div><input type="text" maxlength="3" size="3" /><div class="colpick_field_arrs"><div class="colpick_field_uarr"></div><div class="colpick_field_darr"></div></div></div><div class="colpick_submit"></div></div>').attr("id",
d);d.addClass("colpick_"+b.layout+(b.submit?"":" colpick_"+b.layout+"_ns"));"light"!=b.colorScheme&&d.addClass("colpick_"+b.colorScheme);d.find("div.colpick_submit").html(b.submitText).click(K);b.fields=d.find("input").change(q).blur(w).focus(x);d.find("div.colpick_field_arrs").mousedown(H).end().find("div.colpick_current_color").click(M);b.selector=d.find("div.colpick_color").on("mousedown touchstart",J);b.selectorIndic=b.selector.find("div.colpick_selector_outer");b.el=this;b.hue=d.find("div.colpick_hue_arrs");
huebar=b.hue.parent();var e=navigator.userAgent.toLowerCase(),k="Microsoft Internet Explorer"===navigator.appName,n=k?parseFloat(e.match(/msie ([0-9]{1,}[\.0-9]{0,})/)[1]):0,e="#ff0000 #ff0080 #ff00ff #8000ff #0000ff #0080ff #00ffff #00ff80 #00ff00 #80ff00 #ffff00 #ff8000 #ff0000".split(" ");if(k&&10>n)for(k=0;11>=k;k++)n=c("<div></div>").attr("style","height:8.333333%; filter:progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr="+e[k]+", endColorstr="+e[k+1]+'); -ms-filter: "progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr='+
e[k]+", endColorstr="+e[k+1]+')";'),huebar.append(n);else stopList=e.join(","),huebar.attr("style","background:-webkit-linear-gradient(top,"+stopList+"); background: -o-linear-gradient(top,"+stopList+"); background: -ms-linear-gradient(top,"+stopList+"); background:-moz-linear-gradient(top,"+stopList+"); -webkit-linear-gradient(top,"+stopList+"); background:linear-gradient(to bottom,"+stopList+"); ");d.find("div.colpick_hue").on("mousedown touchstart",I);b.newColor=d.find("div.colpick_new_color");
b.currentColor=d.find("div.colpick_current_color");d.data("colpick",b);p(b.color,d.get(0));g(b.color,d.get(0));f(b.color,d.get(0));t(b.color,d.get(0));h(b.color,d.get(0));m(b.color,d.get(0));u(b.color,d.get(0));b.flat?(d.appendTo(this).show(),d.css({position:"relative",display:"block"})):(d.appendTo(document.body),c(this).on(b.showEvent,G),d.css({position:"absolute"}))}})},showPicker:function(){return this.each(function(){c(this).data("colpickId")&&G.apply(this)})},hidePicker:function(){return this.each(function(){c(this).data("colpickId")&&
c("#"+c(this).data("colpickId")).hide()})},setColor:function(a,b){b="undefined"===typeof b?1:b;if("string"==typeof a)a=v(a);else if(void 0!=a.r&&void 0!=a.g&&void 0!=a.b)a=r(a);else if(void 0!=a.h&&void 0!=a.s&&void 0!=a.b)a=y(a);else return this;return this.each(function(){if(c(this).data("colpickId")){var d=c("#"+c(this).data("colpickId"));d.data("colpick").color=a;d.data("colpick").origColor=a;p(a,d.get(0));g(a,d.get(0));f(a,d.get(0));t(a,d.get(0));h(a,d.get(0));u(a,d.get(0));d.data("colpick").onChange.apply(d.parent(),
[a,e(a),n(a),d.data("colpick").el,1]);b&&m(a,d.get(0))}})}}}(),w=function(d){d=parseInt(-1<d.indexOf("#")?d.substring(1):d,16);return{r:d>>16,g:(d&65280)>>8,b:d&255}},v=function(d){return r(w(d))},r=function(d){var c={h:0,s:0,b:0},g=Math.min(d.r,d.g,d.b),f=Math.max(d.r,d.g,d.b),g=f-g;c.b=f;c.s=0!=f?255*g/f:0;c.h=0!=c.s?d.r==f?(d.g-d.b)/g:d.g==f?2+(d.b-d.r)/g:4+(d.r-d.g)/g:-1;c.h*=60;0>c.h&&(c.h+=360);c.s*=100/255;c.b*=100/255;return c},n=function(d){var c,g,f;c=d.h;var h=255*d.s/100;d=255*d.b/100;
if(0==h)c=g=f=d;else{var h=(255-h)*d/255,e=c%60*(d-h)/60;360==c&&(c=0);60>c?(c=d,f=h,g=h+e):120>c?(g=d,f=h,c=d-e):180>c?(g=d,c=h,f=h+e):240>c?(f=d,c=h,g=d-e):300>c?(f=d,g=h,c=h+e):360>c?(c=d,g=h,f=d-e):f=g=c=0}return{r:Math.round(c),g:Math.round(g),b:Math.round(f)}},x=function(d){var e=[d.r.toString(16),d.g.toString(16),d.b.toString(16)];c.each(e,function(d,c){1==c.length&&(e[d]="0"+c)});return e.join("")},e=function(c){return x(n(c))};c.fn.extend({colpick:m.init,colpickHide:m.hidePicker,colpickShow:m.showPicker,
colpickSetColor:m.setColor});c.extend({colpick:{rgbToHex:x,rgbToHsb:r,hsbToHex:e,hsbToRgb:n,hexToHsb:v,hexToRgb:w}})})(jQuery);;
(function(b){b.fn.paginate=function(a){var d=b.extend({},b.fn.paginate.defaults,a);return this.each(function(){$this=b(this);var a=b.meta?b.extend({},d,$this.data()):d;b.fn.draw(a,$this,a.start)})};var r=0,p=0;if(0<navigator.appVersion.indexOf("MSIE 7.0"))var u="ie7";b.fn.paginate.defaults={count:5,start:12,display:5,border:!0,border_color:"#fff",text_color:"#8cc59d",background_color:"black",border_hover_color:"#fff",text_hover_color:"#fff",background_hover_color:"#fff",rotate:!0,images:!0,mouse:"slide",
onChange:function(){return!1}};b.fn.draw=function(a,d,k){a.display>a.count&&(a.display=a.count);$this.empty();if(a.images){var h="jPag-sprevious-img";d="jPag-snext-img"}else h="jPag-sprevious",d="jPag-snext";var g=b(document.createElement("a")).addClass("jPag-first").html("First");if(a.rotate)var e=a.images?b(document.createElement("span")).addClass(h):b(document.createElement("span")).addClass(h).html("&laquo;");h=b(document.createElement("div")).addClass("jPag-control-back");h.append(g).append(e);
for(var c=b(document.createElement("div")).css("overflow","hidden"),q=b(document.createElement("ul")).addClass("jPag-pages"),t,v=0;v<a.count;v++){var l=v+1;l==k?t=l=b(document.createElement("li")).html('<span class="jPag-current">'+l+"</span>"):l=b(document.createElement("li")).html("<a>"+l+"</a>");q.append(l)}c.append(q);if(a.rotate)var f=a.images?b(document.createElement("span")).addClass(d):b(document.createElement("span")).addClass(d).html("&raquo;");k=b(document.createElement("a")).addClass("jPag-last").html("Last");
var m=b(document.createElement("div")).addClass("jPag-control-front");m.append(f).append(k);$this.addClass("jPaginate").append(h).append(c).append(m);if(a.border)w="none"==a.background_color?{color:a.text_color,border:"1px solid "+a.border_color}:{color:a.text_color,"background-color":a.background_color,border:"1px solid "+a.border_color},x="none"==a.background_hover_color?{color:a.text_hover_color,border:"1px solid "+a.border_hover_color}:{color:a.text_hover_color,"background-color":a.background_hover_color,
border:"1px solid "+a.border_hover_color};else var w="none"==a.background_color?{color:a.text_color}:{color:a.text_color,"background-color":a.background_color},x="none"==a.background_hover_color?{color:a.text_hover_color}:{color:a.text_hover_color,"background-color":a.background_hover_color};b.fn.applystyle(a,$this,w,x,g,q,c,m);var n=r-g.parent().width()-3;"ie7"==u?(c.css("width",n+72+"px"),m.css("left",r+6+72+"px")):(c.css("width",n+"px"),m.css("left",r+6+"px"));a.rotate&&(f.hover(function(){thumbs_scroll_interval=
setInterval(function(){var a=c.scrollLeft()+1;c.scrollLeft(a)},20)},function(){clearInterval(thumbs_scroll_interval)}),e.hover(function(){thumbs_scroll_interval=setInterval(function(){var a=c.scrollLeft()-1;c.scrollLeft(a)},20)},function(){clearInterval(thumbs_scroll_interval)}),"press"==a.mouse?(f.mousedown(function(){thumbs_mouse_interval=setInterval(function(){var a=c.scrollLeft()+5;c.scrollLeft(a)},20)}).mouseup(function(){clearInterval(thumbs_mouse_interval)}),e.mousedown(function(){thumbs_mouse_interval=
setInterval(function(){var a=c.scrollLeft()-5;c.scrollLeft(a)},20)}).mouseup(function(){clearInterval(thumbs_mouse_interval)})):(e.click(function(a){a=n-10;a=c.scrollLeft()-a;c.animate({scrollLeft:a+"px"})}),f.click(function(a){a=n-10;a=c.scrollLeft()+a;c.animate({scrollLeft:a+"px"})})));g.click(function(a){c.animate({scrollLeft:"0px"});c.find("li").eq(0).click()});k.click(function(b){c.animate({scrollLeft:p+"px"});c.find("li").eq(a.count-1).click()});c.find("li").click(function(d){t.html("<a>"+t.find(".jPag-current").html()+
"</a>");d=b(this).find("a").html();b(this).html('<span class="jPag-current">'+d+"</span>");t=b(this);b.fn.applystyle(a,b(this).parent().parent().parent(),w,x,g,q,c,m);var e=this.offsetLeft/2;c.scrollLeft();var f=e-n/2;"ie7"==u?c.animate({scrollLeft:e+f-g.parent().width()+52+"px"}):c.animate({scrollLeft:e+f-g.parent().width()+"px"});a.onChange(d)});f=c.find("li").eq(a.start-1);f.attr("id","tmp");e=document.getElementById("tmp").offsetLeft/2;f.removeAttr("id");f=e-n/2;"ie7"==u?c.animate({scrollLeft:e+
f-g.parent().width()+52+"px"}):c.animate({scrollLeft:e+f-g.parent().width()+"px"})};b.fn.applystyle=function(a,d,k,h,g,e,c,q){d.find("a").css(k);d.find("span.jPag-current").css(h);d.find("a").hover(function(){b(this).css(h)},function(){b(this).css(k)});d.css("padding-left",g.parent().width()+5+"px");p=0;d.find("li").each(function(b,c){b==a.display-1&&(r=this.offsetLeft+this.offsetWidth);p+=this.offsetWidth});e.css("width",p+"px")}})(jQuery);;
(function(c){"function"===typeof define&&define.amd?define(["jquery","jquery.ui.widget"],c):c(window.jQuery)})(function(c){c.support.fileInput=!(/(Android (1\.[0156]|2\.[01]))|(Windows Phone (OS 7|8\.0))|(XBLWP)|(ZuneWP)|(WPDesktop)|(w(eb)?OSBrowser)|(webOS)|(Kindle\/(1\.0|2\.[05]|3\.0))/.test(window.navigator.userAgent)||c('<input type="file">').prop("disabled"));c.support.xhrFileUpload=!(!window.ProgressEvent||!window.FileReader);c.support.xhrFormDataFileUpload=!!window.FormData;c.support.blobSlice=
window.Blob&&(Blob.prototype.slice||Blob.prototype.webkitSlice||Blob.prototype.mozSlice);c.widget("blueimp.fileupload",{options:{dropZone:c(document),pasteZone:c(document),fileInput:void 0,replaceFileInput:!0,paramName:void 0,singleFileUploads:!0,limitMultiFileUploads:void 0,limitMultiFileUploadSize:void 0,limitMultiFileUploadSizeOverhead:512,sequentialUploads:!1,limitConcurrentUploads:void 0,forceIframeTransport:!1,redirect:void 0,redirectParamName:void 0,postMessage:void 0,multipart:!0,maxChunkSize:void 0,
uploadedBytes:void 0,recalculateProgress:!0,progressInterval:100,bitrateInterval:500,autoUpload:!0,messages:{uploadedBytes:"Uploaded bytes exceed file size"},i18n:function(a,b){a=this.messages[a]||a.toString();b&&c.each(b,function(b,e){a=a.replace("{"+b+"}",e)});return a},formData:function(a){return a.serializeArray()},add:function(a,b){if(a.isDefaultPrevented())return!1;(b.autoUpload||!1!==b.autoUpload&&c(this).fileupload("option","autoUpload"))&&b.process().done(function(){b.submit()})},processData:!1,
contentType:!1,cache:!1},_specialOptions:["fileInput","dropZone","pasteZone","multipart","forceIframeTransport"],_blobSlice:c.support.blobSlice&&function(){return(this.slice||this.webkitSlice||this.mozSlice).apply(this,arguments)},_BitrateTimer:function(){this.timestamp=Date.now?Date.now():(new Date).getTime();this.bitrate=this.loaded=0;this.getBitrate=function(a,b,d){var e=a-this.timestamp;if(!this.bitrate||!d||e>d)this.bitrate=1E3/e*(b-this.loaded)*8,this.loaded=b,this.timestamp=a;return this.bitrate}},
_isXHRUpload:function(a){return!a.forceIframeTransport&&(!a.multipart&&c.support.xhrFileUpload||c.support.xhrFormDataFileUpload)},_getFormData:function(a){var b;return"function"===c.type(a.formData)?a.formData(a.form):c.isArray(a.formData)?a.formData:"object"===c.type(a.formData)?(b=[],c.each(a.formData,function(a,e){b.push({name:a,value:e})}),b):[]},_getTotal:function(a){var b=0;c.each(a,function(a,e){b+=e.size||1});return b},_initProgressObject:function(a){var b={loaded:0,total:0,bitrate:0};a._progress?
c.extend(a._progress,b):a._progress=b},_initResponseObject:function(a){var b;if(a._response)for(b in a._response)a._response.hasOwnProperty(b)&&delete a._response[b];else a._response={}},_onProgress:function(a,b){if(a.lengthComputable){var d=Date.now?Date.now():(new Date).getTime(),e;b._time&&b.progressInterval&&d-b._time<b.progressInterval&&a.loaded!==a.total||(b._time=d,e=Math.floor(a.loaded/a.total*(b.chunkSize||b._progress.total))+(b.uploadedBytes||0),this._progress.loaded+=e-b._progress.loaded,
this._progress.bitrate=this._bitrateTimer.getBitrate(d,this._progress.loaded,b.bitrateInterval),b._progress.loaded=b.loaded=e,b._progress.bitrate=b.bitrate=b._bitrateTimer.getBitrate(d,e,b.bitrateInterval),this._trigger("progress",c.Event("progress",{delegatedEvent:a}),b),this._trigger("progressall",c.Event("progressall",{delegatedEvent:a}),this._progress))}},_initProgressListener:function(a){var b=this,d=a.xhr?a.xhr():c.ajaxSettings.xhr();d.upload&&(c(d.upload).bind("progress",function(d){var c=
d.originalEvent;d.lengthComputable=c.lengthComputable;d.loaded=c.loaded;d.total=c.total;b._onProgress(d,a)}),a.xhr=function(){return d})},_isInstanceOf:function(a,b){return Object.prototype.toString.call(b)==="[object "+a+"]"},_initXHRData:function(a){var b=this,d,e=a.files[0],f=a.multipart||!c.support.xhrFileUpload,g="array"===c.type(a.paramName)?a.paramName[0]:a.paramName;a.headers=c.extend({},a.headers);a.contentRange&&(a.headers["Content-Range"]=a.contentRange);f&&!a.blob&&this._isInstanceOf("File",
e)||(a.headers["Content-Disposition"]='attachment; filename="'+encodeURI(e.name)+'"');f?c.support.xhrFormDataFileUpload&&(a.postMessage?(d=this._getFormData(a),a.blob?d.push({name:g,value:a.blob}):c.each(a.files,function(b,e){d.push({name:"array"===c.type(a.paramName)&&a.paramName[b]||g,value:e})})):(b._isInstanceOf("FormData",a.formData)?d=a.formData:(d=new FormData,c.each(this._getFormData(a),function(a,b){d.append(b.name,b.value)})),a.blob?d.append(g,a.blob,e.name):c.each(a.files,function(e,f){(b._isInstanceOf("File",
f)||b._isInstanceOf("Blob",f))&&d.append("array"===c.type(a.paramName)&&a.paramName[e]||g,f,f.uploadName||f.name)})),a.data=d):(a.contentType=e.type||"application/octet-stream",a.data=a.blob||e);a.blob=null},_initIframeSettings:function(a){var b=c("<a></a>").prop("href",a.url).prop("host");a.dataType="iframe "+(a.dataType||"");a.formData=this._getFormData(a);a.redirect&&b&&b!==location.host&&a.formData.push({name:a.redirectParamName||"redirect",value:a.redirect})},_initDataSettings:function(a){this._isXHRUpload(a)?
(this._chunkedUpload(a,!0)||(a.data||this._initXHRData(a),this._initProgressListener(a)),a.postMessage&&(a.dataType="postmessage "+(a.dataType||""))):this._initIframeSettings(a)},_getParamName:function(a){var b=c(a.fileInput),d=a.paramName;d?c.isArray(d)||(d=[d]):(d=[],b.each(function(){for(var a=c(this),b=a.prop("name")||"files[]",a=(a.prop("files")||[1]).length;a;)d.push(b),--a}),d.length||(d=[b.prop("name")||"files[]"]));return d},_initFormSettings:function(a){a.form&&a.form.length||(a.form=c(a.fileInput.prop("form")),
a.form.length||(a.form=c(this.options.fileInput.prop("form"))));a.paramName=this._getParamName(a);a.url||(a.url=a.form.prop("action")||location.href);a.type=(a.type||"string"===c.type(a.form.prop("method"))&&a.form.prop("method")||"").toUpperCase();"POST"!==a.type&&"PUT"!==a.type&&"PATCH"!==a.type&&(a.type="POST");a.formAcceptCharset||(a.formAcceptCharset=a.form.attr("accept-charset"))},_getAJAXSettings:function(a){a=c.extend({},this.options,a);this._initFormSettings(a);this._initDataSettings(a);
return a},_getDeferredState:function(a){return a.state?a.state():a.isResolved()?"resolved":a.isRejected()?"rejected":"pending"},_enhancePromise:function(a){a.success=a.done;a.error=a.fail;a.complete=a.always;return a},_getXHRPromise:function(a,b,d){var e=c.Deferred(),f=e.promise();b=b||this.options.context||f;!0===a?e.resolveWith(b,d):!1===a&&e.rejectWith(b,d);f.abort=e.promise;return this._enhancePromise(f)},_addConvenienceMethods:function(a,b){var d=this,e=function(a){return c.Deferred().resolveWith(d,
a).promise()};b.process=function(a,g){if(a||g)b._processQueue=this._processQueue=(this._processQueue||e([this])).pipe(function(){return b.errorThrown?c.Deferred().rejectWith(d,[b]).promise():e(arguments)}).pipe(a,g);return this._processQueue||e([this])};b.submit=function(){"pending"!==this.state()&&(b.jqXHR=this.jqXHR=!1!==d._trigger("submit",c.Event("submit",{delegatedEvent:a}),this)&&d._onSend(a,this));return this.jqXHR||d._getXHRPromise()};b.abort=function(){if(this.jqXHR)return this.jqXHR.abort();
this.errorThrown="abort";d._trigger("fail",null,this);return d._getXHRPromise(!1)};b.state=function(){if(this.jqXHR)return d._getDeferredState(this.jqXHR);if(this._processQueue)return d._getDeferredState(this._processQueue)};b.processing=function(){return!this.jqXHR&&this._processQueue&&"pending"===d._getDeferredState(this._processQueue)};b.progress=function(){return this._progress};b.response=function(){return this._response}},_getUploadedBytes:function(a){return(a=(a=(a=a.getResponseHeader("Range"))&&
a.split("-"))&&1<a.length&&parseInt(a[1],10))&&a+1},_chunkedUpload:function(a,b){a.uploadedBytes=a.uploadedBytes||0;var d=this,e=a.files[0],f=e.size,g=a.uploadedBytes,m=a.maxChunkSize||f,h=this._blobSlice,k=c.Deferred(),p=k.promise(),l,n;if(!(this._isXHRUpload(a)&&h&&(g||m<f))||a.data)return!1;if(b)return!0;if(g>=f)return e.error=a.i18n("uploadedBytes"),this._getXHRPromise(!1,a.context,[null,"error",e.error]);n=function(){var b=c.extend({},a),p=b._progress.loaded;b.blob=h.call(e,g,g+m,e.type);b.chunkSize=
b.blob.size;b.contentRange="bytes "+g+"-"+(g+b.chunkSize-1)+"/"+f;d._initXHRData(b);d._initProgressListener(b);l=(!1!==d._trigger("chunksend",null,b)&&c.ajax(b)||d._getXHRPromise(!1,b.context)).done(function(e,h,l){g=d._getUploadedBytes(l)||g+b.chunkSize;p+b.chunkSize-b._progress.loaded&&d._onProgress(c.Event("progress",{lengthComputable:!0,loaded:g-b.uploadedBytes,total:g-b.uploadedBytes}),b);a.uploadedBytes=b.uploadedBytes=g;b.result=e;b.textStatus=h;b.jqXHR=l;d._trigger("chunkdone",null,b);d._trigger("chunkalways",
null,b);g<f?n():k.resolveWith(b.context,[e,h,l])}).fail(function(a,c,e){b.jqXHR=a;b.textStatus=c;b.errorThrown=e;d._trigger("chunkfail",null,b);d._trigger("chunkalways",null,b);k.rejectWith(b.context,[a,c,e])})};this._enhancePromise(p);p.abort=function(){return l.abort()};n();return p},_beforeSend:function(a,b){0===this._active&&(this._trigger("start"),this._bitrateTimer=new this._BitrateTimer,this._progress.loaded=this._progress.total=0,this._progress.bitrate=0);this._initResponseObject(b);this._initProgressObject(b);
b._progress.loaded=b.loaded=b.uploadedBytes||0;b._progress.total=b.total=this._getTotal(b.files)||1;b._progress.bitrate=b.bitrate=0;this._active+=1;this._progress.loaded+=b.loaded;this._progress.total+=b.total},_onDone:function(a,b,d,e){var f=e._progress.total,g=e._response;e._progress.loaded<f&&this._onProgress(c.Event("progress",{lengthComputable:!0,loaded:f,total:f}),e);g.result=e.result=a;g.textStatus=e.textStatus=b;g.jqXHR=e.jqXHR=d;this._trigger("done",null,e)},_onFail:function(a,b,d,c){var f=
c._response;c.recalculateProgress&&(this._progress.loaded-=c._progress.loaded,this._progress.total-=c._progress.total);f.jqXHR=c.jqXHR=a;f.textStatus=c.textStatus=b;f.errorThrown=c.errorThrown=d;this._trigger("fail",null,c)},_onAlways:function(a,b,d,c){this._trigger("always",null,c)},_onSend:function(a,b){b.submit||this._addConvenienceMethods(a,b);var d=this,e,f,g,m,h=d._getAJAXSettings(b),k=function(){d._sending+=1;h._bitrateTimer=new d._BitrateTimer;return e=e||((f||!1===d._trigger("send",c.Event("send",
{delegatedEvent:a}),h))&&d._getXHRPromise(!1,h.context,f)||d._chunkedUpload(h)||c.ajax(h)).done(function(a,b,c){d._onDone(a,b,c,h)}).fail(function(a,b,c){d._onFail(a,b,c,h)}).always(function(a,b,c){d._onAlways(a,b,c,h);--d._sending;--d._active;if(h.limitConcurrentUploads&&h.limitConcurrentUploads>d._sending)for(a=d._slots.shift();a;){if("pending"===d._getDeferredState(a)){a.resolve();break}a=d._slots.shift()}0===d._active&&d._trigger("stop")})};this._beforeSend(a,h);return this.options.sequentialUploads||
this.options.limitConcurrentUploads&&this.options.limitConcurrentUploads<=this._sending?(1<this.options.limitConcurrentUploads?(g=c.Deferred(),this._slots.push(g),m=g.pipe(k)):m=this._sequence=this._sequence.pipe(k,k),m.abort=function(){f=[void 0,"abort","abort"];return e?e.abort():(g&&g.rejectWith(h.context,f),k())},this._enhancePromise(m)):k()},_onAdd:function(a,b){var d=this,e=!0,f=c.extend({},this.options,b),g=b.files,m=g.length,h=f.limitMultiFileUploads,k=f.limitMultiFileUploadSize,p=f.limitMultiFileUploadSizeOverhead,
l=0,n=this._getParamName(f),q,r,t=0;!k||m&&void 0!==g[0].size||(k=void 0);if((f.singleFileUploads||h||k)&&this._isXHRUpload(f))if(f.singleFileUploads||k||!h)if(!f.singleFileUploads&&k)for(r=[],q=[],f=0;f<m;f+=1){if(l+=g[f].size+p,f+1===m||l+g[f+1].size+p>k||h&&f+1-t>=h)r.push(g.slice(t,f+1)),l=n.slice(t,f+1),l.length||(l=n),q.push(l),t=f+1,l=0}else q=n;else for(r=[],q=[],f=0;f<m;f+=h)r.push(g.slice(f,f+h)),l=n.slice(f,f+h),l.length||(l=n),q.push(l);else r=[g],q=[n];b.originalFiles=g;c.each(r||g,function(f,
g){var h=c.extend({},b);h.files=r?g:[g];h.paramName=q[f];d._initResponseObject(h);d._initProgressObject(h);d._addConvenienceMethods(a,h);return e=d._trigger("add",c.Event("add",{delegatedEvent:a}),h)});return e},_replaceFileInput:function(a){var b=a.fileInput,d=b.clone(!0);a.fileInputClone=d;c("<form></form>").append(d)[0].reset();b.after(d).detach();c.cleanData(b.unbind("remove"));this.options.fileInput=this.options.fileInput.map(function(a,c){return c===b[0]?d[0]:c});b[0]===this.element[0]&&(this.element=
d)},_handleFileTreeEntry:function(a,b){var d=this,e=c.Deferred(),f=function(b){b&&!b.entry&&(b.entry=a);e.resolve([b])},g=function(c){d._handleFileTreeEntries(c,b+a.name+"/").done(function(a){e.resolve(a)}).fail(f)},m=function(){h.readEntries(function(a){a.length?(k=k.concat(a),m()):g(k)},f)},h,k=[];b=b||"";a.isFile?a._file?(a._file.relativePath=b,e.resolve(a._file)):a.file(function(a){a.relativePath=b;e.resolve(a)},f):a.isDirectory?(h=a.createReader(),m()):e.resolve([]);return e.promise()},_handleFileTreeEntries:function(a,
b){var d=this;return c.when.apply(c,c.map(a,function(a){return d._handleFileTreeEntry(a,b)})).pipe(function(){return Array.prototype.concat.apply([],arguments)})},_getDroppedFiles:function(a){a=a||{};var b=a.items;return b&&b.length&&(b[0].webkitGetAsEntry||b[0].getAsEntry)?this._handleFileTreeEntries(c.map(b,function(a){var b;if(a.webkitGetAsEntry){if(b=a.webkitGetAsEntry())b._file=a.getAsFile();return b}return a.getAsEntry()})):c.Deferred().resolve(c.makeArray(a.files)).promise()},_getSingleFileInputFiles:function(a){a=
c(a);var b=a.prop("webkitEntries")||a.prop("entries");if(b&&b.length)return this._handleFileTreeEntries(b);b=c.makeArray(a.prop("files"));if(b.length)void 0===b[0].name&&b[0].fileName&&c.each(b,function(a,b){b.name=b.fileName;b.size=b.fileSize});else{a=a.prop("value");if(!a)return c.Deferred().resolve([]).promise();b=[{name:a.replace(/^.*\\/,"")}]}return c.Deferred().resolve(b).promise()},_getFileInputFiles:function(a){return a instanceof c&&1!==a.length?c.when.apply(c,c.map(a,this._getSingleFileInputFiles)).pipe(function(){return Array.prototype.concat.apply([],
arguments)}):this._getSingleFileInputFiles(a)},_onChange:function(a){var b=this,d={fileInput:c(a.target),form:c(a.target.form)};this._getFileInputFiles(d.fileInput).always(function(e){d.files=e;b.options.replaceFileInput&&b._replaceFileInput(d);!1!==b._trigger("change",c.Event("change",{delegatedEvent:a}),d)&&b._onAdd(a,d)})},_onPaste:function(a){var b=a.originalEvent&&a.originalEvent.clipboardData&&a.originalEvent.clipboardData.items,d={files:[]};b&&b.length&&(c.each(b,function(a,b){var c=b.getAsFile&&
b.getAsFile();c&&d.files.push(c)}),!1!==this._trigger("paste",c.Event("paste",{delegatedEvent:a}),d)&&this._onAdd(a,d))},_onDrop:function(a){a.dataTransfer=a.originalEvent&&a.originalEvent.dataTransfer;var b=this,d=a.dataTransfer,e={};d&&d.files&&d.files.length&&(a.preventDefault(),this._getDroppedFiles(d).always(function(d){e.files=d;!1!==b._trigger("drop",c.Event("drop",{delegatedEvent:a}),e)&&b._onAdd(a,e)}))},_onDragOver:function(a){a.dataTransfer=a.originalEvent&&a.originalEvent.dataTransfer;
var b=a.dataTransfer;b&&-1!==c.inArray("Files",b.types)&&!1!==this._trigger("dragover",c.Event("dragover",{delegatedEvent:a}))&&(a.preventDefault(),b.dropEffect="copy")},_initEventHandlers:function(){this._isXHRUpload(this.options)&&(this._on(this.options.dropZone,{dragover:this._onDragOver,drop:this._onDrop}),this._on(this.options.pasteZone,{paste:this._onPaste}));c.support.fileInput&&this._on(this.options.fileInput,{change:this._onChange})},_destroyEventHandlers:function(){this._off(this.options.dropZone,
"dragover drop");this._off(this.options.pasteZone,"paste");this._off(this.options.fileInput,"change")},_setOption:function(a,b){var d=-1!==c.inArray(a,this._specialOptions);d&&this._destroyEventHandlers();this._super(a,b);d&&(this._initSpecialOptions(),this._initEventHandlers())},_initSpecialOptions:function(){var a=this.options;void 0===a.fileInput?a.fileInput=this.element.is('input[type="file"]')?this.element:this.element.find('input[type="file"]'):a.fileInput instanceof c||(a.fileInput=c(a.fileInput));
a.dropZone instanceof c||(a.dropZone=c(a.dropZone));a.pasteZone instanceof c||(a.pasteZone=c(a.pasteZone))},_getRegExp:function(a){a=a.split("/");var b=a.pop();a.shift();return new RegExp(a.join("/"),b)},_isRegExpOption:function(a,b){return"url"!==a&&"string"===c.type(b)&&/^\/.*\/[igm]{0,3}$/.test(b)},_initDataAttributes:function(){var a=this,b=this.options,d=c(this.element[0].cloneNode(!1));c.each(d.data(),function(c,f){var g="data-"+c.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase();d.attr(g)&&
(a._isRegExpOption(c,f)&&(f=a._getRegExp(f)),b[c]=f)})},_create:function(){this._initDataAttributes();this._initSpecialOptions();this._slots=[];this._sequence=this._getXHRPromise(!0);this._sending=this._active=0;this._initProgressObject(this);this._initEventHandlers()},active:function(){return this._active},progress:function(){return this._progress},add:function(a){var b=this;a&&!this.options.disabled&&(a.fileInput&&!a.files?this._getFileInputFiles(a.fileInput).always(function(c){a.files=c;b._onAdd(null,
a)}):(a.files=c.makeArray(a.files),this._onAdd(null,a)))},send:function(a){if(a&&!this.options.disabled){if(a.fileInput&&!a.files){var b=this,d=c.Deferred(),e=d.promise(),f,g;e.abort=function(){g=!0;if(f)return f.abort();d.reject(null,"abort","abort");return e};this._getFileInputFiles(a.fileInput).always(function(c){g||(c.length?(a.files=c,f=b._onSend(null,a),f.then(function(a,b,c){d.resolve(a,b,c)},function(a,b,c){d.reject(a,b,c)})):d.reject())});return this._enhancePromise(e)}a.files=c.makeArray(a.files);
if(a.files.length)return this._onSend(null,a)}return this._getXHRPromise(!1,a&&a.context)}})});;
(function(b){var C={method:"GET",contentType:"json",queryParam:"q",searchDelay:300,minChars:1,propertyToSearch:"name",jsonContainer:null,hintText:"Type in a search term",noResultsText:"No results",searchingText:"Searching...",deleteText:"&times;",animateDropdown:!0,tokenLimit:null,tokenDelimiter:",",preventDuplicates:!1,tokenValue:"id",prePopulate:null,processPrePopulate:!1,idPrefix:"token-input-",extraParams:"",clientCache:!0,resultsFormatter:function(b){return"<li>"+b[this.propertyToSearch]+"</li>"},
tokenFormatter:function(b){return"<li><p>"+b[this.propertyToSearch]+"</p></li>"},onResult:null,onAdd:null,onDelete:null,onReady:null,disableDelete:!1},D={tokenList:"token-input-list",token:"token-input-token",tokenDelete:"token-input-delete-token",selectedToken:"token-input-selected-token",highlightedToken:"token-input-highlighted-token",dropdown:"token-input-dropdown",dropdownItem:"token-input-dropdown-item",dropdownItem2:"token-input-dropdown-item2",selectedDropdownItem:"token-input-selected-dropdown-item",
inputToken:"token-input-input-token"},n={init:function(k,m){var a=b.extend({},C,m||{});return this.each(function(){b(this).data("tokenInputObject",new b.TokenList(this,k,a))})},clear:function(){this.data("tokenInputObject").clear();return this},add:function(b){this.data("tokenInputObject").add(b);return this},remove:function(b){this.data("tokenInputObject").remove(b);return this},destroy:function(b){this.data("tokenInputObject").destroy(b);return this},get:function(){return this.data("tokenInputObject").getTokens()},
getManualsettings:function(){return this.data("tokenInputObject").getManualsettings()}};b.fn.tokenInput=function(b){return n[b]?n[b].apply(this,Array.prototype.slice.call(arguments,1)):n.init.apply(this,arguments)};b.TokenList=function(k,m,a){function K(){null!==a.tokenLimit&&v>=a.tokenLimit&&(g.hide(),p())}function L(c){var e=a.tokenFormatter(c);e=b(e).addClass(a.classes.token).insertBefore(w);b("<span>"+a.deleteText+"</span>").addClass(a.classes.tokenDelete).appendTo(e).click(function(){A(b(this).parent());
l.change();return!1});var d={id:c.id};d[a.propertyToSearch]=c[a.propertyToSearch];b.data(e.get(0),"tokeninput",c);q=q.slice(0,r).concat([d]).concat(q.slice(r));r++;n(q,l);v+=1;null!==a.tokenLimit&&v>=a.tokenLimit&&(g.hide(),p());return e}function E(c){var e=a.onAdd;if(0<v&&a.preventDuplicates){var d=null;t.children().each(function(){var a=b(this),e=b.data(a.get(0),"tokeninput");if(e&&e.id===c.id)return d=a,!1});if(d){z(d);w.insertAfter(d);g.focus();return}}if(null==a.tokenLimit||v<a.tokenLimit)L(c),
K();g.val("");p();b.isFunction(e)&&e.call(l,c)}function z(b){b.addClass(a.classes.selectedToken);h=b.get(0);g.val("");p()}function y(b,e){b.removeClass(a.classes.selectedToken);h=null;0===e?(w.insertBefore(b),r--):1===e?(w.insertAfter(b),r++):(w.appendTo(t),r=v);g.focus()}function A(c){var e=b.data(c.get(0),"tokeninput"),d=a.onDelete,f=c.prevAll().length;f>r&&f--;c.remove();h=null;g.focus();q=q.slice(0,f).concat(q.slice(f+1));f<r&&r--;n(q,l);--v;null!==a.tokenLimit&&g.show().val("").focus();b.isFunction(d)&&
d.call(l,e)}function n(c,e){var d=b.map(c,function(b){return b[a.tokenValue]});e.val(d.join(a.tokenDelimiter))}function p(){x.hide().empty();u=null}function B(){x.css({position:"absolute",top:b(t).offset().top+b(t).outerHeight(),left:b(t).offset().left,width:b(t).width(),zindex:999}).show()}function M(a){return a.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")}function F(c,e){if(e&&e.length){x.empty();var d=b("<ul>").appendTo(x).mouseover(function(a){G(b(a.target).closest("li"))}).mousedown(function(a){E(b(a.target).closest("li").data("tokeninput"));
l.change();return!1}).hide();b.each(e,function(e,g){var f=a.resultsFormatter(g),h=g[a.propertyToSearch];f=f.replace(new RegExp("(?![^&;]+;)(?!<[^<>]*)("+M(h)+")(?![^<>]*>)(?![^&;]+;)","g"),h.replace(new RegExp("(?![^&;]+;)(?!<[^<>]*)("+M(c)+")(?![^<>]*>)(?![^&;]+;)","gi"),"<b>$1</b>"));f=b(f).appendTo(d);e%2?f.addClass(a.classes.dropdownItem):f.addClass(a.classes.dropdownItem2);0===e&&G(f);b.data(f.get(0),"tokeninput",g)});B();a.animateDropdown?d.slideDown("fast"):d.show()}else a.noResultsText&&(x.html("<p>"+
a.noResultsText+"</p>"),B())}function G(c){c&&(u&&(b(u).removeClass(a.classes.selectedDropdownItem),u=null),c.addClass(a.classes.selectedDropdownItem),u=c.get(0))}function N(){var c=g.val().toLowerCase();c&&c.length&&(h&&y(b(h),1),c.length>=a.minChars?(a.searchingText&&(x.html("<p>"+a.searchingText+"</p>"),B()),clearTimeout(O),O=setTimeout(function(){C(c)},a.searchDelay)):p())}function C(c){var e=c+H(),d=I.get(e);if(a.clientCache&&d)F(c,d);else if(a.url){d=H();var f={data:{}};-1<d.indexOf("?")?(d=
d.split("?"),f.url=d[0],d=d[1].split("&"),b.each(d,function(a,b){var c=b.split("=");f.data[c[0]]=c[1]}),""!=a.extraParams&&(d=a.extraParams.split("&"),b.each(d,function(a,b){var c=b.split("=");f.data[c[0]]=c[1]}))):f.url=d;f.data[a.queryParam]=c;f.type=a.method;f.dataType=a.contentType;a.crossDomain&&(f.dataType="jsonp");f.success=function(d){b.isFunction(a.onResult)&&(d=a.onResult.call(l,d));I.add(e,a.jsonContainer?d[a.jsonContainer]:d);g.val().toLowerCase()===c&&F(c,a.jsonContainer?d[a.jsonContainer]:
d)};b.ajax(f)}else a.local_data&&(d=b.grep(a.local_data,function(b){return-1<b[a.propertyToSearch].toLowerCase().indexOf(c.toLowerCase())}),b.isFunction(a.onResult)&&(d=a.onResult.call(l,d)),I.add(e,d),F(c,d))}function H(){var b=a.url;"function"==typeof a.url&&(b=a.url.call());return b}"string"===b.type(m)||"function"===b.type(m)?(a.url=m,m=H(),void 0===a.crossDomain&&(-1===m.indexOf("://")?a.crossDomain=!1:a.crossDomain=location.href.split(/\/+/g)[1]!==m.split(/\/+/g)[1])):"object"===typeof m&&(a.local_data=
m);a.classes?a.classes=b.extend({},D,a.classes):a.theme?(a.classes={},b.each(D,function(b,e){a.classes[b]=e+"-"+a.theme})):a.classes=D;a.disableDelete&&(a.deleteText="");var q=[],v=0,I=new b.TokenList.Cache,O,J,g=b('<input type="text"  autocomplete="off" autocorrect="off" spellcheck="false">').css({outline:"none"}).attr("id",a.idPrefix+k.id).focus(function(){null!==a.tokenLimit&&a.tokenLimit===v||!a.hintText||(x.html("<p>"+a.hintText+"</p>"),B())}).blur(function(){p();b(this).val("")}).bind("keyup keydown blur update",
function(){if(J!==(J=g.val())){var b=J.replace(/&/g,"&amp;").replace(/\s/g," ").replace(/</g,"&lt;").replace(/>/g,"&gt;");P.html(b);g.width(P.width()+30)}}).keydown(function(c){switch(c.keyCode){case 37:case 39:case 38:case 40:if(b(this).val()){var e=null;e=40===c.keyCode||39===c.keyCode?b(u).next():b(u).prev();e.length&&G(e);return!1}e=w.prev();var d=w.next();e.length&&e.get(0)===h||d.length&&d.get(0)===h?37===c.keyCode||38===c.keyCode?y(b(h),0):y(b(h),1):37!==c.keyCode&&38!==c.keyCode||!e.length?
39!==c.keyCode&&40!==c.keyCode||!d.length||z(b(d.get(0))):z(b(e.get(0)));break;case 8:if(a.disableDelete)break;e=w.prev();if(b(this).val().length)1===b(this).val().length?p():setTimeout(function(){N()},5);else return h?(A(b(h)),l.change()):e.length&&z(b(e.get(0))),!1;break;case 9:case 13:case 108:case 188:if(u)return E(b(u).data("tokeninput")),l.change(),!1;break;case 27:return p(),!0;default:String.fromCharCode(c.which)&&setTimeout(function(){N()},5)}}),l=b(k).hide().val("").focus(function(){g.focus()}).blur(function(){g.blur()}),
h=null,r=0,u=null,t=b("<ul />").addClass(a.classes.tokenList).click(function(a){if((a=b(a.target).closest("li"))&&a.get(0)&&b.data(a.get(0),"tokeninput")){var c=h;h&&y(b(h),2);c===a.get(0)?y(a,2):z(a)}else h&&y(b(h),2),g.focus()}).mouseover(function(c){(c=b(c.target).closest("li"))&&h!==this&&c.addClass(a.classes.highlightedToken)}).mouseout(function(c){(c=b(c.target).closest("li"))&&h!==this&&c.removeClass(a.classes.highlightedToken)}).insertAfter(l),w=b("<li />").addClass(a.classes.inputToken).appendTo(t).append(g),
x=b("<div>").addClass(a.classes.dropdown).appendTo("body").hide(),P=b("<tester/>").insertAfter(g).css({position:"absolute",top:-9999,left:-9999,width:"auto",fontSize:g.css("fontSize"),fontFamily:g.css("fontFamily"),fontWeight:g.css("fontWeight"),letterSpacing:g.css("letterSpacing"),whiteSpace:"nowrap"});l.val("");k=a.prePopulate||l.data("pre");a.processPrePopulate&&b.isFunction(a.onResult)&&(k=a.onResult.call(l,k));k&&k.length&&b.each(k,function(a,b){L(b);K()});b.isFunction(a.onReady)&&a.onReady.call();
this.getManualsettings=function(){return a};this.clear=function(){t.children("li").each(function(){0===b(this).children("input").length&&A(b(this))})};this.add=function(a){E(a)};this.destroy=function(a){this.remove(a);p()};this.remove=function(a){t.children("li").each(function(){if(0===b(this).children("input").length){var c=b(this).data("tokeninput"),d=!0,f;for(f in a)if(a[f]!==c[f]){d=!1;break}d&&A(b(this))}})};this.getTokens=function(){return q}};b.TokenList.Cache=function(k){var m=b.extend({max_size:500},
k),a={},n=0;this.add=function(b,k){n>m.max_size&&(a={},n=0);a[b]||(n+=1);a[b]=k};this.get=function(b){return a[b]}}})(jQuery);;
!function(b){var c={supported:function(){var a=!1;b.each(["webkit","moz","ms","o"],function(c,b){"undefined"!=typeof document[b+"CancelFullScreen"]&&(a=!0)});return a},requestFullscreen:function(a){this.supported&&(document.fullScreenElement&&null!==document.fullScreenElement||!document.mozFullScreen&&!document.webkitIsFullScreen)&&(a.requestFullScreen?a.requestFullScreen(Element.ALLOW_KEYBOARD_INPUT):a.mozRequestFullScreen?a.mozRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT):a.webkitRequestFullScreen&&
a.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT))},exitFullscreen:function(){document.cancelFullScreen?document.cancelFullScreen():document.mozCancelFullScreen?document.mozCancelFullScreen():document.webkitCancelFullScreen&&document.webkitCancelFullScreen()}};"undefined"!=typeof jQuery&&(jQuery.fn.requestFullScreen=function(){return this.each(function(){c.requestFullscreen(this)})},jQuery.cancelFullScreen=function(){c.exitFullscreen()})}(jQuery);;
(function(b){var c=function(a,d){this.options=b.extend({},b.fn.editableform.defaults,d);this.$div=b(a);this.options.scope||(this.options.scope=this)};c.prototype={constructor:c,initInput:function(){this.input=this.options.input;this.value=this.input.str2value(this.options.value)},initTemplate:function(){this.$form=b(b.fn.editableform.template)},initButtons:function(){var a=this.$form.find(".editable-buttons");a.append(b.fn.editableform.buttons);"bottom"===this.options.showbuttons&&a.addClass("editable-buttons-bottom")},
render:function(){this.$loading=b(b.fn.editableform.loading);this.$div.empty().append(this.$loading);this.initTemplate();this.options.showbuttons?this.initButtons():this.$form.find(".editable-buttons").remove();this.showLoading();this.isSaving=!1;this.$div.triggerHandler("rendering");this.initInput();this.input.prerender();this.$form.find("div.editable-input").append(this.input.$tpl);this.$div.append(this.$form);b.when(this.input.render()).then(b.proxy(function(){this.options.showbuttons||this.input.autosubmit();
this.$form.find(".editable-cancel").click(b.proxy(this.cancel,this));this.input.error?(this.error(this.input.error),this.$form.find(".editable-submit").attr("disabled",!0),this.input.$input.attr("disabled",!0),this.$form.submit(function(a){a.preventDefault()})):(this.error(!1),this.input.$input.removeAttr("disabled"),this.$form.find(".editable-submit").removeAttr("disabled"),this.input.value2input(this.value),this.$form.submit(b.proxy(this.submit,this)));this.$div.triggerHandler("rendered");this.showForm();
this.input.postrender&&this.input.postrender()},this))},cancel:function(){this.$div.triggerHandler("cancel")},showLoading:function(){var a,b;this.$form?(a=this.$form.outerWidth(),b=this.$form.outerHeight(),a&&this.$loading.width(a),b&&this.$loading.height(b),this.$form.hide()):(a=this.$loading.parent().width())&&this.$loading.width(a);this.$loading.show()},showForm:function(a){this.$loading.hide();this.$form.show();!1!==a&&this.input.activate();this.$div.triggerHandler("show")},error:function(a){var d=
this.$form.find(".control-group"),c=this.$form.find(".editable-error-block");if(!1===a)d.removeClass(b.fn.editableform.errorGroupClass),c.removeClass(b.fn.editableform.errorBlockClass).empty().hide();else{if(a){a=a.split("\n");for(var f=0;f<a.length;f++)a[f]=b("<div>").text(a[f]).html();a=a.join("<br>")}d.addClass(b.fn.editableform.errorGroupClass);c.addClass(b.fn.editableform.errorBlockClass).html(a).show()}},submit:function(a){a.stopPropagation();a.preventDefault();var d=this.input.input2value();
if(a=this.validate(d))this.error(a),this.showForm();else if(this.options.savenochange||this.input.value2str(d)!=this.input.value2str(this.value)){var c=this.input.value2submit(d);this.isSaving=!0;b.when(this.save(c)).done(b.proxy(function(a){this.isSaving=!1;var b="function"===typeof this.options.success?this.options.success.call(this.options.scope,a,d):null;!1===b?(this.error(!1),this.showForm(!1)):"string"===typeof b?(this.error(b),this.showForm()):(b&&"object"===typeof b&&b.hasOwnProperty("newValue")&&
(d=b.newValue),this.error(!1),this.value=d,this.$div.triggerHandler("save",{newValue:d,submitValue:c,response:a}))},this)).fail(b.proxy(function(a){this.isSaving=!1;a="function"===typeof this.options.error?this.options.error.call(this.options.scope,a,d):"string"===typeof a?a:a.responseText||a.statusText||"Unknown error!";this.error(a);this.showForm()},this))}else this.$div.triggerHandler("nochange")},save:function(a){this.options.pk=b.fn.editableutils.tryParseJson(this.options.pk,!0);var d="function"===
typeof this.options.pk?this.options.pk.call(this.options.scope):this.options.pk;if("function"===typeof this.options.url||this.options.url&&("always"===this.options.send||"auto"===this.options.send&&null!==d&&void 0!==d))return this.showLoading(),a={name:this.options.name||"",value:a,id:d},"function"===typeof this.options.params?a=this.options.params.call(this.options.scope,a):(this.options.params=b.fn.editableutils.tryParseJson(this.options.params,!0),b.extend(a,this.options.params)),"function"===
typeof this.options.url?this.options.url.call(this.options.scope,a):b.ajax(b.extend({url:this.options.url,data:a,type:"POST"},this.options.ajaxOptions))},validate:function(a){void 0===a&&(a=this.value);if("function"===typeof this.options.validate)return this.options.validate.call(this.options.scope,a)},option:function(a,b){a in this.options&&(this.options[a]=b);"value"===a&&this.setValue(b)},setValue:function(a,b){this.value=b?this.input.str2value(a):a;this.$form&&this.$form.is(":visible")&&this.input.value2input(this.value)}};
b.fn.editableform=function(a){var d=arguments;return this.each(function(){var e=b(this),f=e.data("editableform"),g="object"===typeof a&&a;f||e.data("editableform",f=new c(this,g));"string"===typeof a&&f[a].apply(f,Array.prototype.slice.call(d,1))})};b.fn.editableform.Constructor=c;b.fn.editableform.defaults={type:"text",url:null,params:null,name:null,pk:null,value:null,send:"auto",validate:null,success:null,error:null,ajaxOptions:null,showbuttons:!0,scope:null,savenochange:!1};b.fn.editableform.template=
'<form class="form-inline editableform"><div class="control-group"><div><div class="editable-input"></div><div class="editable-buttons"></div></div><div class="editable-error-block"></div></div></form>';b.fn.editableform.loading='<div class="editableform-loading"></div>';b.fn.editableform.buttons='<button type="submit" class="editable-submit">ok</button><button type="button" class="editable-cancel">cancel</button>';b.fn.editableform.errorGroupClass=null;b.fn.editableform.errorBlockClass="editable-error"})(window.jQuery);
(function(b){b.fn.editableutils={inherit:function(b,a){var d=function(){};d.prototype=a.prototype;b.prototype=new d;b.prototype.constructor=b;b.superclass=a.prototype},setCursorPosition:function(b,a){if(b.setSelectionRange)b.setSelectionRange(a,a);else if(b.createTextRange){var d=b.createTextRange();d.collapse(!0);d.moveEnd("character",a);d.moveStart("character",a);d.select()}},tryParseJson:function(b,a){if("string"===typeof b&&b.length&&b.match(/^[\{\[].*[\}\]]$/))if(a)try{b=(new Function("return "+
b))()}catch(d){}finally{}else b=(new Function("return "+b))();return b},sliceObj:function(c,a,d){var e,f,g={};if(!b.isArray(a)||!a.length)return g;for(var h=0;h<a.length;h++)e=a[h],c.hasOwnProperty(e)&&(g[e]=c[e]),!0!==d&&(f=e.toLowerCase(),c.hasOwnProperty(f)&&(g[e]=c[f]));return g},getConfigData:function(c){var a={};b.each(c.data(),function(b,c){if("object"!==typeof c||c&&"object"===typeof c&&(c.constructor===Object||c.constructor===Array))a[b]=c});return a},objectKeys:function(b){if(Object.keys)return Object.keys(b);
if(b!==Object(b))throw new TypeError("Object.keys called on a non-object");var a=[],d;for(d in b)Object.prototype.hasOwnProperty.call(b,d)&&a.push(d);return a},escape:function(c){return b("<div>").text(c).html()},itemsByValue:function(c,a,d){if(!a||null===c)return[];d=d||"value";var e=b.isArray(c),f=[],g=this;b.each(a,function(a,k){k.children?f=f.concat(g.itemsByValue(c,k.children,d)):e?b.grep(c,function(b){return b==(k&&"object"===typeof k?k[d]:k)}).length&&f.push(k):c==(k&&"object"===typeof k?k[d]:
k)&&f.push(k)});return f},createInput:function(c){var a;a=c.type;"date"===a&&("inline"===c.mode?b.fn.editabletypes.datefield?a="datefield":b.fn.editabletypes.dateuifield&&(a="dateuifield"):b.fn.editabletypes.date?a="date":b.fn.editabletypes.dateui&&(a="dateui"),"date"!==a||b.fn.editabletypes.date||(a="combodate"));"datetime"===a&&"inline"===c.mode&&(a="datetimefield");"wysihtml5"!==a||b.fn.editabletypes[a]||(a="textarea");if("function"===typeof b.fn.editabletypes[a])return a=b.fn.editabletypes[a],
c=this.sliceObj(c,this.objectKeys(a.defaults)),c=new a(c);b.error("Unknown type: "+a);return!1},supportsTransitions:function(){var b=(document.body||document.documentElement).style,a="transition",d=["Moz","Webkit","Khtml","O","ms"];if("string"===typeof b[a])return!0;for(var a=a.charAt(0).toUpperCase()+a.substr(1),e=0;e<d.length;e++)if("string"===typeof b[d[e]+a])return!0;return!1}}})(window.jQuery);
(function(b){var c=function(b,a){this.init(b,a)},a=function(b,a){this.init(b,a)};c.prototype={containerName:null,innerCss:null,containerClass:"editable-container editable-popup",init:function(a,e){this.$element=b(a);this.options=b.extend({},b.fn.editableContainer.defaults,e);this.splitOptions();this.formOptions.scope=this.$element[0];this.initContainer();this.delayedHide=!1;this.$element.on("destroyed",b.proxy(function(){this.destroy()},this));b(document).data("editable-handlers-attached")||(b(document).on("keyup.editable",
function(a){27===a.which&&b(".editable-open").editableContainer("hide");(27===a.which||13===a.which)&&b(".colpick").length&&b(".colpick").remove()}),b(document).on("click.editable",function(a){var d=b(a.target),e,k=".editable-container .ui-datepicker-header .datepicker .modal-backdrop .colpick .bootstrap-wysihtml5-insert-image-modal .bootstrap-wysihtml5-insert-link-modal".split(" ");if(b.contains(document.documentElement,a.target)&&!d.is(document)){for(e=0;e<k.length;e++)if(d.is(k[e])||d.parents(k[e]).length)return;
c.prototype.closeOthers(a.target)}}),b(document).data("editable-handlers-attached",!0))},splitOptions:function(){this.containerOptions={};this.formOptions={};if(!b.fn[this.containerName])throw Error(this.containerName+" not found. Have you included corresponding js file?");var a=b.fn[this.containerName].defaults,c;for(c in this.options)c in a?this.containerOptions[c]=this.options[c]:this.formOptions[c]=this.options[c]},tip:function(){return this.container()?this.container().$tip:null},container:function(){return this.$element.data(this.containerDataName||
this.containerName)},call:function(){this.$element[this.containerName].apply(this.$element,arguments)},initContainer:function(){this.call(this.containerOptions)},renderForm:function(){this.$form.editableform(this.formOptions).on({save:b.proxy(this.save,this),nochange:b.proxy(function(){this.hide("nochange")},this),cancel:b.proxy(function(){this.hide("cancel")},this),show:b.proxy(function(){this.delayedHide?(this.hide(this.delayedHide.reason),this.delayedHide=!1):this.setPosition()},this),rendering:b.proxy(this.setPosition,
this),resize:b.proxy(this.setPosition,this),rendered:b.proxy(function(){this.$element.triggerHandler("shown",this)},this)}).editableform("render")},show:function(a){this.$element.addClass("editable-open");!1!==a&&this.closeOthers(this.$element[0]);this.innerShow();this.tip().addClass(this.containerClass);this.$form=b("<div>");this.tip().is(this.innerCss)?this.tip().append(this.$form):this.tip().find(this.innerCss).append(this.$form);this.renderForm()},hide:function(a){this.tip()&&this.tip().is(":visible")&&
this.$element.hasClass("editable-open")&&(this.$form.data("editableform").isSaving?this.delayedHide={reason:a}:(this.delayedHide=!1,this.$element.removeClass("editable-open"),this.innerHide(),this.$element.triggerHandler("hidden",a||"manual")))},innerShow:function(){},innerHide:function(){},toggle:function(a){this.container()&&this.tip()&&this.tip().is(":visible")?this.hide():this.show(a)},setPosition:function(){},save:function(a,b){this.$element.triggerHandler("save",b);this.hide("save")},option:function(a,
b){this.options[a]=b;a in this.containerOptions?(this.containerOptions[a]=b,this.setContainerOption(a,b)):(this.formOptions[a]=b,this.$form&&this.$form.editableform("option",a,b))},setContainerOption:function(a,b){this.call("option",a,b)},destroy:function(){this.hide();this.innerDestroy();this.$element.off("destroyed");this.$element.removeData("editableContainer")},innerDestroy:function(){},closeOthers:function(a){b(".editable-open").each(function(c,f){if(f!==a&&!b(f).find(a).length){var g=b(f),h=
g.data("editableContainer");h&&("cancel"===h.options.onblur?g.data("editableContainer").hide("onblur"):"submit"===h.options.onblur&&g.data("editableContainer").tip().find("form").submit())}})},activate:function(){this.tip&&this.tip().is(":visible")&&this.$form&&this.$form.data("editableform").input.activate()}};b.fn.editableContainer=function(d){var e=arguments;return this.each(function(){var f=b(this),g=f.data("editableContainer"),h="object"===typeof d&&d,k="inline"===h.mode?a:c;g||f.data("editableContainer",
g=new k(this,h));"string"===typeof d&&g[d].apply(g,Array.prototype.slice.call(e,1))})};b.fn.editableContainer.Popup=c;b.fn.editableContainer.Inline=a;b.fn.editableContainer.defaults={value:null,placement:"top",autohide:!0,onblur:"cancel",anim:!1,mode:"popup"};jQuery.event.special.destroyed={remove:function(a){a.handler&&a.handler()}}})(window.jQuery);
(function(b){b.extend(b.fn.editableContainer.Inline.prototype,b.fn.editableContainer.Popup.prototype,{containerName:"editableform",innerCss:".editable-inline",containerClass:"editable-container editable-inline",initContainer:function(){this.$tip=b("<span></span>");this.options.anim||(this.options.anim=0)},splitOptions:function(){this.containerOptions={};this.formOptions=this.options},tip:function(){return this.$tip},innerShow:function(){this.$element.hide();this.tip().insertAfter(this.$element).show()},
innerHide:function(){this.$tip.hide(this.options.anim,b.proxy(function(){this.$element.show();this.innerDestroy()},this))},innerDestroy:function(){this.tip()&&this.tip().empty().remove()}})})(window.jQuery);
(function(b){var c=function(a,d){this.$element=b(a);this.options=b.extend({},b.fn.editable.defaults,d,b.fn.editableutils.getConfigData(this.$element));this.options.selector?this.initLive():this.init();this.options.highlight&&!b.fn.editableutils.supportsTransitions()&&(this.options.highlight=!1)};c.prototype={constructor:c,init:function(){var a=!1;this.options.name=this.options.name||this.$element.attr("id");this.options.scope=this.$element[0];if(this.input=b.fn.editableutils.createInput(this.options)){void 0===
this.options.value||null===this.options.value?(this.value=this.input.html2value(b.trim(this.$element.html())),a=!0):(this.options.value=b.fn.editableutils.tryParseJson(this.options.value,!0),this.value="string"===typeof this.options.value?this.input.str2value(this.options.value):this.options.value);this.$element.addClass("editable");"manual"!==this.options.toggle?(this.$element.addClass("editable-click"),this.$element.on(this.options.toggle+".editable",b.proxy(function(a){this.options.disabled||a.preventDefault();
"mouseenter"===this.options.toggle?this.show():this.toggle("click"!==this.options.toggle)},this))):this.$element.attr("tabindex",-1);"function"===typeof this.options.display&&(this.options.autotext="always");switch(this.options.autotext){case "always":a=!0;break;case "auto":a=!b.trim(this.$element.text()).length&&null!==this.value&&void 0!==this.value&&!a;break;default:a=!1}b.when(a?this.render():!0).then(b.proxy(function(){this.options.disabled?this.disable():this.enable();this.$element.triggerHandler("init",
this)},this))}},initLive:function(){var a=this.options.selector;this.options.selector=!1;this.options.autotext="never";this.$element.on(this.options.toggle+".editable",a,b.proxy(function(a){var c=b(a.target);c.data("editable")||(c.hasClass(this.options.emptyclass)&&c.empty(),c.editable(this.options).trigger(a))},this))},render:function(a){if(!1!==this.options.display)return this.input.value2htmlFinal?this.input.value2html(this.value,this.$element[0],this.options.display,a):"function"===typeof this.options.display?
this.options.display.call(this.$element[0],this.value,a):this.input.value2html(this.value,this.$element[0])},enable:function(){this.options.disabled=!1;this.$element.removeClass("editable-disabled");this.handleEmpty(this.isEmpty);"manual"!==this.options.toggle&&"-1"===this.$element.attr("tabindex")&&this.$element.removeAttr("tabindex")},disable:function(){this.options.disabled=!0;this.hide();this.$element.addClass("editable-disabled");this.handleEmpty(this.isEmpty);this.$element.attr("tabindex",-1)},
toggleDisabled:function(){this.options.disabled?this.enable():this.disable()},option:function(a,d){if(a&&"object"===typeof a)b.each(a,b.proxy(function(a,d){this.option(b.trim(a),d)},this));else{this.options[a]=d;if("disabled"===a)return d?this.disable():this.enable();"value"===a&&this.setValue(d);this.container&&this.container.option(a,d);this.input.option&&this.input.option(a,d)}},handleEmpty:function(a){!1!==this.options.display&&((void 0!==a?this.isEmpty=a:""===b.trim(this.$element.html())?this.isEmpty=
!0:""!==b.trim(this.$element.text())?this.isEmpty=!1:this.isEmpty=!this.$element.height()||!this.$element.width(),this.options.disabled)?this.isEmpty&&(this.$element.empty(),this.options.emptyclass&&this.$element.removeClass(this.options.emptyclass)):this.isEmpty?(this.$element.html(this.options.emptytext),this.options.emptyclass&&this.$element.addClass(this.options.emptyclass)):this.options.emptyclass&&this.$element.removeClass(this.options.emptyclass))},show:function(a){if(!this.options.disabled){if(!this.container){var d=
b.extend({},this.options,{value:this.value,input:this.input});this.$element.editableContainer(d);this.$element.on("save.internal",b.proxy(this.save,this));this.container=this.$element.data("editableContainer")}else if(this.container.tip().is(":visible"))return;this.container.show(a)}},hide:function(){this.container&&this.container.hide()},toggle:function(a){this.container&&this.container.tip().is(":visible")?this.hide():this.show(a)},save:function(a,b){if(this.options.unsavedclass){var c;(c=(c=(c=
(c="function"===typeof this.options.url)||!1===this.options.display)||void 0!==b.response)||this.options.savenochange&&this.input.value2str(this.value)!==this.input.value2str(b.newValue))?this.$element.removeClass(this.options.unsavedclass):this.$element.addClass(this.options.unsavedclass)}if(this.options.highlight){var f=this.$element,g=f.css("background-color");f.css("background-color",this.options.highlight);setTimeout(function(){f.css("background-color",g);f.addClass("editable-bg-transition");
setTimeout(function(){f.removeClass("editable-bg-transition")},1700)},0)}this.setValue(b.newValue,!1,b.response)},validate:function(){if("function"===typeof this.options.validate)return this.options.validate.call(this,this.value)},setValue:function(a,d,c){this.value=d?this.input.str2value(a):a;this.container&&this.container.option("value",this.value);b.when(this.render(c)).then(b.proxy(function(){this.handleEmpty()},this))},activate:function(){this.container&&this.container.activate()},destroy:function(){this.disable();
this.container&&this.container.destroy();this.input.destroy();"manual"!==this.options.toggle&&(this.$element.removeClass("editable-click"),this.$element.off(this.options.toggle+".editable"));this.$element.off("save.internal");this.$element.removeClass("editable editable-open editable-disabled");this.$element.removeData("editable")}};b.fn.editable=function(a){var d={},e=arguments;switch(a){case "validate":return this.each(function(){var a=b(this).data("editable"),c;a&&(c=a.validate())&&(d[a.options.name]=
c)}),d;case "getValue":return 2===arguments.length&&!0===arguments[1]?d=this.eq(0).data("editable").value:this.each(function(){var a=b(this).data("editable");a&&void 0!==a.value&&null!==a.value&&(d[a.options.name]=a.input.value2submit(a.value))}),d;case "submit":var f=arguments[1]||{},g=this,h=this.editable("validate");b.isEmptyObject(h)?(h=this.editable("getValue"),f.data&&b.extend(h,f.data),b.ajax(b.extend({url:f.url,data:h,type:"POST"},f.ajaxOptions)).success(function(a){"function"===typeof f.success&&
f.success.call(g,a,f)}).error(function(){"function"===typeof f.error&&f.error.apply(g,arguments)})):"function"===typeof f.error&&f.error.call(g,h);return this}return this.each(function(){var d=b(this),f=d.data("editable"),h="object"===typeof a&&a;f||d.data("editable",f=new c(this,h));"string"===typeof a&&f[a].apply(f,Array.prototype.slice.call(e,1))})};b.fn.editable.defaults={type:"text",disabled:!1,toggle:"click",emptytext:"Empty",autotext:"auto",value:null,display:null,emptyclass:"editable-empty",
unsavedclass:"editable-unsaved",selector:null,highlight:"#FFFF80"}})(window.jQuery);
(function(b){b.fn.editabletypes={};var c=function(){};c.prototype={init:function(a,d,c){this.type=a;this.options=b.extend({},c,d)},prerender:function(){this.$input=this.$tpl=b(this.options.tpl);this.error=this.$clear=null},render:function(){},value2html:function(a,d){b(d).text(b.trim(a))},html2value:function(a){return b("<div>").html(a).text()},value2str:function(a){return a},str2value:function(a){return a},value2submit:function(a){return a},value2input:function(a){this.$input.val(a)},input2value:function(){return this.$input.val()},
activate:function(){this.$input.is(":visible")&&this.$input.focus()},clear:function(){this.$input.val(null)},escape:function(a){return b("<div>").text(a).html()},autosubmit:function(){},destroy:function(){},setClass:function(){this.options.inputclass&&this.$input.addClass(this.options.inputclass)},setAttr:function(a){void 0!==this.options[a]&&null!==this.options[a]&&this.$input.attr(a,this.options[a])},option:function(a,b){this.options[a]=b}};c.defaults={tpl:"",inputclass:"input-medium",scope:null,
showbuttons:!0};b.extend(b.fn.editabletypes,{abstractinput:c})})(window.jQuery);
(function(b){var c=function(a){};b.fn.editableutils.inherit(c,b.fn.editabletypes.abstractinput);b.extend(c.prototype,{render:function(){var a=b.Deferred();this.error=null;this.onSourceReady(function(){this.renderList();a.resolve()},function(){this.error=this.options.sourceError;a.resolve()});return a.promise()},html2value:function(a){return null},value2html:function(a,d,c,f){var g=b.Deferred(),h=function(){"function"===typeof c?c.call(d,a,this.sourceData,f):this.value2htmlFinal(a,d);g.resolve()};
if(null===a)h.call(this);else this.onSourceReady(h,function(){g.resolve()});return g.promise()},onSourceReady:function(a,c){var e;b.isFunction(this.options.source)?(e=this.options.source.call(this.options.scope),this.sourceData=null):e=this.options.source;if(this.options.sourceCache&&b.isArray(this.sourceData))a.call(this);else{try{e=b.fn.editableutils.tryParseJson(e,!1)}catch(f){c.call(this);return}if("string"===typeof e){if(this.options.sourceCache){var g=e,h;b(document).data(g)||b(document).data(g,
{});h=b(document).data(g);if(!1===h.loading&&h.sourceData){this.sourceData=h.sourceData;this.doPrepend();a.call(this);return}if(!0===h.loading){h.callbacks.push(b.proxy(function(){this.sourceData=h.sourceData;this.doPrepend();a.call(this)},this));h.err_callbacks.push(b.proxy(c,this));return}h.loading=!0;h.callbacks=[];h.err_callbacks=[]}b.ajax({url:e,type:"get",cache:!1,dataType:"json",success:b.proxy(function(e){h&&(h.loading=!1);this.sourceData=this.makeArray(e);b.isArray(this.sourceData)?(h&&(h.sourceData=
this.sourceData,b.each(h.callbacks,function(){this.call()})),this.doPrepend(),a.call(this)):(c.call(this),h&&b.each(h.err_callbacks,function(){this.call()}))},this),error:b.proxy(function(){c.call(this);h&&(h.loading=!1,b.each(h.err_callbacks,function(){this.call()}))},this)})}else this.sourceData=this.makeArray(e),b.isArray(this.sourceData)?(this.doPrepend(),a.call(this)):c.call(this)}},doPrepend:function(){null!==this.options.prepend&&void 0!==this.options.prepend&&(b.isArray(this.prependData)||
(b.isFunction(this.options.prepend)&&(this.options.prepend=this.options.prepend.call(this.options.scope)),this.options.prepend=b.fn.editableutils.tryParseJson(this.options.prepend,!0),"string"===typeof this.options.prepend&&(this.options.prepend={"":this.options.prepend}),this.prependData=this.makeArray(this.options.prepend)),b.isArray(this.prependData)&&b.isArray(this.sourceData)&&(this.sourceData=this.prependData.concat(this.sourceData)))},renderList:function(){},value2htmlFinal:function(a,b){},
makeArray:function(a){var c,e,f=[],g,h;if(!a||"string"===typeof a)return null;if(b.isArray(a)){h=function(a,b){e={value:a,text:b};if(2<=c++)return!1};for(var k=0;k<a.length;k++)g=a[k],"object"===typeof g?(c=0,b.each(g,h),1===c?f.push(e):1<c&&(g.children&&(g.children=this.makeArray(g.children)),f.push(g))):f.push({value:g,text:g})}else b.each(a,function(a,b){f.push({value:a,text:b})});return f},option:function(a,b){this.options[a]=b;"source"===a&&(this.sourceData=null);"prepend"===a&&(this.prependData=
null)}});c.defaults=b.extend({},b.fn.editabletypes.abstractinput.defaults,{source:null,prepend:!1,sourceError:"Error when loading list",sourceCache:!0});b.fn.editabletypes.list=c})(window.jQuery);
(function(b){var c=function(a){this.init("text",a,c.defaults)};b.fn.editableutils.inherit(c,b.fn.editabletypes.abstractinput);b.extend(c.prototype,{render:function(){this.renderClear();this.setClass();this.setAttr("placeholder")},activate:function(){this.$input.is(":visible")&&(this.$input.focus(),b.fn.editableutils.setCursorPosition(this.$input.get(0),this.$input.val().length),this.toggleClear&&this.toggleClear())},renderClear:function(){this.options.clear&&(this.$clear=b('<span class="editable-clear-x"></span>'),
this.$input.after(this.$clear).css("padding-right",24).keyup(b.proxy(function(a){if(!~b.inArray(a.keyCode,[40,38,9,13,27])){clearTimeout(this.t);var c=this;this.t=setTimeout(function(){c.toggleClear(a)},100)}},this)).parent().css("position","relative"),this.$clear.click(b.proxy(this.clear,this)))},postrender:function(){},toggleClear:function(a){if(this.$clear){a=this.$input.val().length;var b=this.$clear.is(":visible");a&&!b&&this.$clear.show();!a&&b&&this.$clear.hide()}},clear:function(){this.$clear.hide();
this.$input.val("").focus()}});c.defaults=b.extend({},b.fn.editabletypes.abstractinput.defaults,{tpl:'<input type="text">',placeholder:null,clear:!0});b.fn.editabletypes.text=c})(window.jQuery);
(function(b){var c=function(a){this.init("textarea",a,c.defaults)};b.fn.editableutils.inherit(c,b.fn.editabletypes.abstractinput);b.extend(c.prototype,{render:function(){this.setClass();this.setAttr("placeholder");this.setAttr("rows");this.$input.keydown(function(a){a.ctrlKey&&13===a.which&&b(this).closest("form").submit()})},value2html:function(a,c){var e="";if(a){for(var e=a.split("\n"),f=0;f<e.length;f++)e[f]=b("<div>").text(e[f]).html();e=e.join("<br>")}b(c).html(e)},html2value:function(a){if(!a)return"";
var c=new RegExp(String.fromCharCode(10),"g");a=a.split(/<br\s*\/?>/i);for(var e=0;e<a.length;e++){var f=b("<div>").html(a[e]).text(),f=f.replace(c,"");a[e]=f}return a.join("\n")},activate:function(){b.fn.editabletypes.text.prototype.activate.call(this)}});c.defaults=b.extend({},b.fn.editabletypes.abstractinput.defaults,{tpl:"<textarea></textarea>",inputclass:"input-large",placeholder:null,rows:7});b.fn.editabletypes.textarea=c})(window.jQuery);
(function(b){var c=function(a){this.init("select",a,c.defaults)};b.fn.editableutils.inherit(c,b.fn.editabletypes.list);b.extend(c.prototype,{renderList:function(){this.$input.empty();var a=function(c,e){if(b.isArray(e))for(var f=0;f<e.length;f++)e[f].children?c.append(a(b("<optgroup>",{label:e[f].text}),e[f].children)):c.append(b("<option>",{value:e[f].value}).html(e[f].text));return c};a(this.$input,this.sourceData);this.setClass();this.$input.on("keydown.editable",function(a){13===a.which&&b(this).closest("form").submit()})},
value2htmlFinal:function(a,c){var e="",f=b.fn.editableutils.itemsByValue(a,this.sourceData);f.length&&(e=f[0].text);b(c).text(e)},autosubmit:function(){this.$input.off("keydown.editable").on("change.editable",function(){b(this).closest("form").submit()})}});c.defaults=b.extend({},b.fn.editabletypes.list.defaults,{tpl:"<select></select>"});b.fn.editabletypes.select=c})(window.jQuery);
(function(b){var c=function(a){this.init("checklist",a,c.defaults)};b.fn.editableutils.inherit(c,b.fn.editabletypes.list);b.extend(c.prototype,{renderList:function(){var a;this.$tpl.empty();if(b.isArray(this.sourceData)){for(var c=0;c<this.sourceData.length;c++)a=b("<label>").append(b("<input>",{type:"checkbox",value:this.sourceData[c].value})).append(b("<span>").text(" "+this.sourceData[c].text)),b("<div>").append(a).appendTo(this.$tpl);this.$input=this.$tpl.find('input[type="checkbox"]');this.setClass()}},
value2str:function(a){return b.isArray(a)?a.sort().join(b.trim(this.options.separator)):""},str2value:function(a){var c;c=null;"string"===typeof a&&a.length?(c=new RegExp("\\s*"+b.trim(this.options.separator)+"\\s*"),c=a.split(c)):c=b.isArray(a)?a:[a];return c},value2input:function(a){this.$input.prop("checked",!1);b.isArray(a)&&a.length&&this.$input.each(function(c,e){var f=b(e);b.each(a,function(a,b){f.val()==b&&f.prop("checked",!0)})})},input2value:function(){var a=[];this.$input.filter(":checked").each(function(c,
e){a.push(b(e).val())});return a},value2htmlFinal:function(a,c){var e=[],f=b.fn.editableutils.itemsByValue(a,this.sourceData);f.length?(b.each(f,function(a,c){e.push(b.fn.editableutils.escape(c.text))}),b(c).html(e.join("<br>"))):b(c).empty()},activate:function(){this.$input.first().focus()},autosubmit:function(){this.$input.on("keydown",function(a){13===a.which&&b(this).closest("form").submit()})}});c.defaults=b.extend({},b.fn.editabletypes.list.defaults,{tpl:'<div class="editable-checklist"></div>',
inputclass:null,separator:","});b.fn.editabletypes.checklist=c})(window.jQuery);(function(b){var c=function(a){this.init("password",a,c.defaults)};b.fn.editableutils.inherit(c,b.fn.editabletypes.text);b.extend(c.prototype,{value2html:function(a,c){a?b(c).text("[hidden]"):b(c).empty()},html2value:function(a){return null}});c.defaults=b.extend({},b.fn.editabletypes.text.defaults,{tpl:'<input type="password">'});b.fn.editabletypes.password=c})(window.jQuery);
(function(b){var c=function(a){this.init("email",a,c.defaults)};b.fn.editableutils.inherit(c,b.fn.editabletypes.text);c.defaults=b.extend({},b.fn.editabletypes.text.defaults,{tpl:'<input type="email">'});b.fn.editabletypes.email=c})(window.jQuery);(function(b){var c=function(a){this.init("url",a,c.defaults)};b.fn.editableutils.inherit(c,b.fn.editabletypes.text);c.defaults=b.extend({},b.fn.editabletypes.text.defaults,{tpl:'<input type="url">'});b.fn.editabletypes.url=c})(window.jQuery);
(function(b){var c=function(a){this.init("tel",a,c.defaults)};b.fn.editableutils.inherit(c,b.fn.editabletypes.text);c.defaults=b.extend({},b.fn.editabletypes.text.defaults,{tpl:'<input type="tel">'});b.fn.editabletypes.tel=c})(window.jQuery);
(function(b){var c=function(a){this.init("number",a,c.defaults)};b.fn.editableutils.inherit(c,b.fn.editabletypes.text);b.extend(c.prototype,{render:function(){c.superclass.render.call(this);this.setAttr("min");this.setAttr("max");this.setAttr("step")},postrender:function(){this.$clear&&this.$clear.css({right:24})}});c.defaults=b.extend({},b.fn.editabletypes.text.defaults,{tpl:'<input type="number">',inputclass:"input-mini",min:null,max:null,step:null});b.fn.editabletypes.number=c})(window.jQuery);
(function(b){var c=function(a){this.init("range",a,c.defaults)};b.fn.editableutils.inherit(c,b.fn.editabletypes.number);b.extend(c.prototype,{render:function(){this.$input=this.$tpl.filter("input");this.setClass();this.setAttr("min");this.setAttr("max");this.setAttr("step");this.$input.on("input",function(){b(this).siblings("output").text(b(this).val())})},activate:function(){this.$input.focus()}});c.defaults=b.extend({},b.fn.editabletypes.number.defaults,{tpl:'<input type="range"><output style="width: 30px; display: inline-block"></output>',
inputclass:"input-medium"});b.fn.editabletypes.range=c})(window.jQuery);
(function(b){var c=function(a){this.init("select2",a,c.defaults);a.select2=a.select2||{};this.sourceData=null;a.placeholder&&(a.select2.placeholder=a.placeholder);if(!a.select2.tags&&a.source){var d=a.source;b.isFunction(a.source)&&(d=a.source.call(a.scope));"string"===typeof d?(a.select2.ajax=a.select2.ajax||{},a.select2.ajax.data||(a.select2.ajax.data=function(a){return{query:a}}),a.select2.ajax.results||(a.select2.ajax.results=function(a){return{results:a}}),a.select2.ajax.url=d):(this.sourceData=
this.convertSource(d),a.select2.data=this.sourceData)}this.options.select2=b.extend({},c.defaults.select2,a.select2);this.isMultiple=this.options.select2.tags||this.options.select2.multiple;this.isRemote="ajax"in this.options.select2};b.fn.editableutils.inherit(c,b.fn.editabletypes.abstractinput);b.extend(c.prototype,{render:function(){this.setClass();this.$input.select2(this.options.select2);if(this.isRemote)this.$input.on("select2-loaded",b.proxy(function(a){this.sourceData=a.items.results},this));
if(this.isMultiple)this.$input.on("change",function(){b(this).closest("form").parent().triggerHandler("resize")})},value2html:function(a,c){var e="",f;this.options.select2.tags?f=a:this.sourceData&&(f=b.fn.editableutils.itemsByValue(a,this.sourceData,"id"));b.isArray(f)?(e=[],b.each(f,function(a,b){e.push(b&&"object"===typeof b?b.text:b)})):f&&(e=f.text);e=b.isArray(e)?e.join(this.options.viewseparator):e;b(c).text(e)},html2value:function(a){return this.options.select2.tags?this.str2value(a,this.options.viewseparator):
null},value2input:function(a){if(this.isRemote){var c,e;this.sourceData&&(e=b.fn.editableutils.itemsByValue(a,this.sourceData,"id"),e.length&&(c=e[0]));c||(c={id:a,text:b(this.options.scope).text()});this.$input.select2("data",c).trigger("change",!0)}else this.$input.val(a).trigger("change",!0)},input2value:function(){return this.$input.select2("val")},str2value:function(a,c){if("string"!==typeof a||!this.isMultiple)return a;c=c||this.options.select2.separator||b.fn.select2.defaults.separator;var e,
f,g;if(null===a||1>a.length)return null;e=a.split(c);f=0;for(g=e.length;f<g;f+=1)e[f]=b.trim(e[f]);return e},autosubmit:function(){this.$input.on("change",function(a,c){c||b(this).closest("form").submit()})},convertSource:function(a){if(b.isArray(a)&&a.length&&void 0!==a[0].value)for(var c=0;c<a.length;c++)void 0!==a[c].value&&(a[c].id=a[c].value,delete a[c].value);return a}});c.defaults=b.extend({},b.fn.editabletypes.abstractinput.defaults,{tpl:'<input type="hidden">',select2:null,placeholder:null,
source:null,viewseparator:", "});b.fn.editabletypes.select2=c})(window.jQuery);
(function(b){var c=function(a){this.init("combodate",a,c.defaults);this.options.viewformat||(this.options.viewformat=this.options.format);a.combodate=b.fn.editableutils.tryParseJson(a.combodate,!0);this.options.combodate=b.extend({},c.defaults.combodate,a.combodate,{format:this.options.format,template:this.options.template})};b.fn.editableutils.inherit(c,b.fn.editabletypes.abstractinput);b.extend(c.prototype,{render:function(){this.$input.combodate(this.options.combodate)},value2html:function(a,c){var e=
a?a.format(this.options.viewformat):"";b(c).text(e)},html2value:function(a){return a?moment(a,this.options.viewformat):null},value2str:function(a){return a?a.format(this.options.format):""},str2value:function(a){return a?moment(a,this.options.format):null},value2submit:function(a){return this.value2str(a)},value2input:function(a){this.$input.combodate("setValue",a)},input2value:function(){return this.$input.combodate("getValue",null)},activate:function(){this.$input.siblings(".combodate").find("select").eq(0).focus()},
autosubmit:function(){}});c.defaults=b.extend({},b.fn.editabletypes.abstractinput.defaults,{tpl:'<input type="text">',inputclass:null,format:"YYYY-MM-DD",viewformat:null,template:"D / MMM / YYYY",combodate:null});b.fn.editabletypes.combodate=c})(window.jQuery);
(function(b){b.extend(b.fn.editableform.Constructor.prototype,{initTemplate:function(){this.$form=b(b.fn.editableform.template);this.$form.find(".editable-error-block").addClass("help-block")}});b.fn.editableform.buttons='<button type="submit" class="btn btn-primary editable-submit"><i class="icon-ok icon-white"></i></button><button type="button" class="btn editable-cancel"><i class="icon-remove"></i></button>';b.fn.editableform.errorGroupClass="error";b.fn.editableform.errorBlockClass=null})(window.jQuery);
(function(b){b.extend(b.fn.editableContainer.Popup.prototype,{containerName:"popover",innerCss:b.fn.popover&&b(b.fn.popover.defaults.template).find("p").length?".popover-content p":".popover-content",initContainer:function(){b.extend(this.containerOptions,{trigger:"manual",selector:!1,content:" ",template:b.fn.popover.defaults.template});var c;this.$element.data("template")&&(c=this.$element.data("template"),this.$element.removeData("template"));this.call(this.containerOptions);c&&this.$element.data("template",
c)},innerShow:function(){this.call("show")},innerHide:function(){this.call("hide")},innerDestroy:function(){this.call("destroy")},setContainerOption:function(b,a){this.container().options[b]=a},setPosition:function(){(function(){var b=this.tip(),a,d,e,f,g,h;g="function"===typeof this.options.placement?this.options.placement.call(this,b[0],this.$element[0]):this.options.placement;a=/in/.test(g);b.removeClass("top right bottom left").css({top:0,left:0,display:"block"});d=this.getPosition(a);e=b[0].offsetWidth;
f=b[0].offsetHeight;switch(a?g.split(" ")[1]:g){case "bottom":h={top:d.top+d.height,left:d.left+d.width/2-e/2};break;case "top":h={top:d.top-f,left:d.left+d.width/2-e/2};break;case "left":h={top:d.top+d.height/2-f/2,left:d.left-e};break;case "right":h={top:d.top+d.height/2-f/2,left:d.left+d.width}}b.offset(h).addClass(g).addClass("in")}).call(this.container())}})})(window.jQuery);
(function(b){function c(){return new Date(Date.UTC.apply(Date,arguments))}function a(a,c){var d=b(a).data(),e={},f,h=new RegExp("^"+c.toLowerCase()+"([A-Z])");c=new RegExp("^"+c.toLowerCase());for(var g in d)c.test(g)&&(f=g.replace(h,function(a,b){return b.toLowerCase()}),e[f]=d[g]);return e}function d(a){var c={};if(!p[a]&&(a=a.split("-")[0],!p[a]))return;var d=p[a];b.each(x,function(a,b){b in d&&(c[b]=d[b])});return c}var e=function(a,c){this._process_options(c);this.element=b(a);this.isInline=
!1;this.isInput=this.element.is("input");this.hasInput=(this.component=this.element.is(".date")?this.element.find(".add-on, .btn"):!1)&&this.element.find("input").length;this.component&&0===this.component.length&&(this.component=!1);this.picker=b(l.template);this._buildEvents();this._attachEvents();this.isInline?this.picker.addClass("datepicker-inline").appendTo(this.element):this.picker.addClass("datepicker-dropdown dropdown-menu");this.o.rtl&&(this.picker.addClass("datepicker-rtl"),this.picker.find(".prev i, .next i").toggleClass("icon-arrow-left icon-arrow-right"));
this.viewMode=this.o.startView;this.o.calendarWeeks&&this.picker.find("tfoot th.today").attr("colspan",function(a,b){return parseInt(b)+1});this._allow_update=!1;this.setStartDate(this.o.startDate);this.setEndDate(this.o.endDate);this.setDaysOfWeekDisabled(this.o.daysOfWeekDisabled);this.fillDow();this.fillMonths();this._allow_update=!0;this.update();this.showMode();this.isInline&&this.show()};e.prototype={constructor:e,_process_options:function(a){this._o=b.extend({},this._o,a);a=this.o=b.extend({},
this._o);var c=a.language;p[c]||(c=c.split("-")[0],p[c]||(c=k.language));a.language=c;switch(a.startView){case 2:case "decade":a.startView=2;break;case 1:case "year":a.startView=1;break;default:a.startView=0}switch(a.minViewMode){case 1:case "months":a.minViewMode=1;break;case 2:case "years":a.minViewMode=2;break;default:a.minViewMode=0}a.startView=Math.max(a.startView,a.minViewMode);a.weekStart%=7;a.weekEnd=(a.weekStart+6)%7;c=l.parseFormat(a.format);-Infinity!==a.startDate&&(a.startDate=l.parseDate(a.startDate,
c,a.language));Infinity!==a.endDate&&(a.endDate=l.parseDate(a.endDate,c,a.language));a.daysOfWeekDisabled=a.daysOfWeekDisabled||[];b.isArray(a.daysOfWeekDisabled)||(a.daysOfWeekDisabled=a.daysOfWeekDisabled.split(/[,\s]*/));a.daysOfWeekDisabled=b.map(a.daysOfWeekDisabled,function(a){return parseInt(a,10)})},_events:[],_secondaryEvents:[],_applyEvents:function(a){for(var b=0,c,d;b<a.length;b++)c=a[b][0],d=a[b][1],c.on(d)},_unapplyEvents:function(a){for(var b=0,c,d;b<a.length;b++)c=a[b][0],d=a[b][1],
c.off(d)},_buildEvents:function(){this.isInput?this._events=[[this.element,{focus:b.proxy(this.show,this),keyup:b.proxy(this.update,this),keydown:b.proxy(this.keydown,this)}]]:this.component&&this.hasInput?this._events=[[this.element.find("input"),{focus:b.proxy(this.show,this),keyup:b.proxy(this.update,this),keydown:b.proxy(this.keydown,this)}],[this.component,{click:b.proxy(this.show,this)}]]:this.element.is("div")?this.isInline=!0:this._events=[[this.element,{click:b.proxy(this.show,this)}]];this._secondaryEvents=
[[this.picker,{click:b.proxy(this.click,this)}],[b(window),{resize:b.proxy(this.place,this)}],[b(document),{mousedown:b.proxy(function(a){this.element.is(a.target)||this.element.find(a.target).size()||this.picker.is(a.target)||this.picker.find(a.target).size()||this.hide()},this)}]]},_attachEvents:function(){this._detachEvents();this._applyEvents(this._events)},_detachEvents:function(){this._unapplyEvents(this._events)},_attachSecondaryEvents:function(){this._detachSecondaryEvents();this._applyEvents(this._secondaryEvents)},
_detachSecondaryEvents:function(){this._unapplyEvents(this._secondaryEvents)},_trigger:function(a,c){var d=c||this.date,e=new Date(d.getTime()+6E4*d.getTimezoneOffset());this.element.trigger({type:a,date:e,format:b.proxy(function(a){return l.formatDate(d,a||this.o.format,this.o.language)},this)})},show:function(a){this.isInline||this.picker.appendTo("body");this.picker.show();this.height=this.component?this.component.outerHeight():this.element.outerHeight();this.place();this._attachSecondaryEvents();
a&&a.preventDefault();this._trigger("show")},hide:function(a){!this.isInline&&this.picker.is(":visible")&&(this.picker.hide().detach(),this._detachSecondaryEvents(),this.viewMode=this.o.startView,this.showMode(),this.o.forceParse&&(this.isInput&&this.element.val()||this.hasInput&&this.element.find("input").val())&&this.setValue(),this._trigger("hide"))},remove:function(){this.hide();this._detachEvents();this._detachSecondaryEvents();this.picker.remove();delete this.element.data().datepicker;this.isInput||
delete this.element.data().date},getDate:function(){var a=this.getUTCDate();return new Date(a.getTime()+6E4*a.getTimezoneOffset())},getUTCDate:function(){return this.date},setDate:function(a){this.setUTCDate(new Date(a.getTime()-6E4*a.getTimezoneOffset()))},setUTCDate:function(a){this.date=a;this.setValue()},setValue:function(){var a=this.getFormattedDate();this.isInput?this.element.val(a):this.component&&this.element.find("input").val(a)},getFormattedDate:function(a){void 0===a&&(a=this.o.format);
return l.formatDate(this.date,a,this.o.language)},setStartDate:function(a){this._process_options({startDate:a});this.update();this.updateNavArrows()},setEndDate:function(a){this._process_options({endDate:a});this.update();this.updateNavArrows()},setDaysOfWeekDisabled:function(a){this._process_options({daysOfWeekDisabled:a});this.update();this.updateNavArrows()},place:function(){if(!this.isInline){var a=parseInt(this.element.parents().filter(function(){return"auto"!=b(this).css("z-index")}).first().css("z-index"))+
10,c=this.component?this.component.parent().offset():this.element.offset(),d=this.component?this.component.outerHeight(!0):this.element.outerHeight(!0);this.picker.css({top:c.top+d,left:c.left,zIndex:a})}},_allow_update:!0,update:function(){if(this._allow_update){var a,b=!1;arguments&&arguments.length&&("string"===typeof arguments[0]||arguments[0]instanceof Date)?(a=arguments[0],b=!0):(a=this.isInput?this.element.val():this.element.data("date")||this.element.find("input").val(),delete this.element.data().date);
this.date=l.parseDate(a,this.o.format,this.o.language);b&&this.setValue();this.viewDate=this.date<this.o.startDate?new Date(this.o.startDate):this.date>this.o.endDate?new Date(this.o.endDate):new Date(this.date);this.fill()}},fillDow:function(){var a=this.o.weekStart,b="<tr>";this.o.calendarWeeks&&(b+='<th class="cw">&nbsp;</th>',this.picker.find(".datepicker-days thead tr:first-child").prepend('<th class="cw">&nbsp;</th>'));for(;a<this.o.weekStart+7;)b+='<th class="dow">'+p[this.o.language].daysMin[a++%
7]+"</th>";b+="</tr>";this.picker.find(".datepicker-days thead").append(b)},fillMonths:function(){for(var a="",b=0;12>b;)a+='<span class="month">'+p[this.o.language].monthsShort[b++]+"</span>";this.picker.find(".datepicker-months td").html(a)},setRange:function(a){a&&a.length?this.range=b.map(a,function(a){return a.valueOf()}):delete this.range;this.fill()},getClassNames:function(a){var c=[],d=this.viewDate.getUTCFullYear(),e=this.viewDate.getUTCMonth(),f=this.date.valueOf(),g=new Date;a.getUTCFullYear()<
d||a.getUTCFullYear()==d&&a.getUTCMonth()<e?c.push("old"):(a.getUTCFullYear()>d||a.getUTCFullYear()==d&&a.getUTCMonth()>e)&&c.push("new");this.o.todayHighlight&&a.getUTCFullYear()==g.getFullYear()&&a.getUTCMonth()==g.getMonth()&&a.getUTCDate()==g.getDate()&&c.push("today");f&&a.valueOf()==f&&c.push("active");(a.valueOf()<this.o.startDate||a.valueOf()>this.o.endDate||-1!==b.inArray(a.getUTCDay(),this.o.daysOfWeekDisabled))&&c.push("disabled");this.range&&(a>this.range[0]&&a<this.range[this.range.length-
1]&&c.push("range"),-1!=b.inArray(a.valueOf(),this.range)&&c.push("selected"));return c},fill:function(){var a=new Date(this.viewDate),d=a.getUTCFullYear(),e=a.getUTCMonth(),a=-Infinity!==this.o.startDate?this.o.startDate.getUTCFullYear():-Infinity,f=-Infinity!==this.o.startDate?this.o.startDate.getUTCMonth():-Infinity,g=Infinity!==this.o.endDate?this.o.endDate.getUTCFullYear():Infinity,h=Infinity!==this.o.endDate?this.o.endDate.getUTCMonth():Infinity,m;this.picker.find(".datepicker-days thead th.datepicker-switch").text(p[this.o.language].months[e]+
" "+d);this.picker.find("tfoot th.today").text(p[this.o.language].today).toggle(!1!==this.o.todayBtn);this.picker.find("tfoot th.clear").text(p[this.o.language].clear).toggle(!1!==this.o.clearBtn);this.updateNavArrows();this.fillMonths();var k=c(d,e-1,28,0,0,0,0),e=l.getDaysInMonth(k.getUTCFullYear(),k.getUTCMonth());k.setUTCDate(e);k.setUTCDate(e-(k.getUTCDay()-this.o.weekStart+7)%7);var q=new Date(k);q.setUTCDate(q.getUTCDate()+42);for(var q=q.valueOf(),e=[],n;k.valueOf()<q;){if(k.getUTCDay()==
this.o.weekStart&&(e.push("<tr>"),this.o.calendarWeeks)){n=new Date(+k+(this.o.weekStart-k.getUTCDay()-7)%7*864E5);n=new Date(+n+(11-n.getUTCDay())%7*864E5);var v=new Date(+(v=c(n.getUTCFullYear(),0,1))+(11-v.getUTCDay())%7*864E5);e.push('<td class="cw">'+((n-v)/864E5/7+1)+"</td>")}n=this.getClassNames(k);n.push("day");var r=this.o.beforeShowDay(k);void 0===r?r={}:"boolean"===typeof r?r={enabled:r}:"string"===typeof r&&(r={classes:r});!1===r.enabled&&n.push("disabled");r.classes&&(n=n.concat(r.classes.split(/\s+/)));
r.tooltip&&(m=r.tooltip);n=b.unique(n);e.push('<td class="'+n.join(" ")+'"'+(m?' title="'+m+'"':"")+">"+k.getUTCDate()+"</td>");k.getUTCDay()==this.o.weekEnd&&e.push("</tr>");k.setUTCDate(k.getUTCDate()+1)}this.picker.find(".datepicker-days tbody").empty().append(e.join(""));m=this.date&&this.date.getUTCFullYear();e=this.picker.find(".datepicker-months").find("th:eq(1)").text(d).end().find("span").removeClass("active");m&&m==d&&e.eq(this.date.getUTCMonth()).addClass("active");(d<a||d>g)&&e.addClass("disabled");
d==a&&e.slice(0,f).addClass("disabled");d==g&&e.slice(h+1).addClass("disabled");e="";d=10*parseInt(d/10,10);f=this.picker.find(".datepicker-years").find("th:eq(1)").text(d+"-"+(d+9)).end().find("td");--d;for(h=-1;11>h;h++)e+='<span class="year'+(-1==h?" old":10==h?" new":"")+(m==d?" active":"")+(d<a||d>g?" disabled":"")+'">'+d+"</span>",d+=1;f.html(e)},updateNavArrows:function(){if(this._allow_update){var a=new Date(this.viewDate),b=a.getUTCFullYear(),a=a.getUTCMonth();switch(this.viewMode){case 0:-Infinity!==
this.o.startDate&&b<=this.o.startDate.getUTCFullYear()&&a<=this.o.startDate.getUTCMonth()?this.picker.find(".prev").css({visibility:"hidden"}):this.picker.find(".prev").css({visibility:"visible"});Infinity!==this.o.endDate&&b>=this.o.endDate.getUTCFullYear()&&a>=this.o.endDate.getUTCMonth()?this.picker.find(".next").css({visibility:"hidden"}):this.picker.find(".next").css({visibility:"visible"});break;case 1:case 2:-Infinity!==this.o.startDate&&b<=this.o.startDate.getUTCFullYear()?this.picker.find(".prev").css({visibility:"hidden"}):
this.picker.find(".prev").css({visibility:"visible"}),Infinity!==this.o.endDate&&b>=this.o.endDate.getUTCFullYear()?this.picker.find(".next").css({visibility:"hidden"}):this.picker.find(".next").css({visibility:"visible"})}}},click:function(a){a.preventDefault();a=b(a.target).closest("span, td, th");if(1==a.length)switch(a[0].nodeName.toLowerCase()){case "th":switch(a[0].className){case "datepicker-switch":this.showMode(1);break;case "prev":case "next":a=l.modes[this.viewMode].navStep*("prev"==a[0].className?
-1:1);switch(this.viewMode){case 0:this.viewDate=this.moveMonth(this.viewDate,a);break;case 1:case 2:this.viewDate=this.moveYear(this.viewDate,a)}this.fill();break;case "today":a=new Date;a=c(a.getFullYear(),a.getMonth(),a.getDate(),0,0,0);this.showMode(-2);this._setDate(a,"linked"==this.o.todayBtn?null:"view");break;case "clear":var d;this.isInput?d=this.element:this.component&&(d=this.element.find("input"));d&&d.val("").change();this._trigger("changeDate");this.update();this.o.autoclose&&this.hide()}break;
case "span":if(!a.is(".disabled")){this.viewDate.setUTCDate(1);if(a.is(".month")){d=1;var e=a.parent().find("span").index(a),f=this.viewDate.getUTCFullYear();this.viewDate.setUTCMonth(e);this._trigger("changeMonth",this.viewDate);1===this.o.minViewMode&&this._setDate(c(f,e,d,0,0,0,0))}else f=parseInt(a.text(),10)||0,d=1,e=0,this.viewDate.setUTCFullYear(f),this._trigger("changeYear",this.viewDate),2===this.o.minViewMode&&this._setDate(c(f,e,d,0,0,0,0));this.showMode(-1);this.fill()}break;case "td":a.is(".day")&&
!a.is(".disabled")&&(d=parseInt(a.text(),10)||1,f=this.viewDate.getUTCFullYear(),e=this.viewDate.getUTCMonth(),a.is(".old")?0===e?(e=11,--f):--e:a.is(".new")&&(11==e?(e=0,f+=1):e+=1),this._setDate(c(f,e,d,0,0,0,0)))}},_setDate:function(a,b){b&&"date"!=b||(this.date=new Date(a));b&&"view"!=b||(this.viewDate=new Date(a));this.fill();this.setValue();this._trigger("changeDate");var c;this.isInput?c=this.element:this.component&&(c=this.element.find("input"));c&&(c.change(),!this.o.autoclose||b&&"date"!=
b||this.hide())},moveMonth:function(a,b){if(!b)return a;var c=new Date(a.valueOf()),d=c.getUTCDate(),e=c.getUTCMonth(),f=Math.abs(b),g;b=0<b?1:-1;if(1==f){if(f=-1==b?function(){return c.getUTCMonth()==e}:function(){return c.getUTCMonth()!=g},g=e+b,c.setUTCMonth(g),0>g||11<g)g=(g+12)%12}else{for(var h=0;h<f;h++)c=this.moveMonth(c,b);g=c.getUTCMonth();c.setUTCDate(d);f=function(){return g!=c.getUTCMonth()}}for(;f();)c.setUTCDate(--d),c.setUTCMonth(g);return c},moveYear:function(a,b){return this.moveMonth(a,
12*b)},dateWithinRange:function(a){return a>=this.o.startDate&&a<=this.o.endDate},keydown:function(a){if(this.picker.is(":not(:visible)"))27==a.keyCode&&this.show();else{var b=!1,c,d,e;switch(a.keyCode){case 27:this.hide();a.preventDefault();break;case 37:case 39:if(!this.o.keyboardNavigation)break;c=37==a.keyCode?-1:1;a.ctrlKey?(d=this.moveYear(this.date,c),e=this.moveYear(this.viewDate,c)):a.shiftKey?(d=this.moveMonth(this.date,c),e=this.moveMonth(this.viewDate,c)):(d=new Date(this.date),d.setUTCDate(this.date.getUTCDate()+
c),e=new Date(this.viewDate),e.setUTCDate(this.viewDate.getUTCDate()+c));this.dateWithinRange(d)&&(this.date=d,this.viewDate=e,this.setValue(),this.update(),a.preventDefault(),b=!0);break;case 38:case 40:if(!this.o.keyboardNavigation)break;c=38==a.keyCode?-1:1;a.ctrlKey?(d=this.moveYear(this.date,c),e=this.moveYear(this.viewDate,c)):a.shiftKey?(d=this.moveMonth(this.date,c),e=this.moveMonth(this.viewDate,c)):(d=new Date(this.date),d.setUTCDate(this.date.getUTCDate()+7*c),e=new Date(this.viewDate),
e.setUTCDate(this.viewDate.getUTCDate()+7*c));this.dateWithinRange(d)&&(this.date=d,this.viewDate=e,this.setValue(),this.update(),a.preventDefault(),b=!0);break;case 13:this.hide();a.preventDefault();break;case 9:this.hide()}if(b){this._trigger("changeDate");var f;this.isInput?f=this.element:this.component&&(f=this.element.find("input"));f&&f.change()}}},showMode:function(a){a&&(this.viewMode=Math.max(this.o.minViewMode,Math.min(2,this.viewMode+a)));this.picker.find(">div").hide().filter(".datepicker-"+
l.modes[this.viewMode].clsName).css("display","block");this.updateNavArrows()}};var f=function(a,c){this.element=b(a);this.inputs=b.map(c.inputs,function(a){return a.jquery?a[0]:a});delete c.inputs;b(this.inputs).datepicker(c).bind("changeDate",b.proxy(this.dateUpdated,this));this.pickers=b.map(this.inputs,function(a){return b(a).data("datepicker")});this.updateDates()};f.prototype={updateDates:function(){this.dates=b.map(this.pickers,function(a){return a.date});this.updateRanges()},updateRanges:function(){var a=
b.map(this.dates,function(a){return a.valueOf()});b.each(this.pickers,function(b,c){c.setRange(a)})},dateUpdated:function(a){var c=b(a.target).data("datepicker").getUTCDate();a=b.inArray(a.target,this.inputs);var d=this.inputs.length;if(-1!=a){if(c<this.dates[a])for(;0<=a&&c<this.dates[a];)this.pickers[a--].setUTCDate(c);else if(c>this.dates[a])for(;a<d&&c>this.dates[a];)this.pickers[a++].setUTCDate(c);this.updateDates()}},remove:function(){b.map(this.pickers,function(a){a.remove()});delete this.element.data().datepicker}};
var g=b.fn.datepicker,h=b.fn.datepicker=function(c){var g=Array.apply(null,arguments);g.shift();var h;this.each(function(){var l=b(this),t=l.data("datepicker"),u="object"==typeof c&&c;if(!t){var t=a(this,"date"),m=b.extend({},k,t,u),m=d(m.language),u=b.extend({},k,m,t,u);l.is(".input-daterange")||u.inputs?(t={inputs:u.inputs||l.find("input").toArray()},l.data("datepicker",t=new f(this,b.extend(u,t)))):l.data("datepicker",t=new e(this,u))}if("string"==typeof c&&"function"==typeof t[c]&&(h=t[c].apply(t,
g),void 0!==h))return!1});return void 0!==h?h:this},k=b.fn.datepicker.defaults={autoclose:!1,beforeShowDay:b.noop,calendarWeeks:!1,clearBtn:!1,daysOfWeekDisabled:[],endDate:Infinity,forceParse:!0,format:"mm/dd/yyyy",keyboardNavigation:!0,language:"en",minViewMode:0,rtl:!1,startDate:-Infinity,startView:0,todayBtn:!1,todayHighlight:!1,weekStart:0},x=b.fn.datepicker.locale_opts=["format","rtl","weekStart"];b.fn.datepicker.Constructor=e;var p=b.fn.datepicker.dates={en:{days:"Sunday Monday Tuesday Wednesday Thursday Friday Saturday Sunday".split(" "),
daysShort:"Sun Mon Tue Wed Thu Fri Sat Sun".split(" "),daysMin:"Su Mo Tu We Th Fr Sa Su".split(" "),months:"January February March April May June July August September October November December".split(" "),monthsShort:"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),today:"Today",clear:"Clear"}},l={modes:[{clsName:"days",navFnc:"Month",navStep:1},{clsName:"months",navFnc:"FullYear",navStep:1},{clsName:"years",navFnc:"FullYear",navStep:10}],isLeapYear:function(a){return 0===a%4&&0!==a%
100||0===a%400},getDaysInMonth:function(a,b){return[31,l.isLeapYear(a)?29:28,31,30,31,30,31,31,30,31,30,31][b]},validParts:/dd?|DD?|mm?|MM?|yy(?:yy)?/g,nonpunctuation:/[^ -\/:-@\[\u3400-\u9fff-`{-~\t\n\r]+/g,parseFormat:function(a){var b=a.replace(this.validParts,"\x00").split("\x00");a=a.match(this.validParts);if(!b||!b.length||!a||0===a.length)throw Error("Invalid date format.");return{separators:b,parts:a}},parseDate:function(a,d,f){if(a instanceof Date)return a;"string"===typeof d&&(d=l.parseFormat(d));
if(/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/.test(a)){var g=/([\-+]\d+)([dmwy])/,h=a.match(/([\-+]\d+)([dmwy])/g),k;a=new Date;for(var m=0;m<h.length;m++)switch(d=g.exec(h[m]),k=parseInt(d[1]),d[2]){case "d":a.setUTCDate(a.getUTCDate()+k);break;case "m":a=e.prototype.moveMonth.call(e.prototype,a,k);break;case "w":a.setUTCDate(a.getUTCDate()+7*k);break;case "y":a=e.prototype.moveYear.call(e.prototype,a,k)}return c(a.getUTCFullYear(),a.getUTCMonth(),a.getUTCDate(),0,0,0)}h=a&&a.match(this.nonpunctuation)||
[];a=new Date;var g={},w="yyyy yy M MM m mm d dd".split(" ");k={yyyy:function(a,b){return a.setUTCFullYear(b)},yy:function(a,b){return a.setUTCFullYear(2E3+b)},m:function(a,b){for(--b;0>b;)b+=12;b%=12;for(a.setUTCMonth(b);a.getUTCMonth()!=b;)a.setUTCDate(a.getUTCDate()-1);return a},d:function(a,b){return a.setUTCDate(b)}};var q;k.M=k.MM=k.mm=k.m;k.dd=k.d;a=c(a.getFullYear(),a.getMonth(),a.getDate(),0,0,0);var n=d.parts.slice();h.length!=n.length&&(n=b(n).filter(function(a,c){return-1!==b.inArray(c,
w)}).toArray());if(h.length==n.length){for(var m=0,v=n.length;m<v;m++){q=parseInt(h[m],10);d=n[m];if(isNaN(q))switch(d){case "MM":q=b(p[f].months).filter(function(){var a=this.slice(0,h[m].length),b=h[m].slice(0,a.length);return a==b});q=b.inArray(q[0],p[f].months)+1;break;case "M":q=b(p[f].monthsShort).filter(function(){var a=this.slice(0,h[m].length),b=h[m].slice(0,a.length);return a==b}),q=b.inArray(q[0],p[f].monthsShort)+1}g[d]=q}for(m=0;m<w.length;m++)if(d=w[m],d in g&&!isNaN(g[d]))k[d](a,g[d])}return a},
formatDate:function(a,c,d){"string"===typeof c&&(c=l.parseFormat(c));d={d:a.getUTCDate(),D:p[d].daysShort[a.getUTCDay()],DD:p[d].days[a.getUTCDay()],m:a.getUTCMonth()+1,M:p[d].monthsShort[a.getUTCMonth()],MM:p[d].months[a.getUTCMonth()],yy:a.getUTCFullYear().toString().substring(2),yyyy:a.getUTCFullYear()};d.dd=(10>d.d?"0":"")+d.d;d.mm=(10>d.m?"0":"")+d.m;a=[];for(var e=b.extend([],c.separators),f=0,g=c.parts.length;f<=g;f++)e.length&&a.push(e.shift()),a.push(d[c.parts[f]]);return a.join("")},headTemplate:'<thead><tr><th class="prev"><i class="icon-arrow-left"/></th><th colspan="5" class="datepicker-switch"></th><th class="next"><i class="icon-arrow-right"/></th></tr></thead>',
contTemplate:'<tbody><tr><td colspan="7"></td></tr></tbody>',footTemplate:'<tfoot><tr><th colspan="7" class="today"></th></tr><tr><th colspan="7" class="clear"></th></tr></tfoot>'};l.template='<div class="datepicker"><div class="datepicker-days"><table class=" table-condensed">'+l.headTemplate+"<tbody></tbody>"+l.footTemplate+'</table></div><div class="datepicker-months"><table class="table-condensed">'+l.headTemplate+l.contTemplate+l.footTemplate+'</table></div><div class="datepicker-years"><table class="table-condensed">'+
l.headTemplate+l.contTemplate+l.footTemplate+"</table></div></div>";b.fn.datepicker.DPGlobal=l;b.fn.datepicker.noConflict=function(){b.fn.datepicker=g;return this};b(document).on("focus.datepicker.data-api click.datepicker.data-api",'[data-provide="datepicker"]',function(a){var c=b(this);c.data("datepicker")||(a.preventDefault(),h.call(c,"show"))});b(function(){h.call(b('[data-provide="datepicker-inline"]'))})})(window.jQuery);
(function(b){b.fn.bdatepicker=b.fn.datepicker.noConflict();b.fn.datepicker||(b.fn.datepicker=b.fn.bdatepicker);var c=function(a){this.init("date",a,c.defaults);this.initPicker(a,c.defaults)};b.fn.editableutils.inherit(c,b.fn.editabletypes.abstractinput);b.extend(c.prototype,{initPicker:function(a,c){this.options.viewformat||(this.options.viewformat=this.options.format);this.options.datepicker=b.extend({},c.datepicker,a.datepicker,{format:this.options.viewformat});this.options.datepicker.language=
this.options.datepicker.language||"en";this.dpg=b.fn.bdatepicker.DPGlobal;this.parsedFormat=this.dpg.parseFormat(this.options.format);this.parsedViewFormat=this.dpg.parseFormat(this.options.viewformat)},render:function(){this.$input.bdatepicker(this.options.datepicker);this.options.clear&&(this.$clear=b('<a href="#"></a>').html(this.options.clear).click(b.proxy(function(a){a.preventDefault();a.stopPropagation();this.clear()},this)),this.$tpl.parent().append(b('<div class="editable-clear">').append(this.$clear)))},
value2html:function(a,b){var e=a?this.dpg.formatDate(a,this.parsedViewFormat,this.options.datepicker.language):"";c.superclass.value2html(e,b)},html2value:function(a){return this.parseDate(a,this.parsedViewFormat)},value2str:function(a){return a?this.dpg.formatDate(a,this.parsedFormat,this.options.datepicker.language):""},str2value:function(a){return this.parseDate(a,this.parsedFormat)},value2submit:function(a){return this.value2str(a)},value2input:function(a){this.$input.bdatepicker("update",a)},
input2value:function(){return this.$input.data("datepicker").date},activate:function(){},clear:function(){this.$input.data("datepicker").date=null;this.$input.find(".active").removeClass("active");this.options.showbuttons||this.$input.closest("form").submit()},autosubmit:function(){this.$input.on("mouseup",".day",function(a){if(!b(a.currentTarget).is(".old")&&!b(a.currentTarget).is(".new")){var c=b(this).closest("form");setTimeout(function(){c.submit()},200)}})},parseDate:function(a,b){var c=null,
f;a&&(c=this.dpg.parseDate(a,b,this.options.datepicker.language),"string"===typeof a&&(f=this.dpg.formatDate(c,b,this.options.datepicker.language),a!==f&&(c=null)));return c}});c.defaults=b.extend({},b.fn.editabletypes.abstractinput.defaults,{tpl:'<div class="editable-date well"></div>',inputclass:null,format:"yyyy-mm-dd",viewformat:null,datepicker:{weekStart:0,startView:0,minViewMode:0,autoclose:!1},clear:"&times; clear"});b.fn.editabletypes.date=c})(window.jQuery);
(function(b){var c=function(a){this.init("datefield",a,c.defaults);this.initPicker(a,c.defaults)};b.fn.editableutils.inherit(c,b.fn.editabletypes.date);b.extend(c.prototype,{render:function(){this.$input=this.$tpl.find("input");this.setClass();this.setAttr("placeholder");this.$tpl.bdatepicker(this.options.datepicker);this.$input.off("focus keydown");this.$input.keyup(b.proxy(function(){this.$tpl.removeData("date");this.$tpl.bdatepicker("update")},this))},value2input:function(a){this.$input.val(a?
this.dpg.formatDate(a,this.parsedViewFormat,this.options.datepicker.language):"");this.$tpl.bdatepicker("update")},input2value:function(){return this.html2value(this.$input.val())},activate:function(){b.fn.editabletypes.text.prototype.activate.call(this)},autosubmit:function(){}});c.defaults=b.extend({},b.fn.editabletypes.date.defaults,{tpl:'<div class="input-append date"><input type="text"/><span class="add-on"><i class="icon-th"></i></span></div>',inputclass:"input-small",datepicker:{weekStart:0,
startView:0,minViewMode:0,autoclose:!0}});b.fn.editabletypes.datefield=c})(window.jQuery);
(function(b){var c=function(a){this.init("datetime",a,c.defaults);this.initPicker(a,c.defaults)};b.fn.editableutils.inherit(c,b.fn.editabletypes.abstractinput);b.extend(c.prototype,{initPicker:function(a,c){this.options.viewformat||(this.options.viewformat=this.options.format);this.options.datetimepicker=b.extend({},c.datetimepicker,a.datetimepicker,{format:this.options.viewformat});this.options.datetimepicker.language=this.options.datetimepicker.language||"en";this.dpg=b.fn.datetimepicker.DPGlobal;
this.parsedFormat=this.dpg.parseFormat(this.options.format,this.options.formatType);this.parsedViewFormat=this.dpg.parseFormat(this.options.viewformat,this.options.formatType)},render:function(){this.$input.datetimepicker(this.options.datetimepicker);this.$input.on("changeMode",function(a){var c=b(this).closest("form").parent();setTimeout(function(){c.triggerHandler("resize")},0)});this.options.clear&&(this.$clear=b('<a href="#"></a>').html(this.options.clear).click(b.proxy(function(a){a.preventDefault();
a.stopPropagation();this.clear()},this)),this.$tpl.parent().append(b('<div class="editable-clear">').append(this.$clear)))},value2html:function(a,b){var e=a?this.dpg.formatDate(this.toUTC(a),this.parsedViewFormat,this.options.datetimepicker.language,this.options.formatType):"";if(b)c.superclass.value2html(e,b);else return e},html2value:function(a){return(a=this.parseDate(a,this.parsedViewFormat))?this.fromUTC(a):null},value2str:function(a){return a?this.dpg.formatDate(this.toUTC(a),this.parsedFormat,
this.options.datetimepicker.language,this.options.formatType):""},str2value:function(a){return(a=this.parseDate(a,this.parsedFormat))?this.fromUTC(a):null},value2submit:function(a){return this.value2str(a)},value2input:function(a){a&&this.$input.data("datetimepicker").setDate(a)},input2value:function(){var a=this.$input.data("datetimepicker");return a.date?a.getDate():null},activate:function(){},clear:function(){this.$input.data("datetimepicker").date=null;this.$input.find(".active").removeClass("active");
this.options.showbuttons||this.$input.closest("form").submit()},autosubmit:function(){this.$input.on("mouseup",".minute",function(a){var c=b(this).closest("form");setTimeout(function(){c.submit()},200)})},toUTC:function(a){return a?new Date(a.valueOf()-6E4*a.getTimezoneOffset()):a},fromUTC:function(a){return a?new Date(a.valueOf()+6E4*a.getTimezoneOffset()):a},parseDate:function(a,b){var c=null,f;a&&(c=this.dpg.parseDate(a,b,this.options.datetimepicker.language,this.options.formatType),"string"===
typeof a&&(f=this.dpg.formatDate(c,b,this.options.datetimepicker.language,this.options.formatType),a!==f&&(c=null)));return c}});c.defaults=b.extend({},b.fn.editabletypes.abstractinput.defaults,{tpl:'<div class="editable-date well"></div>',inputclass:null,format:"yyyy-mm-dd hh:ii",formatType:"standard",viewformat:null,datetimepicker:{todayHighlight:!1,autoclose:!1},clear:"&times; clear"});b.fn.editabletypes.datetime=c})(window.jQuery);
(function(b){var c=function(a){this.init("datetimefield",a,c.defaults);this.initPicker(a,c.defaults)};b.fn.editableutils.inherit(c,b.fn.editabletypes.datetime);b.extend(c.prototype,{render:function(){this.$input=this.$tpl.find("input");this.setClass();this.setAttr("placeholder");this.$tpl.datetimepicker(this.options.datetimepicker);this.$input.off("focus keydown");this.$input.keyup(b.proxy(function(){this.$tpl.removeData("date");this.$tpl.datetimepicker("update")},this))},value2input:function(a){this.$input.val(this.value2html(a));
this.$tpl.datetimepicker("update")},input2value:function(){return this.html2value(this.$input.val())},activate:function(){b.fn.editabletypes.text.prototype.activate.call(this)},autosubmit:function(){}});c.defaults=b.extend({},b.fn.editabletypes.datetime.defaults,{tpl:'<div class="input-append date"><input type="text"/><span class="add-on"><i class="icon-th"></i></span></div>',inputclass:"input-medium",datetimepicker:{todayHighlight:!1,autoclose:!0}});b.fn.editabletypes.datetimefield=c})(window.jQuery);
(function(b){var c=function(a){this.init("typeahead",a,c.defaults);this.options.typeahead=b.extend({},c.defaults.typeahead,{matcher:this.matcher,sorter:this.sorter,highlighter:this.highlighter,updater:this.updater},a.typeahead)};b.fn.editableutils.inherit(c,b.fn.editabletypes.list);b.extend(c.prototype,{renderList:function(){this.$input=this.$tpl.is("input")?this.$tpl:this.$tpl.find('input[type="text"]');this.options.typeahead.source=this.sourceData;this.$input.typeahead(this.options.typeahead);var a=
this.$input.data("typeahead");a.render=b.proxy(this.typeaheadRender,a);a.select=b.proxy(this.typeaheadSelect,a);a.move=b.proxy(this.typeaheadMove,a);this.renderClear();this.setClass();this.setAttr("placeholder")},value2htmlFinal:function(a,c){if(this.getIsObjects()){var e=b.fn.editableutils.itemsByValue(a,this.sourceData);b(c).text(e.length?e[0].text:"")}else b(c).text(a)},html2value:function(a){return a?a:null},value2input:function(a){if(this.getIsObjects()){var c=b.fn.editableutils.itemsByValue(a,
this.sourceData);this.$input.data("value",a).val(c.length?c[0].text:"")}else this.$input.val(a)},input2value:function(){if(this.getIsObjects()){var a=this.$input.data("value"),c=b.fn.editableutils.itemsByValue(a,this.sourceData);return c.length&&c[0].text.toLowerCase()===this.$input.val().toLowerCase()?a:null}return this.$input.val()},getIsObjects:function(){if(void 0===this.isObjects){this.isObjects=!1;for(var a=0;a<this.sourceData.length;a++)if(this.sourceData[a].value!==this.sourceData[a].text){this.isObjects=
!0;break}}return this.isObjects},activate:b.fn.editabletypes.text.prototype.activate,renderClear:b.fn.editabletypes.text.prototype.renderClear,postrender:b.fn.editabletypes.text.prototype.postrender,toggleClear:b.fn.editabletypes.text.prototype.toggleClear,clear:function(){b.fn.editabletypes.text.prototype.clear.call(this);this.$input.data("value","")},matcher:function(a){return b.fn.typeahead.Constructor.prototype.matcher.call(this,a.text)},sorter:function(a){for(var b=[],c=[],f=[],g,h;g=a.shift();)h=
g.text,h.toLowerCase().indexOf(this.query.toLowerCase())?~h.indexOf(this.query)?c.push(g):f.push(g):b.push(g);return b.concat(c,f)},highlighter:function(a){return b.fn.typeahead.Constructor.prototype.highlighter.call(this,a.text)},updater:function(a){this.$element.data("value",a.value);return a.text},typeaheadRender:function(a){var c=this;a=b(a).map(function(a,f){a=b(c.options.item).data("item",f);a.find("a").html(c.highlighter(f));return a[0]});this.options.autoSelect&&a.first().addClass("active");
this.$menu.html(a);return this},typeaheadSelect:function(){var a=this.$menu.find(".active").data("item");(this.options.autoSelect||a)&&this.$element.val(this.updater(a)).change();return this.hide()},typeaheadMove:function(a){if(this.shown){switch(a.keyCode){case 9:case 13:case 27:if(!this.$menu.find(".active").length)return;a.preventDefault();break;case 38:a.preventDefault();this.prev();break;case 40:a.preventDefault(),this.next()}a.stopPropagation()}}});c.defaults=b.extend({},b.fn.editabletypes.list.defaults,
{tpl:'<input type="text">',typeahead:null,clear:!0});b.fn.editabletypes.typeahead=c})(window.jQuery);;
(function(a){a.fn.Setcase=function(e){var c={caseValue:"Upper",changeonFocusout:!1,changebyDefault:!1};e&&a.extend(c,e);this.each(function(){if(1==c.changebyDefault)if("upper"==c.caseValue){var d=a(this).val();a(this).val(d.toUpperCase())}else"lower"==c.caseValue?(d=a(this).val(),a(this).val(d.toLowerCase())):"uc_first"==c.caseValue?(d=a(this).val(),a(this).val(d.charAt(0).toUpperCase()+d.slice(1).toLowerCase())):"uc_word"==c.caseValue?(d=a(this).val(),a(this).val(d.replace(/^(.)|\s(.)/g,function(a){return a.toUpperCase()}))):
"pascal"==c.caseValue&&(d=a(this).val(),d=d.toLowerCase().replace(/\b[a-z]/g,function(a){return a.toUpperCase()}),a(this).val(d));0==c.changeonFocusout&&(a(this).off("input"),a(this).on("input",function(){if("upper"==c.caseValue){var b=a(this).val();a(this).val(b.toUpperCase())}else"lower"==c.caseValue?(b=a(this).val(),a(this).val(b.toLowerCase())):"uc_first"==c.caseValue?(b=a(this).val(),a(this).val(b.charAt(0).toUpperCase()+b.slice(1).toLowerCase())):"uc_word"==c.caseValue?(b=a(this).val(),a(this).val(b.replace(/^(.)|\s(.)/g,
function(a){return a.toUpperCase()}))):"pascal"==c.caseValue&&(b=a(this).val(),b=b.toLowerCase().replace(/\b[a-z]/g,function(a){return a.toUpperCase()}),a(this).val(b))}));a(this).blur(function(){if("upper"==c.caseValue){var b=a(this).val();a(this).val(b.toUpperCase())}else"lower"==c.caseValue?(b=a(this).val(),a(this).val(b.toLowerCase())):"uc_first"==c.caseValue?(b=a(this).val(),a(this).val(b.charAt(0).toUpperCase()+b.slice(1).toLowerCase())):"uc_word"==c.caseValue?(b=a(this).val(),a(this).val(b.replace(/^(.)|\s(.)/g,
function(a){return a.toUpperCase()}))):"pascal"==c.caseValue&&(b=a(this).val(),b=b.toLowerCase().replace(/\b[a-z]/g,function(a){return a.toUpperCase()}),a(this).val(b))})})}})(jQuery);;
(function(d){function e(a){var b=a||window.event,c=[].slice.call(arguments,1),f=0,e=0,g=0,a=d.event.fix(b);a.type="mousewheel";b.wheelDelta&&(f=b.wheelDelta/120);b.detail&&(f=-b.detail/3);g=f;b.axis!==void 0&&b.axis===b.HORIZONTAL_AXIS&&(g=0,e=-1*f);b.wheelDeltaY!==void 0&&(g=b.wheelDeltaY/120);b.wheelDeltaX!==void 0&&(e=-1*b.wheelDeltaX/120);c.unshift(a,f,e,g);return(d.event.dispatch||d.event.handle).apply(this,c)}var c=["DOMMouseScroll","mousewheel"];if(d.event.fixHooks)for(var h=c.length;h;)d.event.fixHooks[c[--h]]=d.event.mouseHooks;d.event.special.mousewheel={setup:function(){if(this.addEventListener)for(var a=c.length;a;)this.addEventListener(c[--a],e,false);else this.onmousewheel=e},teardown:function(){if(this.removeEventListener)for(var a=c.length;a;)this.removeEventListener(c[--a],e,false);else this.onmousewheel=null}};d.fn.extend({mousewheel:function(a){return a?this.bind("mousewheel",a):this.trigger("mousewheel")},unmousewheel:function(a){return this.unbind("mousewheel",a)}})})(jQuery);;
(function(E,B,f,t){var r=f(E),p=f(B),b=f.fancybox=function(){b.open.apply(this,arguments)},J=navigator.userAgent.match(/msie/),y=null,u=B.createTouch!==t,v=function(a){return a&&a.hasOwnProperty&&a instanceof f},q=function(a){return a&&"string"===f.type(a)},H=function(a){return q(a)&&0<a.indexOf("%")},m=function(a,d){var e=parseInt(a,10)||0;d&&H(a)&&(e*=b.getViewport()[d]/100);return Math.ceil(e)},z=function(a,b){return m(a,b)+"px"};f.extend(b,{version:"2.1.4",defaults:{padding:15,margin:20,width:800,
height:600,minWidth:100,minHeight:100,maxWidth:9999,maxHeight:9999,autoSize:!0,autoHeight:!1,autoWidth:!1,autoResize:!0,autoCenter:!u,fitToView:!0,aspectRatio:!1,topRatio:.5,leftRatio:.5,scrolling:"auto",wrapCSS:"",arrows:!0,closeBtn:!0,closeClick:!1,nextClick:!1,mouseWheel:!0,autoPlay:!1,playSpeed:3E3,preload:3,modal:!1,loop:!0,ajax:{dataType:"html",headers:{"X-fancyBox":!0}},iframe:{scrolling:"auto",preload:!0},swf:{wmode:"transparent",allowfullscreen:"true",allowscriptaccess:"always"},keys:{next:{13:"left",
34:"up",39:"left",40:"up"},prev:{8:"right",33:"down",37:"right",38:"down"},close:[27],play:[32],toggle:[70]},direction:{next:"left",prev:"right"},scrollOutside:!0,index:0,type:null,href:null,content:null,title:null,tpl:{wrap:'<div class="fancybox-wrap" tabIndex="-1"><div class="fancybox-skin"><div class="fancybox-outer"><div class="fancybox-inner"></div></div></div></div>',image:'<img class="fancybox-image" src="{href}" alt="" />',iframe:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen'+
(J?' allowtransparency="true"':"")+"></iframe>",error:'<p class="fancybox-error">The requested content cannot be loaded.<br/>Please try again later.</p>',closeBtn:'<a title="Close" class="fancybox-item fancybox-close" href="javascript:;"></a>',next:'<a title="Next" class="fancybox-nav fancybox-next" href="javascript:;"><span></span></a>',prev:'<a title="Previous" class="fancybox-nav fancybox-prev" href="javascript:;"><span></span></a>'},openEffect:"fade",openSpeed:250,openEasing:"swing",openOpacity:!0,
openMethod:"zoomIn",closeEffect:"fade",closeSpeed:250,closeEasing:"swing",closeOpacity:!0,closeMethod:"zoomOut",nextEffect:"elastic",nextSpeed:250,nextEasing:"swing",nextMethod:"changeIn",prevEffect:"elastic",prevSpeed:250,prevEasing:"swing",prevMethod:"changeOut",helpers:{overlay:!0,title:!0},onCancel:f.noop,beforeLoad:f.noop,afterLoad:f.noop,beforeShow:f.noop,afterShow:f.noop,beforeChange:f.noop,beforeClose:f.noop,afterClose:f.noop},group:{},opts:{},previous:null,coming:null,current:null,isActive:!1,
isOpen:!1,isOpened:!1,wrap:null,skin:null,outer:null,inner:null,player:{timer:null,isActive:!1},ajaxLoad:null,imgPreload:null,transitions:{},helpers:{},open:function(a,d){if(a&&(f.isPlainObject(d)||(d={}),!1!==b.close(!0)))return f.isArray(a)||(a=v(a)?f(a).get():[a]),f.each(a,function(e,c){var l={},g,k,h,n,m;"object"===f.type(c)&&(c.nodeType&&(c=f(c)),v(c)?(l={href:c.data("fancybox-href")||c.attr("href"),title:c.data("fancybox-title")||c.attr("title"),isDom:!0,element:c},f.metadata&&f.extend(!0,l,
c.metadata())):l=c);g=d.href||l.href||(q(c)?c:null);k=d.title!==t?d.title:l.title||"";n=(h=d.content||l.content)?"html":d.type||l.type;!n&&l.isDom&&(n=c.data("fancybox-type"),n||(n=(n=c.prop("class").match(/fancybox\.(\w+)/))?n[1]:null));q(g)&&(n||(b.isImage(g)?n="image":b.isSWF(g)?n="swf":"#"===g.charAt(0)?n="inline":q(c)&&(n="html",h=c)),"ajax"===n&&(m=g.split(/\s+/,2),g=m.shift(),m=m.shift()));h||("inline"===n?g?h=f(q(g)?g.replace(/.*(?=#[^\s]+$)/,""):g):l.isDom&&(h=c):"html"===n?h=g:n||g||!l.isDom||
(n="inline",h=c));f.extend(l,{href:g,type:n,content:h,title:k,selector:m});a[e]=l}),b.opts=f.extend(!0,{},b.defaults,d),d.keys!==t&&(b.opts.keys=d.keys?f.extend({},b.defaults.keys,d.keys):!1),b.group=a,b._start(b.opts.index)},cancel:function(){var a=b.coming;a&&!1!==b.trigger("onCancel")&&(b.hideLoading(),b.ajaxLoad&&b.ajaxLoad.abort(),b.ajaxLoad=null,b.imgPreload&&(b.imgPreload.onload=b.imgPreload.onerror=null),a.wrap&&a.wrap.stop(!0,!0).trigger("onReset").remove(),b.coming=null,b.current||b._afterZoomOut(a))},
close:function(a){b.cancel();!1!==b.trigger("beforeClose")&&(b.unbindEvents(),b.isActive&&(b.isOpen&&!0!==a?(b.isOpen=b.isOpened=!1,b.isClosing=!0,f(".fancybox-item, .fancybox-nav").remove(),b.wrap.stop(!0,!0).removeClass("fancybox-opened"),b.transitions[b.current.closeMethod]()):(f(".fancybox-wrap").stop(!0).trigger("onReset").remove(),b._afterZoomOut())))},play:function(a){var d=function(){clearTimeout(b.player.timer)},e=function(){d();b.current&&b.player.isActive&&(b.player.timer=setTimeout(b.next,
b.current.playSpeed))},c=function(){d();f("body").unbind(".player");b.player.isActive=!1;b.trigger("onPlayEnd")};!0===a||!b.player.isActive&&!1!==a?b.current&&(b.current.loop||b.current.index<b.group.length-1)&&(b.player.isActive=!0,f("body").bind({"afterShow.player onUpdate.player":e,"onCancel.player beforeClose.player":c,"beforeLoad.player":d}),e(),b.trigger("onPlayStart")):c()},next:function(a){var d=b.current;d&&(q(a)||(a=d.direction.next),b.jumpto(d.index+1,a,"next"))},prev:function(a){var d=
b.current;d&&(q(a)||(a=d.direction.prev),b.jumpto(d.index-1,a,"prev"))},jumpto:function(a,d,e){var c=b.current;c&&(a=m(a),b.direction=d||c.direction[a>=c.index?"next":"prev"],b.router=e||"jumpto",c.loop&&(0>a&&(a=c.group.length+a%c.group.length),a%=c.group.length),c.group[a]!==t&&(b.cancel(),b._start(a)))},reposition:function(a,d){var e=b.current,c=e?e.wrap:null,l;c&&(l=b._getPosition(d),a&&"scroll"===a.type?(delete l.position,c.stop(!0,!0).animate(l,200)):(c.css(l),e.pos=f.extend({},e.dim,l)))},
update:function(a){var d=a&&a.type,e=!d||"orientationchange"===d;e&&(clearTimeout(y),y=null);b.isOpen&&!y&&(y=setTimeout(function(){var c=b.current;c&&!b.isClosing&&(b.wrap.removeClass("fancybox-tmp"),(e||"load"===d||"resize"===d&&c.autoResize)&&b._setDimension(),"scroll"===d&&c.canShrink||b.reposition(a),b.trigger("onUpdate"),y=null)},e&&!u?0:300))},toggle:function(a){b.isOpen&&(b.current.fitToView="boolean"===f.type(a)?a:!b.current.fitToView,u&&(b.wrap.removeAttr("style").addClass("fancybox-tmp"),
b.trigger("onUpdate")),b.update())},hideLoading:function(){p.unbind(".loading");f("#fancybox-loading").remove()},showLoading:function(){var a,d;b.hideLoading();a=f('<div id="fancybox-loading"><div></div></div>').click(b.cancel).appendTo("body");p.bind("keydown.loading",function(a){27===(a.which||a.keyCode)&&(a.preventDefault(),b.cancel())});b.defaults.fixed||(d=b.getViewport(),a.css({position:"absolute",top:.5*d.h+d.y,left:.5*d.w+d.x}))},getViewport:function(){var a=b.current&&b.current.locked||!1,
d={x:r.scrollLeft(),y:r.scrollTop()};a?(d.w=a[0].clientWidth,d.h=a[0].clientHeight):(d.w=u&&E.innerWidth?E.innerWidth:r.width(),d.h=u&&E.innerHeight?E.innerHeight:r.height());return d},unbindEvents:function(){b.wrap&&v(b.wrap)&&b.wrap.unbind(".fb");p.unbind(".fb");r.unbind(".fb")},bindEvents:function(){var a=b.current,d;a&&(r.bind("orientationchange.fb"+(u?"":" resize.fb")+(a.autoCenter&&!a.locked?" scroll.fb":""),b.update),(d=a.keys)&&p.bind("keydown.fb",function(e){var c=e.which||e.keyCode,l=e.target||
e.srcElement;if(27===c&&b.coming)return!1;e.ctrlKey||e.altKey||e.shiftKey||e.metaKey||l&&(l.type||f(l).is("[contenteditable]"))||f.each(d,function(d,l){if(1<a.group.length&&l[c]!==t)return b[d](l[c]),e.preventDefault(),!1;if(-1<f.inArray(c,l))return b[d](),e.preventDefault(),!1})}),f.fn.mousewheel&&a.mouseWheel&&b.wrap.bind("mousewheel.fb",function(d,c,l,g){for(var k=f(d.target||null),h=!1;k.length&&!(h||k.is(".fancybox-skin")||k.is(".fancybox-wrap"));)h=(h=k[0])&&!(h.style.overflow&&"hidden"===h.style.overflow)&&
(h.clientWidth&&h.scrollWidth>h.clientWidth||h.clientHeight&&h.scrollHeight>h.clientHeight),k=f(k).parent();0!==c&&!h&&1<b.group.length&&!a.canShrink&&(0<g||0<l?b.prev(0<g?"down":"left"):(0>g||0>l)&&b.next(0>g?"up":"right"),d.preventDefault())}))},trigger:function(a,d){var e,c=d||b.coming||b.current;if(c){f.isFunction(c[a])&&(e=c[a].apply(c,Array.prototype.slice.call(arguments,1)));if(!1===e)return!1;c.helpers&&f.each(c.helpers,function(d,e){e&&b.helpers[d]&&f.isFunction(b.helpers[d][a])&&(e=f.extend(!0,
{},b.helpers[d].defaults,e),b.helpers[d][a](e,c))});f.event.trigger(a+".fb")}},isImage:function(a){return q(a)&&a.match(/(^data:image\/.*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp)((\?|#).*)?$)/i)},isSWF:function(a){return q(a)&&a.match(/\.(swf)((\?|#).*)?$/i)},_start:function(a){var d={},e,c;a=m(a);e=b.group[a]||null;if(!e)return!1;d=f.extend(!0,{},b.opts,e);e=d.margin;c=d.padding;"number"===f.type(e)&&(d.margin=[e,e,e,e]);"number"===f.type(c)&&(d.padding=[c,c,c,c]);d.modal&&f.extend(!0,d,{closeBtn:!1,closeClick:!1,
nextClick:!1,arrows:!1,mouseWheel:!1,keys:null,helpers:{overlay:{closeClick:!1}}});d.autoSize&&(d.autoWidth=d.autoHeight=!0);"auto"===d.width&&(d.autoWidth=!0);"auto"===d.height&&(d.autoHeight=!0);d.group=b.group;d.index=a;b.coming=d;if(!1===b.trigger("beforeLoad"))b.coming=null;else{c=d.type;e=d.href;if(!c)return b.coming=null,b.current&&b.router&&"jumpto"!==b.router?(b.current.index=a,b[b.router](b.direction)):!1;b.isActive=!0;if("image"===c||"swf"===c)d.autoHeight=d.autoWidth=!1,d.scrolling="visible";
"image"===c&&(d.aspectRatio=!0);"iframe"===c&&u&&(d.scrolling="scroll");d.wrap=f(d.tpl.wrap).addClass("fancybox-"+(u?"mobile":"desktop")+" fancybox-type-"+c+" fancybox-tmp "+d.wrapCSS).appendTo(d.parent||"body");f.extend(d,{skin:f(".fancybox-skin",d.wrap),outer:f(".fancybox-outer",d.wrap),inner:f(".fancybox-inner",d.wrap)});f.each(["Top","Right","Bottom","Left"],function(a,b){d.skin.css("padding"+b,z(d.padding[a]))});b.trigger("onReady");if("inline"===c||"html"===c){if(!d.content||!d.content.length)return b._error("content")}else if(!e)return b._error("href");
"image"===c?b._loadImage():"ajax"===c?b._loadAjax():"iframe"===c?b._loadIframe():b._afterLoad()}},_error:function(a){f.extend(b.coming,{type:"html",autoWidth:!0,autoHeight:!0,minWidth:0,minHeight:0,scrolling:"no",hasError:a,content:b.coming.tpl.error});b._afterLoad()},_loadImage:function(){var a=b.imgPreload=new Image;a.onload=function(){this.onload=this.onerror=null;b.coming.width=this.width;b.coming.height=this.height;b._afterLoad()};a.onerror=function(){this.onload=this.onerror=null;b._error("image")};
a.src=b.coming.href;!0!==a.complete&&b.showLoading()},_loadAjax:function(){var a=b.coming;b.showLoading();b.ajaxLoad=f.ajax(f.extend({},a.ajax,{url:a.href,error:function(a,e){b.coming&&"abort"!==e?b._error("ajax",a):b.hideLoading()},success:function(d,e){"success"===e&&(a.content=d,b._afterLoad())}}))},_loadIframe:function(){var a=b.coming,d=f(a.tpl.iframe.replace(/\{rnd\}/g,(new Date).getTime())).attr("scrolling",u?"auto":a.iframe.scrolling).attr("src",a.href);f(a.wrap).bind("onReset",function(){try{f(this).find("iframe").hide().attr("src",
"//about:blank").end().empty()}catch(a){}});a.iframe.preload&&(b.showLoading(),d.one("load",function(){f(this).data("ready",1);u||f(this).bind("load.fb",b.update);f(this).parents(".fancybox-wrap").width("100%").removeClass("fancybox-tmp").show();b._afterLoad()}));a.content=d.appendTo(a.inner);a.iframe.preload||b._afterLoad()},_preloadImages:function(){var a=b.group,d=b.current,e=a.length,c=d.preload?Math.min(d.preload,e-1):0,f,g;for(g=1;g<=c;g+=1)f=a[(d.index+g)%e],"image"===f.type&&f.href&&((new Image).src=
f.href)},_afterLoad:function(){var a=b.coming,d=b.current,e,c,l,g,k;b.hideLoading();if(a&&!1!==b.isActive)if(!1===b.trigger("afterLoad",a,d))a.wrap.stop(!0).trigger("onReset").remove(),b.coming=null;else{d&&(b.trigger("beforeChange",d),d.wrap.stop(!0).removeClass("fancybox-opened").find(".fancybox-item, .fancybox-nav").remove());b.unbindEvents();e=a.content;c=a.type;l=a.scrolling;f.extend(b,{wrap:a.wrap,skin:a.skin,outer:a.outer,inner:a.inner,current:a,previous:d});g=a.href;switch(c){case "inline":case "ajax":case "html":a.selector?
e=f("<div>").html(e).find(a.selector):v(e)&&(e.data("fancybox-placeholder")||e.data("fancybox-placeholder",f('<div class="fancybox-placeholder"></div>').insertAfter(e).hide()),e=e.show().detach(),a.wrap.bind("onReset",function(){f(this).find(e).length&&e.hide().replaceAll(e.data("fancybox-placeholder")).data("fancybox-placeholder",!1)}));break;case "image":e=a.tpl.image.replace("{href}",g);break;case "swf":e='<object id="fancybox-swf" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="100%" height="100%"><param name="movie" value="'+
g+'"></param>',k="",f.each(a.swf,function(a,b){e+='<param name="'+a+'" value="'+b+'"></param>';k+=" "+a+'="'+b+'"'}),e+='<embed src="'+g+'" type="application/x-shockwave-flash" width="100%" height="100%"'+k+"></embed></object>"}v(e)&&e.parent().is(a.inner)||a.inner.append(e);b.trigger("beforeShow");a.inner.css("overflow","yes"===l?"scroll":"no"===l?"hidden":l);b._setDimension();b.reposition();b.isOpen=!1;b.coming=null;b.bindEvents();if(!b.isOpened)f(".fancybox-wrap").not(a.wrap).stop(!0).trigger("onReset").remove();
else if(d.prevMethod)b.transitions[d.prevMethod]();b.transitions[b.isOpened?a.nextMethod:a.openMethod]();b._preloadImages()}},_setDimension:function(){var a=b.getViewport(),d=0,e=!1,c=!1,e=b.wrap,l=b.skin,g=b.inner,k=b.current,c=k.width,h=k.height,n=k.minWidth,w=k.minHeight,p=k.maxWidth,x=k.maxHeight,u=k.scrolling,r=k.scrollOutside?k.scrollbarWidth:0,A=k.margin,q=m(A[1]+A[3]),t=m(A[0]+A[2]),B,C,v,F,D,I,E,G,y;e.add(l).add(g).width("auto").height("auto").removeClass("fancybox-tmp");A=m(l.outerWidth(!0)-
l.width());B=m(l.outerHeight(!0)-l.height());C=q+A;v=t+B;F=H(c)?(a.w-C)*m(c)/100:c;D=H(h)?(a.h-v)*m(h)/100:h;if("iframe"===k.type){if(y=k.content,k.autoHeight&&1===y.data("ready"))try{y[0].contentWindow.document.location&&(g.width(F).height(9999),I=y.contents().find("body"),r&&I.css("overflow-x","hidden"),D=I.height())}catch(J){}}else if(k.autoWidth||k.autoHeight)g.addClass("fancybox-tmp"),k.autoWidth||g.width(F),k.autoHeight||g.height(D),k.autoWidth&&(F=g.width()),k.autoHeight&&(D=g.height()),g.removeClass("fancybox-tmp");
c=m(F);h=m(D);G=F/D;n=m(H(n)?m(n,"w")-C:n);p=m(H(p)?m(p,"w")-C:p);w=m(H(w)?m(w,"h")-v:w);x=m(H(x)?m(x,"h")-v:x);I=p;E=x;k.fitToView&&(p=Math.min(a.w-C,p),x=Math.min(a.h-v,x));C=a.w-q;t=a.h-t;k.aspectRatio?(c>p&&(c=p,h=m(c/G)),h>x&&(h=x,c=m(h*G)),c<n&&(c=n,h=m(c/G)),h<w&&(h=w,c=m(h*G))):(c=Math.max(n,Math.min(c,p)),k.autoHeight&&"iframe"!==k.type&&(g.width(c),h=g.height()),h=Math.max(w,Math.min(h,x)));if(k.fitToView)if(g.width(c).height(h),e.width(c+A),a=e.width(),q=e.height(),k.aspectRatio)for(;(a>
C||q>t)&&c>n&&h>w&&!(19<d++);)h=Math.max(w,Math.min(x,h-10)),c=m(h*G),c<n&&(c=n,h=m(c/G)),c>p&&(c=p,h=m(c/G)),g.width(c).height(h),e.width(c+A),a=e.width(),q=e.height();else c=Math.max(n,Math.min(c,c-(a-C))),h=Math.max(w,Math.min(h,h-(q-t)));r&&"auto"===u&&h<D&&c+A+r<C&&(c+=r);g.width(c).height(h);e.width(c+A);a=e.width();q=e.height();e=(a>C||q>t)&&c>n&&h>w;c=k.aspectRatio?c<I&&h<E&&c<F&&h<D:(c<I||h<E)&&(c<F||h<D);f.extend(k,{dim:{width:z(a),height:z(q)},origWidth:F,origHeight:D,canShrink:e,canExpand:c,
wPadding:A,hPadding:B,wrapSpace:q-l.outerHeight(!0),skinSpace:l.height()-h});!y&&k.autoHeight&&h>w&&h<x&&!c&&g.height("auto")},_getPosition:function(a){var d=b.current,e=b.getViewport(),c=d.margin,f=b.wrap.width()+c[1]+c[3],g=b.wrap.height()+c[0]+c[2],c={position:"absolute",top:c[0],left:c[3]};d.autoCenter&&d.fixed&&!a&&g<=e.h&&f<=e.w?c.position="fixed":d.locked||(c.top+=e.y,c.left+=e.x);c.top=z(Math.max(c.top,c.top+(e.h-g)*d.topRatio));c.left=z(Math.max(c.left,c.left+(e.w-f)*d.leftRatio));return c},
_afterZoomIn:function(){var a=b.current;a&&((b.isOpen=b.isOpened=!0,b.wrap.css("overflow","visible").addClass("fancybox-opened"),b.update(),(a.closeClick||a.nextClick&&1<b.group.length)&&b.inner.css("cursor","pointer").bind("click.fb",function(d){f(d.target).is("a")||f(d.target).parent().is("a")||(d.preventDefault(),b[a.closeClick?"close":"next"]())}),a.closeBtn&&f(a.tpl.closeBtn).appendTo(b.skin).bind("click.fb",function(a){a.preventDefault();b.close()}),a.arrows&&1<b.group.length&&((a.loop||0<a.index)&&
f(a.tpl.prev).appendTo(b.outer).bind("click.fb",b.prev),(a.loop||a.index<b.group.length-1)&&f(a.tpl.next).appendTo(b.outer).bind("click.fb",b.next)),b.trigger("afterShow"),a.loop||a.index!==a.group.length-1)?b.opts.autoPlay&&!b.player.isActive&&(b.opts.autoPlay=!1,b.play()):b.play(!1))},_afterZoomOut:function(a){a=a||b.current;f(".fancybox-wrap").trigger("onReset").remove();f.extend(b,{group:{},opts:{},router:!1,current:null,isActive:!1,isOpened:!1,isOpen:!1,isClosing:!1,wrap:null,skin:null,outer:null,
inner:null});b.trigger("afterClose",a)}});b.transitions={getOrigPosition:function(){var a=b.current,d=a.element,e=a.orig,c={},f=50,g=50,k=a.hPadding,h=a.wPadding,n=b.getViewport();!e&&a.isDom&&d.is(":visible")&&(e=d.find("img:first"),e.length||(e=d));v(e)?(c=e.offset(),e.is("img")&&(f=e.outerWidth(),g=e.outerHeight())):(c.top=n.y+(n.h-g)*a.topRatio,c.left=n.x+(n.w-f)*a.leftRatio);if("fixed"===b.wrap.css("position")||a.locked)c.top-=n.y,c.left-=n.x;return c={top:z(c.top-k*a.topRatio),left:z(c.left-
h*a.leftRatio),width:z(f+h),height:z(g+k)}},step:function(a,d){var e,c,f=d.prop;c=b.current;var g=c.wrapSpace,k=c.skinSpace;if("width"===f||"height"===f)e=d.end===d.start?1:(a-d.start)/(d.end-d.start),b.isClosing&&(e=1-e),c="width"===f?c.wPadding:c.hPadding,c=a-c,b.skin[f](m("width"===f?c:c-g*e)),b.inner[f](m("width"===f?c:c-g*e-k*e))},zoomIn:function(){var a=b.current,d=a.pos,e=a.openEffect,c="elastic"===e,l=f.extend({opacity:1},d);delete l.position;c?(d=this.getOrigPosition(),a.openOpacity&&(d.opacity=
.1)):"fade"===e&&(d.opacity=.1);b.wrap.css(d).animate(l,{duration:"none"===e?0:a.openSpeed,easing:a.openEasing,step:c?this.step:null,complete:b._afterZoomIn})},zoomOut:function(){var a=b.current,d=a.closeEffect,e="elastic"===d,c={opacity:.1};e&&(c=this.getOrigPosition(),a.closeOpacity&&(c.opacity=.1));b.wrap.animate(c,{duration:"none"===d?0:a.closeSpeed,easing:a.closeEasing,step:e?this.step:null,complete:b._afterZoomOut})},changeIn:function(){var a=b.current,d=a.nextEffect,e=a.pos,c={opacity:1},f=
b.direction,g;e.opacity=.1;"elastic"===d&&(g="down"===f||"up"===f?"top":"left","down"===f||"right"===f?(e[g]=z(m(e[g])-200),c[g]="+=200px"):(e[g]=z(m(e[g])+200),c[g]="-=200px"));"none"===d?b._afterZoomIn():b.wrap.css(e).animate(c,{duration:a.nextSpeed,easing:a.nextEasing,complete:b._afterZoomIn})},changeOut:function(){var a=b.previous,d=a.prevEffect,e={opacity:.1},c=b.direction;"elastic"===d&&(e["down"===c||"up"===c?"top":"left"]=("up"===c||"left"===c?"-":"+")+"=200px");a.wrap.animate(e,{duration:"none"===
d?0:a.prevSpeed,easing:a.prevEasing,complete:function(){f(this).trigger("onReset").remove()}})}};b.helpers.overlay={defaults:{closeClick:!0,speedOut:200,showEarly:!0,css:{},locked:!u,fixed:!0},overlay:null,fixed:!1,create:function(a){a=f.extend({},this.defaults,a);this.overlay&&this.close();this.overlay=f('<div class="fancybox-overlay"></div>').appendTo("body");this.fixed=!1;a.fixed&&b.defaults.fixed&&(this.overlay.addClass("fancybox-overlay-fixed"),this.fixed=!0)},open:function(a){var d=this;a=f.extend({},
this.defaults,a);this.overlay?this.overlay.unbind(".overlay").width("auto").height("auto"):this.create(a);this.fixed||(r.bind("resize.overlay",f.proxy(this.update,this)),this.update());a.closeClick&&this.overlay.bind("click.overlay",function(a){f(a.target).hasClass("fancybox-overlay")&&(b.isActive?b.close():d.close())});this.overlay.css(a.css).show()},close:function(){f(".fancybox-overlay").remove();r.unbind("resize.overlay");this.overlay=null;!1!==this.margin&&(f("body").css("margin-right",this.margin),
this.margin=!1);this.el&&this.el.removeClass("fancybox-lock")},update:function(){var a="100%",b;this.overlay.width(a).height("100%");J?(b=Math.max(B.documentElement.offsetWidth,B.body.offsetWidth),p.width()>b&&(a=p.width())):p.width()>r.width()&&(a=p.width());this.overlay.width(a).height(p.height())},onReady:function(a,b){f(".fancybox-overlay").stop(!0,!0);this.overlay||(this.margin=p.height()>r.height()||"scroll"===f("body").css("overflow-y")?f("body").css("margin-right"):!1,this.el=B.all&&!B.querySelector?
f("html"):f("body"),this.create(a));a.locked&&this.fixed&&(b.locked=this.overlay.append(b.wrap),b.fixed=!1);!0===a.showEarly&&this.beforeShow.apply(this,arguments)},beforeShow:function(a,b){b.locked&&(this.el.addClass("fancybox-lock"),!1!==this.margin&&f("body").css("margin-right",m(this.margin)+b.scrollbarWidth));this.open(a)},onUpdate:function(){this.fixed||this.update()},afterClose:function(a){this.overlay&&!b.isActive&&this.overlay.fadeOut(a.speedOut,f.proxy(this.close,this))}};b.helpers.title=
{defaults:{type:"float",position:"bottom"},beforeShow:function(a){var d=b.current,e=d.title,c=a.type;f.isFunction(e)&&(e=e.call(d.element,d));if(q(e)&&""!==f.trim(e)){d=f('<div class="fancybox-title fancybox-title-'+c+'-wrap">'+e+"</div>");switch(c){case "inside":c=b.skin;break;case "outside":c=b.wrap;break;case "over":c=b.inner;break;default:c=b.skin,d.appendTo("body"),J&&d.width(d.width()),d.wrapInner('<span class="child"></span>'),b.current.margin[2]+=Math.abs(m(d.css("margin-bottom")))}d["top"===
a.position?"prependTo":"appendTo"](c)}}};f.fn.fancybox=function(a){var d,e=f(this),c=this.selector||"",l=function(g){var k=f(this).blur(),h=d,l,m;g.ctrlKey||g.altKey||g.shiftKey||g.metaKey||k.is(".fancybox-wrap")||(l=a.groupAttr||"data-fancybox-group",m=k.attr(l),m||(l="rel",m=k.get(0)[l]),m&&""!==m&&"nofollow"!==m&&(k=c.length?f(c):e,k=k.filter("["+l+'="'+m+'"]'),h=k.index(this)),a.index=h,!1!==b.open(k,a)&&g.preventDefault())};a=a||{};d=a.index||0;c&&!1!==a.live?p.undelegate(c,"click.fb-start").delegate(c+
":not('.fancybox-item, .fancybox-nav')","click.fb-start",l):e.unbind("click.fb-start").bind("click.fb-start",l);this.filter("[data-fancybox-start=1]").trigger("click");return this};p.ready(function(){f.scrollbarWidth===t&&(f.scrollbarWidth=function(){var a=f('<div style="width:50px;height:50px;overflow:auto"><div/></div>').appendTo("body"),b=a.children(),b=b.innerWidth()-b.height(99).innerWidth();a.remove();return b});f.support.fixedPosition===t&&(f.support.fixedPosition=function(){var a=f('<div style="position:fixed;top:20px;"></div>').appendTo("body"),
b=20===a[0].offsetTop||15===a[0].offsetTop;a.remove();return b}());f.extend(b.defaults,{scrollbarWidth:f.scrollbarWidth(),fixed:f.support.fixedPosition,parent:f("body")})})})(window,document,jQuery);;
(function(d){var u,l,v,k=d(window),y={jqueryui:{container:"ui-widget ui-widget-content ui-corner-all",notice:"ui-state-highlight",notice_icon:"ui-icon ui-icon-info",info:"",info_icon:"ui-icon ui-icon-info",success:"ui-state-default",success_icon:"ui-icon ui-icon-circle-check",error:"ui-state-error",error_icon:"ui-icon ui-icon-alert",closer:"ui-icon ui-icon-close",pin_up:"ui-icon ui-icon-pin-w",pin_down:"ui-icon ui-icon-pin-s",hi_menu:"ui-state-default ui-corner-bottom",hi_btn:"ui-state-default ui-corner-all",
hi_btnhov:"ui-state-hover",hi_hnd:"ui-icon ui-icon-grip-dotted-horizontal"},bootstrap:{container:"alert",notice:"",notice_icon:"icon-exclamation-sign",info:"alert-info",info_icon:"icon-info-sign",success:"alert-success",success_icon:"icon-ok-sign",error:"alert-error",error_icon:"icon-warning-sign",closer:"icon-remove",pin_up:"icon-pause",pin_down:"icon-play",hi_menu:"well",hi_btn:"btn",hi_btnhov:"",hi_hnd:"icon-chevron-down"}},w=function(){v=d("body");k=d(window);k.bind("resize",function(){l&&clearTimeout(l);
l=setTimeout(d.pnotify_position_all,10)})};document.body?w():d(w);d.extend({pnotify_remove_all:function(){var e=k.data("pnotify");e&&e.length&&d.each(e,function(){this.pnotify_remove&&this.pnotify_remove()})},pnotify_position_all:function(){l&&clearTimeout(l);l=null;var e=k.data("pnotify");e&&e.length&&(d.each(e,function(){var d=this.opts.stack;d&&(d.nextpos1=d.firstpos1,d.nextpos2=d.firstpos2,d.addpos2=0,d.animation=!0)}),d.each(e,function(){this.pnotify_position()}))},pnotify_unread_all:function(){var e=
k.data("pnotify"),g=0;e&&e.length&&d.each(e,function(){this&&0==this.pnotify_shown&&g++});return g},pnotify:function(e){var g,a;"object"!=typeof e?(a=d.extend({},d.pnotify.defaults),a.text=e):a=d.extend({},d.pnotify.defaults,e);for(var t in a)"string"==typeof t&&t.match(/^pnotify_/)&&(a[t.replace(/^pnotify_/,"")]=a[t]);if(a.before_init&&!1===a.before_init(a))return null;var m,r=function(a,c){b.css("display","none");var f=document.elementFromPoint(a.clientX,a.clientY);b.css("display","block1");var e=
d(f),g=e.css("cursor");b.css("cursor","auto"!=g?g:"default");m&&m.get(0)==f||(m&&(q.call(m.get(0),"mouseleave",a.originalEvent),q.call(m.get(0),"mouseout",a.originalEvent)),q.call(f,"mouseenter",a.originalEvent),q.call(f,"mouseover",a.originalEvent));q.call(f,c,a.originalEvent);m=e},f=y[a.styling],b=d("<div />",{"class":"ui-pnotify "+a.addclass,css:{display:"none"},mouseenter:function(n){a.nonblock&&n.stopPropagation();a.mouse_reset&&"out"==g&&(b.stop(!0),g="in",b.css("height","auto").animate({width:a.width,
opacity:a.nonblock?a.nonblock_opacity:a.opacity},"fast"));a.nonblock&&b.animate({opacity:a.nonblock_opacity},"fast");a.hide&&a.mouse_reset&&b.pnotify_cancel_remove();a.sticker&&!a.nonblock&&b.sticker.trigger("pnotify_icon").css("visibility","visible");a.closer&&!a.nonblock&&b.closer.css("visibility","visible")},mouseleave:function(n){a.nonblock&&n.stopPropagation();m=null;b.css("cursor","auto");a.nonblock&&"out"!=g&&b.animate({opacity:a.opacity},"fast");a.hide&&a.mouse_reset&&b.pnotify_queue_remove();
a.sticker_hover&&b.sticker.css("visibility","hidden");a.closer_hover&&b.closer.css("visibility","hidden");d.pnotify_position_all()},mouseover:function(b){a.nonblock&&b.stopPropagation()},mouseout:function(b){a.nonblock&&b.stopPropagation()},mousemove:function(b){a.nonblock&&(b.stopPropagation(),r(b,"onmousemove"))},mousedown:function(b){a.nonblock&&(b.stopPropagation(),b.preventDefault(),r(b,"onmousedown"))},mouseup:function(b){a.nonblock&&(b.stopPropagation(),b.preventDefault(),r(b,"onmouseup"))},
click:function(b){a.nonblock&&(b.stopPropagation(),r(b,"onclick"))},dblclick:function(b){a.nonblock&&(b.stopPropagation(),r(b,"ondblclick"))}});b.opts=a;b.container=d("<div />",{"class":f.container+" ui-pnotify-container "+("error"==a.type?f.error:"info"==a.type?f.info:"success"==a.type?f.success:f.notice)}).appendTo(b);""!=a.cornerclass&&b.container.removeClass("ui-corner-all").addClass(a.cornerclass);a.shadow&&b.container.addClass("ui-pnotify-shadow");b.pnotify_version="1.2.0";b.pnotify=function(n){var c=
a;"string"==typeof n?a.text=n:a=d.extend({},a,n);for(var e in a)"string"==typeof e&&e.match(/^pnotify_/)&&(a[e.replace(/^pnotify_/,"")]=a[e]);b.opts=a;a.cornerclass!=c.cornerclass&&b.container.removeClass("ui-corner-all").addClass(a.cornerclass);a.shadow!=c.shadow&&(a.shadow?b.container.addClass("ui-pnotify-shadow"):b.container.removeClass("ui-pnotify-shadow"));!1===a.addclass?b.removeClass(c.addclass):a.addclass!==c.addclass&&b.removeClass(c.addclass).addClass(a.addclass);!1===a.title?b.title_container.slideUp("fast"):
a.title!==c.title&&(a.title_escape?b.title_container.text(a.title).slideDown(200):b.title_container.html(a.title).slideDown(200));!1===a.text?b.text_container.slideUp("fast"):a.text!==c.text&&(a.text_escape?b.text_container.text(a.text).slideDown(200):b.text_container.html(a.insert_brs?String(a.text).replace(/\n/g,"<br />"):a.text).slideDown(200));b.pnotify_history=a.history;b.pnotify_shown=a.shown;b.pnotify_hide=a.hide;a.type!=c.type&&b.container.removeClass(f.error+" "+f.notice+" "+f.success+" "+
f.info).addClass("error"==a.type?f.error:"info"==a.type?f.info:"success"==a.type?f.success:f.notice);if(a.icon!==c.icon||!0===a.icon&&a.type!=c.type)b.container.find("div.ui-pnotify-icon").remove(),!1!==a.icon&&d("<div />",{"class":"ui-pnotify-icon"}).append(d("<span />",{"class":!0===a.icon?"error"==a.type?f.error_icon:"info"==a.type?f.info_icon:"success"==a.type?f.success_icon:f.notice_icon:a.icon})).prependTo(b.container);a.width!==c.width&&b.animate({width:a.width});a.min_height!==c.min_height&&
b.container.animate({minHeight:a.min_height});a.opacity!==c.opacity&&b.fadeTo(a.animate_speed,a.opacity);!a.closer||a.nonblock?b.closer.css("display","none"):b.closer.css("display","block2");!a.sticker||a.nonblock?b.sticker.css("display","none"):b.sticker.css("display","block3");b.sticker.trigger("pnotify_icon");a.sticker_hover?b.sticker.css("visibility","hidden"):a.nonblock||b.sticker.css("visibility","visible");a.closer_hover?b.closer.css("visibility","hidden"):a.nonblock||b.closer.css("visibility",
"visible");a.hide?c.hide||b.pnotify_queue_remove():b.pnotify_cancel_remove();b.pnotify_queue_position();return b};b.pnotify_position=function(a){var c=b.opts.stack;if(c){c.nextpos1||(c.nextpos1=c.firstpos1);c.nextpos2||(c.nextpos2=c.firstpos2);c.addpos2||(c.addpos2=0);var d="none"==b.css("display");if(!d||a){var f,e={},g;switch(c.dir1){case "down":g="top";break;case "up":g="bottom";break;case "left":g="right";break;case "right":g="left"}a=parseInt(b.css(g));isNaN(a)&&(a=0);"undefined"!=typeof c.firstpos1||
d||(c.firstpos1=a,c.nextpos1=c.firstpos1);var h;switch(c.dir2){case "down":h="top";break;case "up":h="bottom";break;case "left":h="right";break;case "right":h="left"}f=parseInt(b.css(h));isNaN(f)&&(f=0);"undefined"!=typeof c.firstpos2||d||(c.firstpos2=f,c.nextpos2=c.firstpos2);if("down"==c.dir1&&c.nextpos1+b.height()>k.height()||"up"==c.dir1&&c.nextpos1+b.height()>k.height()||"left"==c.dir1&&c.nextpos1+b.width()>k.width()||"right"==c.dir1&&c.nextpos1+b.width()>k.width())c.nextpos1=c.firstpos1,c.nextpos2+=
c.addpos2+("undefined"==typeof c.spacing2?25:c.spacing2),c.addpos2=0;if(c.animation&&c.nextpos2<f)switch(c.dir2){case "down":e.top=c.nextpos2+"px";break;case "up":e.bottom=c.nextpos2+"px";break;case "left":e.right=c.nextpos2+"px";break;case "right":e.left=c.nextpos2+"px"}else b.css(h,c.nextpos2+"px");switch(c.dir2){case "down":case "up":b.outerHeight(!0)>c.addpos2&&(c.addpos2=b.height());break;case "left":case "right":b.outerWidth(!0)>c.addpos2&&(c.addpos2=b.width())}if(c.nextpos1)if(c.animation&&
(a>c.nextpos1||e.top||e.bottom||e.right||e.left))switch(c.dir1){case "down":e.top=c.nextpos1+"px";break;case "up":e.bottom=c.nextpos1+"px";break;case "left":e.right=c.nextpos1+"px";break;case "right":e.left=c.nextpos1+"px"}else b.css(g,c.nextpos1+"px");(e.top||e.bottom||e.right||e.left)&&b.animate(e,{duration:500,queue:!1});switch(c.dir1){case "down":case "up":c.nextpos1+=b.height()+("undefined"==typeof c.spacing1?25:c.spacing1);break;case "left":case "right":c.nextpos1+=b.width()+("undefined"==typeof c.spacing1?
25:c.spacing1)}}}};b.pnotify_queue_position=function(a){l&&clearTimeout(l);a||(a=10);l=setTimeout(d.pnotify_position_all,a)};b.pnotify_display=function(){b.parent().length||b.appendTo(v);a.before_open&&!1===a.before_open(b)||("top"!=a.stack.push&&b.pnotify_position(!0),"fade"==a.animation||"fade"==a.animation.effect_in?b.show().fadeTo(0,0).hide():1!=a.opacity&&b.show().fadeTo(0,a.opacity).hide(),b.animate_in(function(){a.after_open&&a.after_open(b);b.pnotify_queue_position();a.hide&&b.pnotify_queue_remove()}));
0==b.pnotify_shown&&b.hide()};b.pnotify_remove=function(){b.timer&&(window.clearTimeout(b.timer),b.timer=null);a.before_close&&!1===a.before_close(b)||b.animate_out(function(){a.after_close&&!1===a.after_close(b)||(b.pnotify_queue_position(),a.remove&&b.detach())})};b.animate_in=function(d){g="in";var c;c="undefined"!=typeof a.animation.effect_in?a.animation.effect_in:a.animation;"none"==c?(b.show(),d()):"show"==c?b.show(a.animate_speed,d):"fade"==c?b.show().fadeTo(a.animate_speed,a.opacity,d):"slide"==
c?b.slideDown(a.animate_speed,d):"function"==typeof c?c("in",d,b):b.show(c,"object"==typeof a.animation.options_in?a.animation.options_in:{},a.animate_speed,d)};b.animate_out=function(d){g="out";var c;c="undefined"!=typeof a.animation.effect_out?a.animation.effect_out:a.animation;"none"==c?(b.hide(),d()):"show"==c?b.hide(a.animate_speed,d):"fade"==c?b.fadeOut(a.animate_speed,d):"slide"==c?b.slideUp(a.animate_speed,d):"function"==typeof c?c("out",d,b):b.hide(c,"object"==typeof a.animation.options_out?
a.animation.options_out:{},a.animate_speed,d)};b.pnotify_cancel_remove=function(){b.timer&&window.clearTimeout(b.timer)};b.pnotify_queue_remove=function(){b.pnotify_cancel_remove();b.timer=window.setTimeout(function(){b.pnotify_remove()},isNaN(a.delay)?0:a.delay)};b.closer=d("<div />",{"class":"ui-pnotify-closer",css:{cursor:"pointer",visibility:a.closer_hover?"hidden":"visible"},click:function(){b.pnotify_remove();b.sticker.css("visibility","hidden");b.closer.css("visibility","hidden")}}).append(d("<span />",
{"class":f.closer})).appendTo(b.container);a.closer&&!a.nonblock||b.closer.css("display","none");b.sticker=d("<div />",{"class":"ui-pnotify-sticker",css:{cursor:"pointer",visibility:a.sticker_hover?"hidden":"visible"},click:function(){a.hide=!a.hide;a.hide?b.pnotify_queue_remove():b.pnotify_cancel_remove();d(this).trigger("pnotify_icon")}}).bind("pnotify_icon",function(){d(this).children().removeClass(f.pin_up+" "+f.pin_down).addClass(a.hide?f.pin_up:f.pin_down)}).append(d("<span />",{"class":f.pin_up})).appendTo(b.container);
a.sticker&&!a.nonblock||b.sticker.css("display","none");!1!==a.icon&&d("<div />",{"class":"ui-pnotify-icon"}).append(d("<span />",{"class":!0===a.icon?"error"==a.type?f.error_icon:"info"==a.type?f.info_icon:"success"==a.type?f.success_icon:f.notice_icon:a.icon})).prependTo(b.container);b.title_container=d("<h4 />",{"class":"ui-pnotify-title"}).appendTo(b.container);!1===a.title?b.title_container.hide():a.title_escape?b.title_container.text(a.title):b.title_container.html(a.title);b.text_container=
d("<div />",{"class":"ui-pnotify-text"}).appendTo(b.container);!1===a.text?b.text_container.hide():a.text_escape?b.text_container.text(a.text):b.text_container.html(a.insert_brs?String(a.text).replace(/\n/g,"<br />"):a.text);"string"==typeof a.width&&b.css("width",a.width);"string"==typeof a.min_height&&b.container.css("min-height",a.min_height);b.pnotify_history=a.history;b.pnotify_shown=a.shown;b.pnotify_hide=a.hide;var h=k.data("pnotify");if(null==h||"object"!=typeof h)h=[];h="top"==a.stack.push?
d.merge([b],h):d.merge(h,[b]);k.data("pnotify",h);"top"==a.stack.push&&b.pnotify_queue_position(1);a.after_init&&a.after_init(b);e=d.pnotify_unread_all();if(a.history){var p=k.data("pnotify_history");"undefined"==typeof p&&(p=d("<div />",{"class":"ui-pnotify-history-container "+f.hi_menu,id:"pnotify_contatiner",mouseleave:function(){p.animate({top:"-"+u+"px"},{duration:100,queue:!1})}}).append(d("<div />",{"class":"ui-pnotify-history-header",text:"Redisplay"})).append(d("<button />",{"class":"ui-pnotify-history-all "+
f.hi_btn,text:"All",id:"pnotify_all_btn",mouseenter:function(){d(this).addClass(f.hi_btnhov)},mouseleave:function(){d(this).removeClass(f.hi_btnhov)},click:function(){window.location.hash="notifications/notifications/index";return!1}})).append(d("<button />",{"class":"ui-pnotify-history-unread "+f.hi_btn,text:"Unread ("+e+")",id:"pnotify_unread_btn",mouseenter:function(){d(this).addClass(f.hi_btnhov)},mouseleave:function(){d(this).removeClass(f.hi_btnhov)},click:function(){var a=0,b;do{b=h.slice(a,
a+1);if(!b[0])break;a++}while(b[0].pnotify_shown);if(!b[0])return!1;b[0].pnotify_shown=!0;b[0].pnotify_display&&b[0].pnotify_display();a=d.pnotify_unread_all();$("#pnotify_unread_btn").text("Unread ("+a+")");a||($("#pnotify_pull_btn").removeClass("pnotify-read-pulldown").removeClass("pnotify-empty-pulldown").addClass("pnotify-empty-pulldown"),$("#pnotify_contatiner").removeClass("pnotify-empty-container").removeClass("pnotify-read-container").addClass("pnotify-empty-container"));return!1}})).append(d("<button />",
{"class":"ui-pnotify-history-last "+f.hi_btn,text:"Last",id:"pnotify_last_btn",mouseenter:function(){d(this).addClass(f.hi_btnhov)},mouseleave:function(){d(this).removeClass(f.hi_btnhov)},click:function(){var a=-1,b;do{b=-1==a?h.slice(a):h.slice(a,a+1);if(!b[0])break;a--}while(!b[0].pnotify_history||!b[0].pnotify_shown||b[0].is(":visible"));if(!b[0])return!1;b[0].pnotify_display&&b[0].pnotify_display();return!1}})).appendTo(v),u=d("<span />",{"class":"ui-pnotify-history-pulldown "+f.hi_hnd,id:"pnotify_pull_btn",
mouseenter:function(){p.animate({top:"0"},{duration:100,queue:!1})}}).appendTo(p).offset().top+2,p.css({top:"-"+u+"px"}),k.data("pnotify_history",p))}a.stack.animation=!1;b.pnotify_display();$("#pnotify_unread_btn").text("Unread ("+e+")");e?($("#pnotify_pull_btn").removeClass("pnotify-read-pulldown").removeClass("pnotify-empty-pulldown").addClass("pnotify-read-pulldown"),$("#pnotify_contatiner").removeClass("pnotify-empty-container").removeClass("pnotify-read-container").addClass("pnotify-read-container")):
($("#pnotify_pull_btn").removeClass("pnotify-read-pulldown").removeClass("pnotify-empty-pulldown").addClass("pnotify-empty-pulldown"),$("#pnotify_contatiner").removeClass("pnotify-empty-container").removeClass("pnotify-read-container").addClass("pnotify-empty-container"));return b}});var x=/^on/,z=/^(dbl)?click$|^mouse(move|down|up|over|out|enter|leave)$|^contextmenu$/,A=/^(focus|blur|select|change|reset)$|^key(press|down|up)$/,B=/^(scroll|resize|(un)?load|abort|error)$/,q=function(e,g){var a;e=e.toLowerCase();
document.createEvent&&this.dispatchEvent?(e=e.replace(x,""),e.match(z)?(d(this).offset(),a=document.createEvent("MouseEvents"),a.initMouseEvent(e,g.bubbles,g.cancelable,g.view,g.detail,g.screenX,g.screenY,g.clientX,g.clientY,g.ctrlKey,g.altKey,g.shiftKey,g.metaKey,g.button,g.relatedTarget)):e.match(A)?(a=document.createEvent("UIEvents"),a.initUIEvent(e,g.bubbles,g.cancelable,g.view,g.detail)):e.match(B)&&(a=document.createEvent("HTMLEvents"),a.initEvent(e,g.bubbles,g.cancelable)),a&&this.dispatchEvent(a)):
(e.match(x)||(e="on"+e),a=document.createEventObject(g),this.fireEvent(e,a))};d.pnotify.defaults={title:!1,title_escape:!1,text:!1,text_escape:!1,styling:"bootstrap",addclass:"",cornerclass:"",nonblock:!1,nonblock_opacity:.2,history:!0,shown:!0,width:"300px",min_height:"16px",type:"notice",icon:!0,animation:"fade",animate_speed:"slow",opacity:1,shadow:!0,closer:!0,closer_hover:!0,sticker:!0,sticker_hover:!0,hide:!0,delay:8E3,mouse_reset:!0,remove:!0,insert_brs:!0,stack:{dir1:"down",dir2:"left",push:"bottom",
spacing1:25,spacing2:25,firstpos1:70,firstpos2:15}}})(jQuery);;
(function(g,q){function l(a){a&&a.printPage?a.printPage():setTimeout(function(){l(a)},50)}function m(d){d=a(d);a(":checked",d).each(function(){this.setAttribute("checked","checked")});a("input[type='text']",d).each(function(){this.setAttribute("value",a(this).val())});a("select",d).each(function(){var b=a(this);a("option",b).each(function(){b.val()==a(this).val()&&this.setAttribute("selected","selected")})});a("textarea",d).each(function(){var b=a(this).attr("value");a.browser.mozilla&&this.firstChild?
this.firstChild.textContent=b:this.innerHTML=b});return a("<div></div>").append(d.clone()).html()}function n(d,b){var p=a(d),k=m(d),c=[];c.push("<html><head><title>"+b.pageTitle+"</title>");if(b.overrideElementCSS){if(0<b.overrideElementCSS.length)for(var e=0;e<b.overrideElementCSS.length;e++){var f=b.overrideElementCSS[e];"string"==typeof f?c.push('<link type="text/css" rel="stylesheet" href="'+f+'" >'):c.push('<link type="text/css" rel="stylesheet" href="'+f.href+'" media="'+f.media+'" >')}}else a("link",
h).filter(function(){return"stylesheet"==a(this).attr("rel").toLowerCase()}).each(function(){c.push('<link type="text/css" rel="stylesheet" href="'+a(this).attr("href")+'" media="'+a(this).attr("media")+'" >')});b.internalElementCSS&&a("style").each(function(){c.push("<style>"+a(this).html()+"</style>")});c.push('<base href="'+(g.location.protocol+"//"+g.location.hostname+(g.location.port?":"+g.location.port:"")+g.location.pathname)+'" />');c.push('</head><body style="'+b.printBodyOptions.styleToAdd+
'" class="'+b.printBodyOptions.classNameToAdd+'">');c.push('<div class="'+p.attr("class")+'">'+k+"</div>");c.push('<script type="text/javascript">function printPage(){focus();print();'+(a.browser.opera||b.leaveOpen||"popup"!=b.printMode.toLowerCase()?"":"close();")+"}\x3c/script>");c.push("</body></html>");return c.join("")}var h=g.document,a=g.jQuery;a.fn.printElement=function(d){var b=a.extend({},a.fn.printElement.defaults,d);"iframe"==b.printMode&&(a.browser.opera||/chrome/.test(navigator.userAgent.toLowerCase()))&&
(b.printMode="popup");a("[id^='printElement_']").remove();return this.each(function(){var d=a.meta?a.extend({},b,a(this).data()):b,k=a(this),k=n(k,d),c=null,e=null;if("popup"==d.printMode.toLowerCase())c=g.open("about:blank","printElementWindow","width=650,height=440,scrollbars=yes"),e=c.document;else{var c="printElement_"+Math.round(99999*Math.random()).toString(),f=h.createElement("IFRAME");a(f).attr({style:d.iframeElementOptions.styleToAdd,id:c,className:d.iframeElementOptions.classNameToAdd,frameBorder:0,
scrolling:"no",src:"about:blank"});h.body.appendChild(f);e=f.contentWindow||f.contentDocument;e.document&&(e=e.document);f=h.frames?h.frames[c]:h.getElementById(c);c=f.contentWindow||f}focus();e.open();e.write(k);e.close();l(c)})};a.fn.printElement.defaults={printMode:"iframe",pageTitle:"",internalElementCSS:!0,overrideElementCSS:null,printBodyOptions:{styleToAdd:"padding:10px;margin:10px;",classNameToAdd:""},leaveOpen:!1,iframeElementOptions:{styleToAdd:"border:none;position:absolute;width:0px;height:0px;bottom:0px;left:0px;",
classNameToAdd:""}};a.fn.printElement.cssElement={href:"",media:""}})(window);;
(function(d){var b={init:function(a){return this.each(function(){b.destroy.call(this);this.opt=d.extend(!0,{},d.fn.raty.defaults,a);var c=d(this);b._callback.call(this,["number","readOnly","score","scoreName"]);this.opt.precision&&b._adjustPrecision.call(this);this.opt.number=b._between(this.opt.number,0,this.opt.numberMax);this.opt.path=this.opt.path||"";this.opt.path&&"/"!==this.opt.path.charAt(this.opt.path.length-1)&&(this.opt.path+="/");this.stars=b._createStars.call(this);this.score=b._createScore.call(this);
b._apply.call(this,this.opt.score);var f=this.opt.space?4:0,e=this.opt.width||this.opt.number*this.opt.size+this.opt.number*f;this.opt.cancel&&(this.cancel=b._createCancel.call(this),e+=this.opt.size+f);this.opt.readOnly?b._lock.call(this):(c.css("cursor","pointer"),b._binds.call(this));!1!==this.opt.width&&c.css("width",e);b._target.call(this,this.opt.score);c.data({settings:this.opt,raty:!0})})},_adjustPrecision:function(){this.opt.targetType="score";this.opt.half=!0},_apply:function(a){a&&0<a&&
(a=b._between(a,0,this.opt.number),this.score.val(a));b._fill.call(this,a);a&&b._roundStars.call(this,a)},_between:function(a,c,b){return Math.min(Math.max(parseFloat(a),c),b)},_binds:function(){this.cancel&&b._bindCancel.call(this);b._bindClick.call(this);b._bindOut.call(this);b._bindOver.call(this)},_bindCancel:function(){b._bindClickCancel.call(this);b._bindOutCancel.call(this);b._bindOverCancel.call(this)},_bindClick:function(){var a=this,c=d(a);a.stars.on("click.raty",function(b){a.score.val(a.opt.half||
a.opt.precision?c.data("score"):d(this).attr("alt"));a.opt.click&&a.opt.click.call(a,parseFloat(a.score.val()),b)})},_bindClickCancel:function(){var a=this;a.cancel.on("click.raty",function(c){a.score.removeAttr("value");a.opt.click&&a.opt.click.call(a,null,c)})},_bindOut:function(){var a=this;d(this).on("mouseleave.raty",function(c){var d=parseFloat(a.score.val())||void 0;b._apply.call(a,d);b._target.call(a,d,c);a.opt.mouseout&&a.opt.mouseout.call(a,d,c)})},_bindOutCancel:function(){var a=this;a.cancel.on("mouseleave.raty",
function(c){d(this).attr("class",a.opt.ratyClasses.cancelOff+" "+a.opt.cancelSize+" raty-cancel");a.opt.mouseout&&a.opt.mouseout.call(a,a.score.val()||null,c)})},_bindOverCancel:function(){var a=this;a.cancel.on("mouseover.raty",function(c){d(this).attr("class",a.opt.ratyClasses.cancelOn+" "+a.opt.cancelSize+" raty-cancel");a.stars.attr("class",a.opt.ratyClasses.starOff+" "+a.opt.ratyIconSize);b._target.call(a,null,c);a.opt.mouseover&&a.opt.mouseover.call(a,null)})},_bindOver:function(){var a=this,
c=d(a);a.stars.on(a.opt.half?"mousemove.raty":"mouseover.raty",function(f){var e=parseInt(d(this).attr("alt"),10);if(a.opt.half){var g=parseFloat((f.pageX-d(this).offset().left)/a.opt.size),h=.5<g?1:.5,e=e-1+h;b._fill.call(a,e);a.opt.precision&&(e=e-h+g);b._roundStars.call(a,e);c.data("score",e)}else b._fill.call(a,e);b._target.call(a,e,f);a.opt.mouseover&&a.opt.mouseover.call(a,e,f)})},_callback:function(a){for(var c in a)"function"===typeof this.opt[a[c]]&&(this.opt[a[c]]=this.opt[a[c]].call(this))},
_createCancel:function(){var a=d(this),c=d("<span />",{alt:"x",title:this.opt.cancelHint,"class":this.opt.ratyClasses.cancelOff+" "+this.opt.cancelSize+" raty-cancel"});"left"==this.opt.cancelPlace?a.prepend(c):a.append(c);return c},_createScore:function(){return d("<input />",{type:"hidden",name:this.opt.scoreName}).appendTo(this)},_createStars:function(){for(var a=d(this),c=1;c<=this.opt.number;c++){var f=b._getHint.call(this,c),e=this.opt.score&&this.opt.score>=c?"starOn":"starOff",e=this.opt.ratyClasses[e]+
" "+this.opt.ratyIconSize;d("<span />",{"class":e,alt:c,title:f}).appendTo(this)}return a.children("span")},_error:function(a){d(this).html(a);d.error(a)},_fill:function(a){for(var c=0,b=1;b<=this.stars.length;b++){var d=this.stars.eq(b-1),g=this.opt.single?b==a:b<=a;if(this.opt.iconRange&&this.opt.iconRange.length>c){var h=this.opt.iconRange[c],k=h.on||this.opt.starOn,l=h.off||this.opt.starOff,g=g?k:l;b<=h.range&&d.attr("class",this.opt.ratyClasses[g]+" "+this.opt.ratyIconSize);b==h.range&&c++}else g=
g?"starOn":"starOff",d.attr("class",this.opt.ratyClasses[g]+" "+this.opt.ratyIconSize)}},_getHint:function(a){var c=this.opt.hints[a-1];return""===c?"":c||a},_lock:function(){var a=this.score.val();"-1"==a.indexOf(".")?parseInt(a,10):parseFloat(a,10);a=a?b._getHint.call(this,a):this.opt.noRatedMsg;d(this).data("readonly",!0).css("cursor","").attr("title",a);this.score.attr("readonly","readonly");this.stars.attr("title",a);this.cancel&&this.cancel.hide()},_roundStars:function(a){var c=(a-Math.floor(a)).toFixed(2);
if(c>this.opt.round.down){var b="starOn";this.opt.halfShow&&c<this.opt.round.up?b="starHalf":c<this.opt.round.full&&(b="starOff");this.stars.eq(Math.ceil(a)-1).attr("class",this.opt.ratyClasses[b]+" "+this.opt.ratyIconSize)}},_roundScores:function(a){if(!this.opt.halfShow||!a||isNaN(a))return a;a=parseFloat(a).toFixed(2);var b=(a-Math.floor(a)).toFixed(2);a=parseInt(a);b>this.opt.round.down&&(b<this.opt.round.up?a=parseInt(a)+.5:b>this.opt.round.up&&(a=parseInt(a)+1));return a},_target:function(a,
c){if(this.opt.target){var f=d(this.opt.target);0===f.length&&b._error.call(this,"Target selector invalid or missing!");0>this.opt.targetFormat.indexOf("{score}")&&b._error.call(this,'Template "{score}" missing!');var e=c&&"mouseover"==c.type;void 0===a?a=this.opt.targetText:null===a?a=e?this.opt.cancelHint:this.opt.targetText:("hint"==this.opt.targetType?a=b._getHint.call(this,Math.ceil(a)):this.opt.precision&&""!=a&&(a=parseFloat(a).toFixed(1)),e||this.opt.targetKeep||(a=this.opt.targetText));a&&
(a=b._roundScores.call(this,a),a=this.opt.targetFormat.toString().replace("{score}",a));a=b.checkScoreFn.call(this,a);f.is(":input")?f.val(a).trigger("change"):f.html(a)}},_unlock:function(){d(this).data("readonly",!1).css("cursor","pointer").removeAttr("title");this.score.removeAttr("readonly","readonly");for(var a=0;a<this.opt.number;a++)this.stars.eq(a).attr("title",b._getHint.call(this,a+1));this.cancel&&this.cancel.css("display","")},cancel:function(a){return this.each(function(){!0!==d(this).data("readonly")&&
(b[a?"click":"score"].call(this,null),this.score.removeAttr("value"))})},click:function(a){return d(this).each(function(){!0!==d(this).data("readonly")&&(b._apply.call(this,a),this.opt.click||b._error.call(this,'You must add the "click: function(score, evt) { }" callback.'),this.opt.click.call(this,a,d.Event("click")),b._target.call(this,a))})},destroy:function(){return d(this).each(function(){var a=d(this),b=a.data("raw");b?a.off(".raty").empty().css({cursor:b.style.cursor,width:b.style.width}).removeData("readonly"):
a.data("raw",a.clone()[0])})},getScore:function(){var a=[],b;d(this).each(function(){b=this.score.val();a.push(b?parseFloat(b):void 0)});return 1<a.length?a:a[0]},readOnly:function(a){return this.each(function(){var c=d(this);c.data("readonly")!==a&&(a?(c.off(".raty").children("span").off(".raty"),b._lock.call(this)):(b._binds.call(this),b._unlock.call(this)),c.data("readonly",a))})},reload:function(){return b.set.call(this,{})},score:function(){return arguments.length?b.setScore.apply(this,arguments):
b.getScore.call(this)},set:function(a){return this.each(function(){var b=d(this),f=b.data("settings"),f=d.extend({},f,a);b.raty(f)})},setScore:function(a){return d(this).each(function(){!0!==d(this).data("readonly")&&(b._apply.call(this,a),b._target.call(this,a))})},checkScoreFn:function(a){return 0>=a?"":a}};d.fn.raty=function(a){if(b[a])return b[a].apply(this,Array.prototype.slice.call(arguments,1));if("object"!==typeof a&&a)d.error("Method "+a+" does not exist!");else return b.init.apply(this,
arguments)};d.fn.raty.defaults={cancel:!1,cancelHint:"Cancel this rating!",cancelOff:"cancel-off.png",cancelOn:"cancel-on.png",cancelPlace:"right",click:void 0,half:!1,halfShow:!0,hints:["bad","poor","regular","good","gorgeous"],iconRange:void 0,mouseout:void 0,mouseover:void 0,noRatedMsg:"Not rated yet!",number:5,numberMax:20,path:"",precision:!1,readOnly:!1,round:{down:.25,full:.6,up:.76},score:void 0,scoreName:"score",single:!1,size:16,space:!0,starHalf:"star-half.png",starOff:"star-off.png",starOn:"star-on.png",
target:void 0,targetFormat:"{score}",targetKeep:!1,targetText:"",targetType:"hint",width:void 0,ratyClasses:{cancelOn:"cut-icon-minus-2",cancelOff:"cut-icon-minus-2",starOn:"icomoon-icon-star-6",starOff:"icomoon-icon-star-4",starHalf:"icomoon-icon-star-5"},ratyIconSize:"icon18",cancelSize:"icon16"}})(jQuery);;
(function(m){m.color={};m.color.make=function(v,p,g,k){var h={};h.r=v||0;h.g=p||0;h.b=g||0;h.a=null!=k?k:1;h.add=function(g,m){for(var k=0;k<g.length;++k)h[g.charAt(k)]+=m;return h.normalize()};h.scale=function(g,m){for(var k=0;k<g.length;++k)h[g.charAt(k)]*=m;return h.normalize()};h.toString=function(){return 1<=h.a?"rgb("+[h.r,h.g,h.b].join()+")":"rgba("+[h.r,h.g,h.b,h.a].join()+")"};h.normalize=function(){function g(h,m,k){return m<h?h:m>k?k:m}h.r=g(0,parseInt(h.r),255);h.g=g(0,parseInt(h.g),255);
h.b=g(0,parseInt(h.b),255);h.a=g(0,h.a,1);return h};h.clone=function(){return m.color.make(h.r,h.b,h.g,h.a)};return h.normalize()};m.color.extract=function(v,p){var g;do{g=v.css(p).toLowerCase();if(""!=g&&"transparent"!=g)break;v=v.parent()}while(v.length&&!m.nodeName(v.get(0),"body"));"rgba(0, 0, 0, 0)"==g&&(g="transparent");return m.color.parse(g)};m.color.parse=function(v){var p,g=m.color.make;if(p=/rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/.exec(v))return g(parseInt(p[1],
10),parseInt(p[2],10),parseInt(p[3],10));if(p=/rgba\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]+(?:\.[0-9]+)?)\s*\)/.exec(v))return g(parseInt(p[1],10),parseInt(p[2],10),parseInt(p[3],10),parseFloat(p[4]));if(p=/rgb\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*\)/.exec(v))return g(2.55*parseFloat(p[1]),2.55*parseFloat(p[2]),2.55*parseFloat(p[3]));if(p=/rgba\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\s*\)/.exec(v))return g(2.55*
parseFloat(p[1]),2.55*parseFloat(p[2]),2.55*parseFloat(p[3]),parseFloat(p[4]));if(p=/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(v))return g(parseInt(p[1],16),parseInt(p[2],16),parseInt(p[3],16));if(p=/#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(v))return g(parseInt(p[1]+p[1],16),parseInt(p[2]+p[2],16),parseInt(p[3]+p[3],16));v=m.trim(v).toLowerCase();if("transparent"==v)return g(255,255,255,0);p=D[v]||[0,0,0];return g(p[0],p[1],p[2])};var D={aqua:[0,255,255],azure:[240,255,255],beige:[245,
245,220],black:[0,0,0],blue:[0,0,255],brown:[165,42,42],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgrey:[169,169,169],darkgreen:[0,100,0],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkviolet:[148,0,211],fuchsia:[255,0,255],gold:[255,215,0],green:[0,128,0],indigo:[75,0,130],khaki:[240,230,140],lightblue:[173,216,230],lightcyan:[224,255,255],lightgreen:[144,238,
144],lightgrey:[211,211,211],lightpink:[255,182,193],lightyellow:[255,255,224],lime:[0,255,0],magenta:[255,0,255],maroon:[128,0,0],navy:[0,0,128],olive:[128,128,0],orange:[255,165,0],pink:[255,192,203],purple:[128,0,128],violet:[128,0,128],red:[255,0,0],silver:[192,192,192],white:[255,255,255],yellow:[255,255,0]}})(jQuery);
(function(m){function D(g,k){var h=k.children("."+g)[0];if(null==h&&(h=document.createElement("canvas"),h.className=g,m(h).css({direction:"ltr",position:"absolute",left:0,top:0}).appendTo(k),!h.getContext))if(window.G_vmlCanvasManager)h=window.G_vmlCanvasManager.initElement(h);else throw Error("Canvas is not available. If you're using IE with a fall-back such as Excanvas, then there's either a mistake in your conditional include, or the page has no DOCTYPE and is rendering in Quirks Mode.");this.element=
h;h=this.context=h.getContext("2d");this.pixelRatio=(window.devicePixelRatio||1)/(h.webkitBackingStorePixelRatio||h.mozBackingStorePixelRatio||h.msBackingStorePixelRatio||h.oBackingStorePixelRatio||h.backingStorePixelRatio||1);this.resize(k.width(),k.height());this.textContainer=null;this.text={};this._textCache={}}function v(g,k,h,p){function t(a,c){c=[y].concat(c);for(var b=0;b<a.length;++b)a[b].apply(this,c)}function L(a){for(var c=[],b=0;b<a.length;++b){var d=m.extend(!0,{},e.series);null!=a[b].data?
(d.data=a[b].data,delete a[b].data,m.extend(!0,d,a[b]),a[b].data=d.data):d.data=a[b];c.push(d)}x=c;b=x.length;c=-1;for(a=0;a<x.length;++a)d=x[a].color,null!=d&&(b--,"number"==typeof d&&d>c&&(c=d));b<=c&&(b=c+1);var c=[],f=e.colors,q=f.length,u=0;for(a=0;a<b;a++)d=m.color.parse(f[a%q]||"#666"),0==a%q&&a&&(u=0<=u?.5>u?-u-.2:0:-u),c[a]=d.scale("rgb",1+u);for(a=b=0;a<x.length;++a){d=x[a];null==d.color?(d.color=c[b].toString(),++b):"number"==typeof d.color&&(d.color=c[d.color].toString());if(null==d.lines.show){var z,
f=!0;for(z in d)if(d[z]&&d[z].show){f=!1;break}f&&(d.lines.show=!0)}null==d.lines.zero&&(d.lines.zero=!!d.lines.fill);d.xaxis=M(F,v(d,"x"));d.yaxis=M(J,v(d,"y"))}ma()}function v(a,c){var b=a[c+"axis"];"object"==typeof b&&(b=b.n);"number"!=typeof b&&(b=1);return b}function G(){return m.grep(F.concat(J),function(a){return a})}function X(a){var c={},b,d;for(b=0;b<F.length;++b)(d=F[b])&&d.used&&(c["x"+d.n]=d.c2p(a.left));for(b=0;b<J.length;++b)(d=J[b])&&d.used&&(c["y"+d.n]=d.c2p(a.top));void 0!==c.x1&&
(c.x=c.x1);void 0!==c.y1&&(c.y=c.y1);return c}function M(a,c){a[c-1]||(a[c-1]={n:c,direction:a==F?"x":"y",options:m.extend(!0,{},a==F?e.xaxis:e.yaxis)});return a[c-1]}function ma(){function a(a,b,c){b<a.datamin&&b!=-d&&(a.datamin=b);c>a.datamax&&c!=d&&(a.datamax=c)}var c=Number.POSITIVE_INFINITY,b=Number.NEGATIVE_INFINITY,d=Number.MAX_VALUE,f,q,u,z,r,e,l,g,h,n,k,E;m.each(G(),function(a,d){d.datamin=c;d.datamax=b;d.used=!1});for(f=0;f<x.length;++f)r=x[f],r.datapoints={points:[]},t(H.processRawData,
[r,r.data,r.datapoints]);for(f=0;f<x.length;++f){r=x[f];k=r.data;E=r.datapoints.format;if(!E){E=[];E.push({x:!0,number:!0,required:!0});E.push({y:!0,number:!0,required:!0});if(r.bars.show||r.lines.show&&r.lines.fill)E.push({y:!0,number:!0,required:!1,defaultValue:0,autoscale:!!(r.bars.show&&r.bars.zero||r.lines.show&&r.lines.zero)}),r.bars.horizontal&&(delete E[E.length-1].y,E[E.length-1].x=!0);r.datapoints.format=E}if(null==r.datapoints.pointsize){r.datapoints.pointsize=E.length;l=r.datapoints.pointsize;
e=r.datapoints.points;var w=r.lines.show&&r.lines.steps;r.xaxis.used=r.yaxis.used=!0;for(q=u=0;q<k.length;++q,u+=l){n=k[q];var U=null==n;if(!U)for(z=0;z<l;++z){g=n[z];if(h=E[z])h.number&&null!=g&&(g=+g,isNaN(g)?g=null:Infinity==g?g=d:-Infinity==g&&(g=-d)),null==g&&(h.required&&(U=!0),null!=h.defaultValue&&(g=h.defaultValue));e[u+z]=g}if(U)for(z=0;z<l;++z)g=e[u+z],null!=g&&(h=E[z],!1!==h.autoscale&&(h.x&&a(r.xaxis,g,g),h.y&&a(r.yaxis,g,g))),e[u+z]=null;else if(w&&0<u&&null!=e[u-l]&&e[u-l]!=e[u]&&e[u-
l+1]!=e[u+1]){for(z=0;z<l;++z)e[u+l+z]=e[u+z];e[u+1]=e[u-l+1];u+=l}}}}for(f=0;f<x.length;++f)r=x[f],t(H.processDatapoints,[r,r.datapoints]);for(f=0;f<x.length;++f){r=x[f];e=r.datapoints.points;l=r.datapoints.pointsize;E=r.datapoints.format;n=u=c;w=k=b;for(q=0;q<e.length;q+=l)if(null!=e[q])for(z=0;z<l;++z)g=e[q+z],(h=E[z])&&!1!==h.autoscale&&g!=d&&g!=-d&&(h.x&&(g<u&&(u=g),g>k&&(k=g)),h.y&&(g<n&&(n=g),g>w&&(w=g)));if(r.bars.show){switch(r.bars.align){case "left":q=0;break;case "right":q=-r.bars.barWidth;
break;default:q=-r.bars.barWidth/2}r.bars.horizontal?(n+=q,w+=q+r.bars.barWidth):(u+=q,k+=q+r.bars.barWidth)}a(r.xaxis,u,k);a(r.yaxis,n,w)}m.each(G(),function(a,d){d.datamin==c&&(d.datamin=null);d.datamax==b&&(d.datamax=null)})}function Y(){S&&clearTimeout(S);N.unbind("mousemove",Z);N.unbind("mouseleave",aa);N.unbind("click",ba);t(H.shutdown,[N])}function na(a){function c(a){return a}var b,d,f=a.options.transform||c,q=a.options.inverseTransform;"x"==a.direction?(b=a.scale=O/Math.abs(f(a.max)-f(a.min)),
d=Math.min(f(a.max),f(a.min))):(b=a.scale=K/Math.abs(f(a.max)-f(a.min)),b=-b,d=Math.max(f(a.max),f(a.min)));a.p2c=f==c?function(a){return(a-d)*b}:function(a){return(f(a)-d)*b};a.c2p=q?function(a){return q(d+a/b)}:function(a){return d+a/b}}function oa(a){var c=a.labelWidth,b=a.labelHeight,d=a.options.position,f="x"===a.direction,q=a.options.tickLength,u=e.grid.axisMargin,z=e.grid.labelMargin,r=!0,g=!0,l=!0,h=!1;m.each(f?F:J,function(b,c){c&&(c.show||c.reserveSpace)&&(c===a?h=!0:c.options.position===
d&&(h?g=!1:r=!1),h||(l=!1))});g&&(u=0);null==q&&(q=l?"full":5);isNaN(+q)||(z+=+q);f?(b+=z,"bottom"==d?(n.bottom+=b+u,a.box={top:C.height-n.bottom,height:b}):(a.box={top:n.top+u,height:b},n.top+=b+u)):(c+=z,"left"==d?(a.box={left:n.left+u,width:c},n.left+=c+u):(n.right+=c+u,a.box={left:C.width-n.right,width:c}));a.position=d;a.tickLength=q;a.box.padding=z;a.innermost=r}function pa(){var a=e.grid.minBorderMargin,c;if(null==a)for(c=a=0;c<x.length;++c)a=Math.max(a,2*(x[c].points.radius+x[c].points.lineWidth/
2));var b=a,d=a,f=a,q=a;m.each(G(),function(a,c){c.reserveSpace&&c.ticks&&c.ticks.length&&("x"===c.direction?(b=Math.max(b,c.labelWidth/2),d=Math.max(d,c.labelWidth/2)):(q=Math.max(q,c.labelHeight/2),f=Math.max(f,c.labelHeight/2)))});n.left=Math.ceil(Math.max(b,n.left));n.right=Math.ceil(Math.max(d,n.right));n.top=Math.ceil(Math.max(f,n.top));n.bottom=Math.ceil(Math.max(q,n.bottom))}function ca(){var a,c=G(),b=e.grid.show;for(a in n){var d=e.grid.margin||0;n[a]="number"==typeof d?d:d[a]||0}t(H.processOffset,
[n]);for(a in n)n[a]="object"==typeof e.grid.borderWidth?n[a]+(b?e.grid.borderWidth[a]:0):n[a]+(b?e.grid.borderWidth:0);m.each(c,function(a,b){var c=b.options;b.show=null==c.show?b.used:c.show;b.reserveSpace=null==c.reserveSpace?b.show:c.reserveSpace;var c=b.options,d=+(null!=c.min?c.min:b.datamin),r=+(null!=c.max?c.max:b.datamax),e=r-d;if(0==e){if(e=0==r?1:.01,null==c.min&&(d-=e),null==c.max||null!=c.min)r+=e}else{var g=c.autoscaleMargin;null!=g&&(null==c.min&&(d-=e*g,0>d&&null!=b.datamin&&0<=b.datamin&&
(d=0)),null==c.max&&(r+=e*g,0<r&&null!=b.datamax&&0>=b.datamax&&(r=0)))}b.min=d;b.max=r});if(b){d=m.grep(c,function(a){return a.show||a.reserveSpace});m.each(d,function(a,b){qa(b);var c=b.options.ticks,d=[];null==c||"number"==typeof c&&0<c?d=b.tickGenerator(b):c&&(d=m.isFunction(c)?c(b):c);var r;b.ticks=[];for(c=0;c<d.length;++c){var e=null,g=d[c];"object"==typeof g?(r=+g[0],1<g.length&&(e=g[1])):r=+g;null==e&&(e=b.tickFormatter(r,b));isNaN(r)||b.ticks.push({v:r,label:e})}d=b.ticks;b.options.autoscaleMargin&&
0<d.length&&(null==b.options.min&&(b.min=Math.min(b.min,d[0].v)),null==b.options.max&&1<d.length&&(b.max=Math.max(b.max,d[d.length-1].v)));d=b.options;c=b.ticks||[];r=d.labelWidth||0;for(var e=d.labelHeight||0,g=r||("x"==b.direction?Math.floor(C.width/(c.length||1)):null),l="flot-"+b.direction+"-axis flot-"+b.direction+b.n+"-axis "+(b.direction+"Axis "+b.direction+b.n+"Axis"),h=d.font||"flot-tick-label tickLabel",n=0;n<c.length;++n){var k=c[n];k.label&&(k=C.getTextInfo(l,k.label,h,null,g),r=Math.max(r,
k.width),e=Math.max(e,k.height))}b.labelWidth=d.labelWidth||r;b.labelHeight=d.labelHeight||e});for(a=d.length-1;0<=a;--a)oa(d[a]);pa();m.each(d,function(a,b){"x"==b.direction?(b.box.left=n.left-b.labelWidth/2,b.box.width=C.width-n.left-n.right+b.labelWidth):(b.box.top=n.top-b.labelHeight/2,b.box.height=C.height-n.bottom-n.top+b.labelHeight)})}O=C.width-n.left-n.right;K=C.height-n.bottom-n.top;m.each(c,function(a,b){na(b)});b&&ra();sa()}function qa(a){var c=a.options,b;b="number"==typeof c.ticks&&
0<c.ticks?c.ticks:.3*Math.sqrt("x"==a.direction?C.width:C.height);b=(a.max-a.min)/b;var d=-Math.floor(Math.log(b)/Math.LN10),f=c.tickDecimals;null!=f&&d>f&&(d=f);var e=Math.pow(10,-d),u=b/e,g;1.5>u?g=1:3>u?(g=2,2.25<u&&(null==f||d+1<=f)&&(g=2.5,++d)):g=7.5>u?5:10;g*=e;null!=c.minTickSize&&g<c.minTickSize&&(g=c.minTickSize);a.delta=b;a.tickDecimals=Math.max(0,null!=f?f:d);a.tickSize=c.tickSize||g;if("time"==c.mode&&!a.tickGenerator)throw Error("Time mode requires the flot.time plugin.");a.tickGenerator||
(a.tickGenerator=function(a){var b=[],c;c=a.tickSize;c*=Math.floor(a.min/c);var d=0,f=Number.NaN,e;do e=f,f=c+d*a.tickSize,b.push(f),++d;while(f<a.max&&f!=e);return b},a.tickFormatter=function(a,b){var c=b.tickDecimals?Math.pow(10,b.tickDecimals):1,d=""+Math.round(a*c)/c;if(null!=b.tickDecimals){var f=d.indexOf("."),f=-1==f?0:d.length-f-1;if(f<b.tickDecimals)return(f?d:d+".")+(""+c).substr(1,b.tickDecimals-f)}return d});m.isFunction(c.tickFormatter)&&(a.tickFormatter=function(a,b){return""+c.tickFormatter(a,
b)});if(null!=c.alignTicksWithAxis){var r=("x"==a.direction?F:J)[c.alignTicksWithAxis-1];r&&r.used&&r!=a&&(b=a.tickGenerator(a),0<b.length&&(null==c.min&&(a.min=Math.min(a.min,b[0])),null==c.max&&1<b.length&&(a.max=Math.max(a.max,b[b.length-1]))),a.tickGenerator=function(a){var b=[],c,d;for(d=0;d<r.ticks.length;++d)c=(r.ticks[d].v-r.min)/(r.max-r.min),c=a.min+c*(a.max-a.min),b.push(c);return b},a.mode||null!=c.tickDecimals||(b=Math.max(0,-Math.floor(Math.log(a.delta)/Math.LN10)+1),d=a.tickGenerator(a),
1<d.length&&/\..*0$/.test((d[1]-d[0]).toFixed(b))||(a.tickDecimals=b)))}}function da(){C.clear();t(H.drawBackground,[l]);var a=e.grid;a.show&&a.backgroundColor&&(l.save(),l.translate(n.left,n.top),l.fillStyle=ea(e.grid.backgroundColor,K,0,"rgba(255, 255, 255, 0)"),l.fillRect(0,0,O,K),l.restore());a.show&&!a.aboveData&&fa();for(var c=0;c<x.length;++c){t(H.drawSeries,[l,x[c]]);var b=x[c];b.lines.show&&ta(b);b.bars.show&&ua(b);b.points.show&&va(b)}t(H.draw,[l]);a.show&&a.aboveData&&fa();C.render();T()}
function ga(a,c){for(var b,d,f,e,g=G(),l=0;l<g.length;++l)if(b=g[l],b.direction==c&&(e=c+b.n+"axis",a[e]||1!=b.n||(e=c+"axis"),a[e])){d=a[e].from;f=a[e].to;break}a[e]||(b="x"==c?F[0]:J[0],d=a[c+"1"],f=a[c+"2"]);null!=d&&null!=f&&d>f&&(e=d,d=f,f=e);return{from:d,to:f,axis:b}}function fa(){var a,c,b;l.save();l.translate(n.left,n.top);if(b=e.grid.markings)for(m.isFunction(b)&&(c=y.getAxes(),c.xmin=c.xaxis.min,c.xmax=c.xaxis.max,c.ymin=c.yaxis.min,c.ymax=c.yaxis.max,b=b(c)),a=0;a<b.length;++a){c=b[a];
var d=ga(c,"x"),f=ga(c,"y");null==d.from&&(d.from=d.axis.min);null==d.to&&(d.to=d.axis.max);null==f.from&&(f.from=f.axis.min);null==f.to&&(f.to=f.axis.max);if(!(d.to<d.axis.min||d.from>d.axis.max||f.to<f.axis.min||f.from>f.axis.max)){d.from=Math.max(d.from,d.axis.min);d.to=Math.min(d.to,d.axis.max);f.from=Math.max(f.from,f.axis.min);f.to=Math.min(f.to,f.axis.max);var g=d.from===d.to,u=f.from===f.to;if(!g||!u)if(d.from=Math.floor(d.axis.p2c(d.from)),d.to=Math.floor(d.axis.p2c(d.to)),f.from=Math.floor(f.axis.p2c(f.from)),
f.to=Math.floor(f.axis.p2c(f.to)),g||u){var u=c.lineWidth||e.grid.markingsLineWidth,h=u%2?.5:0;l.beginPath();l.strokeStyle=c.color||e.grid.markingsColor;l.lineWidth=u;g?(l.moveTo(d.to+h,f.from),l.lineTo(d.to+h,f.to)):(l.moveTo(d.from,f.to+h),l.lineTo(d.to,f.to+h));l.stroke()}else l.fillStyle=c.color||e.grid.markingsColor,l.fillRect(d.from,f.to,d.to-d.from,f.from-f.to)}}c=G();b=e.grid.borderWidth;for(d=0;d<c.length;++d){f=c[d];a=f.box;var g=f.tickLength,r,Q;if(f.show&&0!=f.ticks.length){l.lineWidth=
1;"x"==f.direction?(u=0,h="full"==g?"top"==f.position?0:K:a.top-n.top+("top"==f.position?a.height:0)):(h=0,u="full"==g?"left"==f.position?0:O:a.left-n.left+("left"==f.position?a.width:0));f.innermost||(l.strokeStyle=f.options.color,l.beginPath(),r=Q=0,"x"==f.direction?r=O+1:Q=K+1,1==l.lineWidth&&("x"==f.direction?h=Math.floor(h)+.5:u=Math.floor(u)+.5),l.moveTo(u,h),l.lineTo(u+r,h+Q),l.stroke());l.strokeStyle=f.options.tickColor;l.beginPath();for(a=0;a<f.ticks.length;++a){var k=f.ticks[a].v;r=Q=0;
isNaN(k)||k<f.min||k>f.max||"full"==g&&("object"==typeof b&&0<b[f.position]||0<b)&&(k==f.min||k==f.max)||("x"==f.direction?(u=f.p2c(k),Q="full"==g?-K:g,"top"==f.position&&(Q=-Q)):(h=f.p2c(k),r="full"==g?-O:g,"left"==f.position&&(r=-r)),1==l.lineWidth&&("x"==f.direction?u=Math.floor(u)+.5:h=Math.floor(h)+.5),l.moveTo(u,h),l.lineTo(u+r,h+Q))}l.stroke()}}b&&(a=e.grid.borderColor,"object"==typeof b||"object"==typeof a?("object"!==typeof b&&(b={top:b,right:b,bottom:b,left:b}),"object"!==typeof a&&(a={top:a,
right:a,bottom:a,left:a}),0<b.top&&(l.strokeStyle=a.top,l.lineWidth=b.top,l.beginPath(),l.moveTo(0-b.left,0-b.top/2),l.lineTo(O,0-b.top/2),l.stroke()),0<b.right&&(l.strokeStyle=a.right,l.lineWidth=b.right,l.beginPath(),l.moveTo(O+b.right/2,0-b.top),l.lineTo(O+b.right/2,K),l.stroke()),0<b.bottom&&(l.strokeStyle=a.bottom,l.lineWidth=b.bottom,l.beginPath(),l.moveTo(O+b.right,K+b.bottom/2),l.lineTo(0,K+b.bottom/2),l.stroke()),0<b.left&&(l.strokeStyle=a.left,l.lineWidth=b.left,l.beginPath(),l.moveTo(0-
b.left/2,K+b.bottom),l.lineTo(0-b.left/2,0),l.stroke())):(l.lineWidth=b,l.strokeStyle=e.grid.borderColor,l.strokeRect(-b/2,-b/2,O+b,K+b)));l.restore()}function ra(){m.each(G(),function(a,c){var b=c.box,d="flot-"+c.direction+"-axis flot-"+c.direction+c.n+"-axis "+(c.direction+"Axis "+c.direction+c.n+"Axis"),f=c.options.font||"flot-tick-label tickLabel",e,g,l,r,h;C.removeText(d);if(c.show&&0!=c.ticks.length)for(var k=0;k<c.ticks.length;++k)e=c.ticks[k],!e.label||e.v<c.min||e.v>c.max||("x"==c.direction?
(r="center",g=n.left+c.p2c(e.v),"bottom"==c.position?l=b.top+b.padding:(l=b.top+b.height-b.padding,h="bottom")):(h="middle",l=n.top+c.p2c(e.v),"left"==c.position?(g=b.left+b.width-b.padding,r="right"):g=b.left+b.padding),C.addText(d,g,l,e.label,f,null,null,r,h))})}function ta(a){function c(a,b,c,d,f){var e=a.points;a=a.pointsize;var g=null,h=null;l.beginPath();for(var k=a;k<e.length;k+=a){var n=e[k-a],w=e[k-a+1],m=e[k],q=e[k+1];if(null!=n&&null!=m){if(w<=q&&w<f.min){if(q<f.min)continue;n=(f.min-w)/
(q-w)*(m-n)+n;w=f.min}else if(q<=w&&q<f.min){if(w<f.min)continue;m=(f.min-w)/(q-w)*(m-n)+n;q=f.min}if(w>=q&&w>f.max){if(q>f.max)continue;n=(f.max-w)/(q-w)*(m-n)+n;w=f.max}else if(q>=w&&q>f.max){if(w>f.max)continue;m=(f.max-w)/(q-w)*(m-n)+n;q=f.max}if(n<=m&&n<d.min){if(m<d.min)continue;w=(d.min-n)/(m-n)*(q-w)+w;n=d.min}else if(m<=n&&m<d.min){if(n<d.min)continue;q=(d.min-n)/(m-n)*(q-w)+w;m=d.min}if(n>=m&&n>d.max){if(m>d.max)continue;w=(d.max-n)/(m-n)*(q-w)+w;n=d.max}else if(m>=n&&m>d.max){if(n>d.max)continue;
q=(d.max-n)/(m-n)*(q-w)+w;m=d.max}n==g&&w==h||l.moveTo(d.p2c(n)+b,f.p2c(w)+c);g=m;h=q;l.lineTo(d.p2c(m)+b,f.p2c(q)+c)}}l.stroke()}function b(a,b,c){var d=a.points;a=a.pointsize;for(var f=Math.min(Math.max(0,c.min),c.max),e=0,g=!1,h=1,n=0,m=0;!(0<a&&e>d.length+a);){var e=e+a,k=d[e-a],q=d[e-a+h],p=d[e],t=d[e+h];if(g){if(0<a&&null!=k&&null==p){m=e;a=-a;h=2;continue}if(0>a&&e==n+a){l.fill();g=!1;a=-a;h=1;e=n=m+a;continue}}if(null!=k&&null!=p){if(k<=p&&k<b.min){if(p<b.min)continue;q=(b.min-k)/(p-k)*(t-
q)+q;k=b.min}else if(p<=k&&p<b.min){if(k<b.min)continue;t=(b.min-k)/(p-k)*(t-q)+q;p=b.min}if(k>=p&&k>b.max){if(p>b.max)continue;q=(b.max-k)/(p-k)*(t-q)+q;k=b.max}else if(p>=k&&p>b.max){if(k>b.max)continue;t=(b.max-k)/(p-k)*(t-q)+q;p=b.max}g||(l.beginPath(),l.moveTo(b.p2c(k),c.p2c(f)),g=!0);if(q>=c.max&&t>=c.max)l.lineTo(b.p2c(k),c.p2c(c.max)),l.lineTo(b.p2c(p),c.p2c(c.max));else if(q<=c.min&&t<=c.min)l.lineTo(b.p2c(k),c.p2c(c.min)),l.lineTo(b.p2c(p),c.p2c(c.min));else{var x=k,y=p;q<=t&&q<c.min&&t>=
c.min?(k=(c.min-q)/(t-q)*(p-k)+k,q=c.min):t<=q&&t<c.min&&q>=c.min&&(p=(c.min-q)/(t-q)*(p-k)+k,t=c.min);q>=t&&q>c.max&&t<=c.max?(k=(c.max-q)/(t-q)*(p-k)+k,q=c.max):t>=q&&t>c.max&&q<=c.max&&(p=(c.max-q)/(t-q)*(p-k)+k,t=c.max);k!=x&&l.lineTo(b.p2c(x),c.p2c(q));l.lineTo(b.p2c(k),c.p2c(q));l.lineTo(b.p2c(p),c.p2c(t));p!=y&&(l.lineTo(b.p2c(p),c.p2c(t)),l.lineTo(b.p2c(y),c.p2c(t)))}}}}l.save();l.translate(n.left,n.top);l.lineJoin="round";var d=a.lines.lineWidth,f=a.shadowSize;if(0<d&&0<f){l.lineWidth=f;
l.strokeStyle="rgba(0,0,0,0.1)";var e=Math.PI/18;c(a.datapoints,Math.sin(e)*(d/2+f/2),Math.cos(e)*(d/2+f/2),a.xaxis,a.yaxis);l.lineWidth=f/2;c(a.datapoints,Math.sin(e)*(d/2+f/4),Math.cos(e)*(d/2+f/4),a.xaxis,a.yaxis)}l.lineWidth=d;l.strokeStyle=a.color;if(f=V(a.lines,a.color,0,K))l.fillStyle=f,b(a.datapoints,a.xaxis,a.yaxis);0<d&&c(a.datapoints,0,0,a.xaxis,a.yaxis);l.restore()}function va(a){function c(a,b,c,d,f,e,g,h){var k=a.points;a=a.pointsize;for(var n=0;n<k.length;n+=a){var q=k[n],m=k[n+1];
null==q||q<e.min||q>e.max||m<g.min||m>g.max||(l.beginPath(),q=e.p2c(q),m=g.p2c(m)+d,"circle"==h?l.arc(q,m,b,0,f?Math.PI:2*Math.PI,!1):h(l,q,m,b,f),l.closePath(),c&&(l.fillStyle=c,l.fill()),l.stroke())}}l.save();l.translate(n.left,n.top);var b=a.points.lineWidth,d=a.shadowSize,f=a.points.radius,e=a.points.symbol;0==b&&(b=1E-4);0<b&&0<d&&(d/=2,l.lineWidth=d,l.strokeStyle="rgba(0,0,0,0.1)",c(a.datapoints,f,null,d+d/2,!0,a.xaxis,a.yaxis,e),l.strokeStyle="rgba(0,0,0,0.2)",c(a.datapoints,f,null,d/2,!0,
a.xaxis,a.yaxis,e));l.lineWidth=b;l.strokeStyle=a.color;c(a.datapoints,f,V(a.points,a.color),0,!1,a.xaxis,a.yaxis,e);l.restore()}function ha(a,c,b,d,f,e,g,h,l,k,n){var m,p,t,x;k?(x=p=t=!0,m=!1,k=b,b=c+d,f=c+f,a<k&&(c=a,a=k,k=c,m=!0,p=!1)):(m=p=t=!0,x=!1,k=a+d,a+=f,f=b,b=c,b<f&&(c=b,b=f,f=c,x=!0,t=!1));a<g.min||k>g.max||b<h.min||f>h.max||(k<g.min&&(k=g.min,m=!1),a>g.max&&(a=g.max,p=!1),f<h.min&&(f=h.min,x=!1),b>h.max&&(b=h.max,t=!1),k=g.p2c(k),f=h.p2c(f),a=g.p2c(a),b=h.p2c(b),e&&(l.fillStyle=e(f,b),
l.fillRect(k,b,a-k,f-b)),0<n&&(m||p||t||x)&&(l.beginPath(),l.moveTo(k,f),m?l.lineTo(k,b):l.moveTo(k,b),t?l.lineTo(a,b):l.moveTo(a,b),p?l.lineTo(a,f):l.moveTo(a,f),x?l.lineTo(k,f):l.moveTo(k,f),l.stroke()))}function ua(a){l.save();l.translate(n.left,n.top);l.lineWidth=a.bars.lineWidth;l.strokeStyle=a.color;var c;switch(a.bars.align){case "left":c=0;break;case "right":c=-a.bars.barWidth;break;default:c=-a.bars.barWidth/2}(function(b,c,f,e,g,k){var h=b.points;b=b.pointsize;for(var n=0;n<h.length;n+=
b)null!=h[n]&&ha(h[n],h[n+1],h[n+2],c,f,e,g,k,l,a.bars.horizontal,a.bars.lineWidth)})(a.datapoints,c,c+a.bars.barWidth,a.bars.fill?function(b,c){return V(a.bars,a.color,b,c)}:null,a.xaxis,a.yaxis);l.restore()}function V(a,c,b,d){var f=a.fill;if(!f)return null;if(a.fillColor)return ea(a.fillColor,b,d,c);a=m.color.parse(c);a.a="number"==typeof f?f:.4;a.normalize();return a.toString()}function sa(){null!=e.legend.container?m(e.legend.container).html(""):g.find(".legend").remove();if(e.legend.show){for(var a=
[],c=[],b=!1,d=e.legend.labelFormatter,f,k,h=0;h<x.length;++h)f=x[h],f.label&&(k=d?d(f.label,f):f.label)&&c.push({label:k,color:f.color});if(e.legend.sorted)if(m.isFunction(e.legend.sorted))c.sort(e.legend.sorted);else if("reverse"==e.legend.sorted)c.reverse();else{var l="descending"!=e.legend.sorted;c.sort(function(a,b){return a.label==b.label?0:a.label<b.label!=l?1:-1})}for(h=0;h<c.length;++h)d=c[h],0==h%e.legend.noColumns&&(b&&a.push("</tr>"),a.push("<tr>"),b=!0),a.push('<td class="legendColorBox"><div style="border:1px solid '+
e.legend.labelBoxBorderColor+';padding:1px"><div style="width:4px;height:0;border:5px solid '+d.color+';overflow:hidden"></div></div></td><td class="legendLabel">'+d.label+"</td>");b&&a.push("</tr>");0!=a.length&&(c='<table style="font-size:smaller;color:'+e.grid.color+'">'+a.join("")+"</table>",null!=e.legend.container?m(e.legend.container).html(c):(a="",b=e.legend.position,h=e.legend.margin,null==h[0]&&(h=[h,h]),"n"==b.charAt(0)?a+="top:"+(h[1]+n.top)+"px;":"s"==b.charAt(0)&&(a+="bottom:"+(h[1]+
n.bottom)+"px;"),"e"==b.charAt(1)?a+="right:"+(h[0]+n.right)+"px;":"w"==b.charAt(1)&&(a+="left:"+(h[0]+n.left)+"px;"),c=m('<div class="legend">'+c.replace('style="','style="position:absolute;'+a+";")+"</div>").appendTo(g),0!=e.legend.backgroundOpacity&&(b=e.legend.backgroundColor,null==b&&(b=(b=e.grid.backgroundColor)&&"string"==typeof b?m.color.parse(b):m.color.extract(c,"background-color"),b.a=1,b=b.toString()),h=c.children(),m('<div style="position:absolute;width:'+h.width()+"px;height:"+h.height()+
"px;"+a+"background-color:"+b+';"> </div>').prependTo(c).css("opacity",e.legend.backgroundOpacity))))}}function Z(a){e.grid.hoverable&&W("plothover",a,function(a){return 0!=a.hoverable})}function aa(a){e.grid.hoverable&&W("plothover",a,function(a){return!1})}function ba(a){W("plotclick",a,function(a){return 0!=a.clickable})}function W(a,c,b){var d=N.offset(),f=c.pageX-d.left-n.left,h=c.pageY-d.top-n.top,k=X({left:f,top:h});k.pageX=c.pageX;k.pageY=c.pageY;c=e.grid.mouseActiveRadius;var l=c*c+1,m=null,
p,t,y;for(p=x.length-1;0<=p;--p)if(b(x[p])){var I=x[p],v=I.xaxis,L=I.yaxis,E=I.datapoints.points,w=v.c2p(f),C=L.c2p(h),G=c/v.scale,F=c/L.scale;y=I.datapoints.pointsize;v.options.inverseTransform&&(G=Number.MAX_VALUE);L.options.inverseTransform&&(F=Number.MAX_VALUE);if(I.lines.show||I.points.show)for(t=0;t<E.length;t+=y){var B=E[t],A=E[t+1];null==B||B-w>G||B-w<-G||A-C>F||A-C<-F||(B=Math.abs(v.p2c(B)-f),A=Math.abs(L.p2c(A)-h),A=B*B+A*A,A<l&&(l=A,m=[p,t/y]))}if(I.bars.show&&!m){switch(I.bars.align){case "left":v=
0;break;case "right":v=-I.bars.barWidth;break;default:v=-I.bars.barWidth/2}I=v+I.bars.barWidth;for(t=0;t<E.length;t+=y)B=E[t],A=E[t+1],L=E[t+2],null!=B&&(x[p].bars.horizontal?w<=Math.max(L,B)&&w>=Math.min(L,B)&&C>=A+v&&C<=A+I:w>=B+v&&w<=B+I&&C>=Math.min(L,A)&&C<=Math.max(L,A))&&(m=[p,t/y])}}m?(p=m[0],t=m[1],y=x[p].datapoints.pointsize,b={datapoint:x[p].datapoints.points.slice(t*y,(t+1)*y),dataIndex:t,series:x[p],seriesIndex:p}):b=null;b&&(b.pageX=parseInt(b.series.xaxis.p2c(b.datapoint[0])+d.left+
n.left,10),b.pageY=parseInt(b.series.yaxis.p2c(b.datapoint[1])+d.top+n.top,10));if(e.grid.autoHighlight){for(d=0;d<P.length;++d)f=P[d],f.auto!=a||b&&f.series==b.series&&f.point[0]==b.datapoint[0]&&f.point[1]==b.datapoint[1]||ia(f.series,f.point);b&&ja(b.series,b.datapoint,a)}g.trigger(a,[k,b])}function T(){var a=e.interaction.redrawOverlayInterval;-1==a?ka():S||(S=setTimeout(ka,a))}function ka(){S=null;B.save();R.clear();B.translate(n.left,n.top);var a,c;for(a=0;a<P.length;++a)if(c=P[a],c.series.bars.show)wa(c.series,
c.point);else{var b=c.series,d=c.point;c=d[0];var d=d[1],f=b.xaxis,e=b.yaxis,g="string"===typeof b.highlightColor?b.highlightColor:m.color.parse(b.color).scale("a",.5).toString();if(!(c<f.min||c>f.max||d<e.min||d>e.max)){var h=b.points.radius+b.points.lineWidth/2;B.lineWidth=h;B.strokeStyle=g;g=1.5*h;c=f.p2c(c);d=e.p2c(d);B.beginPath();"circle"==b.points.symbol?B.arc(c,d,g,0,2*Math.PI,!1):b.points.symbol(B,c,d,g,!1);B.closePath();B.stroke()}}B.restore();t(H.drawOverlay,[B])}function ja(a,c,b){"number"==
typeof a&&(a=x[a]);if("number"==typeof c){var d=a.datapoints.pointsize;c=a.datapoints.points.slice(d*c,d*(c+1))}d=la(a,c);-1==d?(P.push({series:a,point:c,auto:b}),T()):b||(P[d].auto=!1)}function ia(a,c){if(null==a&&null==c)P=[],T();else{"number"==typeof a&&(a=x[a]);if("number"==typeof c){var b=a.datapoints.pointsize;c=a.datapoints.points.slice(b*c,b*(c+1))}b=la(a,c);-1!=b&&(P.splice(b,1),T())}}function la(a,c){for(var b=0;b<P.length;++b){var d=P[b];if(d.series==a&&d.point[0]==c[0]&&d.point[1]==c[1])return b}return-1}
function wa(a,c){var b="string"===typeof a.highlightColor?a.highlightColor:m.color.parse(a.color).scale("a",.5).toString(),d;switch(a.bars.align){case "left":d=0;break;case "right":d=-a.bars.barWidth;break;default:d=-a.bars.barWidth/2}B.lineWidth=a.bars.lineWidth;B.strokeStyle=b;ha(c[0],c[1],c[2]||0,d,d+a.bars.barWidth,function(){return b},a.xaxis,a.yaxis,B,a.bars.horizontal,a.bars.lineWidth)}function ea(a,c,b,d){if("string"==typeof a)return a;c=l.createLinearGradient(0,b,0,c);b=0;for(var f=a.colors.length;b<
f;++b){var e=a.colors[b];if("string"!=typeof e){var g=m.color.parse(d);null!=e.brightness&&(g=g.scale("rgb",e.brightness));null!=e.opacity&&(g.a*=e.opacity);e=g.toString()}c.addColorStop(b/(f-1),e)}return c}var x=[],e={colors:["#edc240","#afd8f8","#cb4b4b","#4da74d","#9440ed"],legend:{show:!0,noColumns:1,labelFormatter:null,labelBoxBorderColor:"#ccc",container:null,position:"ne",margin:5,backgroundColor:null,backgroundOpacity:.85,sorted:null},xaxis:{show:null,position:"bottom",mode:null,font:null,
color:null,tickColor:null,transform:null,inverseTransform:null,min:null,max:null,autoscaleMargin:null,ticks:null,tickFormatter:null,labelWidth:null,labelHeight:null,reserveSpace:null,tickLength:null,alignTicksWithAxis:null,tickDecimals:null,tickSize:null,minTickSize:null},yaxis:{autoscaleMargin:.02,position:"left"},xaxes:[],yaxes:[],series:{points:{show:!1,radius:3,lineWidth:2,fill:!0,fillColor:"#ffffff",symbol:"circle"},lines:{lineWidth:2,fill:!1,fillColor:null,steps:!1},bars:{show:!1,lineWidth:2,
barWidth:1,fill:!0,fillColor:null,align:"left",horizontal:!1,zero:!0},shadowSize:3,highlightColor:null},grid:{show:!0,aboveData:!1,color:"#545454",backgroundColor:null,borderColor:null,tickColor:null,margin:0,labelMargin:5,axisMargin:8,borderWidth:2,minBorderMargin:null,markings:null,markingsColor:"#f4f4f4",markingsLineWidth:2,clickable:!1,hoverable:!1,autoHighlight:!0,mouseActiveRadius:10},interaction:{redrawOverlayInterval:1E3/60},hooks:{}},C=null,R=null,N=null,l=null,B=null,F=[],J=[],n={left:0,
right:0,top:0,bottom:0},O=0,K=0,H={processOptions:[],processRawData:[],processDatapoints:[],processOffset:[],drawBackground:[],drawSeries:[],draw:[],bindEvents:[],drawOverlay:[],shutdown:[]},y=this;y.setData=L;y.setupGrid=ca;y.draw=da;y.getPlaceholder=function(){return g};y.getCanvas=function(){return C.element};y.getPlotOffset=function(){return n};y.width=function(){return O};y.height=function(){return K};y.offset=function(){var a=N.offset();a.left+=n.left;a.top+=n.top;return a};y.getData=function(){return x};
y.getAxes=function(){var a={};m.each(F.concat(J),function(c,b){b&&(a[b.direction+(1!=b.n?b.n:"")+"axis"]=b)});return a};y.getXAxes=function(){return F};y.getYAxes=function(){return J};y.c2p=X;y.p2c=function(a){var c={},b,d,e;for(b=0;b<F.length;++b)if((d=F[b])&&d.used&&(e="x"+d.n,null==a[e]&&1==d.n&&(e="x"),null!=a[e])){c.left=d.p2c(a[e]);break}for(b=0;b<J.length;++b)if((d=J[b])&&d.used&&(e="y"+d.n,null==a[e]&&1==d.n&&(e="y"),null!=a[e])){c.top=d.p2c(a[e]);break}return c};y.getOptions=function(){return e};
y.highlight=ja;y.unhighlight=ia;y.triggerRedrawOverlay=T;y.pointOffset=function(a){return{left:parseInt(F[v(a,"x")-1].p2c(+a.x)+n.left,10),top:parseInt(J[v(a,"y")-1].p2c(+a.y)+n.top,10)}};y.shutdown=Y;y.destroy=function(){Y();g.removeData("plot").empty();x=[];B=l=N=R=C=e=null;F=[];J=[];H=null;P=[];y=null};y.resize=function(){var a=g.width(),c=g.height();C.resize(a,c);R.resize(a,c)};y.hooks=H;(function(){for(var a={Canvas:D},c=0;c<p.length;++c){var b=p[c];b.init(y,a);b.options&&m.extend(!0,e,b.options)}})(y);
(function(a){m.extend(!0,e,a);a&&a.colors&&(e.colors=a.colors);null==e.xaxis.color&&(e.xaxis.color=m.color.parse(e.grid.color).scale("a",.22).toString());null==e.yaxis.color&&(e.yaxis.color=m.color.parse(e.grid.color).scale("a",.22).toString());null==e.xaxis.tickColor&&(e.xaxis.tickColor=e.grid.tickColor||e.xaxis.color);null==e.yaxis.tickColor&&(e.yaxis.tickColor=e.grid.tickColor||e.yaxis.color);null==e.grid.borderColor&&(e.grid.borderColor=e.grid.color);null==e.grid.tickColor&&(e.grid.tickColor=
m.color.parse(e.grid.color).scale("a",.22).toString());var c,b;a=(a=g.css("font-size"))?+a.replace("px",""):13;var d={style:g.css("font-style"),size:Math.round(.8*a),variant:g.css("font-variant"),weight:g.css("font-weight"),family:g.css("font-family")};b=e.xaxes.length||1;for(a=0;a<b;++a)(c=e.xaxes[a])&&!c.tickColor&&(c.tickColor=c.color),c=m.extend(!0,{},e.xaxis,c),e.xaxes[a]=c,c.font&&(c.font=m.extend({},d,c.font),c.font.color||(c.font.color=c.color),c.font.lineHeight||(c.font.lineHeight=Math.round(1.15*
c.font.size)));b=e.yaxes.length||1;for(a=0;a<b;++a)(c=e.yaxes[a])&&!c.tickColor&&(c.tickColor=c.color),c=m.extend(!0,{},e.yaxis,c),e.yaxes[a]=c,c.font&&(c.font=m.extend({},d,c.font),c.font.color||(c.font.color=c.color),c.font.lineHeight||(c.font.lineHeight=Math.round(1.15*c.font.size)));e.xaxis.noTicks&&null==e.xaxis.ticks&&(e.xaxis.ticks=e.xaxis.noTicks);e.yaxis.noTicks&&null==e.yaxis.ticks&&(e.yaxis.ticks=e.yaxis.noTicks);e.x2axis&&(e.xaxes[1]=m.extend(!0,{},e.xaxis,e.x2axis),e.xaxes[1].position=
"top",null==e.x2axis.min&&(e.xaxes[1].min=null),null==e.x2axis.max&&(e.xaxes[1].max=null));e.y2axis&&(e.yaxes[1]=m.extend(!0,{},e.yaxis,e.y2axis),e.yaxes[1].position="right",null==e.y2axis.min&&(e.yaxes[1].min=null),null==e.y2axis.max&&(e.yaxes[1].max=null));e.grid.coloredAreas&&(e.grid.markings=e.grid.coloredAreas);e.grid.coloredAreasColor&&(e.grid.markingsColor=e.grid.coloredAreasColor);e.lines&&m.extend(!0,e.series.lines,e.lines);e.points&&m.extend(!0,e.series.points,e.points);e.bars&&m.extend(!0,
e.series.bars,e.bars);null!=e.shadowSize&&(e.series.shadowSize=e.shadowSize);null!=e.highlightColor&&(e.series.highlightColor=e.highlightColor);for(a=0;a<e.xaxes.length;++a)M(F,a+1).options=e.xaxes[a];for(a=0;a<e.yaxes.length;++a)M(J,a+1).options=e.yaxes[a];for(var f in H)e.hooks[f]&&e.hooks[f].length&&(H[f]=H[f].concat(e.hooks[f]));t(H.processOptions,[e])})(h);(function(){g.css("padding",0).children().filter(function(){return!m(this).hasClass("flot-overlay")&&!m(this).hasClass("flot-base")}).remove();
"static"==g.css("position")&&g.css("position","relative");C=new D("flot-base",g);R=new D("flot-overlay",g);l=C.context;B=R.context;N=m(R.element).unbind();var a=g.data("plot");a&&(a.shutdown(),R.clear());g.data("plot",y)})();L(k);ca();da();e.grid.hoverable&&(N.mousemove(Z),N.bind("mouseleave",aa));e.grid.clickable&&N.click(ba);t(H.bindEvents,[N]);var P=[],S=null}var p=Object.prototype.hasOwnProperty;m.fn.detach||(m.fn.detach=function(){return this.each(function(){this.parentNode&&this.parentNode.removeChild(this)})});
D.prototype.resize=function(g,k){if(0>=g||0>=k)throw Error("Invalid dimensions for plot, width = "+g+", height = "+k);var h=this.element,m=this.context,p=this.pixelRatio;this.width!=g&&(h.width=g*p,h.style.width=g+"px",this.width=g);this.height!=k&&(h.height=k*p,h.style.height=k+"px",this.height=k);m.restore();m.save();m.scale(p,p)};D.prototype.clear=function(){this.context.clearRect(0,0,this.width,this.height)};D.prototype.render=function(){var g=this._textCache,k;for(k in g)if(p.call(g,k)){var h=
this.getTextLayer(k),m=g[k];h.hide();for(var t in m)if(p.call(m,t)){var v=m[t],A;for(A in v)if(p.call(v,A)){for(var G=v[A].positions,D=0,M;M=G[D];D++)M.active?M.rendered||(h.append(M.element),M.rendered=!0):(G.splice(D--,1),M.rendered&&M.element.detach());0==G.length&&delete v[A]}}h.show()}};D.prototype.getTextLayer=function(g){var k=this.text[g];null==k&&(null==this.textContainer&&(this.textContainer=m("<div class='flot-text'></div>").css({position:"absolute",top:0,left:0,bottom:0,right:0,"font-size":"smaller",
color:"#545454"}).insertAfter(this.element)),k=this.text[g]=m("<div></div>").addClass(g).css({position:"absolute",top:0,left:0,bottom:0,right:0}).appendTo(this.textContainer));return k};D.prototype.getTextInfo=function(g,k,h,p,t){var v,A;k=""+k;p="object"===typeof h?h.style+" "+h.variant+" "+h.weight+" "+h.size+"px/"+h.lineHeight+"px "+h.family:h;v=this._textCache[g];null==v&&(v=this._textCache[g]={});A=v[p];null==A&&(A=v[p]={});v=A[k];null==v&&(g=m("<div></div>").html(k).css({position:"absolute",
"max-width":t,top:-9999}).appendTo(this.getTextLayer(g)).attr("title",k),"object"===typeof h?g.css({font:p,color:h.color}):"string"===typeof h&&g.addClass(h),v=A[k]={width:g.outerWidth(!0),height:g.outerHeight(!0),element:g,positions:[]},g.detach());return v};D.prototype.addText=function(g,k,h,m,p,v,A,G,D){g=this.getTextInfo(g,m,p,v,A);m=g.positions;"center"==G?k-=g.width/2:"right"==G&&(k-=g.width);"middle"==D?h-=g.height/2:"bottom"==D&&(h-=g.height);for(D=0;p=m[D];D++)if(p.x==k&&p.y==h){p.active=
!0;return}p={active:!0,rendered:!1,element:m.length?g.element.clone():g.element,x:k,y:h};m.push(p);p.element.css({top:Math.round(h),left:Math.round(k),"text-align":G})};D.prototype.removeText=function(g,k,h,m,t,v){if(null==m){if(k=this._textCache[g],null!=k)for(var A in k)if(p.call(k,A)){h=k[A];for(var D in h)if(p.call(h,D))for(g=h[D].positions,m=0;t=g[m];m++)t.active=!1}}else for(g=this.getTextInfo(g,m,t,v).positions,m=0;t=g[m];m++)t.x==k&&t.y==h&&(t.active=!1)};m.plot=function(g,k,h){return new v(m(g),
k,h,m.plot.plugins)};m.plot.version="0.8.3";m.plot.plugins=[];m.fn.plot=function(g,k){return this.each(function(){m.plot(this,g,k)})}})(jQuery);;
(function(c,a,m){function e(n){!0===k&&(k=n||1);for(var b=d.length-1;0<=b;b--){var f=c(d[b]);if(f[0]==a||f.is(":visible")){var m=f.width(),p=f.height(),g=f.data("resize-special-event");!g||m===g.w&&p===g.h||(f.trigger("resize",[g.w=m,g.h=p]),k=n||!0)}else g=f.data("resize-special-event"),g.w=0,g.h=0}null!==l&&(k&&(null==n||1E3>n-k)?l=a.requestAnimationFrame(e):(l=setTimeout(e,h.pendingDelay),k=!1))}var d=[],h=c.resize=c.extend(c.resize,{}),l,k=!1;h.pendingDelay=200;h.activeDelay=20;h.throttleWindow=
!0;c.event.special.resize={setup:function(){if(!h.throttleWindow&&this.setTimeout)return!1;var a=c(this);d.push(this);a.data("resize-special-event",{w:a.width(),h:a.height()});1===d.length&&(l=m,e())},teardown:function(){if(!h.throttleWindow&&this.setTimeout)return!1;for(var a=c(this),b=d.length-1;0<=b;b--)if(d[b]==this){d.splice(b,1);break}a.removeData("resize-special-event");d.length||(k?cancelAnimationFrame(l):clearTimeout(l),l=null)},add:function(a){function b(a,b,g){var e=c(this),d=e.data("resize-special-event")||
{};d.w=b!==m?b:e.width();d.h=g!==m?g:e.height();f.apply(this,arguments)}if(!h.throttleWindow&&this.setTimeout)return!1;var f;if(c.isFunction(a))return f=a,b;f=a.handler;a.handler=b}};a.requestAnimationFrame||(a.requestAnimationFrame=function(){return a.webkitRequestAnimationFrame||a.mozRequestAnimationFrame||a.oRequestAnimationFrame||a.msRequestAnimationFrame||function(e,b){return a.setTimeout(function(){e((new Date).getTime())},h.activeDelay)}}());a.cancelAnimationFrame||(a.cancelAnimationFrame=
a.webkitCancelRequestAnimationFrame||a.mozCancelRequestAnimationFrame||a.oCancelRequestAnimationFrame||a.msCancelRequestAnimationFrame||clearTimeout)})(jQuery,this);(function(c){c.plot.plugins.push({init:function(a){function c(){var e=a.getPlaceholder();0!=e.width()&&0!=e.height()&&(a.resize(),a.setupGrid(),a.draw())}a.hooks.bindEvents.push(function(a,d){a.getPlaceholder().resize(c)});a.hooks.shutdown.push(function(a,d){a.getPlaceholder().unbind("resize",c)})},options:{},name:"resize",version:"1.0"})})(jQuery);;
(function(d){var f=function(b){this.tipPosition={x:0,y:0};this.init(b)};f.prototype.init=function(b){function a(a){var c={};c.x=a.pageX;c.y=a.pageY;b.setTooltipPosition(c)}function m(a,g,e){var f=function(a,b,c,g){return Math.sqrt((c-a)*(c-a)+(g-b)*(g-b))};if(e)b.showTooltip(e,g);else if(c.plotOptions.series.lines.show&&!0===c.tooltipOptions.lines.track){var m=-1,p;d.each(b.getData(),function(a,h){for(var e,d=0,l=-1,k=1;k<h.data.length;k++)h.data[k-1][0]<=g.x&&h.data[k][0]>=g.x&&(d=k-1,l=k);if(-1===
l)b.hideTooltip();else{var k=h.data[d][0],t=h.data[d][1],v=h.data[l][0],w=h.data[l][1],q;q=g.x;var z=g.y,x,y;y=!1;x=t-w;e=v-k;q=Math.abs(x*q+e*z+(k*w-t*v))/Math.sqrt(x*x+e*e);q<c.tooltipOptions.lines.threshold&&(d=f(k,t,g.x,g.y)<f(g.x,g.y,v,w)?d:l,d={datapoint:[g.x,t+(g.x-k)/(v-k)*(w-t)],dataIndex:d,series:h,seriesIndex:a},-1===m||q<m)&&(m=q,p=d)}});-1!==m?b.showTooltip(p,g):b.hideTooltip()}else b.hideTooltip()}var c=this,f=d.plot.plugins.length;this.plotPlugins=[];if(f)for(var l=0;l<f;l++)this.plotPlugins.push(d.plot.plugins[l].name);
b.hooks.bindEvents.push(function(b,g){c.plotOptions=b.getOptions();!1!==c.plotOptions.tooltip&&"undefined"!==typeof c.plotOptions.tooltip&&(c.tooltipOptions=c.plotOptions.tooltipOpts,c.tooltipOptions.$compat?(c.wfunc="width",c.hfunc="height"):(c.wfunc="innerWidth",c.hfunc="innerHeight"),c.getDomElement(),d(b.getPlaceholder()).bind("plothover",m),d(g).bind("mousemove",a))});b.hooks.shutdown.push(function(b,c){d(b.getPlaceholder()).unbind("plothover",m);d(c).unbind("mousemove",a)});b.setTooltipPosition=
function(a){var b=c.getDomElement(),e=b.outerWidth()+c.tooltipOptions.shifts.x,b=b.outerHeight()+c.tooltipOptions.shifts.y;a.x-d(window).scrollLeft()>d(window)[c.wfunc]()-e&&(a.x-=e);a.y-d(window).scrollTop()>d(window)[c.hfunc]()-b&&(a.y-=b);c.tipPosition.x=a.x;c.tipPosition.y=a.y};b.showTooltip=function(a,d){var e=c.getDomElement(),m=c.stringFormat(c.tooltipOptions.content,a);e.html(m);b.setTooltipPosition({x:d.pageX,y:d.pageY});e.css({left:c.tipPosition.x+c.tooltipOptions.shifts.x,top:c.tipPosition.y+
c.tooltipOptions.shifts.y}).show();if("function"===typeof c.tooltipOptions.onHover)c.tooltipOptions.onHover(a,e)};b.hideTooltip=function(){c.getDomElement().hide().html("")}};f.prototype.getDomElement=function(){var b=d("#"+this.tooltipOptions.id);0===b.length&&(b=d("<div />").attr("id",this.tooltipOptions.id),b.appendTo("body").hide().css({position:"absolute"}),this.tooltipOptions.defaultTheme&&b.css({background:"#fff","z-index":"1040",padding:"0.4em 0.6em","border-radius":"0.4em","font-size":"0.8em",
border:"1px solid #b1b1b1",display:"none","white-space":"nowrap"}));return b};f.prototype.stringFormat=function(b,a){var d=/%p\.{0,1}(\d{0,})/,c=/%s/,f=/%lx/,l=/%ly/,h=/%x\.{0,1}(\d{0,})/,g=/%y\.{0,1}(\d{0,})/,e,n,r,p;"undefined"!==typeof a.series.threshold?(e=a.datapoint[0],n=a.datapoint[1],r=a.datapoint[2]):"undefined"!==typeof a.series.lines&&a.series.lines.steps?(e=a.series.datapoints.points[2*a.dataIndex],n=a.series.datapoints.points[2*a.dataIndex+1],r=""):(e=a.series.data[a.dataIndex][0],n=
a.series.data[a.dataIndex][1],r=a.series.data[a.dataIndex][2]);null===a.series.label&&a.series.originSeries&&(a.series.label=a.series.originSeries.label);"function"===typeof b&&(b=b(a.series.label,e,n,a,this.tooltipOptions.fmatter));"undefined"!==typeof a.series.percent?p=a.series.percent:"undefined"!==typeof a.series.percents&&(p=a.series.percents[a.dataIndex]);"number"===typeof p&&(b=this.adjustValPrecision(d,b,p));b=b.toString();b="undefined"!==typeof a.series.label?b.replace(c,a.series.label):
b.replace(c,"");b=this.hasAxisLabel("xaxis",a)?b.replace(f,a.series.xaxis.options.axisLabel):b.replace(f,"");b=this.hasAxisLabel("yaxis",a)?b.replace(l,a.series.yaxis.options.axisLabel):b.replace(l,"");this.isTimeMode("xaxis",a)&&this.isXDateFormat(a)&&(b=b.replace(h,this.timestampToDate(e,this.tooltipOptions.xDateFormat,a.series.xaxis.options)));this.isTimeMode("yaxis",a)&&this.isYDateFormat(a)&&(b=b.replace(g,this.timestampToDate(n,this.tooltipOptions.yDateFormat,a.series.yaxis.options)));"number"===
typeof e&&(b=this.adjustValPrecision(h,b,e));"number"===typeof n&&(b=this.adjustValPrecision(g,b,n));"undefined"!==typeof a.series.xaxis.ticks&&(d=this.hasRotatedXAxisTicks(a)?"rotatedTicks":"ticks",c=a.dataIndex+a.seriesIndex,a.series.xaxis[d].length>c&&!this.isTimeMode("xaxis",a)&&(this.isCategoriesMode("xaxis",a)?a.series.xaxis[d][c].label:a.series.xaxis[d][c].v)===e&&(b=b.replace(h,a.series.xaxis[d][c].label)));if("undefined"!==typeof a.series.yaxis.ticks)for(var u in a.series.yaxis.ticks)a.series.yaxis.ticks.hasOwnProperty(u)&&
(this.isCategoriesMode("yaxis",a)?a.series.yaxis.ticks[u].label:a.series.yaxis.ticks[u].v)===n&&(b=b.replace(g,a.series.yaxis.ticks[u].label));"undefined"!==typeof a.series.xaxis.tickFormatter&&(b=b.replace("%x",a.series.xaxis.tickFormatter(e,a.series.xaxis).replace(/\$/g,"$$")));"undefined"!==typeof a.series.yaxis.tickFormatter&&(b=b.replace("%y",a.series.yaxis.tickFormatter(n,a.series.yaxis).replace(/\$/g,"$$")));r&&(b=b.replace("%ct",r));return b};f.prototype.isTimeMode=function(b,a){return"undefined"!==
typeof a.series[b].options.mode&&"time"===a.series[b].options.mode};f.prototype.isXDateFormat=function(b){return"undefined"!==typeof this.tooltipOptions.xDateFormat&&null!==this.tooltipOptions.xDateFormat};f.prototype.isYDateFormat=function(b){return"undefined"!==typeof this.tooltipOptions.yDateFormat&&null!==this.tooltipOptions.yDateFormat};f.prototype.isCategoriesMode=function(b,a){return"undefined"!==typeof a.series[b].options.mode&&"categories"===a.series[b].options.mode};f.prototype.timestampToDate=
function(b,a,f){b=d.plot.dateGenerator(b,f);return d.plot.formatDate(b,a,this.tooltipOptions.monthNames,this.tooltipOptions.dayNames)};f.prototype.adjustValPrecision=function(b,a,d){var c;null!==a.match(b)&&""!==RegExp.$1&&(c=RegExp.$1,d=d.toFixed(c),a=a.replace(b,d));return a};f.prototype.hasAxisLabel=function(b,a){return-1!==d.inArray(this.plotPlugins,"axisLabels")&&"undefined"!==typeof a.series[b].options.axisLabel&&0<a.series[b].options.axisLabel.length};f.prototype.hasRotatedXAxisTicks=function(b){return-1!==
d.inArray(this.plotPlugins,"tickRotor")&&"undefined"!==typeof b.series.xaxis.rotatedTicks};d.plot.plugins.push({init:function(b){new f(b)},options:{tooltip:!1,tooltipOpts:{id:"flotTip",content:"%s | X: %x | Y: %y",xDateFormat:null,yDateFormat:null,monthNames:null,dayNames:null,shifts:{x:10,y:20},defaultTheme:!0,lines:{track:!1,threshold:.05},onHover:function(b,a){},$compat:!1}},name:"tooltip",version:"0.8.4"})})(jQuery);;
(function(l){function n(b,a,e,f){b="categories"==a.xaxis.options.mode;e="categories"==a.yaxis.options.mode;if(b||e){var c=f.format;if(!c){c=[];c.push({x:!0,number:!0,required:!0});c.push({y:!0,number:!0,required:!0});if(a.bars.show||a.lines.show&&a.lines.fill)c.push({y:!0,number:!0,required:!1,defaultValue:0,autoscale:!!(a.bars.show&&a.bars.zero||a.lines.show&&a.lines.zero)}),a.bars.horizontal&&(delete c[c.length-1].y,c[c.length-1].x=!0);f.format=c}for(a=0;a<c.length;++a)c[a].x&&b&&(c[a].number=!1),
c[a].y&&e&&(c[a].number=!1)}}function p(b){var a=[],e;for(e in b.categories){var f=b.categories[e];f>=b.min&&f<=b.max&&a.push([f,e])}a.sort(function(a,b){return a[0]-b[0]});return a}function m(b,a,e){if("categories"==b[a].options.mode){if(!b[a].categories){var f={},c=b[a].options.categories||{};if(l.isArray(c))for(var d=0;d<c.length;++d)f[c[d]]=d;else for(d in c)f[d]=c[d];b[a].categories=f}b[a].options.ticks||(b[a].options.ticks=p);b=b[a].categories;f=e.points;c=e.pointsize;e=e.format;a=a.charAt(0);
var g,d=-1;for(g in b)b[g]>d&&(d=b[g]);g=d+1;for(d=0;d<f.length;d+=c)if(null!=f[d])for(var h=0;h<c;++h){var k=f[d+h];null!=k&&e[h][a]&&(k in b||(b[k]=g,++g),f[d+h]=b[k])}}}function q(b,a,e){m(a,"xaxis",e);m(a,"yaxis",e)}l.plot.plugins.push({init:function(b){b.hooks.processRawData.push(n);b.hooks.processDatapoints.push(q)},options:{xaxis:{categories:null},yaxis:{categories:null}},name:"categories",version:"1.0"})})(jQuery);;
(function(r){r.plot.plugins.push({init:function(v){var b=[],p,t=!1,h,n,f;v.hooks.draw.push(function(c,k){var e;if(!t){var g=c.getAxes().xaxis.options;if(void 0!==g.rotateTicks&&(h=parseInt(g.rotateTicks,10),!(h.toString()!=g.rotateTicks||0==h||180<=h))){n=h*Math.PI/180;f=90<h?Math.PI-n:Math.PI/2-n;(p=g.rotateTicksFont)||(p=r(".tickLabel").css("font"));p||(p="smaller sans-serif");var a,l=0,m=0,q=0,u=0;e=c.getAxes().xaxis;b=c.getAxes().xaxis.ticks;e.rotatedTicks=b;g.ticks=[];for(var d=0;d<b.length;d++)a=
r('<span style="font:'+p+'">'+b[d].label+"</span>"),c.getPlaceholder().append(a),b[d].height=a.outerHeight(!0),b[d].width=a.outerWidth(!0),a.remove(),b[d].height>m&&(m=b[d].height),b[d].width>l&&(l=b[d].width),a=b[d],90<h?(a=Math.round(c.getPlotOffset().left+e.p2c(a.v))-Math.ceil(Math.cos(f)*a.height)-Math.ceil(Math.cos(f)*a.width),a<q&&(q=a)):(a=Math.round(c.getPlotOffset().left+e.p2c(a.v))+Math.ceil(Math.cos(f)*a.height)+Math.ceil(Math.cos(f)*a.width),a>u&&(u=a));90<h?(e=n-Math.PI/2,g.labelHeight=
Math.ceil(Math.sin(e)*l)+Math.ceil(Math.sin(e)*m)):(e=Math.PI/2-n,g.labelHeight=Math.ceil(Math.sin(n)*l)+Math.ceil(Math.sin(e)*m));0>q&&(c.getAxes().yaxis.options.labelWidth=-1*q);t=!0;c.setupGrid();c.draw()}}else if(0!=b.length)for(e=c.getAxes().xaxis,g=e.box,d=0;d<b.length;d++)a=b[d],a.label&&(k.save(),k.font=p,90>=h?(l=-Math.ceil(Math.cos(f)*a.height),m=Math.ceil(Math.sin(f)*a.height),k.translate(Math.round(c.getPlotOffset().left+e.p2c(a.v))+l,g.top+g.padding+c.getOptions().grid.labelMargin+m),
k.rotate(n)):(l=Math.ceil(Math.cos(f)*a.height)-Math.ceil(Math.cos(f)*a.width),m=Math.ceil(Math.sin(f)*a.width)+Math.ceil(Math.sin(f)*a.height),k.translate(Math.round(c.getPlotOffset().left+e.p2c(a.v)+l),g.top+g.padding+c.getOptions().grid.labelMargin+m),k.rotate(-f)),k.fillText(a.label,0,0),k.restore())})},options:{},name:"tickRotor",version:"1.0"})})(jQuery);;
(function(m){m.plot.plugins.push({init:function(m){function p(a,c){for(var d=[],b=0;b<a.length;b++)d[0]=a[b].data[0][c],d[1]=a[b].data[a[b].data.length-1][c];return d}function u(a,c){var d=a.bars.order,b=c.bars.order;return d<b?-1:d>b?1:0}function q(a,c,d){for(var b=0;c<=d;c++)b+=a[c].bars.barWidth+2*n;return b}var g,h,r,n,t=1,l=!1;m.hooks.processDatapoints.push(function(a,c,d){var b=null;if(null!=c.bars&&c.bars.show&&null!=c.bars.order){c.bars.horizontal&&(l=!0);var f=l?a.getPlaceholder().innerHeight():
a.getPlaceholder().innerWidth(),e=l?p(a.getData(),1):p(a.getData(),0);t=(e[1]-e[0])/f;a=a.getData();f=[];for(e=0;e<a.length;e++)null!=a[e].bars.order&&a[e].bars.show&&f.push(a[e]);g=f.sort(u);h=g.length;r=c.bars.lineWidth?c.bars.lineWidth:2;n=r*t;if(2<=h){for(a=b=0;a<g.length;++a)if(c==g[a]){b=a;break}b+=1;a=a=0;0!=h%2&&(a=g[Math.ceil(h/2)].bars.barWidth/2);b=a=b<=Math.ceil(h/2)?-1*q(g,b-1,Math.floor(h/2)-1)-a:q(g,Math.ceil(h/2),b-2)+a+2*n;a=d.pointsize;for(var f=d.points,e=0,k=l?1:0;k<f.length;k+=
a)f[k]+=b,c.data[e][3]=f[k],e++;b=f;d.points=b}}return b})},options:{series:{bars:{order:null}}},name:"orderBars",version:"0.2"})})(jQuery);;
(function(t){t.plot.plugins.push({init:function(n){function E(a){for(var b=0,c=0,h=0,e=d.series.pie.combine.color,k=[],l=0;l<a.length;++l){var f=a[l].data;t.isArray(f)&&1==f.length&&(f=f[0]);t.isArray(f)?!isNaN(parseFloat(f[1]))&&isFinite(f[1])?f[1]=+f[1]:f[1]=0:f=!isNaN(parseFloat(f))&&isFinite(f)?[1,+f]:[1,0];a[l].data=[f]}for(l=0;l<a.length;++l)b+=a[l].data[0][1];for(l=0;l<a.length;++l)f=a[l].data[0][1],f/b<=d.series.pie.combine.threshold&&(c+=f,h++,e||(e=a[l].color));for(l=0;l<a.length;++l)f=
a[l].data[0][1],(2>h||f/b>d.series.pie.combine.threshold)&&k.push(t.extend(a[l],{data:[[1,f]],color:a[l].color,label:a[l].label,angle:f*Math.PI*2/b,percent:f/(b/100)}));1<h&&k.push({data:[[1,c]],color:e,label:d.series.pie.combine.label,angle:c*Math.PI*2/b,percent:c/(b/100)});return k}function F(a,b){function m(){c.clearRect(0,0,k,l);x.children().filter(".pieLabel, .pieLabelBackground").remove()}function h(){var a=d.series.pie.shadow.left,b=d.series.pie.shadow.top,f=d.series.pie.shadow.alpha,m=1<d.series.pie.radius?
d.series.pie.radius:u*d.series.pie.radius;if(!(m>=k/2-a||m*d.series.pie.tilt>=l/2-b||10>=m)){c.save();c.translate(a,b);c.globalAlpha=f;c.fillStyle="#000";c.translate(r,y);c.scale(1,d.series.pie.tilt);for(a=1;10>=a;a++)c.beginPath(),c.arc(0,0,m,0,2*Math.PI,!1),c.fill(),m-=a;c.restore()}}function e(){function a(b,d,f){0>=b||isNaN(b)||(f?c.fillStyle=d:(c.strokeStyle=d,c.lineJoin="round"),c.beginPath(),1E-9<Math.abs(b-2*Math.PI)&&c.moveTo(0,0),c.arc(0,0,m,e,e+b/2,!1),c.arc(0,0,m,e+b/2,e+b,!1),c.closePath(),
e+=b,f?c.fill():c.stroke())}function b(){for(var a=f,c=1<d.series.pie.label.radius?d.series.pie.label.radius:u*d.series.pie.label.radius,m=0;m<q.length;++m){if(q[m].percent>=100*d.series.pie.label.threshold){var e;e=q[m];var g=a,h=m;if(0==e.data[0][1])e=!0;else{var n=d.legend.labelFormatter,p=void 0,v=d.series.pie.label.formatter,p=n?n(e.label,e):e.label;v&&(p=v(p,e));n=(g+e.angle+g)/2;g=r+Math.round(Math.cos(n)*c);n=y+Math.round(Math.sin(n)*c)*d.series.pie.tilt;x.append("<span class='pieLabel' id='pieLabel"+
h+"' style='position:absolute;top:"+n+"px;left:"+g+"px;'>"+p+"</span>");h=x.children("#pieLabel"+h);p=n-h.height()/2;n=g-h.width()/2;h.css("top",p);h.css("left",n);0<0-p||0<0-n||0>l-(p+h.height())||0>k-(n+h.width())?e=!1:(0!=d.series.pie.label.background.opacity&&(g=d.series.pie.label.background.color,null==g&&(g=e.color),e="top:"+p+"px;left:"+n+"px;",t("<div class='pieLabelBackground' style='position:absolute;width:"+h.width()+"px;height:"+h.height()+"px;"+e+"background-color:"+g+";'></div>").css("opacity",
d.series.pie.label.background.opacity).insertBefore(h)),e=!0)}if(!e)return!1}a+=q[m].angle}return!0}var f=Math.PI*d.series.pie.startAngle,m=1<d.series.pie.radius?d.series.pie.radius:u*d.series.pie.radius;c.save();c.translate(r,y);c.scale(1,d.series.pie.tilt);c.save();for(var e=f,h=0;h<q.length;++h)q[h].startAngle=e,a(q[h].angle,q[h].color,!0);c.restore();if(0<d.series.pie.stroke.width){c.save();c.lineWidth=d.series.pie.stroke.width;e=f;for(h=0;h<q.length;++h)a(q[h].angle,d.series.pie.stroke.color,
!1);c.restore()}B(c);c.restore();return d.series.pie.label.show?b():!0}if(x){var k=a.getPlaceholder().width(),l=a.getPlaceholder().height(),f=x.children().filter(".legend").children().width()||0;c=b;A=!1;u=Math.min(k,l/d.series.pie.tilt)/2;y=l/2+d.series.pie.offset.top;r=k/2;"auto"==d.series.pie.offset.left?(r=d.legend.position.match("w")?r+f/2:r-f/2,r<u?r=u:r>k-u&&(r=k-u)):r+=d.series.pie.offset.left;var q=a.getData(),f=0;do 0<f&&(u*=.95),f+=1,m(),.8>=d.series.pie.tilt&&h();while(!e()&&10>f);10<=
f&&(m(),x.prepend("<div class='error'>Could not draw pie with labels contained inside canvas</div>"));a.setSeries&&a.insertLegend&&(a.setSeries(q),a.insertLegend())}}function B(a){if(0<d.series.pie.innerRadius){a.save();var b=1<d.series.pie.innerRadius?d.series.pie.innerRadius:u*d.series.pie.innerRadius;a.globalCompositeOperation="destination-out";a.beginPath();a.fillStyle=d.series.pie.stroke.color;a.arc(0,0,b,0,2*Math.PI,!1);a.fill();a.closePath();a.restore();a.save();a.beginPath();a.strokeStyle=
d.series.pie.stroke.color;a.arc(0,0,b,0,2*Math.PI,!1);a.stroke();a.closePath();a.restore()}}function H(a){C("plothover",a)}function I(a){C("plotclick",a)}function C(a,b){var m=n.offset(),h=parseInt(b.pageX-m.left);a:{for(var m=parseInt(b.pageY-m.top),e=n.getData(),k=n.getOptions(),k=1<k.series.pie.radius?k.series.pie.radius:u*k.series.pie.radius,l,f,q=0;q<e.length;++q){var g=e[q];if(g.pie.show){c.save();c.beginPath();c.moveTo(0,0);c.arc(0,0,k,g.startAngle,g.startAngle+g.angle/2,!1);c.arc(0,0,k,g.startAngle+
g.angle/2,g.startAngle+g.angle,!1);c.closePath();l=h-r;f=m-y;if(c.isPointInPath){if(c.isPointInPath(h-r,m-y)){c.restore();h={datapoint:[g.percent,g.data],dataIndex:0,series:g,seriesIndex:q};break a}}else{var p=k*Math.cos(g.startAngle),w=k*Math.sin(g.startAngle),t=k*Math.cos(g.startAngle+g.angle/4),z=k*Math.sin(g.startAngle+g.angle/4),E=k*Math.cos(g.startAngle+g.angle/2),A=k*Math.sin(g.startAngle+g.angle/2),B=k*Math.cos(g.startAngle+g.angle/1.5),C=k*Math.sin(g.startAngle+g.angle/1.5),D=k*Math.cos(g.startAngle+
g.angle),F=k*Math.sin(g.startAngle+g.angle),p=[[0,0],[p,w],[t,z],[E,A],[B,C],[D,F]];l=[l,f];f=!1;w=-1;t=p.length;for(z=t-1;++w<t;z=w)(p[w][1]<=l[1]&&l[1]<p[z][1]||p[z][1]<=l[1]&&l[1]<p[w][1])&&l[0]<(p[z][0]-p[w][0])*(l[1]-p[w][1])/(p[z][1]-p[w][1])+p[w][0]&&(f=!f);if(f){c.restore();h={datapoint:[g.percent,g.data],dataIndex:0,series:g,seriesIndex:q};break a}}c.restore()}}h=null}if(d.grid.autoHighlight)for(m=0;m<v.length;++m)e=v[m],e.auto!=a||h&&e.series==h.series||(e=e.series,null==e&&(v=[],n.triggerRedrawOverlay()),
e=G(e),-1!=e&&(v.splice(e,1),n.triggerRedrawOverlay()));h&&(m=h.series,e=G(m),-1==e?(v.push({series:m,auto:a}),n.triggerRedrawOverlay()):a||(v[e].auto=!1));x.trigger(a,[{pageX:b.pageX,pageY:b.pageY},h])}function G(a){for(var b=0;b<v.length;++b)if(v[b].series==a)return b;return-1}var D=null,x=null,d=null,u=null,r=null,y=null,A=!1,c=null,v=[];n.hooks.processOptions.push(function(a,b){b.series.pie.show&&(b.grid.show=!1,"auto"==b.series.pie.label.show&&(b.series.pie.label.show=b.legend.show?!1:!0),"auto"==
b.series.pie.radius&&(b.series.pie.radius=b.series.pie.label.show?.75:1),1<b.series.pie.tilt?b.series.pie.tilt=1:0>b.series.pie.tilt&&(b.series.pie.tilt=0))});n.hooks.bindEvents.push(function(a,b){var c=a.getOptions();c.series.pie.show&&(c.grid.hoverable&&b.unbind("mousemove").mousemove(H),c.grid.clickable&&b.unbind("click").click(I))});n.hooks.processDatapoints.push(function(a,b,c,h){a.getOptions().series.pie.show&&!A&&(A=!0,D=a.getCanvas(),x=t(D).parent(),d=a.getOptions(),a.setData(E(a.getData())))});
n.hooks.drawOverlay.push(function(a,b){if(a.getOptions().series.pie.show){var c=a.getOptions(),d=1<c.series.pie.radius?c.series.pie.radius:u*c.series.pie.radius;b.save();b.translate(r,y);b.scale(1,c.series.pie.tilt);for(var e=0;e<v.length;++e){var k=v[e].series;0>=k.angle||isNaN(k.angle)||(b.fillStyle="rgba(255, 255, 255, "+c.series.pie.highlight.opacity+")",b.beginPath(),1E-9<Math.abs(k.angle-2*Math.PI)&&b.moveTo(0,0),b.arc(0,0,d,k.startAngle,k.startAngle+k.angle/2,!1),b.arc(0,0,d,k.startAngle+k.angle/
2,k.startAngle+k.angle,!1),b.closePath(),b.fill())}B(b);b.restore()}});n.hooks.draw.push(function(a,b){a.getOptions().series.pie.show&&F(a,b)})},options:{series:{pie:{show:!1,radius:"auto",innerRadius:0,startAngle:1.5,tilt:1,shadow:{left:5,top:15,alpha:.02},offset:{top:0,left:"auto"},stroke:{color:"#fff",width:1},label:{show:"auto",formatter:function(n,t){return"<div style='font-size:x-small;text-align:center;padding:2px;color:"+t.color+";'>"+n+"<br/>"+Math.round(t.percent)+"%</div>"},radius:1,background:{color:null,
opacity:0},threshold:0},combine:{threshold:-1,color:null,label:"Other"},highlight:{opacity:.5}}}},name:"pie",version:"1.1"})})(jQuery);;
(function(u){u.plot.plugins.push({init:function(u){u.hooks.processDatapoints.push(function(b,m,v){if(null!=m.stack&&!1!==m.stack){var k;b=b.getData();for(var f=null,h=0;h<b.length&&m!=b[h];++h)b[h].stack==m.stack&&(f=b[h]);if(k=f){b=v.pointsize;f=v.points;h=k.datapoints.pointsize;k=k.datapoints.points;var c=[],q,a,r,l,p,t,w=m.lines.show;l=m.bars.horizontal;var u=2<b&&(l?v.format[2].x:v.format[2].y);m=w&&m.lines.steps;r=!0;for(var x=l?1:0,n=l?0:1,d=0,g=0,e;!(d>=f.length);){e=c.length;if(null==f[d]){for(a=
0;a<b;++a)c.push(f[d+a]);d+=b}else if(g>=k.length){if(!w)for(a=0;a<b;++a)c.push(f[d+a]);d+=b}else if(null==k[g]){for(a=0;a<b;++a)c.push(null);r=!0;g+=h}else{q=f[d+x];a=f[d+n];l=k[g+x];p=k[g+n];t=0;if(q==l){for(a=0;a<b;++a)c.push(f[d+a]);c[e+n]+=p;t=p;d+=b;g+=h}else if(q>l){if(w&&0<d&&null!=f[d-b]){r=a+(f[d-b+n]-a)*(l-q)/(f[d-b+x]-q);c.push(l);c.push(r+p);for(a=2;a<b;++a)c.push(f[d+a]);t=p}g+=h}else{if(r&&w){d+=b;continue}for(a=0;a<b;++a)c.push(f[d+a]);w&&0<g&&null!=k[g-h]&&(t=p+(k[g-h+n]-p)*(q-l)/
(k[g-h+x]-l));c[e+n]+=t;d+=b}r=!1;e!=c.length&&u&&(c[e+2]+=t)}if(m&&e!=c.length&&0<e&&null!=c[e]&&c[e]!=c[e-b]&&c[e+1]!=c[e-b+1]){for(a=0;a<b;++a)c[e+b+a]=c[e+a];c[e+1]=c[e-b+1]}}v.points=c}}})},options:{series:{stack:null}},name:"stack",version:"1.2"})})(jQuery);;
(function(n){function q(){var a=document.createElement("div");return"undefined"!=typeof a.style.MozTransition||"undefined"!=typeof a.style.OTransition||"undefined"!=typeof a.style.webkitTransition||"undefined"!=typeof a.style.transition}function p(a,b,e,c,d){this.axisName=a;this.position=b;this.padding=e;this.plot=c;this.opts=d;this.height=this.width=0}function l(a,b,e,c,d){p.prototype.constructor.call(this,a,b,e,c,d)}function h(a,b,e,c,d){p.prototype.constructor.call(this,a,b,e,c,d);this.elem=null}
function f(a,b,e,c,d){h.prototype.constructor.call(this,a,b,e,c,d)}function m(a,b,e,c,d){f.prototype.constructor.call(this,a,b,e,c,d);this.requiresResize=!1}p.prototype.cleanup=function(){};l.prototype=new p;l.prototype.constructor=l;l.prototype.calculateSize=function(){this.opts.axisLabelFontSizePixels||(this.opts.axisLabelFontSizePixels=14);this.opts.axisLabelFontFamily||(this.opts.axisLabelFontFamily="sans-serif");"left"==this.position||"right"==this.position?(this.width=this.opts.axisLabelFontSizePixels+
this.padding,this.height=0):(this.width=0,this.height=this.opts.axisLabelFontSizePixels+this.padding)};l.prototype.draw=function(a){this.opts.axisLabelColour||(this.opts.axisLabelColour="black");var b=this.plot.getCanvas().getContext("2d");b.save();b.font=this.opts.axisLabelFontSizePixels+"px "+this.opts.axisLabelFontFamily;b.fillStyle=this.opts.axisLabelColour;var e=b.measureText(this.opts.axisLabel).width,c=this.opts.axisLabelFontSizePixels,d,f,h=0;"top"==this.position?(d=a.left+a.width/2-e/2,f=
a.top+.72*c):"bottom"==this.position?(d=a.left+a.width/2-e/2,f=a.top+a.height-.72*c):"left"==this.position?(d=a.left+.72*c,f=a.height/2+a.top+e/2,h=-Math.PI/2):"right"==this.position&&(d=a.left+a.width-.72*c,f=a.height/2+a.top-e/2,h=Math.PI/2);b.translate(d,f);b.rotate(h);b.fillText(this.opts.axisLabel,0,0);b.restore()};h.prototype=new p;h.prototype.constructor=h;h.prototype.calculateSize=function(){var a=n('<div class="axisLabels" style="position:absolute;">'+this.opts.axisLabel+"</div>");this.plot.getPlaceholder().append(a);
this.labelWidth=a.outerWidth(!0);this.labelHeight=a.outerHeight(!0);a.remove();this.width=this.height=0;"left"==this.position||"right"==this.position?this.width=this.labelWidth+this.padding:this.height=this.labelHeight+this.padding};h.prototype.cleanup=function(){this.elem&&this.elem.remove()};h.prototype.draw=function(a){this.plot.getPlaceholder().find("#"+this.axisName+"Label").remove();this.elem=n('<div id="'+this.axisName+'Label" " class="axisLabels" style="position:absolute;">'+this.opts.axisLabel+
"</div>");this.plot.getPlaceholder().append(this.elem);"top"==this.position?(this.elem.css("left",a.left+a.width/2-this.labelWidth/2+"px"),this.elem.css("top",a.top+"px")):"bottom"==this.position?(this.elem.css("left",a.left+a.width/2-this.labelWidth/2+"px"),this.elem.css("top",a.top+a.height-this.labelHeight+"px")):"left"==this.position?(this.elem.css("top",a.top+a.height/2-this.labelHeight/2+"px"),this.elem.css("left",a.left+"px")):"right"==this.position&&(this.elem.css("top",a.top+a.height/2-this.labelHeight/
2+"px"),this.elem.css("left",a.left+a.width-this.labelWidth+"px"))};f.prototype=new h;f.prototype.constructor=f;f.prototype.calculateSize=function(){h.prototype.calculateSize.call(this);this.width=this.height=0;"left"==this.position||"right"==this.position?this.width=this.labelHeight+this.padding:this.height=this.labelHeight+this.padding};f.prototype.transforms=function(a,b,e){var c={"-moz-transform":"","-webkit-transform":"","-o-transform":"","-ms-transform":""};if(0!=b||0!=e)b=" translate("+b+"px, "+
e+"px)",c["-moz-transform"]+=b,c["-webkit-transform"]+=b,c["-o-transform"]+=b,c["-ms-transform"]+=b;0!=a&&(a=" rotate("+a+"deg)",c["-moz-transform"]+=a,c["-webkit-transform"]+=a,c["-o-transform"]+=a,c["-ms-transform"]+=a);a="top: 0; left: 0; ";for(var d in c)c[d]&&(a+=d+":"+c[d]+";");return a+";"};f.prototype.calculateOffsets=function(a){var b={x:0,y:0,degrees:0};"bottom"==this.position?(b.x=a.left+a.width/2-this.labelWidth/2,b.y=a.top+a.height-this.labelHeight):"top"==this.position?(b.x=a.left+a.width/
2-this.labelWidth/2,b.y=a.top):"left"==this.position?(b.degrees=-90,b.x=a.left-this.labelWidth/2+this.labelHeight/2,b.y=a.height/2+a.top):"right"==this.position&&(b.degrees=90,b.x=a.left+a.width-this.labelWidth/2-this.labelHeight/2,b.y=a.height/2+a.top);return b};f.prototype.draw=function(a){this.plot.getPlaceholder().find("."+this.axisName+"Label").remove();a=this.calculateOffsets(a);this.elem=n('<div class="axisLabels '+this.axisName+'Label" style="position:absolute; '+this.transforms(a.degrees,
a.x,a.y)+'">'+this.opts.axisLabel+"</div>");this.plot.getPlaceholder().append(this.elem)};m.prototype=new f;m.prototype.constructor=m;m.prototype.transforms=function(a,b,e){var c="";if(0!=a){for(a/=90;0>a;)a+=4;c+=" filter: progid:DXImageTransform.Microsoft.BasicImage(rotation="+a+"); ";this.requiresResize="right"==this.position}0!=b&&(c+="left: "+b+"px; ");0!=e&&(c+="top: "+e+"px; ");return c};m.prototype.calculateOffsets=function(a){var b=f.prototype.calculateOffsets.call(this,a);"top"==this.position?
b.y=a.top+1:"left"==this.position?(b.x=a.left,b.y=a.height/2+a.top-this.labelWidth/2):"right"==this.position&&(b.x=a.left+a.width-this.labelHeight,b.y=a.height/2+a.top-this.labelWidth/2);return b};m.prototype.draw=function(a){f.prototype.draw.call(this,a);this.requiresResize&&(this.elem=this.plot.getPlaceholder().find("."+this.axisName+"Label"),this.elem.css("width",this.labelWidth),this.elem.css("height",this.labelHeight))};n.plot.plugins.push({init:function(a){a.hooks.processOptions.push(function(a,
e){if(e.axisLabels.show){var c=!1,d={};a.hooks.draw.push(function(a,b){var e=!1;c?(c=!1,n.each(a.getAxes(),function(b,c){var e=c.options||a.getOptions()[b];e&&e.axisLabel&&c.show&&d[b].draw(c.box)})):(n.each(a.getAxes(),function(b,c){var g=c.options||a.getOptions()[b];b in d&&(c.labelHeight-=d[b].height,c.labelWidth-=d[b].width,g.labelHeight=c.labelHeight,g.labelWidth=c.labelWidth,d[b].cleanup(),delete d[b]);if(g&&g.axisLabel&&c.show){e=!0;var k=null;if(g.axisLabelUseHtml||"Microsoft Internet Explorer"!=
navigator.appName){if(!(k=g.axisLabelUseHtml)){if(k=!q())k=document.createElement("canvas").getContext?"function"==typeof document.createElement("canvas").getContext("2d").fillText:!1,k=!k;k=k&&!g.axisLabelUseCanvas}k=k?h:g.axisLabelUseCanvas||!q()?l:f}else null!=/MSIE ([0-9]{1,}[.0-9]{0,})/.exec(navigator.userAgent)&&(rv=parseFloat(RegExp.$1)),k=9<=rv&&!g.axisLabelUseCanvas&&!g.axisLabelUseHtml?f:g.axisLabelUseCanvas||g.axisLabelUseHtml?g.axisLabelUseCanvas?l:h:m;d[b]=new k(b,c.position,void 0===
g.axisLabelPadding?2:g.axisLabelPadding,a,g);d[b].calculateSize();g.labelHeight=c.labelHeight+d[b].height;g.labelWidth=c.labelWidth+d[b].width}}),e&&(c=!0,a.setupGrid(),a.draw()))})}})},options:{axisLabels:{show:!0}},name:"axisLabels",version:"2.0"})})(jQuery);;
(function(f,d){"function"===typeof define&&define.amd?define("gridster-coords",["jquery"],d):f.GridsterCoords=d(f.$||f.jQuery)})(this,function(f){function d(d){d[0]&&f.isPlainObject(d[0])?this.data=d[0]:this.el=d;this.isCoords=!0;this.coords={};this.init();return this}var q=d.prototype;q.init=function(){this.set();this.original_coords=this.get()};q.set=function(f,d){var a=this.el;a&&!f&&(this.data=a.offset(),this.data.width=a.width(),this.data.height=a.height());if(a&&f&&!d){var b=a.offset();this.data.top=
b.top;this.data.left=b.left}b=this.data;"undefined"===typeof b.left&&(b.left=b.x1);"undefined"===typeof b.top&&(b.top=b.y1);this.coords.x1=b.left;this.coords.y1=b.top;this.coords.x2=b.left+b.width;this.coords.y2=b.top+b.height;this.coords.cx=b.left+b.width/2;this.coords.cy=b.top+b.height/2;this.coords.width=b.width;this.coords.height=b.height;this.coords.el=a||!1;return this};q.update=function(d){if(!d&&!this.el)return this;if(d)return this.data=f.extend({},this.data,d),this.set(!0,!0);this.set(!0);
return this};q.get=function(){return this.coords};q.destroy=function(){this.el.removeData("coords");delete this.el};f.fn.coords=function(f){if(this.data("coords"))return this.data("coords");f=new d(this,f);this.data("coords",f);return f};return d});
(function(f,d){"function"===typeof define&&define.amd?define("gridster-collision",["jquery","gridster-coords"],d):f.GridsterCollision=d(f.$||f.jQuery,f.GridsterCoords)})(this,function(f,d){function q(a,b,c){this.options=f.extend(l,c);this.$element=a;this.last_colliders=[];this.last_colliders_coords=[];this.set_colliders(b);this.init()}var l={colliders_context:document.body,overlapping_region:"C"};q.defaults=l;var p=q.prototype;p.init=function(){this.find_collisions()};p.overlaps=function(a,b){var c=
!1,e=!1;if(b.x1>=a.x1&&b.x1<=a.x2||b.x2>=a.x1&&b.x2<=a.x2||a.x1>=b.x1&&a.x2<=b.x2)c=!0;if(b.y1>=a.y1&&b.y1<=a.y2||b.y2>=a.y1&&b.y2<=a.y2||a.y1>=b.y1&&a.y2<=b.y2)e=!0;return c&&e};p.detect_overlapping_region=function(a,b){var c="",e="";a.y1>b.cy&&a.y1<b.y2&&(c="N");a.y2>b.y1&&a.y2<b.cy&&(c="S");a.x1>b.cx&&a.x1<b.x2&&(e="W");a.x2>b.x1&&a.x2<b.cx&&(e="E");return c+e||"C"};p.calculate_overlapped_area_coords=function(a,b){var c=Math.max(a.x1,b.x1),e=Math.max(a.y1,b.y1),r=Math.min(a.x2,b.x2),g=Math.min(a.y2,
b.y2);return f({left:c,top:e,width:r-c,height:g-e}).coords().get()};p.calculate_overlapped_area=function(a){return a.width*a.height};p.manage_colliders_start_stop=function(a,b,c){for(var e=this.last_colliders_coords,r=0,g=e.length;r<g;r++)-1===f.inArray(e[r],a)&&b.call(this,e[r]);b=0;for(r=a.length;b<r;b++)-1===f.inArray(a[b],e)&&c.call(this,a[b])};p.find_collisions=function(a){var b=this.options.overlapping_region,c=[],e=[],r=this.colliders||this.$colliders,g=r.length;for(a=this.$element.coords().update(a||
!1).get();g--;){var d=this.$colliders?f(r[g]):r[g],k=d.isCoords?d:d.coords(),m=k.get();if(this.overlaps(a,m)){var n=this.detect_overlapping_region(a,m);if(n===b||"all"===b){var l=this.calculate_overlapped_area_coords(a,m),d={area:this.calculate_overlapped_area(l),area_coords:l,region:n,coords:m,player_coords:a,el:d};this.options.on_overlap&&this.options.on_overlap.call(this,d);c.push(k);e.push(d)}}}(this.options.on_overlap_stop||this.options.on_overlap_start)&&this.manage_colliders_start_stop(c,this.options.on_overlap_start,
this.options.on_overlap_stop);this.last_colliders_coords=c;return e};p.get_closest_colliders=function(a){a=this.find_collisions(a);a.sort(function(a,c){return"C"===a.region&&"C"===c.region?a.coords.y1<c.coords.y1||a.coords.x1<c.coords.x1?-1:1:1});return a};p.set_colliders=function(a){"string"===typeof a||a instanceof f?this.$colliders=f(a,this.options.colliders_context).not(this.$element):this.colliders=f(a)};f.fn.collision=function(a,b){return new q(this,a,b)};return q});
(function(f,d){f.delay=function(f,d){var p=Array.prototype.slice.call(arguments,2);return setTimeout(function(){return f.apply(null,p)},d)};f.debounce=function(f,d,p){var a;return function(){var b=this,c=arguments;p&&!a&&f.apply(b,c);clearTimeout(a);a=setTimeout(function(){a=null;p||f.apply(b,c)},d)}};f.throttle=function(f,d){var p,a,b,c,e,r,g=debounce(function(){e=c=!1},d);return function(){p=this;a=arguments;b||(b=setTimeout(function(){b=null;e&&f.apply(p,a);g()},d));c?e=!0:r=f.apply(p,a);g();c=
!0;return r}}})(window);
(function(f,d){"function"===typeof define&&define.amd?define("gridster-draggable",["jquery"],d):f.GridsterDraggable=d(f.$||f.jQuery)})(this,function(f){function d(a,b){this.options=f.extend({},q,b);this.$document=f(document);this.$container=f(a);this.$dragitems=f(this.options.items,this.$container);this.is_dragging=!1;this.player_min_left=0+this.options.offset_left;this.id=++c+"";this.ns=".gridster-draggable-"+this.id;this.init()}var q={items:"li",distance:1,limit:!0,offset_left:0,autoscroll:!0,ignore_dragging:["INPUT",
"TEXTAREA","SELECT","BUTTON"],handle:null,container_width:0,move_element:!0,helper:!1,remove_helper:!0},l=f(window),p={x:"left",y:"top"},a=!!("ontouchstart"in window),b=function(a){return a.charAt(0).toUpperCase()+a.slice(1)},c=0;d.defaults=q;var e=d.prototype;e.init=function(){var a=this.$container.css("position");this.calculate_dimensions();this.$container.css("position","static"===a?"relative":a);this.disabled=!1;this.events();f(window).bind(this.nsEvent("resize"),throttle(f.proxy(this.calculate_dimensions,
this),200))};e.nsEvent=function(a){return(a||"")+this.ns};e.events=function(){this.pointer_events={start:this.nsEvent("touchstart")+" "+this.nsEvent("mousedown"),move:this.nsEvent("touchmove")+" "+this.nsEvent("mousemove"),end:this.nsEvent("touchend")+" "+this.nsEvent("mouseup")};this.$container.on(this.nsEvent("selectstart"),f.proxy(this.on_select_start,this));this.$container.on(this.pointer_events.start,this.options.items,f.proxy(this.drag_handler,this));this.$document.on(this.pointer_events.end,
f.proxy(function(a){this.is_dragging=!1;if(!this.disabled&&(this.$document.off(this.pointer_events.move),this.drag_start))this.on_dragstop(a)},this))};e.get_actual_pos=function(a){return a.position()};e.get_mouse_pos=function(a){a.originalEvent&&a.originalEvent.touches&&(a=a.originalEvent,a=a.touches.length?a.touches[0]:a.changedTouches[0]);return{left:a.clientX,top:a.clientY}};e.get_offset=function(a){a.preventDefault();a=this.get_mouse_pos(a);var b=Math.round(a.left-this.mouse_init_pos.left),c=
Math.round(a.top-this.mouse_init_pos.top),e=Math.round(this.el_init_offset.left+b-this.baseX+f(window).scrollLeft()-this.win_offset_x),d=Math.round(this.el_init_offset.top+c-this.baseY+f(window).scrollTop()-this.win_offset_y);this.options.limit&&(e>this.player_max_left?e=this.player_max_left:e<this.player_min_left&&(e=this.player_min_left));return{position:{left:e,top:d},pointer:{left:a.left,top:a.top,diff_left:b+(f(window).scrollLeft()-this.win_offset_x),diff_top:c+(f(window).scrollTop()-this.win_offset_y)}}};
e.get_drag_data=function(a){a=this.get_offset(a);a.$player=this.$player;a.$helper=this.helper?this.$helper:this.$player;return a};e.set_limits=function(a){a||(a=this.$container.width());this.player_max_left=a-this.player_width+-this.options.offset_left;this.options.container_width=a;return this};e.scroll_in=function(a,c){var e=p[a],d="x"===a,m=d?this.window_width:this.window_height,n=d?f(document).width():f(document).height(),q=d?this.$player.width():this.$player.height(),d=l["scroll"+b(e)](),y=d+
50,x=d+c.pointer[e],n=n-m+q;x>=d+m-50&&(m=d+30,m<n&&(l["scroll"+b(e)](m),this["scroll_offset_"+a]+=30));x<=y&&(m=d-30,0<m&&(l["scroll"+b(e)](m),this["scroll_offset_"+a]-=30));return this};e.manage_scroll=function(a){this.scroll_in("x",a);this.scroll_in("y",a)};e.calculate_dimensions=function(a){this.window_height=l.height();this.window_width=l.width()};e.drag_handler=function(b){if(!this.disabled&&(1===b.which||a)&&!this.ignore_drag(b)){var c=this,e=!0;this.$player=f(b.currentTarget);this.el_init_pos=
this.get_actual_pos(this.$player);this.mouse_init_pos=this.get_mouse_pos(b);this.offsetY=this.mouse_init_pos.top-this.el_init_pos.top;this.$document.on(this.pointer_events.move,function(a){var b=c.get_mouse_pos(a),f=Math.abs(b.left-c.mouse_init_pos.left),b=Math.abs(b.top-c.mouse_init_pos.top);if(!(f>c.options.distance||b>c.options.distance))return!1;if(e)return e=!1,c.on_dragstart.call(c,a),!1;!0===c.is_dragging&&c.on_dragmove.call(c,a);return!1});if(!a)return!1}};e.on_dragstart=function(a){a.preventDefault();
if(this.is_dragging)return this;this.drag_start=this.is_dragging=!0;var b=this.$container.offset();this.baseX=Math.round(b.left);this.baseY=Math.round(b.top);this.initial_container_width=this.options.container_width||this.$container.width();"clone"===this.options.helper?(this.$helper=this.$player.clone().appendTo(this.$container).addClass("helper"),this.helper=!0):this.helper=!1;this.win_offset_y=f(window).scrollTop();this.win_offset_x=f(window).scrollLeft();this.scroll_offset_x=this.scroll_offset_y=
0;this.el_init_offset=this.$player.offset();this.player_width=this.$player.width();this.player_height=this.$player.height();this.set_limits(this.options.container_width);this.options.start&&this.options.start.call(this.$player,a,this.get_drag_data(a));return!1};e.on_dragmove=function(a){var b=this.get_drag_data(a);this.options.autoscroll&&this.manage_scroll(b);this.options.move_element&&(this.helper?this.$helper:this.$player).css({position:"absolute",left:b.position.left,top:b.position.top});b.prev_position=
this.last_position||b.position;this.options.drag&&this.options.drag.call(this.$player,a,b);this.last_position=b.position;return!1};e.on_dragstop=function(a){var b=this.get_drag_data(a);this.drag_start=!1;this.options.stop&&this.options.stop.call(this.$player,a,b);this.helper&&this.options.remove_helper&&this.$helper.remove();return!1};e.on_select_start=function(a){if(!this.disabled&&!this.ignore_drag(a))return!1};e.enable=function(){this.disabled=!1};e.disable=function(){this.disabled=!0};e.destroy=
function(){this.disable();this.$container.off(this.ns);this.$document.off(this.ns);f(window).off(this.ns);f.removeData(this.$container,"drag")};e.ignore_drag=function(a){return this.options.handle?!f(a.target).is(this.options.handle):f.isFunction(this.options.ignore_dragging)?this.options.ignore_dragging(a):f(a.target).is(this.options.ignore_dragging.join(", "))};f.fn.drag=function(a){return new d(this,a)};return d});
(function(f,d){"function"===typeof define&&define.amd?define(["jquery","gridster-draggable","gridster-collision"],d):f.Gridster=d(f.$||f.jQuery,f.GridsterDraggable,f.GridsterCollision)})(this,function(f,d,q){function l(a,b){this.options=f.extend(!0,{},p,b);this.$el=f(a);this.$wrapper=this.$el.parent();this.$widgets=this.$el.children(this.options.widget_selector).addClass("gs-w");this.widgets=[];this.$changed=f([]);this.wrapper_width=this.$wrapper.width();this.min_widget_width=2*this.options.widget_margins[0]+
this.options.widget_base_dimensions[0];this.min_widget_height=2*this.options.widget_margins[1]+this.options.widget_base_dimensions[1];this.generated_stylesheets=[];this.$style_tags=f([]);this.options.auto_init&&this.init()}var p={namespace:"",widget_selector:"li",widget_margins:[10,10],widget_base_dimensions:[400,225],extra_rows:0,extra_cols:0,min_cols:1,max_cols:Infinity,min_rows:15,max_size_x:!1,autogrow_cols:!1,autogenerate_stylesheet:!0,avoid_overlapped_widgets:!0,auto_init:!0,serialize_params:function(a,
b){return{col:b.col,row:b.row,size_x:b.size_x,size_y:b.size_y}},collision:{},draggable:{items:".gs-w",distance:4,ignore_dragging:d.defaults.ignore_dragging.slice(0)},resize:{enabled:!1,axes:["both"],handle_append_to:"",handle_class:"gs-resize-handle",max_size:[Infinity,Infinity],min_size:[1,1]}};l.defaults=p;l.generated_stylesheets=[];l.sort_by_row_asc=function(a){return a=a.sort(function(a,c){a.row||(a=f(a).coords().grid,c=f(c).coords().grid);return a.row>c.row?1:-1})};l.sort_by_row_and_col_asc=
function(a){return a=a.sort(function(a,c){return a.row>c.row||a.row===c.row&&a.col>c.col?1:-1})};l.sort_by_col_asc=function(a){return a=a.sort(function(a,c){return a.col>c.col?1:-1})};l.sort_by_row_desc=function(a){return a=a.sort(function(a,c){return a.row+a.size_y<c.row+c.size_y?1:-1})};d=l.prototype;d.init=function(){this.options.resize.enabled&&this.setup_resize();this.generate_grid_and_stylesheet();this.get_widgets_from_DOM();this.set_dom_grid_height();this.set_dom_grid_width();this.$wrapper.addClass("ready");
this.draggable();this.options.resize.enabled&&this.resizable();f(window).bind("resize.gridster",throttle(f.proxy(this.recalculate_faux_grid,this),200))};d.disable=function(){this.$wrapper.find(".player-revert").removeClass("player-revert");this.drag_api.disable();return this};d.enable=function(){this.drag_api.enable();return this};d.disable_resize=function(){this.$el.addClass("gs-resize-disabled");this.resize_api.disable();return this};d.enable_resize=function(){this.$el.removeClass("gs-resize-disabled");
this.resize_api.enable();return this};d.add_widget=function(a,b,c,e,d,g,h){var k;b||(b=1);c||(c=1);!e&!d?k=this.next_position(b,c):(k={col:e,row:d,size_x:b,size_y:c},this.empty_cells(e,d,b,c));a=f(a).attr({"data-col":k.col,"data-row":k.row,"data-sizex":b,"data-sizey":c}).addClass("gs-w").appendTo(this.$el).hide();this.$widgets=this.$widgets.add(a);this.register_widget(a);this.add_faux_rows(k.size_y);g&&this.set_widget_max_size(a,g);h&&this.set_widget_min_size(a,h);this.set_dom_grid_width();this.set_dom_grid_height();
this.drag_api.set_limits(this.cols*this.min_widget_width);return a.fadeIn()};d.set_widget_min_size=function(a,b){a="number"===typeof a?this.$widgets.eq(a):a;if(!a.length)return this;var c=a.data("coords").grid;c.min_size_x=b[0];c.min_size_y=b[1];return this};d.set_widget_max_size=function(a,b){a="number"===typeof a?this.$widgets.eq(a):a;if(!a.length)return this;var c=a.data("coords").grid;c.max_size_x=b[0];c.max_size_y=b[1];return this};d.add_resize_handle=function(a){var b=this.options.resize.handle_append_to;
f(this.resize_handle_tpl).appendTo(b?f(b,a):a);return this};d.resize_widget=function(a,b,c,e){var f=a.coords().grid,d=f.col,h=this.options.max_cols,k=f.size_y,m=f.col;b||(b=f.size_x);c||(c=f.size_y);Infinity!==h&&(b=Math.min(b,h-d+1));c>k&&this.add_faux_rows(Math.max(c-k,0));d=d+b-1;d>this.cols&&this.add_faux_cols(d-this.cols);b={col:m,row:f.row,size_x:b,size_y:c};this.mutate_widget_in_gridmap(a,f,b);this.set_dom_grid_height();this.set_dom_grid_width();e&&e.call(this,b.size_x,b.size_y);return a};
d.mutate_widget_in_gridmap=function(a,b,c){var e=b.size_y,d=this.get_cells_occupied(b),g=this.get_cells_occupied(c),h=[];f.each(d.cols,function(a,b){-1===f.inArray(b,g.cols)&&h.push(b)});var k=[];f.each(g.cols,function(a,b){-1===f.inArray(b,d.cols)&&k.push(b)});var m=[];f.each(d.rows,function(a,b){-1===f.inArray(b,g.rows)&&m.push(b)});var n=[];f.each(g.rows,function(a,b){-1===f.inArray(b,d.rows)&&n.push(b)});this.remove_from_gridmap(b);if(k.length){var l=[c.col,c.row,c.size_x,Math.min(e,c.size_y),
a];this.empty_cells.apply(this,l)}n.length&&this.empty_cells.apply(this,[c.col,c.row,c.size_x,c.size_y,a]);b.col=c.col;b.row=c.row;b.size_x=c.size_x;b.size_y=c.size_y;this.add_to_gridmap(c,a);a.removeClass("player-revert");a.data("coords").update({width:c.size_x*this.options.widget_base_dimensions[0]+(c.size_x-1)*this.options.widget_margins[0]*2,height:c.size_y*this.options.widget_base_dimensions[1]+(c.size_y-1)*this.options.widget_margins[1]*2});a.attr({"data-col":c.col,"data-row":c.row,"data-sizex":c.size_x,
"data-sizey":c.size_y});h.length&&(b=[h[0],c.row,h.length,Math.min(e,c.size_y),a],this.remove_empty_cells.apply(this,b));m.length&&this.remove_empty_cells.apply(this,[c.col,c.row,c.size_x,c.size_y,a]);this.move_widget_up(a);return this};d.empty_cells=function(a,b,c,e,d){this.widgets_below({col:a,row:b-e,size_x:c,size_y:e}).not(d).each(f.proxy(function(a,c){var d=f(c).coords().grid;d.row<=b+e-1&&(d=b+e-d.row,this.move_widget_down(f(c),d))},this));this.set_dom_grid_height();return this};d.remove_empty_cells=
function(a,b,c,e,d){this.widgets_below({col:a,row:b,size_x:c,size_y:e}).not(d).each(f.proxy(function(a,b){this.move_widget_up(f(b),e)},this));this.set_dom_grid_height();return this};d.next_position=function(a,b){a||(a=1);b||(b=1);for(var c=this.gridmap,e=c.length,f=[],d,h=1;h<e;h++){d=c[h].length;for(var k=1;k<=d;k++)this.can_move_to({size_x:a,size_y:b},h,k)&&f.push({col:h,row:k,size_y:b,size_x:a})}return f.length?l.sort_by_row_and_col_asc(f)[0]:!1};d.remove_widget=function(a,b,c){var e=a instanceof
f?a:f(a),d=e.coords().grid;f.isFunction(b)&&(c=b,b=!1);this.cells_occupied_by_placeholder={};this.$widgets=this.$widgets.not(e);var g=this.widgets_below(e);this.remove_from_gridmap(d);e.fadeOut(f.proxy(function(){e.remove();b||g.each(f.proxy(function(a,b){this.move_widget_up(f(b),d.size_y)},this));this.set_dom_grid_height();c&&c.call(this,a)},this));return this};d.remove_all_widgets=function(a){this.$widgets.each(f.proxy(function(b,c){this.remove_widget(c,!0,a)},this));return this};d.serialize=function(a){a||
(a=this.$widgets);return a.map(f.proxy(function(a,c){var e=f(c);return this.options.serialize_params(e,e.coords().grid)},this)).get()};d.serialize_changed=function(){return this.serialize(this.$changed)};d.dom_to_coords=function(a){return{col:parseInt(a.attr("data-col"),10),row:parseInt(a.attr("data-row"),10),size_x:parseInt(a.attr("data-sizex"),10)||1,size_y:parseInt(a.attr("data-sizey"),10)||1,max_size_x:parseInt(a.attr("data-max-sizex"),10)||!1,max_size_y:parseInt(a.attr("data-max-sizey"),10)||
!1,min_size_x:parseInt(a.attr("data-min-sizex"),10)||!1,min_size_y:parseInt(a.attr("data-min-sizey"),10)||!1,el:a}};d.register_widget=function(a){var b=a instanceof jQuery,c=b?this.dom_to_coords(a):a,e=!1;b||(a=c.el);if(b=this.can_go_widget_up(c))c.row=b,a.attr("data-row",b),this.$el.trigger("gridster:positionchanged",[c]),e=!0;this.options.avoid_overlapped_widgets&&!this.can_move_to({size_x:c.size_x,size_y:c.size_y},c.col,c.row)&&(f.extend(c,this.next_position(c.size_x,c.size_y)),a.attr({"data-col":c.col,
"data-row":c.row,"data-sizex":c.size_x,"data-sizey":c.size_y}),e=!0);a.data("coords",a.coords());a.data("coords").grid=c;this.add_to_gridmap(c,a);this.options.resize.enabled&&this.add_resize_handle(a);return e};d.update_widget_position=function(a,b){this.for_each_cell_occupied(a,function(a,e){if(!this.gridmap[a])return this;this.gridmap[a][e]=b});return this};d.remove_from_gridmap=function(a){return this.update_widget_position(a,!1)};d.add_to_gridmap=function(a,b){this.update_widget_position(a,b||
a.el);a.el&&this.widgets_below(a.el).each(f.proxy(function(a,b){this.move_widget_up(f(b))},this))};d.draggable=function(){var a=this,b=f.extend(!0,{},this.options.draggable,{offset_left:this.options.widget_margins[0],offset_top:this.options.widget_margins[1],container_width:this.cols*this.min_widget_width,limit:!0,start:function(b,e){a.$widgets.filter(".player-revert").removeClass("player-revert");a.$player=f(this);a.$helper=f(e.$helper);a.helper=!a.$helper.is(a.$player);a.on_start_drag.call(a,b,
e);a.$el.trigger("gridster:dragstart")},stop:function(b,e){a.on_stop_drag.call(a,b,e);a.$el.trigger("gridster:dragstop")},drag:throttle(function(b,e){a.on_drag.call(a,b,e);a.$el.trigger("gridster:drag")},60)});this.drag_api=this.$el.drag(b);return this};d.resizable=function(){this.resize_api=this.$el.drag({items:"."+this.options.resize.handle_class,offset_left:this.options.widget_margins[0],container_width:this.container_width,move_element:!1,resize:!0,limit:this.options.autogrow_cols?!1:!0,start:f.proxy(this.on_start_resize,
this),stop:f.proxy(function(a,b){delay(f.proxy(function(){this.on_stop_resize(a,b)},this),120)},this),drag:throttle(f.proxy(this.on_resize,this),60)});return this};d.setup_resize=function(){this.resize_handle_class=this.options.resize.handle_class;var a='<span class="'+this.resize_handle_class+" "+this.resize_handle_class+'-{type}" />';this.resize_handle_tpl=f.map(this.options.resize.axes,function(b){return a.replace("{type}",b)}).join("");f.isArray(this.options.draggable.ignore_dragging)&&this.options.draggable.ignore_dragging.push("."+
this.resize_handle_class);return this};d.on_start_drag=function(a,b){this.$helper.add(this.$player).add(this.$wrapper).addClass("dragging");this.highest_col=this.get_highest_occupied_cell().col;this.$player.addClass("player");this.player_grid_data=this.$player.coords().grid;this.placeholder_grid_data=f.extend({},this.player_grid_data);this.set_dom_grid_height(this.$el.height()+this.player_grid_data.size_y*this.min_widget_height);this.set_dom_grid_width(this.cols);var c=this.player_grid_data.size_x,
e=this.cols-this.highest_col;this.options.autogrow_cols&&e<=c&&this.add_faux_cols(Math.min(c-e,1));c=this.faux_grid;e=this.$player.data("coords").coords;this.cells_occupied_by_player=this.get_cells_occupied(this.player_grid_data);this.cells_occupied_by_placeholder=this.get_cells_occupied(this.placeholder_grid_data);this.last_cols=[];this.last_rows=[];this.collision_api=this.$helper.collision(c,this.options.collision);this.$preview_holder=f("<"+this.$player.get(0).tagName+" />",{"class":"preview-holder",
"data-row":this.$player.attr("data-row"),"data-col":this.$player.attr("data-col"),css:{width:e.width,height:e.height}}).appendTo(this.$el);this.options.draggable.start&&this.options.draggable.start.call(this,a,b)};d.on_drag=function(a,b){if(null===this.$player)return!1;var c={left:b.position.left+this.baseX,top:b.position.top+this.baseY};this.options.autogrow_cols&&(this.placeholder_grid_data.col+this.placeholder_grid_data.size_x-1>=this.cols-1&&this.options.max_cols>=this.cols+1&&(this.add_faux_cols(1),
this.set_dom_grid_width(this.cols+1),this.drag_api.set_limits(this.container_width)),this.collision_api.set_colliders(this.faux_grid));this.colliders_data=this.collision_api.get_closest_colliders(c);this.on_overlapped_column_change(this.on_start_overlapping_column,this.on_stop_overlapping_column);this.on_overlapped_row_change(this.on_start_overlapping_row,this.on_stop_overlapping_row);this.helper&&this.$player&&this.$player.css({left:b.position.left,top:b.position.top});this.options.draggable.drag&&
this.options.draggable.drag.call(this,a,b)};d.on_stop_drag=function(a,b){this.$helper.add(this.$player).add(this.$wrapper).removeClass("dragging");b.position.left+=this.baseX;b.position.top+=this.baseY;this.colliders_data=this.collision_api.get_closest_colliders(b.position);this.on_overlapped_column_change(this.on_start_overlapping_column,this.on_stop_overlapping_column);this.on_overlapped_row_change(this.on_start_overlapping_row,this.on_stop_overlapping_row);this.$player.addClass("player-revert").removeClass("player").attr({"data-col":this.placeholder_grid_data.col,
"data-row":this.placeholder_grid_data.row}).css({left:"",top:""});this.$changed=this.$changed.add(this.$player);this.cells_occupied_by_player=this.get_cells_occupied(this.placeholder_grid_data);this.set_cells_player_occupies(this.placeholder_grid_data.col,this.placeholder_grid_data.row);this.$player.coords().grid.row=this.placeholder_grid_data.row;this.$player.coords().grid.col=this.placeholder_grid_data.col;this.options.draggable.stop&&this.options.draggable.stop.call(this,a,b);this.$preview_holder.remove();
this.$helper=this.$player=null;this.placeholder_grid_data={};this.player_grid_data={};this.cells_occupied_by_placeholder={};this.cells_occupied_by_player={};this.set_dom_grid_height();this.set_dom_grid_width();this.options.autogrow_cols&&this.drag_api.set_limits(this.cols*this.min_widget_width)};d.on_start_resize=function(a,b){this.$resized_widget=b.$player.closest(".gs-w");this.resize_coords=this.$resized_widget.coords();this.resize_wgd=this.resize_coords.grid;this.resize_initial_width=this.resize_coords.coords.width;
this.resize_initial_height=this.resize_coords.coords.height;this.resize_initial_sizex=this.resize_coords.grid.size_x;this.resize_initial_sizey=this.resize_coords.grid.size_y;this.resize_initial_col=this.resize_coords.grid.col;this.resize_last_sizex=this.resize_initial_sizex;this.resize_last_sizey=this.resize_initial_sizey;this.resize_max_size_x=Math.min(this.resize_wgd.max_size_x||this.options.resize.max_size[0],this.options.max_cols-this.resize_initial_col+1);this.resize_max_size_y=this.resize_wgd.max_size_y||
this.options.resize.max_size[1];this.resize_min_size_x=this.resize_wgd.min_size_x||this.options.resize.min_size[0]||1;this.resize_min_size_y=this.resize_wgd.min_size_y||this.options.resize.min_size[1]||1;this.resize_initial_last_col=this.get_highest_occupied_cell().col;this.set_dom_grid_width(this.cols);this.resize_dir={right:b.$player.is("."+this.resize_handle_class+"-x"),bottom:b.$player.is("."+this.resize_handle_class+"-y")};this.$resized_widget.css({"min-width":this.options.widget_base_dimensions[0],
"min-height":this.options.widget_base_dimensions[1]});var c=this.$resized_widget.get(0).tagName;this.$resize_preview_holder=f("<"+c+" />",{"class":"preview-holder resize-preview-holder","data-row":this.$resized_widget.attr("data-row"),"data-col":this.$resized_widget.attr("data-col"),css:{width:this.resize_initial_width,height:this.resize_initial_height}}).appendTo(this.$el);this.$resized_widget.addClass("resizing");this.options.resize.start&&this.options.resize.start.call(this,a,b,this.$resized_widget);
this.$el.trigger("gridster:resizestart")};d.on_stop_resize=function(a,b){this.$resized_widget.removeClass("resizing").css({width:"",height:""});delay(f.proxy(function(){this.$resize_preview_holder.remove().css({"min-width":"","min-height":""});this.options.resize.stop&&this.options.resize.stop.call(this,a,b,this.$resized_widget);this.$el.trigger("gridster:resizestop")},this),300);this.set_dom_grid_width();this.options.autogrow_cols&&this.drag_api.set_limits(this.cols*this.min_widget_width)};d.on_resize=
function(a,b){var c=b.pointer.diff_left,e=b.pointer.diff_top,f=this.options.widget_base_dimensions[0],d=this.options.widget_base_dimensions[1],h=this.options.widget_margins[0],k=this.options.widget_margins[1],m=this.resize_max_size_x,n=this.resize_min_size_x,l=this.resize_max_size_y,p=this.resize_min_size_y,q=this.options.autogrow_cols,v=Infinity,w=Infinity,t=Math.ceil(c/(f+2*h)-.2),u=Math.ceil(e/(d+2*k)-.2),t=Math.max(1,this.resize_initial_sizex+t),u=Math.max(1,this.resize_initial_sizey+u),v=this.container_width/
this.min_widget_width-this.resize_initial_col+1,w=v*this.min_widget_width-2*h,t=Math.max(Math.min(t,m),n),t=Math.min(v,t),v=Math.min(m*f+(t-1)*h*2,w);min_width=n*f+(t-1)*h*2;u=Math.max(Math.min(u,l),p);w=l*d+(u-1)*k*2;min_height=p*d+(u-1)*k*2;this.resize_dir.right?u=this.resize_initial_sizey:this.resize_dir.bottom&&(t=this.resize_initial_sizex);q&&(f=this.resize_initial_col+t-1,q&&this.resize_initial_last_col<=f&&(this.set_dom_grid_width(Math.max(f+1,this.cols)),this.cols<f&&this.add_faux_cols(f-
this.cols)));q={};!this.resize_dir.bottom&&(q.width=Math.max(Math.min(this.resize_initial_width+c,v),min_width));!this.resize_dir.right&&(q.height=Math.max(Math.min(this.resize_initial_height+e,w),min_height));this.$resized_widget.css(q);if(t!==this.resize_last_sizex||u!==this.resize_last_sizey)this.resize_widget(this.$resized_widget,t,u),this.set_dom_grid_width(this.cols),this.$resize_preview_holder.css({width:"",height:""}).attr({"data-row":this.$resized_widget.attr("data-row"),"data-sizex":t,"data-sizey":u});
this.options.resize.resize&&this.options.resize.resize.call(this,a,b,this.$resized_widget);this.$el.trigger("gridster:resize");this.resize_last_sizex=t;this.resize_last_sizey=u};d.on_overlapped_column_change=function(a,b){if(!this.colliders_data.length)return this;var c=this.get_targeted_columns(this.colliders_data[0].el.data.col),e=this.last_cols.length,d=c.length,g;for(g=0;g<d;g++)-1===f.inArray(c[g],this.last_cols)&&(a||f.noop).call(this,c[g]);for(g=0;g<e;g++)-1===f.inArray(this.last_cols[g],c)&&
(b||f.noop).call(this,this.last_cols[g]);this.last_cols=c;return this};d.on_overlapped_row_change=function(a,b){if(!this.colliders_data.length)return this;var c=this.get_targeted_rows(this.colliders_data[0].el.data.row),e=this.last_rows.length,d=c.length,g;for(g=0;g<d;g++)-1===f.inArray(c[g],this.last_rows)&&(a||f.noop).call(this,c[g]);for(g=0;g<e;g++)-1===f.inArray(this.last_rows[g],c)&&(b||f.noop).call(this,this.last_rows[g]);this.last_rows=c};d.set_player=function(a,b,c){c||this.empty_cells_player_occupies();
c=c?{col:a}:this.colliders_data[0].el.data;a=c.col;b=b||c.row;this.player_grid_data={col:a,row:b,size_y:this.player_grid_data.size_y,size_x:this.player_grid_data.size_x};this.cells_occupied_by_player=this.get_cells_occupied(this.player_grid_data);c=this.get_widgets_overlapped(this.player_grid_data);var e=this.widgets_constraints(c);this.manage_movements(e.can_go_up,a,b);this.manage_movements(e.can_not_go_up,a,b);c.length||(c=this.can_go_player_up(this.player_grid_data),!1!==c&&(b=c),this.set_placeholder(a,
b));return{col:a,row:b}};d.widgets_constraints=function(a){var b=f([]),c=[],e=[];a.each(f.proxy(function(a,d){var h=f(d),k=h.coords().grid;this.can_go_widget_up(k)?(b=b.add(h),c.push(k)):e.push(k)},this));a.not(b);return{can_go_up:l.sort_by_row_asc(c),can_not_go_up:l.sort_by_row_desc(e)}};d.manage_movements=function(a,b,c){f.each(a,f.proxy(function(a,f){var d=f.el,h=this.can_go_widget_up(f);h?(this.move_widget_to(d,h),this.set_placeholder(b,h+f.size_y)):this.can_go_player_up(this.player_grid_data)||
(this.move_widget_down(d,c+this.player_grid_data.size_y-f.row),this.set_placeholder(b,c))},this));return this};d.is_player=function(a,b){if(b&&!this.gridmap[a])return!1;var c=b?this.gridmap[a][b]:a;return c&&(c.is(this.$player)||c.is(this.$helper))};d.is_player_in=function(a,b){var c=this.cells_occupied_by_player||{};return 0<=f.inArray(a,c.cols)&&0<=f.inArray(b,c.rows)};d.is_placeholder_in=function(a,b){var c=this.cells_occupied_by_placeholder||{};return this.is_placeholder_in_col(a)&&0<=f.inArray(b,
c.rows)};d.is_placeholder_in_col=function(a){return 0<=f.inArray(a,(this.cells_occupied_by_placeholder||[]).cols)};d.is_empty=function(a,b){return"undefined"!==typeof this.gridmap[a]?"undefined"!==typeof this.gridmap[a][b]&&!1===this.gridmap[a][b]?!0:!1:!0};d.is_occupied=function(a,b){return this.gridmap[a]?this.gridmap[a][b]?!0:!1:!1};d.is_widget=function(a,b){var c=this.gridmap[a];return c?(c=c[b])?c:!1:!1};d.is_widget_under_player=function(a,b){return this.is_widget(a,b)?this.is_player_in(a,b):
!1};d.get_widgets_under_player=function(a){a||(a=this.cells_occupied_by_player||{cols:[],rows:[]});var b=f([]);f.each(a.cols,f.proxy(function(c,e){f.each(a.rows,f.proxy(function(a,c){this.is_widget(e,c)&&(b=b.add(this.gridmap[e][c]))},this))},this));return b};d.set_placeholder=function(a,b){var c=f.extend({},this.placeholder_grid_data),e=this.widgets_below({col:c.col,row:c.row,size_y:c.size_y,size_x:c.size_x}),d=a+c.size_x-1;d>this.cols&&(a-=d-a);var d=this.placeholder_grid_data.row<b,g=this.placeholder_grid_data.col!==
a;this.placeholder_grid_data.col=a;this.placeholder_grid_data.row=b;this.cells_occupied_by_placeholder=this.get_cells_occupied(this.placeholder_grid_data);this.$preview_holder.attr({"data-row":b,"data-col":a});(d||g)&&e.each(f.proxy(function(b,e){this.move_widget_up(f(e),this.placeholder_grid_data.col-a+c.size_y)},this));e=this.get_widgets_under_player(this.cells_occupied_by_placeholder);e.length&&e.each(f.proxy(function(a,e){var d=f(e);this.move_widget_down(d,b+c.size_y-d.data("coords").grid.row)},
this))};d.can_go_player_up=function(a){var b=a.row+a.size_y-1,c=!0,e=[],f=1E4,d=this.get_widgets_under_player();this.for_each_column_occupied(a,function(a){var k=this.gridmap[a],m=b+1;for(e[a]=[];0<--m;)if(this.is_empty(a,m)||this.is_player(a,m)||this.is_widget(a,m)&&k[m].is(d))e[a].push(m),f=m<f?m:f;else break;if(0===e[a].length)return c=!1,!0;e[a].sort(function(a,b){return a-b})});return c?this.get_valid_rows(a,e,f):!1};d.can_go_widget_up=function(a){var b=a.row+a.size_y-1,c=!0,e=[],f=1E4;this.for_each_column_occupied(a,
function(d){var h=this.gridmap[d];e[d]=[];for(var k=b+1;0<--k&&(!this.is_widget(d,k)||this.is_player_in(d,k)||h[k].is(a.el));)this.is_player(d,k)||this.is_placeholder_in(d,k)||this.is_player_in(d,k)||e[d].push(k),k<f&&(f=k);if(0===e[d].length)return c=!1,!0;e[d].sort(function(a,b){return a-b})});return c?this.get_valid_rows(a,e,f):!1};d.get_valid_rows=function(a,b,c){var e=a.row,d=a.row+a.size_y-1;a=a.size_y;var g=c-1;for(c=[];++g<=d;){var h=!0;f.each(b,function(a,b){f.isArray(b)&&-1===f.inArray(g,
b)&&(h=!1)});if(!0===h&&(c.push(g),c.length===a))break}b=!1;1===a?c[0]!==e&&(b=c[0]||!1):c[0]!==e&&(b=this.get_consecutive_numbers_index(c,a));return b};d.get_consecutive_numbers_index=function(a,b){for(var c=a.length,e=[],f=!0,d=-1,h=0;h<c;h++){if(f||a[h]===d+1){e.push(h);if(e.length===b)break;f=!1}else e=[],f=!0;d=a[h]}return e.length>=b?a[e[0]]:!1};d.get_widgets_overlapped=function(){var a=f([]),b=[],c=this.cells_occupied_by_player.rows.slice(0);c.reverse();f.each(this.cells_occupied_by_player.cols,
f.proxy(function(e,d){f.each(c,f.proxy(function(c,e){if(!this.gridmap[d])return!0;var k=this.gridmap[d][e];this.is_occupied(d,e)&&!this.is_player(k)&&-1===f.inArray(k,b)&&(a=a.add(k),b.push(k))},this))},this));return a};d.on_start_overlapping_column=function(a){this.set_player(a,!1)};d.on_start_overlapping_row=function(a){this.set_player(!1,a)};d.on_stop_overlapping_column=function(a){this.set_player(a,!1);var b=this;this.for_each_widget_below(a,this.cells_occupied_by_player.rows[0],function(a,e){b.move_widget_up(this,
b.player_grid_data.size_y)})};d.on_stop_overlapping_row=function(a){this.set_player(!1,a);for(var b=this,c=this.cells_occupied_by_player.cols,e=0,f=c.length;e<f;e++)this.for_each_widget_below(c[e],a,function(a,c){b.move_widget_up(this,b.player_grid_data.size_y)})};d.move_widget_to=function(a,b){var c=this,e=a.coords().grid,d=this.widgets_below(a);if(!1===this.can_move_to(e,e.col,b,a))return!1;this.remove_from_gridmap(e);e.row=b;this.add_to_gridmap(e);a.attr("data-row",b);this.$changed=this.$changed.add(a);
d.each(function(a,b){var e=f(b),d=e.coords().grid,r=c.can_go_widget_up(d);r&&r!==d.row&&c.move_widget_to(e,r)});return this};d.move_widget_up=function(a,b){var c=a.coords().grid,e=c.row,d=[];b||(b=1);if(!this.can_go_up(a))return!1;this.for_each_column_occupied(c,function(c){if(-1===f.inArray(a,d)){var h=a.coords().grid,k=e-b,k=this.can_go_up_to_row(h,c,k);if(!k)return!0;c=this.widgets_below(a);this.remove_from_gridmap(h);h.row=k;this.add_to_gridmap(h);a.attr("data-row",h.row);this.$changed=this.$changed.add(a);
d.push(a);c.each(f.proxy(function(a,c){this.move_widget_up(f(c),b)},this))}})};d.move_widget_down=function(a,b){var c,e;if(0>=b)return!1;c=a.coords().grid.row;e=[];if(!a)return!1;if(-1===f.inArray(a,e)){var d=a.coords().grid;c+=b;var g=this.widgets_below(a);this.remove_from_gridmap(d);g.each(f.proxy(function(a,c){var e=f(c),g=e.coords().grid,g=this.displacement_diff(g,d,b);0<g&&this.move_widget_down(e,g)},this));d.row=c;this.update_widget_position(d,a);a.attr("data-row",d.row);this.$changed=this.$changed.add(a);
e.push(a)}};d.can_go_up_to_row=function(a,b,c){var e=!0,d=[],g=a.row,h;this.for_each_column_occupied(a,function(a){d[a]=[];for(h=g;h--;)if(this.is_empty(a,h)&&!this.is_placeholder_in(a,h))d[a].push(h);else break;if(!d[a].length)return e=!1,!0});if(!e)return!1;h=c;for(h=1;h<g;h++){a=!0;b=0;for(c=d.length;b<c;b++)d[b]&&-1===f.inArray(h,d[b])&&(a=!1);if(!0===a){e=h;break}}return e};d.displacement_diff=function(a,b,c){var e=a.row,d=[],f=b.row+b.size_y;this.for_each_column_occupied(a,function(a){for(var b=
0,c=f;c<e;c++)this.is_empty(a,c)&&(b+=1);d.push(b)});a=Math.max.apply(Math,d);c-=a;return 0<c?c:0};d.widgets_below=function(a){a=f.isPlainObject(a)?a:a.coords().grid;var b=this,c=a.row+a.size_y-1,e=f([]);this.for_each_column_occupied(a,function(a){b.for_each_widget_below(a,c,function(a,c){if(!b.is_player(this)&&-1===f.inArray(this,e))return e=e.add(this),!0})});return l.sort_by_row_asc(e)};d.set_cells_player_occupies=function(a,b){this.remove_from_gridmap(this.placeholder_grid_data);this.placeholder_grid_data.col=
a;this.placeholder_grid_data.row=b;this.add_to_gridmap(this.placeholder_grid_data,this.$player);return this};d.empty_cells_player_occupies=function(){this.remove_from_gridmap(this.placeholder_grid_data);return this};d.can_go_up=function(a){a=a.coords().grid;var b=a.row,c=b-1,e=!0;if(1===b)return!1;this.for_each_column_occupied(a,function(a){this.is_widget(a,c);if(this.is_occupied(a,c)||this.is_player(a,c)||this.is_placeholder_in(a,c)||this.is_player_in(a,c))return e=!1,!0});return e};d.can_move_to=
function(a,b,c,e){var d=a.el,f=!0;if(b+a.size_x-1>this.cols||e&&e<c+a.size_y-1)return!1;this.for_each_cell_occupied({size_y:a.size_y,size_x:a.size_x,col:b,row:c},function(b,c){var e=this.is_widget(b,c);!e||a.el&&!e.is(d)||(f=!1)});return f};d.get_targeted_columns=function(a){for(var b=(a||this.player_grid_data.col)+(this.player_grid_data.size_x-1),c=[];a<=b;a++)c.push(a);return c};d.get_targeted_rows=function(a){for(var b=(a||this.player_grid_data.row)+(this.player_grid_data.size_y-1),c=[];a<=b;a++)c.push(a);
return c};d.get_cells_occupied=function(a,b){var c={cols:[],rows:[]},e;b instanceof f&&(a=b.coords().grid);for(e=0;e<a.size_x;e++)c.cols.push(a.col+e);for(e=0;e<a.size_y;e++)c.rows.push(a.row+e);return c};d.for_each_cell_occupied=function(a,b){this.for_each_column_occupied(a,function(c){this.for_each_row_occupied(a,function(a){b.call(this,c,a)})});return this};d.for_each_column_occupied=function(a,b){for(var c=0;c<a.size_x;c++)b.call(this,a.col+c,a)};d.for_each_row_occupied=function(a,b){for(var c=
0;c<a.size_y;c++)b.call(this,a.row+c,a)};d._traversing_widgets=function(a,b,c,e,d){var g=this.gridmap;if(g[c]){var h,k;a=a+"/"+b;c instanceof f&&(b=c.coords().grid,c=b.col,d=e=b.row);var l=[],n=e;b={"for_each/above":function(){for(;n--&&!(0<n&&this.is_widget(c,n)&&-1===f.inArray(g[c][n],l)&&(h=d.call(g[c][n],c,n),l.push(g[c][n]),h)););},"for_each/below":function(){n=e+1;for(k=g[c].length;n<k&&(!this.is_widget(c,n)||-1!==f.inArray(g[c][n],l)||(h=d.call(g[c][n],c,n),l.push(g[c][n]),!h));n++);}};b[a]&&
b[a].call(this)}};d.for_each_widget_above=function(a,b,c){this._traversing_widgets("for_each","above",a,b,c);return this};d.for_each_widget_below=function(a,b,c){this._traversing_widgets("for_each","below",a,b,c);return this};d.get_highest_occupied_cell=function(){var a;a=this.gridmap;for(var b=a[1].length,c=[],e=[],d=a.length-1;1<=d;d--)for(a=b-1;1<=a;a--)if(this.is_widget(d,a)){c.push(a);e.push(d);break}return{col:Math.max.apply(Math,e),row:Math.max.apply(Math,c)}};d.get_widgets_from=function(a,
b){var c=f();a&&(c=c.add(this.$widgets.filter(function(){var b=f(this).attr("data-col");return b===a||b>a})));b&&(c=c.add(this.$widgets.filter(function(){var a=f(this).attr("data-row");return a===b||a>b})));return c};d.set_dom_grid_height=function(a){"undefined"===typeof a&&(a=this.get_highest_occupied_cell().row*this.min_widget_height);this.container_height=a;this.$el.css("height",this.container_height);return this};d.set_dom_grid_width=function(a){"undefined"===typeof a&&(a=this.get_highest_occupied_cell().col);
a=Math.min(this.options.autogrow_cols?this.options.max_cols:this.cols,Math.max(a,this.options.min_cols));this.container_width=a*this.min_widget_width;this.$el.css("width",this.container_width);return this};d.generate_stylesheet=function(a){var b="",c=this.options.max_size_x||this.cols,e;a||(a={});a.cols||(a.cols=this.cols);a.rows||(a.rows=this.rows);a.namespace||(a.namespace=this.options.namespace);a.widget_base_dimensions||(a.widget_base_dimensions=this.options.widget_base_dimensions);a.widget_margins||
(a.widget_margins=this.options.widget_margins);a.min_widget_width=2*a.widget_margins[0]+a.widget_base_dimensions[0];a.min_widget_height=2*a.widget_margins[1]+a.widget_base_dimensions[1];e=f.param(a);if(0<=f.inArray(e,l.generated_stylesheets))return!1;this.generated_stylesheets.push(e);l.generated_stylesheets.push(e);for(e=a.cols;0<=e;e--)b+=a.namespace+' [data-col="'+(e+1)+'"] { left:'+(e*a.widget_base_dimensions[0]+e*a.widget_margins[0]+(e+1)*a.widget_margins[0])+"px; }\n";for(e=a.rows;0<=e;e--)b+=
a.namespace+' [data-row="'+(e+1)+'"] { top:'+(e*a.widget_base_dimensions[1]+e*a.widget_margins[1]+(e+1)*a.widget_margins[1])+"px; }\n";for(e=1;e<=a.rows;e++)b+=a.namespace+' [data-sizey="'+e+'"] { height:'+(e*a.widget_base_dimensions[1]+2*(e-1)*a.widget_margins[1])+"px; }\n";for(e=1;e<=c;e++)b+=a.namespace+' [data-sizex="'+e+'"] { width:'+(e*a.widget_base_dimensions[0]+2*(e-1)*a.widget_margins[0])+"px; }\n";this.remove_style_tags();return this.add_style_tag(b)};d.add_style_tag=function(a){var b=document,
c=b.createElement("style");b.getElementsByTagName("head")[0].appendChild(c);c.setAttribute("type","text/css");c.styleSheet?c.styleSheet.cssText=a:c.appendChild(document.createTextNode(a));this.$style_tags=this.$style_tags.add(c);return this};d.remove_style_tags=function(){var a=l.generated_stylesheets,b=this.generated_stylesheets;this.$style_tags.remove();l.generated_stylesheets=f.map(a,function(a){if(-1===f.inArray(a,b))return a})};d.generate_faux_grid=function(a,b){this.faux_grid=[];this.gridmap=
[];var c,e;for(c=b;0<c;c--)for(this.gridmap[c]=[],e=a;0<e;e--)this.add_faux_cell(e,c);return this};d.add_faux_cell=function(a,b){var c=f({left:this.baseX+(b-1)*this.min_widget_width,top:this.baseY+(a-1)*this.min_widget_height,width:this.min_widget_width,height:this.min_widget_height,col:b,row:a,original_col:b,original_row:a}).coords();f.isArray(this.gridmap[b])||(this.gridmap[b]=[]);this.gridmap[b][a]=!1;this.faux_grid.push(c);return this};d.add_faux_rows=function(a){for(var b=this.rows,c=a=b+(a||
1);c>b;c--)for(var e=this.cols;1<=e;e--)this.add_faux_cell(c,e);this.rows=a;this.options.autogenerate_stylesheet&&this.generate_stylesheet();return this};d.add_faux_cols=function(a){var b=this.cols;a=Math.min(b+(a||1),this.options.max_cols);for(b+=1;b<=a;b++)for(var c=this.rows;1<=c;c--)this.add_faux_cell(c,b);this.cols=a;this.options.autogenerate_stylesheet&&this.generate_stylesheet();return this};d.recalculate_faux_grid=function(){var a=this.$wrapper.width();this.baseX=(f(window).width()-a)/2;this.baseY=
this.$wrapper.offset().top;f.each(this.faux_grid,f.proxy(function(a,c){this.faux_grid[a]=c.update({left:this.baseX+(c.data.col-1)*this.min_widget_width,top:this.baseY+(c.data.row-1)*this.min_widget_height})},this));return this};d.get_widgets_from_DOM=function(){var a=this.$widgets.map(f.proxy(function(a,c){var e=f(c);return this.dom_to_coords(e)},this)),a=l.sort_by_row_and_col_asc(a);f(a).map(f.proxy(function(a,c){return this.register_widget(c)||null},this)).length&&this.$el.trigger("gridster:positionschanged");
return this};d.generate_grid_and_stylesheet=function(){var a=this.$wrapper.width(),b=this.options.max_cols,c=Math.floor(a/this.min_widget_width)+this.options.extra_cols,e=this.$widgets.map(function(){return f(this).attr("data-col")}).get();e.length||(e=[0]);e=Math.max.apply(Math,e);this.cols=Math.max(e,c,this.options.min_cols);Infinity!==b&&b>=e&&b<this.cols&&(this.cols=b);var d=this.options.extra_rows;this.$widgets.each(function(a,b){d+=+f(b).attr("data-sizey")});this.rows=Math.max(d,this.options.min_rows);
this.baseX=(f(window).width()-a)/2;this.baseY=this.$wrapper.offset().top;this.options.autogenerate_stylesheet&&this.generate_stylesheet();return this.generate_faux_grid(this.rows,this.cols)};d.resize_widget_dimensions=function(a){a.widget_margins&&(this.options.widget_margins=a.widget_margins);a.widget_base_dimensions&&(this.options.widget_base_dimensions=a.widget_base_dimensions);this.min_widget_width=2*this.options.widget_margins[0]+this.options.widget_base_dimensions[0];this.min_widget_height=
2*this.options.widget_margins[1]+this.options.widget_base_dimensions[1];this.$widgets.each(f.proxy(function(a,c){var d=f(c),l=d.data();this.resize_widget(d,l.sizex,l.sizey)},this));this.generate_grid_and_stylesheet();this.get_widgets_from_DOM();this.set_dom_grid_height();return!0};d.destroy=function(a){this.$el.removeData("gridster");f(window).unbind(".gridster");this.drag_api&&this.drag_api.destroy();this.remove_style_tags();a&&this.$el.remove();return this};f.fn.gridster=function(a){return this.each(function(){f(this).data("gridster")||
f(this).data("gridster",new l(this,a))})};return l});;
var FileViewerPlugin = {
    urls: [],
    pdfVars: {
        'instance': null,
        'current': 0,
        'total': 0,
        'progress': 0,
        'canvasEle': null,
        'canvasCtx': null,
    },
    slider: {
        'current': 0,
        'itemType': '',
        'itemURL': '',
        'itemDefault': ''
    },
    init: function (urls) {
        if (typeof urls == "array" || typeof urls == "object") {
            this.urls = urls;
        }
        this.initActions();
        this.bindEvents();
        this.startSlide();
    },
    initActions: function () {

    },
    startSlide: function () {
        if (this.urls.length > 0)
            renderSlide(0);
    },
    bindEvents: function () {

        // Previous Slide
        $(document).off("click", "#btn-prev");
        $(document).on("click", "#btn-prev", function () {
            FileViewerPlugin.slider.current--;
            if (FileViewerPlugin.slider.current < 0) {
                FileViewerPlugin.slider.current = 0;
                updateSlideNavigation("first");
                return;
            } else if (FileViewerPlugin.slider.current >= FileViewerPlugin.urls.length) {
                FileViewerPlugin.slider.current = FileViewerPlugin.urls.length - 1;
            }
            renderSlide();
        });

        // Next Slide
        $(document).off("click", "#btn-next");
        $(document).on("click", "#btn-next", function () {
            FileViewerPlugin.slider.current++;
            if (FileViewerPlugin.slider.current >= FileViewerPlugin.urls.length) {
                FileViewerPlugin.slider.current = FileViewerPlugin.urls.length - 1;
                updateSlideNavigation("last");
                return;
            }
            renderSlide();
        });

    }
};
function checkFileType(type) {
    var ret_type = type;
    if (typeof type == "undefined" || type == null || type == "") {
        ret_type = "text";
    }
    switch (ret_type) {
        case "xls":
        case "xlsx":
        case "doc":
        case "docx":
        case "ppt":
        case "pptx":
            ret_type = "googledocs";
            break;
        case "odt":
        case "ods":
        case "odp":
            ret_type = "openoffice";
            break;
        case "pdf":
            ret_type = "pdf";
            break;
        case "png":
        case "jpg":
        case "jpeg":
        case "bmp":
        case "gif":
            ret_type = "image";
            break;
    }
    return ret_type;
}
function toggleItemContainers(type) {
    var containerList = ["#imageFile", "#pdfFile", "#xslFile", "#csvFile", "#textFile", "#pdf-buttons", "#iframeFile", "#openOfficeFile"];
    var showList = [];
    switch (type) {
        case "csv":
            showList.push("#csvFile");
            break;
        case "pdf":
            showList.push("#pdfFile");
            showList.push("#pdf-buttons");
            break;
        case "image":
            showList.push("#imageFile");
            break;
    }
    for (var cont in containerList) {
        if ($.inArray(containerList[cont], showList) >= 0) {
            if ($(containerList[cont]).is(":hidden")) {
                $(containerList[cont]).show();
            }
        } else {
            $(containerList[cont]).hide();
        }
    }
}
function updateSlideNavigation(nav_mode) {
    if (typeof nav_mode == "undefined" || nav_mode == null || nav_mode == "") {
        nav_mode = "both";
    }
    switch (nav_mode) {
        case "first":
            $("#btn-prev").addClass("nav-disable");
            $("#btn-next").removeClass("nav-disable");
            break;
        case "last":
            $("#btn-prev").removeClass("nav-disable");
            $("#btn-next").addClass("nav-disable");
            break;
        default:
            $("#btn-next, #btn-prev").removeClass("nav-disable");
            break;
    }
}

function renderSlide(slide_index) {
    showloader();
    updateContainerScroll(".viewer-data", "remove");
    if (typeof slide_index != "undefined" && FileViewerPlugin.slider.current != null && !isNaN(slide_index)) {
        FileViewerPlugin.slider.current = slide_index;
    }
    if(FileViewerPlugin.slider.current <= 0){
         updateSlideNavigation("first");
    }else if(FileViewerPlugin.slider.current >= FileViewerPlugin.urls.length-1){
         updateSlideNavigation("last");
    }else{
        updateSlideNavigation();
    }
    FileViewerPlugin.slider.itemType = FileViewerPlugin.urls[FileViewerPlugin.slider.current]["extension"];
    FileViewerPlugin.slider.itemURL = FileViewerPlugin.urls[FileViewerPlugin.slider.current]["href"];
    var itemType = checkFileType(FileViewerPlugin.urls[FileViewerPlugin.slider.current]["extension"]);
    toggleItemContainers(itemType);
    FileViewerPlugin.slider.itemType = itemType;
    $("#page-title").text(FileViewerPlugin.urls[FileViewerPlugin.slider.current]["title"]).attr("title", FileViewerPlugin.urls[FileViewerPlugin.slider.current]["title"]);
    $("#page-title").next().attr({"href": FileViewerPlugin.slider.itemURL});

    if (itemType == "csv" || itemType == "tsv") {
        $("#iframeFile").empty();
        $.ajax({
            type: "GET",
            url: FileViewerPlugin.slider.itemURL,
            dataType: "text",
            success: function (response)
            {
                var csvopts = {};
                if (itemType == "tsv") {
                    csvopts["separator"] = "\t";
                }
                var data = $.csv.toArrays(response, csvopts);
                generateHtmlTable(data, "iframeFile");
            }
        });
        $("#iframeFile").show();
        hideloader();
        showPreview();
    } else if (itemType == "image") {
        $("#iframeFile").empty();
        $("#iframeFile").append($("<img/>").attr({"src": FileViewerPlugin.slider.itemURL}));
        $("#iframeFile").show();
        hideloader();
    } else if (itemType == "googledocs") {
        var src = "https://docs.google.com/viewer?url=" + FileViewerPlugin.slider.itemURL + "&embedded=true";
        removeFrames("iframeFile", true, src);
        $("#iframeFile").show();
    } else if (itemType == "openoffice") {
        var src = site_url + "/public/js/admin/fileviewer/ViewerJS/#" + FileViewerPlugin.slider.itemURL;
        removeFrames("iframeFile", true, src);
        $("#iframeFile").show();
    } else if (itemType == "pdf") {
        var src = site_url + "public/js/admin/fileviewer/pdfjs-2.0/web/viewer.html?file=" + FileViewerPlugin.slider.itemURL;
        removeFrames("iframeFile", true, src);
        $("#iframeFile").show();
    } else {
        var src = FileViewerPlugin.slider.itemURL;
        removeFrames("iframeFile", true, src);
        $("#iframeFile").show();
    }
    updateContainerScroll(".viewer-data", "add");
}
function updateContainerScroll(ele, type) {
    if (typeof ele == "undefined" || ele == null || ele == "") {
        return false;
    }
    if (type == 'add') {
        $(ele).niceScroll();
    } else if (type == 'remove') {
        $(ele).getNiceScroll().remove();
    }
}
function removeFrames(par_ele_id, recreate, src) {
    if (typeof par_ele_id != "undefined" && par_ele_id != null && $("#" + par_ele_id).length > 0) {
        $("#" + par_ele_id).find("iframe").remove();
        $("#" + par_ele_id).empty();
        if (recreate === true) {
            var ifram = document.createElement('iframe');
            ifram.id = par_ele_id + "_0";
            ifram.src = src;
            ifram.width = "100%";
            ifram.height = "100%";
            ifram.frameborder = 0;
            ifram.onload = function(a){
                hideloader();
            }
            $("#" + par_ele_id).append(ifram);
        }
    }
}
function showloader(){
    $('#fileViewerBox').addClass('loadstate');
}
function hideloader(){
    $('#fileViewerBox').removeClass('loadstate');
}
function showPreview() {}
function generateHtmlTable(data, ele) {
    var html = '<table  class="table table-condensed table-hover table-striped">';
    if (typeof (data[0]) === 'undefined') {
        return null;
    } else {
        $.each(data, function (index, row) {
            //bind header
            if (index == 0) {
                html += '<thead>';
                html += '<tr>';
                $.each(row, function (index, colData) {
                    html += '<th>';
                    html += colData ? colData : "";
                    html += '</th>';
                });
                html += '</tr>';
                html += '</thead>';
                html += '<tbody>';
            } else {
                html += '<tr>';
                $.each(row, function (index, colData) {
                    html += '<td>';
                    html += colData ? colData : "";
                    html += '</td>';
                });
                html += '</tr>';
            }
        });
        html += '</tbody>';
        html += '</table>';

        tempHTML = html;

        $('#' + ele).append(html);
    }
}
function generateHtmlTableForXSL(data, ele) {
    var html = '<table>';
    if (typeof (data[0]) === 'undefined') {
        return null;
    } else {
        $.each(data, function (index, row) {
            //bind header
            if (index == 0) {
                html += '<thead>';
                html += '<tr>';
                $.each(row, function (index, colData) {
                    html += '<th>';
                    html += colData ? colData : "";
                    html += '</th>';
                });
                html += '</tr>';
                html += '</thead>';
                html += '<tbody>';
            } else {
                html += '<tr>';
                $.each(row, function (index, colData) {
                    html += '<td>';
                    html += colData ? colData : "";
                    html += '</td>';
                });
                html += '</tr>';
            }
        });
        html += '</tbody>';
        html += '</table>';

        $('#' + ele).append(html);
    }
}
;

RegExp.escape=function(s){return s.replace(/[-\/\\^$*+?.()|[\]{}]/g,'\\$&');};(function($){'use strict'
$.csv={defaults:{separator:',',delimiter:'"',headers:true},hooks:{castToScalar:function(value,state){var hasDot=/\./;if(isNaN(value)){return value;}else{if(hasDot.test(value)){return parseFloat(value);}else{var integer=parseInt(value);if(isNaN(integer)){return null;}else{return integer;}}}}},parsers:{parse:function(csv,options){var separator=options.separator;var delimiter=options.delimiter;if(!options.state.rowNum){options.state.rowNum=1;}
if(!options.state.colNum){options.state.colNum=1;}
var data=[];var entry=[];var state=0;var value=''
var exit=false;function endOfEntry(){state=0;value='';if(options.start&&options.state.rowNum<options.start){entry=[];options.state.rowNum++;options.state.colNum=1;return;}
if(options.onParseEntry===undefined){data.push(entry);}else{var hookVal=options.onParseEntry(entry,options.state);if(hookVal!==false){data.push(hookVal);}}
entry=[];if(options.end&&options.state.rowNum>=options.end){exit=true;}
options.state.rowNum++;options.state.colNum=1;}
function endOfValue(){if(options.onParseValue===undefined){entry.push(value);}else{var hook=options.onParseValue(value,options.state);if(hook!==false){entry.push(hook);}}
value='';state=0;options.state.colNum++;}
var escSeparator=RegExp.escape(separator);var escDelimiter=RegExp.escape(delimiter);var match=/(D|S|\n|\r|[^DS\r\n]+)/;var matchSrc=match.source;matchSrc=matchSrc.replace(/S/g,escSeparator);matchSrc=matchSrc.replace(/D/g,escDelimiter);match=RegExp(matchSrc,'gm');csv.replace(match,function(m0){if(exit){return;}
switch(state){case 0:if(m0===separator){value+='';endOfValue();break;}
if(m0===delimiter){state=1;break;}
if(m0==='\n'){endOfValue();endOfEntry();break;}
if(/^\r$/.test(m0)){break;}
value+=m0;state=3;break;case 1:if(m0===delimiter){state=2;break;}
value+=m0;state=1;break;case 2:if(m0===delimiter){value+=m0;state=1;break;}
if(m0===separator){endOfValue();break;}
if(m0==='\n'){endOfValue();endOfEntry();break;}
if(/^\r$/.test(m0)){break;}
throw new Error('CSVDataError: Illegal State [Row:'+options.state.rowNum+'][Col:'+options.state.colNum+']');case 3:if(m0===separator){endOfValue();break;}
if(m0==='\n'){endOfValue();endOfEntry();break;}
if(/^\r$/.test(m0)){break;}
if(m0===delimiter){throw new Error('CSVDataError: Illegal Quote [Row:'+options.state.rowNum+'][Col:'+options.state.colNum+']');}
throw new Error('CSVDataError: Illegal Data [Row:'+options.state.rowNum+'][Col:'+options.state.colNum+']');default:throw new Error('CSVDataError: Unknown State [Row:'+options.state.rowNum+'][Col:'+options.state.colNum+']');}});if(entry.length!==0){endOfValue();endOfEntry();}
return data;},splitLines:function(csv,options){var separator=options.separator;var delimiter=options.delimiter;if(!options.state.rowNum){options.state.rowNum=1;}
var entries=[];var state=0;var entry='';var exit=false;function endOfLine(){state=0;if(options.start&&options.state.rowNum<options.start){entry='';options.state.rowNum++;return;}
if(options.onParseEntry===undefined){entries.push(entry);}else{var hookVal=options.onParseEntry(entry,options.state);if(hookVal!==false){entries.push(hookVal);}}
entry='';if(options.end&&options.state.rowNum>=options.end){exit=true;}
options.state.rowNum++;}
var escSeparator=RegExp.escape(separator);var escDelimiter=RegExp.escape(delimiter);var match=/(D|S|\n|\r|[^DS\r\n]+)/;var matchSrc=match.source;matchSrc=matchSrc.replace(/S/g,escSeparator);matchSrc=matchSrc.replace(/D/g,escDelimiter);match=RegExp(matchSrc,'gm');csv.replace(match,function(m0){if(exit){return;}
switch(state){case 0:if(m0===separator){entry+=m0;state=0;break;}
if(m0===delimiter){entry+=m0;state=1;break;}
if(m0==='\n'){endOfLine();break;}
if(/^\r$/.test(m0)){break;}
entry+=m0;state=3;break;case 1:if(m0===delimiter){entry+=m0;state=2;break;}
entry+=m0;state=1;break;case 2:var prevChar=entry.substr(entry.length-1);if(m0===delimiter&&prevChar===delimiter){entry+=m0;state=1;break;}
if(m0===separator){entry+=m0;state=0;break;}
if(m0==='\n'){endOfLine();break;}
if(m0==='\r'){break;}
throw new Error('CSVDataError: Illegal state [Row:'+options.state.rowNum+']');case 3:if(m0===separator){entry+=m0;state=0;break;}
if(m0==='\n'){endOfLine();break;}
if(m0==='\r'){break;}
if(m0===delimiter){throw new Error('CSVDataError: Illegal quote [Row:'+options.state.rowNum+']');}
throw new Error('CSVDataError: Illegal state [Row:'+options.state.rowNum+']');default:throw new Error('CSVDataError: Unknown state [Row:'+options.state.rowNum+']');}});if(entry!==''){endOfLine();}
return entries;},parseEntry:function(csv,options){var separator=options.separator;var delimiter=options.delimiter;if(!options.state.rowNum){options.state.rowNum=1;}
if(!options.state.colNum){options.state.colNum=1;}
var entry=[];var state=0;var value='';function endOfValue(){if(options.onParseValue===undefined){entry.push(value);}else{var hook=options.onParseValue(value,options.state);if(hook!==false){entry.push(hook);}}
value='';state=0;options.state.colNum++;}
if(!options.match){var escSeparator=RegExp.escape(separator);var escDelimiter=RegExp.escape(delimiter);var match=/(D|S|\n|\r|[^DS\r\n]+)/;var matchSrc=match.source;matchSrc=matchSrc.replace(/S/g,escSeparator);matchSrc=matchSrc.replace(/D/g,escDelimiter);options.match=RegExp(matchSrc,'gm');}
csv.replace(options.match,function(m0){switch(state){case 0:if(m0===separator){value+='';endOfValue();break;}
if(m0===delimiter){state=1;break;}
if(m0==='\n'||m0==='\r'){break;}
value+=m0;state=3;break;case 1:if(m0===delimiter){state=2;break;}
value+=m0;state=1;break;case 2:if(m0===delimiter){value+=m0;state=1;break;}
if(m0===separator){endOfValue();break;}
if(m0==='\n'||m0==='\r'){break;}
throw new Error('CSVDataError: Illegal State [Row:'+options.state.rowNum+'][Col:'+options.state.colNum+']');case 3:if(m0===separator){endOfValue();break;}
if(m0==='\n'||m0==='\r'){break;}
if(m0===delimiter){throw new Error('CSVDataError: Illegal Quote [Row:'+options.state.rowNum+'][Col:'+options.state.colNum+']');}
throw new Error('CSVDataError: Illegal Data [Row:'+options.state.rowNum+'][Col:'+options.state.colNum+']');default:throw new Error('CSVDataError: Unknown State [Row:'+options.state.rowNum+'][Col:'+options.state.colNum+']');}});endOfValue();return entry;}},toArray:function(csv,options,callback){var options=(options!==undefined?options:{});var config={};config.callback=((callback!==undefined&&typeof(callback)==='function')?callback:false);config.separator='separator'in options?options.separator:$.csv.defaults.separator;config.delimiter='delimiter'in options?options.delimiter:$.csv.defaults.delimiter;var state=(options.state!==undefined?options.state:{});var options={delimiter:config.delimiter,separator:config.separator,onParseEntry:options.onParseEntry,onParseValue:options.onParseValue,state:state}
var entry=$.csv.parsers.parseEntry(csv,options);if(!config.callback){return entry;}else{config.callback('',entry);}},toArrays:function(csv,options,callback){var options=(options!==undefined?options:{});var config={};config.callback=((callback!==undefined&&typeof(callback)==='function')?callback:false);config.separator='separator'in options?options.separator:$.csv.defaults.separator;config.delimiter='delimiter'in options?options.delimiter:$.csv.defaults.delimiter;var data=[];var options={delimiter:config.delimiter,separator:config.separator,onParseEntry:options.onParseEntry,onParseValue:options.onParseValue,start:options.start,end:options.end,state:{rowNum:1,colNum:1}};data=$.csv.parsers.parse(csv,options);if(!config.callback){return data;}else{config.callback('',data);}},toObjects:function(csv,options,callback){var options=(options!==undefined?options:{});var config={};config.callback=((callback!==undefined&&typeof(callback)==='function')?callback:false);config.separator='separator'in options?options.separator:$.csv.defaults.separator;config.delimiter='delimiter'in options?options.delimiter:$.csv.defaults.delimiter;config.headers='headers'in options?options.headers:$.csv.defaults.headers;options.start='start'in options?options.start:1;if(config.headers){options.start++;}
if(options.end&&config.headers){options.end++;}
var lines=[];var data=[];var options={delimiter:config.delimiter,separator:config.separator,onParseEntry:options.onParseEntry,onParseValue:options.onParseValue,start:options.start,end:options.end,state:{rowNum:1,colNum:1},match:false};var headerOptions={delimiter:config.delimiter,separator:config.separator,start:1,end:1,state:{rowNum:1,colNum:1}}
var headerLine=$.csv.parsers.splitLines(csv,headerOptions);var headers=$.csv.toArray(headerLine[0],options);var lines=$.csv.parsers.splitLines(csv,options);options.state.colNum=1;if(headers){options.state.rowNum=2;}else{options.state.rowNum=1;}
for(var i=0,len=lines.length;i<len;i++){var entry=$.csv.toArray(lines[i],options);var object={};for(var j in headers){object[headers[j]]=entry[j];}
data.push(object);options.state.rowNum++;}
if(!config.callback){return data;}else{config.callback('',data);}},fromArrays:function(arrays,options,callback){var options=(options!==undefined?options:{});var config={};config.callback=((callback!==undefined&&typeof(callback)==='function')?callback:false);config.separator='separator'in options?options.separator:$.csv.defaults.separator;config.delimiter='delimiter'in options?options.delimiter:$.csv.defaults.delimiter;config.escaper='escaper'in options?options.escaper:$.csv.defaults.escaper;config.experimental='experimental'in options?options.experimental:false;if(!config.experimental){throw new Error('not implemented');}
var output=[];for(i in arrays){output.push(arrays[i]);}
if(!config.callback){return output;}else{config.callback('',output);}},fromObjects2CSV:function(objects,options,callback){var options=(options!==undefined?options:{});var config={};config.callback=((callback!==undefined&&typeof(callback)==='function')?callback:false);config.separator='separator'in options?options.separator:$.csv.defaults.separator;config.delimiter='delimiter'in options?options.delimiter:$.csv.defaults.delimiter;config.experimental='experimental'in options?options.experimental:false;if(!config.experimental){throw new Error('not implemented');}
var output=[];for(i in objects){output.push(arrays[i]);}
if(!config.callback){return output;}else{config.callback('',output);}}};$.csvEntry2Array=$.csv.toArray;$.csv2Array=$.csv.toArrays;$.csv2Dictionary=$.csv.toObjects;})(jQuery);;
(function defineMustache(global,factory){if(typeof exports==="object"&&exports&&typeof exports.nodeName!=="string"){factory(exports)}else if(typeof define==="function"&&define.amd){define(["exports"],factory)}else{global.Mustache={};factory(global.Mustache)}})(this,function mustacheFactory(mustache){var objectToString=Object.prototype.toString;var isArray=Array.isArray||function isArrayPolyfill(object){return objectToString.call(object)==="[object Array]"};function isFunction(object){return typeof object==="function"}function typeStr(obj){return isArray(obj)?"array":typeof obj}function escapeRegExp(string){return string.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}function hasProperty(obj,propName){return obj!=null&&typeof obj==="object"&&propName in obj}var regExpTest=RegExp.prototype.test;function testRegExp(re,string){return regExpTest.call(re,string)}var nonSpaceRe=/\S/;function isWhitespace(string){return!testRegExp(nonSpaceRe,string)}var entityMap={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"};function escapeHtml(string){return String(string).replace(/[&<>"'`=\/]/g,function fromEntityMap(s){return entityMap[s]})}var whiteRe=/\s*/;var spaceRe=/\s+/;var equalsRe=/\s*=/;var curlyRe=/\s*\}/;var tagRe=/#|\^|\/|>|\{|&|=|!/;function parseTemplate(template,tags){if(!template)return[];var sections=[];var tokens=[];var spaces=[];var hasTag=false;var nonSpace=false;function stripSpace(){if(hasTag&&!nonSpace){while(spaces.length)delete tokens[spaces.pop()]}else{spaces=[]}hasTag=false;nonSpace=false}var openingTagRe,closingTagRe,closingCurlyRe;function compileTags(tagsToCompile){if(typeof tagsToCompile==="string")tagsToCompile=tagsToCompile.split(spaceRe,2);if(!isArray(tagsToCompile)||tagsToCompile.length!==2)throw new Error("Invalid tags: "+tagsToCompile);openingTagRe=new RegExp(escapeRegExp(tagsToCompile[0])+"\\s*");closingTagRe=new RegExp("\\s*"+escapeRegExp(tagsToCompile[1]));closingCurlyRe=new RegExp("\\s*"+escapeRegExp("}"+tagsToCompile[1]))}compileTags(tags||mustache.tags);var scanner=new Scanner(template);var start,type,value,chr,token,openSection;while(!scanner.eos()){start=scanner.pos;value=scanner.scanUntil(openingTagRe);if(value){for(var i=0,valueLength=value.length;i<valueLength;++i){chr=value.charAt(i);if(isWhitespace(chr)){spaces.push(tokens.length)}else{nonSpace=true}tokens.push(["text",chr,start,start+1]);start+=1;if(chr==="\n")stripSpace()}}if(!scanner.scan(openingTagRe))break;hasTag=true;type=scanner.scan(tagRe)||"name";scanner.scan(whiteRe);if(type==="="){value=scanner.scanUntil(equalsRe);scanner.scan(equalsRe);scanner.scanUntil(closingTagRe)}else if(type==="{"){value=scanner.scanUntil(closingCurlyRe);scanner.scan(curlyRe);scanner.scanUntil(closingTagRe);type="&"}else{value=scanner.scanUntil(closingTagRe)}if(!scanner.scan(closingTagRe))throw new Error("Unclosed tag at "+scanner.pos);token=[type,value,start,scanner.pos];tokens.push(token);if(type==="#"||type==="^"){sections.push(token)}else if(type==="/"){openSection=sections.pop();if(!openSection)throw new Error('Unopened section "'+value+'" at '+start);if(openSection[1]!==value)throw new Error('Unclosed section "'+openSection[1]+'" at '+start)}else if(type==="name"||type==="{"||type==="&"){nonSpace=true}else if(type==="="){compileTags(value)}}openSection=sections.pop();if(openSection)throw new Error('Unclosed section "'+openSection[1]+'" at '+scanner.pos);return nestTokens(squashTokens(tokens))}function squashTokens(tokens){var squashedTokens=[];var token,lastToken;for(var i=0,numTokens=tokens.length;i<numTokens;++i){token=tokens[i];if(token){if(token[0]==="text"&&lastToken&&lastToken[0]==="text"){lastToken[1]+=token[1];lastToken[3]=token[3]}else{squashedTokens.push(token);lastToken=token}}}return squashedTokens}function nestTokens(tokens){var nestedTokens=[];var collector=nestedTokens;var sections=[];var token,section;for(var i=0,numTokens=tokens.length;i<numTokens;++i){token=tokens[i];switch(token[0]){case"#":case"^":collector.push(token);sections.push(token);collector=token[4]=[];break;case"/":section=sections.pop();section[5]=token[2];collector=sections.length>0?sections[sections.length-1][4]:nestedTokens;break;default:collector.push(token)}}return nestedTokens}function Scanner(string){this.string=string;this.tail=string;this.pos=0}Scanner.prototype.eos=function eos(){return this.tail===""};Scanner.prototype.scan=function scan(re){var match=this.tail.match(re);if(!match||match.index!==0)return"";var string=match[0];this.tail=this.tail.substring(string.length);this.pos+=string.length;return string};Scanner.prototype.scanUntil=function scanUntil(re){var index=this.tail.search(re),match;switch(index){case-1:match=this.tail;this.tail="";break;case 0:match="";break;default:match=this.tail.substring(0,index);this.tail=this.tail.substring(index)}this.pos+=match.length;return match};function Context(view,parentContext){this.view=view;this.cache={".":this.view};this.parent=parentContext}Context.prototype.push=function push(view){return new Context(view,this)};Context.prototype.lookup=function lookup(name){var cache=this.cache;var value;if(cache.hasOwnProperty(name)){value=cache[name]}else{var context=this,names,index,lookupHit=false;while(context){if(name.indexOf(".")>0){value=context.view;names=name.split(".");index=0;while(value!=null&&index<names.length){if(index===names.length-1)lookupHit=hasProperty(value,names[index]);value=value[names[index++]]}}else{value=context.view[name];lookupHit=hasProperty(context.view,name)}if(lookupHit)break;context=context.parent}cache[name]=value}if(isFunction(value))value=value.call(this.view);return value};function Writer(){this.cache={}}Writer.prototype.clearCache=function clearCache(){this.cache={}};Writer.prototype.parse=function parse(template,tags){var cache=this.cache;var tokens=cache[template];if(tokens==null)tokens=cache[template]=parseTemplate(template,tags);return tokens};Writer.prototype.render=function render(template,view,partials){var tokens=this.parse(template);var context=view instanceof Context?view:new Context(view);return this.renderTokens(tokens,context,partials,template)};Writer.prototype.renderTokens=function renderTokens(tokens,context,partials,originalTemplate){var buffer="";var token,symbol,value;for(var i=0,numTokens=tokens.length;i<numTokens;++i){value=undefined;token=tokens[i];symbol=token[0];if(symbol==="#")value=this.renderSection(token,context,partials,originalTemplate);else if(symbol==="^")value=this.renderInverted(token,context,partials,originalTemplate);else if(symbol===">")value=this.renderPartial(token,context,partials,originalTemplate);else if(symbol==="&")value=this.unescapedValue(token,context);else if(symbol==="name")value=this.escapedValue(token,context);else if(symbol==="text")value=this.rawValue(token);if(value!==undefined)buffer+=value}return buffer};Writer.prototype.renderSection=function renderSection(token,context,partials,originalTemplate){var self=this;var buffer="";var value=context.lookup(token[1]);function subRender(template){return self.render(template,context,partials)}if(!value)return;if(isArray(value)){for(var j=0,valueLength=value.length;j<valueLength;++j){buffer+=this.renderTokens(token[4],context.push(value[j]),partials,originalTemplate)}}else if(typeof value==="object"||typeof value==="string"||typeof value==="number"){buffer+=this.renderTokens(token[4],context.push(value),partials,originalTemplate)}else if(isFunction(value)){if(typeof originalTemplate!=="string")throw new Error("Cannot use higher-order sections without the original template");value=value.call(context.view,originalTemplate.slice(token[3],token[5]),subRender);if(value!=null)buffer+=value}else{buffer+=this.renderTokens(token[4],context,partials,originalTemplate)}return buffer};Writer.prototype.renderInverted=function renderInverted(token,context,partials,originalTemplate){var value=context.lookup(token[1]);if(!value||isArray(value)&&value.length===0)return this.renderTokens(token[4],context,partials,originalTemplate)};Writer.prototype.renderPartial=function renderPartial(token,context,partials){if(!partials)return;var value=isFunction(partials)?partials(token[1]):partials[token[1]];if(value!=null)return this.renderTokens(this.parse(value),context,partials,value)};Writer.prototype.unescapedValue=function unescapedValue(token,context){var value=context.lookup(token[1]);if(value!=null)return value};Writer.prototype.escapedValue=function escapedValue(token,context){var value=context.lookup(token[1]);if(value!=null)return mustache.escape(value)};Writer.prototype.rawValue=function rawValue(token){return token[1]};mustache.name="mustache.js";mustache.version="2.3.0";mustache.tags=["{{","}}"];var defaultWriter=new Writer;mustache.clearCache=function clearCache(){return defaultWriter.clearCache()};mustache.parse=function parse(template,tags){return defaultWriter.parse(template,tags)};mustache.render=function render(template,view,partials){if(typeof template!=="string"){throw new TypeError('Invalid template! Template should be a "string" '+'but "'+typeStr(template)+'" was given as the first '+"argument for mustache#render(template, view, partials)")}return defaultWriter.render(template,view,partials)};mustache.to_html=function to_html(template,view,partials,send){var result=mustache.render(template,view,partials);if(isFunction(send)){send(result)}else{return result}};mustache.escape=escapeHtml;mustache.Scanner=Scanner;mustache.Context=Context;mustache.Writer=Writer;return mustache});
;
/*!
 * hotkeys-js v3.4.4
 * A simple micro-library for defining and dispatching keyboard shortcuts. It has no dependencies.
 * 
 * Copyright (c) 2019 kenny wong <wowohoo@qq.com>
 * http://jaywcjlove.github.io/hotkeys
 * 
 * Licensed under the MIT license.
 */

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global.hotkeys = factory());
}(this, (function () { 'use strict';

  var isff = typeof navigator !== 'undefined' ? navigator.userAgent.toLowerCase().indexOf('firefox') > 0 : false;

  // 绑定事件
  function addEvent(object, event, method) {
    if (object.addEventListener) {
      object.addEventListener(event, method, false);
    } else if (object.attachEvent) {
      object.attachEvent('on' + event, function () {
        method(window.event);
      });
    }
  }

  // 修饰键转换成对应的键码
  function getMods(modifier, key) {
    var mods = key.slice(0, key.length - 1);
    for (var i = 0; i < mods.length; i++) {
      mods[i] = modifier[mods[i].toLowerCase()];
    }return mods;
  }

  // 处理传的key字符串转换成数组
  function getKeys(key) {
    if (!key) key = '';

    key = key.replace(/\s/g, ''); // 匹配任何空白字符,包括空格、制表符、换页符等等
    var keys = key.split(','); // 同时设置多个快捷键，以','分割
    var index = keys.lastIndexOf('');

    // 快捷键可能包含','，需特殊处理
    for (; index >= 0;) {
      keys[index - 1] += ',';
      keys.splice(index, 1);
      index = keys.lastIndexOf('');
    }

    return keys;
  }

  // 比较修饰键的数组
  function compareArray(a1, a2) {
    var arr1 = a1.length >= a2.length ? a1 : a2;
    var arr2 = a1.length >= a2.length ? a2 : a1;
    var isIndex = true;

    for (var i = 0; i < arr1.length; i++) {
      if (arr2.indexOf(arr1[i]) === -1) isIndex = false;
    }
    return isIndex;
  }

  var _keyMap = { // 特殊键
    backspace: 8,
    tab: 9,
    clear: 12,
    enter: 13,
    return: 13,
    esc: 27,
    escape: 27,
    space: 32,
    left: 37,
    up: 38,
    right: 39,
    down: 40,
    del: 46,
    delete: 46,
    ins: 45,
    insert: 45,
    home: 36,
    end: 35,
    pageup: 33,
    pagedown: 34,
    capslock: 20,
    '⇪': 20,
    ',': 188,
    '.': 190,
    '/': 191,
    '`': 192,
    '-': isff ? 173 : 189,
    '=': isff ? 61 : 187,
    ';': isff ? 59 : 186,
    '\'': 222,
    '[': 219,
    ']': 221,
    '\\': 220
  };

  var _modifier = { // 修饰键
    '⇧': 16,
    shift: 16,
    '⌥': 18,
    alt: 18,
    option: 18,
    '⌃': 17,
    ctrl: 17,
    control: 17,
    '⌘': isff ? 224 : 91,
    cmd: isff ? 224 : 91,
    command: isff ? 224 : 91
  };
  var _downKeys = []; // 记录摁下的绑定键
  var modifierMap = {
    16: 'shiftKey',
    18: 'altKey',
    17: 'ctrlKey'
  };
  var _mods = { 16: false, 18: false, 17: false };
  var _handlers = {};

  // F1~F12 特殊键
  for (var k = 1; k < 20; k++) {
    _keyMap['f' + k] = 111 + k;
  }

  // 兼容Firefox处理
  modifierMap[isff ? 224 : 91] = 'metaKey';
  _mods[isff ? 224 : 91] = false;

  var _scope = 'all'; // 默认热键范围
  var isBindElement = false; // 是否绑定节点

  // 返回键码
  var code = function code(x) {
    return _keyMap[x.toLowerCase()] || _modifier[x.toLowerCase()] || x.toUpperCase().charCodeAt(0);
  };

  // 设置获取当前范围（默认为'所有'）
  function setScope(scope) {
    _scope = scope || 'all';
  }
  // 获取当前范围
  function getScope() {
    return _scope || 'all';
  }
  // 获取摁下绑定键的键值
  function getPressedKeyCodes() {
    return _downKeys.slice(0);
  }

  // 表单控件控件判断 返回 Boolean
  function filter(event) {
    var target = event.target || event.srcElement;
    var tagName = target.tagName;
    // 忽略这些情况下快捷键无效

    return !(tagName === 'INPUT' || tagName === 'SELECT' || tagName === 'TEXTAREA' || target.isContentEditable);
  }

  // 判断摁下的键是否为某个键，返回true或者false
  function isPressed(keyCode) {
    if (typeof keyCode === 'string') {
      keyCode = code(keyCode); // 转换成键码
    }
    return _downKeys.indexOf(keyCode) !== -1;
  }

  // 循环删除handlers中的所有 scope(范围)
  function deleteScope(scope, newScope) {
    var handlers = void 0;
    var i = void 0;

    // 没有指定scope，获取scope
    if (!scope) scope = getScope();

    for (var key in _handlers) {
      if (Object.prototype.hasOwnProperty.call(_handlers, key)) {
        handlers = _handlers[key];
        for (i = 0; i < handlers.length;) {
          if (handlers[i].scope === scope) handlers.splice(i, 1);else i++;
        }
      }
    }

    // 如果scope被删除，将scope重置为all
    if (getScope() === scope) setScope(newScope || 'all');
  }

  // 清除修饰键
  function clearModifier(event) {
    var key = event.keyCode || event.which || event.charCode;
    var i = _downKeys.indexOf(key);

    // 从列表中清除按压过的键
    if (i >= 0) _downKeys.splice(i, 1);

    // 修饰键 shiftKey altKey ctrlKey (command||metaKey) 清除
    if (key === 93 || key === 224) key = 91;
    if (key in _mods) {
      _mods[key] = false;

      // 将修饰键重置为false
      for (var k in _modifier) {
        if (_modifier[k] === key) hotkeys[k] = false;
      }
    }
  }

  // 解除绑定某个范围的快捷键
  function unbind(key, scope, method) {
    var multipleKeys = getKeys(key);
    var keys = void 0;
    var mods = [];
    var obj = void 0;
    // 通过函数判断，是否解除绑定
    // https://github.com/jaywcjlove/hotkeys/issues/44
    if (typeof scope === 'function') {
      method = scope;
      scope = 'all';
    }

    for (var i = 0; i < multipleKeys.length; i++) {
      // 将组合快捷键拆分为数组
      keys = multipleKeys[i].split('+');

      // 记录每个组合键中的修饰键的键码 返回数组
      if (keys.length > 1) mods = getMods(_modifier, keys);

      // 获取除修饰键外的键值key
      key = keys[keys.length - 1];
      key = key === '*' ? '*' : code(key);

      // 判断是否传入范围，没有就获取范围
      if (!scope) scope = getScope();

      // 如何key不在 _handlers 中返回不做处理
      if (!_handlers[key]) return;

      // 清空 handlers 中数据，
      // 让触发快捷键键之后没有事件执行到达解除快捷键绑定的目的
      for (var r = 0; r < _handlers[key].length; r++) {
        obj = _handlers[key][r];
        // 通过函数判断，是否解除绑定，函数相等直接返回
        var isMatchingMethod = method ? obj.method === method : true;

        // 判断是否在范围内并且键值相同
        if (isMatchingMethod && obj.scope === scope && compareArray(obj.mods, mods)) {
          _handlers[key][r] = {};
        }
      }
    }
  }

  // 对监听对应快捷键的回调函数进行处理
  function eventHandler(event, handler, scope) {
    var modifiersMatch = void 0;

    // 看它是否在当前范围
    if (handler.scope === scope || handler.scope === 'all') {
      // 检查是否匹配修饰符（如果有返回true）
      modifiersMatch = handler.mods.length > 0;

      for (var y in _mods) {
        if (Object.prototype.hasOwnProperty.call(_mods, y)) {
          if (!_mods[y] && handler.mods.indexOf(+y) > -1 || _mods[y] && handler.mods.indexOf(+y) === -1) modifiersMatch = false;
        }
      }

      // 调用处理程序，如果是修饰键不做处理
      if (handler.mods.length === 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91] || modifiersMatch || handler.shortcut === '*') {
        if (handler.method(event, handler) === false) {
          if (event.preventDefault) event.preventDefault();else event.returnValue = false;
          if (event.stopPropagation) event.stopPropagation();
          if (event.cancelBubble) event.cancelBubble = true;
        }
      }
    }
  }

  // 处理keydown事件
  function dispatch(event) {
    var asterisk = _handlers['*'];
    var key = event.keyCode || event.which || event.charCode;

    // 搜集绑定的键
    if (_downKeys.indexOf(key) === -1) _downKeys.push(key);

    // Gecko(Firefox)的command键值224，在Webkit(Chrome)中保持一致
    // Webkit左右command键值不一样
    if (key === 93 || key === 224) key = 91;

    if (key in _mods) {
      _mods[key] = true;

      // 将特殊字符的key注册到 hotkeys 上
      for (var k in _modifier) {
        if (_modifier[k] === key) hotkeys[k] = true;
      }

      if (!asterisk) return;
    }

    // 将modifierMap里面的修饰键绑定到event中
    for (var e in _mods) {
      if (Object.prototype.hasOwnProperty.call(_mods, e)) {
        _mods[e] = event[modifierMap[e]];
      }
    }

    // 表单控件过滤 默认表单控件不触发快捷键
    if (!hotkeys.filter.call(this, event)) return;

    // 获取范围 默认为all
    var scope = getScope();

    // 对任何快捷键都需要做的处理
    if (asterisk) {
      for (var i = 0; i < asterisk.length; i++) {
        if (asterisk[i].scope === scope) eventHandler(event, asterisk[i], scope);
      }
    }
    // key 不在_handlers中返回
    if (!(key in _handlers)) return;

    for (var _i = 0; _i < _handlers[key].length; _i++) {
      // 找到处理内容
      eventHandler(event, _handlers[key][_i], scope);
    }
  }

  function hotkeys(key, option, method) {
    var keys = getKeys(key); // 需要处理的快捷键列表
    var mods = [];
    var scope = 'all'; // scope默认为all，所有范围都有效
    var element = document; // 快捷键事件绑定节点
    var i = 0;

    // 对为设定范围的判断
    if (method === undefined && typeof option === 'function') {
      method = option;
    }

    if (Object.prototype.toString.call(option) === '[object Object]') {
      if (option.scope) scope = option.scope; // eslint-disable-line
      if (option.element) element = option.element; // eslint-disable-line
    }

    if (typeof option === 'string') scope = option;

    // 对于每个快捷键进行处理
    for (; i < keys.length; i++) {
      key = keys[i].split('+'); // 按键列表
      mods = [];

      // 如果是组合快捷键取得组合快捷键
      if (key.length > 1) mods = getMods(_modifier, key);

      // 将非修饰键转化为键码
      key = key[key.length - 1];
      key = key === '*' ? '*' : code(key); // *表示匹配所有快捷键

      // 判断key是否在_handlers中，不在就赋一个空数组
      if (!(key in _handlers)) _handlers[key] = [];

      _handlers[key].push({
        scope: scope,
        mods: mods,
        shortcut: keys[i],
        method: method,
        key: keys[i]
      });
    }
    // 在全局document上设置快捷键
    if (typeof element !== 'undefined' && !isBindElement) {
      isBindElement = true;
      addEvent(element, 'keydown', function (e) {
        dispatch(e);
      });
      addEvent(element, 'keyup', function (e) {
        clearModifier(e);
      });
    }
  }

  var _api = {
    setScope: setScope,
    getScope: getScope,
    deleteScope: deleteScope,
    getPressedKeyCodes: getPressedKeyCodes,
    isPressed: isPressed,
    filter: filter,
    unbind: unbind
  };
  for (var a in _api) {
    if (Object.prototype.hasOwnProperty.call(_api, a)) {
      hotkeys[a] = _api[a];
    }
  }

  if (typeof window !== 'undefined') {
    var _hotkeys = window.hotkeys;
    hotkeys.noConflict = function (deep) {
      if (deep && window.hotkeys === hotkeys) {
        window.hotkeys = _hotkeys;
      }
      return hotkeys;
    };
    window.hotkeys = hotkeys;
  }

  return hotkeys;

})));
;
$(document).keyup(function (e) {
    if (e.keyCode === 27) {
        if ($('#module_navigator').length > 0 && $('#module_navigator').is(':visible')) {
            $('#module_navigator').addClass('hide');
        }
        if($('#shortcut-btn').attr('class') == 'shortcut-btn toggle'){
            $('#shortcut-btn').click();
        }
        if($('#switchBtn').attr('class') == 'switch-btn toggle'){
            $('#switchBtn').click();
        }
    }
});

$(function () {
    var shortcut_keys = [];
    $.each(cus_shortcuts_json, function (key, value) {
        shortcut_keys.push(key);
    });
    hotkeys(shortcut_keys.join(','),
            function (event, handler) {
                event.preventDefault();
                var key = handler.key;
                if (cus_shortcuts_json[key].type == 'url') {
                    window.location.href = admin_url + cus_shortcuts_json[key].value;
                } else if (cus_shortcuts_json[key].type == 'code') {
                    var code = cus_shortcuts_json[key].value;
                    var code_arr = [];
                    code_arr['add_record'] = 'add_list2_top';
//                    code_arr['delete_record'] = 'frmbtn_delete';
                    code_arr['refresh_list'] = 'refresh_list2_top';
                    code_arr['export_list'] = 'export_list2_top';
                    code_arr['advance_search'] = 'search_list2_top';
                    code_arr['qucik_search'] = 'listsearch_list2_top';
                    code_arr['save_search'] = 'savesearch_list2_top';
                    code_arr['search_list'] = 'showsearch_list2_top';
                    code_arr['print_list'] = 'print_list2_top';
                    code_arr['toggle_columns'] = 'columns_list2_top';
                    code_arr['save_record'] = 'frmbtn_update';
                    code_arr['select_all'] = 'cb_list2';
                    code_arr['first_page'] = 'first_pager2';
                    code_arr['last_page'] = 'last_pager2';
                    
                    if (code == 'close_popup') {
                        parent.$.fancybox.close();
                    }
                    if (!isFancyBoxActive()) {
                        if (code == 'spotlight_search') {
                            if ($('#module_navigator').length > 0 && !$('#module_navigator').is(':visible')) {
                                $('#module_navigator').removeClass('hide');
                                $('#navigation_search').val('');
                                $('#navigation_search').focus();
                            }
                        } else if (code == 'sitemap') {
                            loadAdminDashboardPage();
                        } else if (code == 'go_back') {
                            loadLastVisitedURL();
                        } else if (code == 'discard_record') {
                            if ($('#frmbtn_discard').length > 0) {
                                confirmDiscard();
                            };
                        } else if (code in code_arr) {
                            if ($('#' + code_arr[code]).length > 0) {
                                $('#' + code_arr[code]).click();
                            } else if (code == 'save_record') {
                                if ($('#frmbtn_add').length > 0) {
                                    $('#frmbtn_add').click();
                                }
                            }
                        } else if (code == 'delete_record') {
                            if($('#frmbtn_delete').length > 0 && $('.form-delete-rec-cnf').length == 0){
                                $('#frmbtn_delete').click();
                            }
                        } else if (code == 'table_view') {
                            if ($('#listgrid_list2_top').length > 0) {
                                $("a[aria-list-type='list']").click();
                            }
                        } else if (code == 'list_view') {
                            if ($('#listgrid_list2_top').length > 0) {
                                $("a[aria-list-type='view']").click();
                            }
                        } else if (code == 'grid_view') {
                            if ($('#listgrid_list2_top').length > 0) {
                                $("a[aria-list-type='grid']").click();
                            }
                        } else if (code == 'next_record' || code == 'next_page') {
                            if ($('.frm-next-rec').length > 0) {
                                window.location.href = $("a", '.frm-next-rec').attr('href');
                            } else {
                                $('#next_pager2').click();
                            }
                        } else if (code == 'prev_record' || code == 'prev_page') {
                            if ($('.frm-prev-rec').length > 0) {
                                window.location.href = $("a", '.frm-prev-rec').attr('href');
                            } else {
                                $('#prev_pager2').click();
                            }
                        } else if (code == 'shortcuts'){
                            $('#shortcut-btn').click();
                        }
                    } else {
                        if (code in code_arr) {
                            if ($('#' + code_arr[code]).length > 0) {
                                $('#' + code_arr[code]).click();
                            } else if (code == 'save_record') {
                                if ($('#frmbtn_add').length > 0) {
                                    $('#frmbtn_add').click();
                                }
                            }
                        } else if (code == 'delete_record') {
                            if($('#frmbtn_delete').length > 0 && $('.form-delete-rec-cnf').length == 0){
                                $('#frmbtn_delete').click();
                            }
                        } else if (code == 'discard_record') {
                            if ($('#frmbtn_discard').length > 0) {
                                confirmDiscard();
                            }
                        }
                    }
                } else if (cus_shortcuts_json[key].type == 'func') {
                    if (cus_shortcuts_json[key].value != '' && $.isFunction(window[cus_shortcuts_json[key].value])) {
                        window[cus_shortcuts_json[key].value]();
                    }
                }
            });
    // hotkeys start
    hotkeys.filter = function (event) {
        return true;
    }
    //How to add the filter to edit labels. <div contentEditable="true"></div>
    //"contentEditable" Older browsers that do not support drops
    hotkeys.filter = function (event) {
        var tagName = (event.target || event.srcElement).tagName;
        return !(tagName.isContentEditable || tagName == 'INPUT' || tagName == 'SELECT' || tagName == 'TEXTAREA');
    }

    hotkeys.filter = function (event) {
        var tagName = (event.target || event.srcElement).tagName;
        hotkeys.setScope(/^(INPUT|TEXTAREA|SELECT)$/.test(tagName) ? 'input' : 'other');
        return true;
    }

    //spotlight search start 
    $('#navigation_search').on('click', function () {
        if ($('#navigation_search').val() != '') {
            $('.spotlight-search-list').show();
        }
    });
    $.widget("custom.catcomplete", $.ui.autocomplete, {
        _create: function () {
            this._super();
            this.widget().menu("option", "items", "> :not(.ui-autocomplete-category)");
        },
        _renderMenu: function (ul, items) {
            var that = this, currentCategory = "";
            $.each(items, function (index, item) {
                var li;
                if (item.category != currentCategory) {
                    ul.addClass('spotlight-search-list')
                    ul.append("<li class='ui-autocomplete-category shortcut-opt'><span class='down-child icon13 " + item.cat_icon + "'></span>" + item.category + "</li>");
                    currentCategory = item.category;
                }
                li = that._renderItemData(ul, item);
                if (item.category) {
                    li.addClass('shortcut-item');
                    li.attr("aria-label", item.category + " : " + item.label);
                }
            });
        },
        _renderItem: function (ul, item) {
            return $("<li></li>").data("item.autocomplete", item)
                    .append("<a><span class='down-child icon13 " + item.icon + "'></span>" + item.label + "</a>")
                    .appendTo(ul);
        }
    });

    $("#navigation_search").catcomplete({
        minLength: 2,
        source: function (request, response) {
            $('.spotlight-search-loader').removeClass('loader-hide');
            $.ajax({
                url: admin_url + cus_enc_url_json.spotlight_search,
                type: "POST",
                data: {request: request.term},
                success: function (data) {
                    var result = JSON.parse(data);
                    response($.map(result.data, function (item) {
                        return {
                            label: item.label,
                            category: item.type,
                            url: item.url,
                            icon: item.icon,
                            cat_icon: item.cat_icon,
                        }
                    }));
                    $('.spotlight-search-loader').addClass('loader-hide');
                }
            });
        },
        select: function (event, ui) {
            
            if (ui.item.url != 0) {
                if ($('#spotlight-newtab').is(':checked')) {
                    window.open(ui.item.url, '_blank');
                } else {
                    $('#module_navigator').addClass('hide');
                    window.location.href = ui.item.url;
                }
            }
        }
    });
});

function confirmDiscard() {
    if($('#shortcur_discard_popup').length > 0){
        return false;
    }
    var label_elem = '<div id="shortcur_discard_popup" />';
    var label_text = js_lang_label.GENERIC_ARE_YOU_SURE_WANT_TO_DISCARD_THIS;
    var option_params = {
        title: js_lang_label.GENERIC_DISCARD,
        dialogClass: "dialog-confirm-box form-delete-img-cnf",
        buttons: [{
                text: js_lang_label.GENERIC_OK,
                bt_type: 'ok',
                click: function () {
                    if ($('#frmbtn_discard').length > 0) {
                        $('#frmbtn_discard').click();
                    }
                    $(this).remove();
                }
            }, {
                text: js_lang_label.GENERIC_CANCEL,
                bt_type: 'cancel',
                click: function () {
                    $(this).remove();
                }
            }]
    }
    jqueryUIdialogBox(label_elem, label_text, option_params);
};
(function(l){if(!("EventSource"in l)){var m=function(a){function d(a){b._pollTimer=setTimeout(function(){c.call(b)},a)}function c(){try{if(b.readyState!=b.CLOSED){var a=new XMLHttpRequest;a.open("GET",b.URL,!0);a.setRequestHeader("Accept","text/event-stream");a.setRequestHeader("Cache-Control","no-cache");a.setRequestHeader("X-Requested-With","XMLHttpRequest");null!=h&&a.setRequestHeader("Last-Event-ID",h);a.timeout=5E4;a.onreadystatechange=function(){if(3==this.readyState||4==
this.readyState&&200==this.status){b.readyState==b.CONNECTING&&(b.readyState=b.OPEN,b.dispatchEvent("open",{type:"open"}));var a="";try{a=this.responseText||""}catch(c){}var e=$.parseJSON(a),a="message",g,f;e.retry&&(f=e.retry);e.event&&(a=e.event);e.id&&(h=e.id);e.data&&(g=e.data);$.isNumeric(f)&&0<f&&(k=f);g&&(g=new n(JSON.stringify(g),b.url,h),b.dispatchEvent(a,g));4==this.readyState&&$.isNumeric(f)&&0<f&&d(k)}else b.readyState!==b.CLOSED&&(4==this.readyState?(b.readyState=b.CONNECTING,b.dispatchEvent("error",
{type:"error"}),d(k)):0==this.readyState&&d(k))};a.send();setTimeout(function(){a.abort()},a.timeout);b._xhr=a}}catch(c){b.dispatchEvent("error",{type:"error",data:c.message})}}var b=this,k=500,h=null;if(!a||"string"!=typeof a)throw new SyntaxError("Not enough arguments");this.URL=a+"&manual=true";this.readyState=this.CONNECTING;this._xhr=this._pollTimer=null;c()};m.prototype={close:function(){this.readyState=this.CLOSED;clearInterval(this._pollTimer);this._xhr.abort()},CONNECTING:0,OPEN:1,CLOSED:2,
dispatchEvent:function(a,d){var c=this["_"+a+"Handlers"];if(c)for(var b=0;b<c.length;b++)c[b].call(this,d);this["on"+a]&&this["on"+a].call(this,d)},addEventListener:function(a,d){this["_"+a+"Handlers"]||(this["_"+a+"Handlers"]=[]);this["_"+a+"Handlers"].push(d)},removeEventListener:function(a,d){var c=this["_"+a+"Handlers"];if(c)for(var b=c.length-1;0<=b;--b)if(c[b]===d){c.splice(b,1);break}},onerror:null,onmessage:null,onopen:null,readyState:0,URL:""};var n=function(a,d,c){this.data=a;this.origin=
d;this.lastEventId=c||""};n.prototype={data:null,type:"message",lastEventId:"",origin:""};"module"in l&&(module.exports=m);l.EventSource=m}})(this);;
(function(c){function b(a,c){if(!(1<a.originalEvent.touches.length)){a.preventDefault();var b=a.originalEvent.changedTouches[0],d=document.createEvent("MouseEvents");d.initMouseEvent(c,!0,!0,window,1,b.screenX,b.screenY,b.clientX,b.clientY,!1,!1,!1,!1,0,null);a.target.dispatchEvent(d)}}c.support.touch="ontouchend"in document;if(c.support.touch){var d=c.ui.mouse.prototype,f=d._mouseInit,g=d._mouseDestroy,e;d._touchStart=function(a){!e&&this._mouseCapture(a.originalEvent.changedTouches[0])&&(e=!0,this._touchMoved=
!1,b(a,"mouseover"),b(a,"mousemove"),b(a,"mousedown"))};d._touchMove=function(a){e&&(this._touchMoved=!0,b(a,"mousemove"))};d._touchEnd=function(a){e&&(b(a,"mouseup"),b(a,"mouseout"),this._touchMoved||b(a,"click"),e=!1)};d._mouseInit=function(){this.element.bind({touchstart:c.proxy(this,"_touchStart"),touchmove:c.proxy(this,"_touchMove"),touchend:c.proxy(this,"_touchEnd")});f.call(this)};d._mouseDestroy=function(){this.element.unbind({touchstart:c.proxy(this,"_touchStart"),touchmove:c.proxy(this,
"_touchMove"),touchend:c.proxy(this,"_touchEnd")});g.call(this)}}})(jQuery);;
(function ($) {

    var unicode_charAt = function(string, index) {
        var first = string.charCodeAt(index);
        var second;
        if (first >= 0xD800 && first <= 0xDBFF && string.length > index + 1) {
            second = string.charCodeAt(index + 1);
            if (second >= 0xDC00 && second <= 0xDFFF) {
                return string.substring(index, index + 2);
            }
        }
        return string[index];
    };

    var unicode_slice = function(string, start, end) {
        var accumulator = "";
        var character;
        var stringIndex = 0;
        var unicodeIndex = 0;
        var length = string.length;

        while (stringIndex < length) {
            character = unicode_charAt(string, stringIndex);
            if (unicodeIndex >= start && unicodeIndex < end) {
                accumulator += character;
            }
            stringIndex += character.length;
            unicodeIndex += 1;
        }
        return accumulator;
    };

    $.fn.initial = function (options) {

        // Defining Colors
        var colors = ["#1abc9c", "#16a085", "#f1c40f", "#f39c12", "#2ecc71", "#27ae60", "#e67e22", "#d35400", "#3498db", "#2980b9", "#e74c3c", "#c0392b", "#9b59b6", "#8e44ad", "#bdc3c7", "#34495e", "#2c3e50", "#95a5a6", "#7f8c8d", "#ec87bf", "#d870ad", "#f69785", "#9ba37e", "#b49255", "#b49255", "#a94136"];
        var finalColor;

        return this.each(function () {

            var e = $(this);
            var settings = $.extend({
                // Default settings
                name: 'Name',
                color: null,
                seed: 0,
                charCount: 1,
                textColor: '#ffffff',
                height: 100,
                width: 100,
                fontSize: 60,
                fontWeight: 400,
                fontFamily: 'HelveticaNeue-Light,Helvetica Neue Light,Helvetica Neue,Helvetica, Arial,Lucida Grande, sans-serif',
                radius: 0
            }, options);

            // overriding from data attributes
            settings = $.extend(settings, e.data());

            // making the text object
            var c = unicode_slice(settings.name, 0, settings.charCount).toUpperCase();
            var cobj = $('<text text-anchor="middle"></text>').attr({
                'y': '50%',
                'x': '50%',
                'dy' : '0.35em',
                'pointer-events':'auto',
                'fill': settings.textColor,
                'font-family': settings.fontFamily
            }).html(c).css({
                'font-weight': settings.fontWeight,
                'font-size': settings.fontSize+'px',
                'font-family': settings.fontFamily,
            });

            if(settings.color == null){
                if(settings.charCount == 2){
                    //var colorIndex = Math.floor(Math.random() * 26) + 1;
                    //var colorIndex = Math.floor((c.charCodeAt(1) + settings.seed) % colors.length);
                    //finalColor = colors[colorIndex]
                    var colorIndex1 = Math.floor((c.charCodeAt(0) + settings.seed) % colors.length);
                    var colorIndex2 = Math.floor((c.charCodeAt(1) + settings.seed) % colors.length);
                    finalColor = colors[colorIndex1].substr(0,4) + colors[colorIndex2].substr(4,6);
                } else {
                    var colorIndex = Math.floor((c.charCodeAt(0) + settings.seed) % colors.length);
                    finalColor = colors[colorIndex]
                }
            }else{
                finalColor = settings.color
            }

            var svg = $('<svg></svg>').attr({
                'xmlns': 'http://www.w3.org/2000/svg',
                'pointer-events':'none',
                'width': settings.width,
                'height': settings.height
            }).css({
                'background-color': finalColor,
                'width': settings.width+'px',
                'height': settings.height+'px',
                'border-radius': settings.radius+'px',
                '-moz-border-radius': settings.radius+'px'
            });
            
            svg.append(cobj);
           // svg.append(group);
            var svgHtml = window.btoa(unescape(encodeURIComponent($('<div>').append(svg.clone()).html())));

            e.attr("src", 'data:image/svg+xml;base64,' + svgHtml);

        })
    };

}(jQuery));;
!function(e){e(["jquery"],function(e){return function(){function t(e,t,n){return f({type:O.error,iconClass:g().iconClasses.error,message:e,optionsOverride:n,title:t})}function n(t,n){return t||(t=g()),v=e("#"+t.containerId),v.length?v:(n&&(v=c(t)),v)}function i(e,t,n){return f({type:O.info,iconClass:g().iconClasses.info,message:e,optionsOverride:n,title:t})}function o(e){w=e}function s(e,t,n){return f({type:O.success,iconClass:g().iconClasses.success,message:e,optionsOverride:n,title:t})}function a(e,t,n){return f({type:O.warning,iconClass:g().iconClasses.warning,message:e,optionsOverride:n,title:t})}function r(e){var t=g();v||n(t),l(e,t)||u(t)}function d(t){var i=g();return v||n(i),t&&0===e(":focus",t).length?void h(t):void(v.children().length&&v.remove())}function u(t){for(var n=v.children(),i=n.length-1;i>=0;i--)l(e(n[i]),t)}function l(t,n){return t&&0===e(":focus",t).length?(t[n.hideMethod]({duration:n.hideDuration,easing:n.hideEasing,complete:function(){h(t)}}),!0):!1}function c(t){return v=e("<div/>").attr("id",t.containerId).addClass(t.positionClass).attr("aria-live","polite").attr("role","alert"),v.appendTo(e(t.target)),v}function p(){return{tapToDismiss:!0,toastClass:"toast",containerId:"toast-container",debug:!1,showMethod:"fadeIn",showDuration:300,showEasing:"swing",onShown:void 0,hideMethod:"fadeOut",hideDuration:1e3,hideEasing:"swing",onHidden:void 0,extendedTimeOut:1e3,iconClasses:{error:"toast-error",info:"toast-info",success:"toast-success",warning:"toast-warning"},iconClass:"toast-info",positionClass:"toast-top-right",timeOut:5e3,titleClass:"toast-title",messageClass:"toast-message",target:"body",closeHtml:'<button type="button">&times;</button>',newestOnTop:!0,preventDuplicates:!1,progressBar:!1}}function m(e){w&&w(e)}function f(t){function i(t){return!e(":focus",l).length||t?(clearTimeout(O.intervalId),l[r.hideMethod]({duration:r.hideDuration,easing:r.hideEasing,complete:function(){h(l),r.onHidden&&"hidden"!==b.state&&r.onHidden(),b.state="hidden",b.endTime=new Date,m(b)}})):void 0}function o(){(r.timeOut>0||r.extendedTimeOut>0)&&(u=setTimeout(i,r.extendedTimeOut),O.maxHideTime=parseFloat(r.extendedTimeOut),O.hideEta=(new Date).getTime()+O.maxHideTime)}function s(){clearTimeout(u),O.hideEta=0,l.stop(!0,!0)[r.showMethod]({duration:r.showDuration,easing:r.showEasing})}function a(){var e=(O.hideEta-(new Date).getTime())/O.maxHideTime*100;f.width(e+"%")}var r=g(),d=t.iconClass||r.iconClass;if("undefined"!=typeof t.optionsOverride&&(r=e.extend(r,t.optionsOverride),d=t.optionsOverride.iconClass||d),r.preventDuplicates){if(t.message===C)return;C=t.message}T++,v=n(r,!0);var u=null,l=e("<div/>"),c=e("<div/>"),p=e("<div/>"),f=e("<div/>"),w=e(r.closeHtml),O={intervalId:null,hideEta:null,maxHideTime:null},b={toastId:T,state:"visible",startTime:new Date,options:r,map:t};return t.iconClass&&l.addClass(r.toastClass).addClass(d),t.title&&(c.append(t.title).addClass(r.titleClass),l.append(c)),t.message&&(p.append(t.message).addClass(r.messageClass),l.append(p)),r.closeButton&&(w.addClass("toast-close-button").attr("role","button"),l.prepend(w)),r.progressBar&&(f.addClass("toast-progress"),l.prepend(f)),l.hide(),r.newestOnTop?v.prepend(l):v.append(l),l[r.showMethod]({duration:r.showDuration,easing:r.showEasing,complete:r.onShown}),r.timeOut>0&&(u=setTimeout(i,r.timeOut),O.maxHideTime=parseFloat(r.timeOut),O.hideEta=(new Date).getTime()+O.maxHideTime,r.progressBar&&(O.intervalId=setInterval(a,10))),l.hover(s,o),!r.onclick&&r.tapToDismiss&&l.click(i),r.closeButton&&w&&w.click(function(e){e.stopPropagation?e.stopPropagation():void 0!==e.cancelBubble&&e.cancelBubble!==!0&&(e.cancelBubble=!0),i(!0)}),r.onclick&&l.click(function(){r.onclick(),i()}),m(b),r.debug&&console&&console.log(b),l}function g(){return e.extend({},p(),b.options)}function h(e){v||(v=n()),e.is(":visible")||(e.remove(),e=null,0===v.children().length&&(v.remove(),C=void 0))}var v,w,C,T=0,O={error:"error",info:"info",success:"success",warning:"warning"},b={clear:r,remove:d,error:t,getContainer:n,info:i,options:{},subscribe:o,success:s,version:"2.1.0",warning:a};return b}()})}("function"==typeof define&&define.amd?define:function(e,t){"undefined"!=typeof module&&module.exports?module.exports=t(require("jquery")):window.toastr=t(window.jQuery)});;
//window resize events
$(window).resize(function () {
    //get the window size
    var wsize = $(window).width();
    if (wsize > 980) {
        $('.shortcuts.hided').removeClass('hided').attr("style", "");
        $('.sidenav.hided').removeClass('hided').attr("style", "");
    }
});
$(window).load(function () {
    var wheight = $(window).height();
    $('#sidebar.scrolled').css('height', wheight - 63 + 'px');
});
// document ready function
$(document).ready(function () {
    //prevent font flickering in some browsers 
    (function () {
        //if firefox 3.5+, hide content till load (or 3 seconds) to prevent FOUT
        var d = document, e = d.documentElement, s = d.createElement('style');
        if (e.style.MozTransform === '') { // gecko 1.9.1 inference
            s.textContent = 'body{visibility:hidden}';
            //e.firstChild.appendChild(s);
            function f() {
                s.parentNode && s.parentNode.removeChild(s);
            }
            addEventListener('load', f, false);
            setTimeout(f, 3000);
        }
    })();

    //Disable certain links
    $("a[href='#']").click(function (e) {
        e.preventDefault()
    })

    if (!isFancyBoxActive()) {
        $(function () {
            if (el_tpl_settings.is_app_cache_active == "No") {
                navigLeftMenuEvents();
                if (el_tpl_settings.is_admin_theme_create == '1') {
                    createThemeSettings();
                }
                if (el_tpl_settings.is_admin_shortcut_access == 'Y') {
                    createShortcutList();
                }
            }
        });
    }

    //Hide and show sidebar btn
    $(function () {
        //var pages = ['grid.html','charts.html'];
        var pages = [];
        for (var i = 0, j = pages.length; i < j; i++) {
            if (getLocalStore(el_tpl_settings.enc_usr_var + "_mp") == pages[i]) {
                var cBtn = $('#collapse_btn.leftbar');
                cBtn.children('a').attr('title', js_lang_label.GENERIC_SHOW_SIDEBAR);
                cBtn.addClass('shadow hide');
                cBtn.css({
                    'top': '20px',
                    'left': '200px'
                });
                $('#sidebarbg').css('margin-left', '-299' + 'px');
                $('#sidebar').css('margin-left', '-299' + 'px');
                if ($('#content').length) {
                    $('#content').css('margin-left', '0');
                }
                if ($('#content-two').length) {
                    $('#content-two').css('margin-left', '0');
                }
            }
        }
    });

    $(document).on("click", "#collapse_btn", function () {
        var $this = $(this);
        //left sidbar clicked
        if (el_theme_settings.menu_semicollapse || el_general_settings.mobile_platform) {
            semiCollapseLeftMenu($this);
        } else {
            fullCollapseLeftMenu($this);
        }
        adjustLeftMenuScrollBar();
    });

    //------------- widget box magic -------------//
    var widget = $('div.box');
    var widgetOpen = $('div.box').not('div.box.closed');
    var widgetClose = $('div.box.closed');
    //close all widgets with class "closed"
    widgetClose.find('div.content').hide();
    widgetClose.find('.title>.minimize').removeClass('minimize').addClass('maximize');

    widget.find('.title>a').on('click', function (event) {
        event.preventDefault();
        var $this = $(this);
        if ($this.hasClass('minimize')) {
            //minimize content
            $this.removeClass('minimize').addClass('maximize');
            $this.parent('div').addClass('min');
            cont = $this.parent('div').next('div.content')
            cont.slideUp(500, 'easeOutExpo'); //change effect if you want :)

        } else if ($this.hasClass('maximize')) {
            //minimize content
            $this.removeClass('maximize').addClass('minimize');
            $this.parent('div').removeClass('min');
            cont = $this.parent('div').next('div.content');
            cont.slideDown(500, 'easeInExpo'); //change effect if you want :)
        }
    });

    //show minimize and maximize icons
    widget.on('hover', function () {
        $(this).find('.title>a').show(50);
    }, function () {
        $(this).find('.title>a').hide();
    });

    //add shadow if hover box
    widget.on('hover', function () {
        $(this).addClass('hover');
    }, function () {
        $(this).removeClass('hover');
    });

    //------------- placeholder fallback  -------------//
    $('input[placeholder], textarea[placeholder]').placeholder();

    //------------- To top plugin  -------------//
    $().UItoTop({
        //containerID: 'toTop', // fading element id
        //containerHoverID: 'toTopHover', // fading element hover id
        //scrollSpeed: 1200,
        easingType: 'easeOutQuart'
    });

    //------------- Tooltips -------------//

    //top tooltip
    $('.tip').qtip({
        content: false,
        position: {
            my: 'bottom center',
            at: 'top center',
            viewport: $(window)
        },
        style: {
            classes: 'ui-tooltip-tipsy'
        }
    });

    //tooltip in right
    $('.tipR').qtip({
        content: false,
        position: {
            my: 'left center',
            at: 'right center',
            viewport: $(window)
        },
        style: {
            classes: 'ui-tooltip-tipsy'
        }
    });

    //tooltip in bottom
    $('.tipB').qtip({
        content: false,
        position: {
            my: 'top center',
            at: 'bottom center',
            viewport: $(window)
        },
        style: {
            classes: 'ui-tooltip-tipsy'
        }
    });

    //tooltip in left
    $('.tipL').qtip({
        content: false,
        position: {
            my: 'right center',
            at: 'left center',
            viewport: $(window)
        },
        style: {
            classes: 'ui-tooltip-tipsy'
        }
    });

    //remove loadstate class from body and show the page
    setTimeout('$("html").removeClass("loadstate")', 500);

    $(document).on('touchmove', function () {
        if (!$(this).hasClass("hasUl")) {
            hideTouchMoveMenu();
        }
    });
    $(document).on('click', '.semi-left-menu-items .menu-child-anchor', function () {
        if (!$(this).hasClass("hasUl")) {
            $('.semi-item-show').addClass('semi-item-none');
            $('.semi-item-none').removeClass('semi-item-show');
            $('.semi-item-none').removeClass('expand');
        }
    });
    $(document).on('touchend', '.semi-left-menu-items .menu-child-anchor', function () {
        if (!$(this).hasClass("hasUl")) {
            window.location.href = $(this).attr("href");
            hideTouchMoveMenu();
        }
    });
    $("#navTopMenu .parent-menu-li").on('hover', function () {
        var num_levels = $(this).find("ul.sub").length;
        var menu_item_width = num_levels * 179 - num_levels + 1;
        var ele_right_space = $(window).width() - $(this).offset().left;
        if (ele_right_space < menu_item_width) {
            var arr = [], width1, width2, width3, i = 0;
            width1 = $(this).width() - 179;
            width2 = width1 - 176;
            width3 = width2 - 176;
            arr.push(width1);
            arr.push(width2);
            arr.push(width3);
            $(this).find("ul.sub").each(function () {
                $(this).addClass("change-left-width-" + i).css("margin-left", arr[i]);
                i++;
            });
        }
    });
    if($('.left-profile').length)
    {
        $('.left-profile').initial();
    }
    if($('.profile').length)
    {
        $('.profile').initial();
    }
    $('.top-notification-heading-right').click(function() {
        $('.top-notification-heading div').removeClass('selected');
        $('.top-notification-heading-right').addClass('selected');
        $('.top-notification-content').hide();
        $('.top-notification-desktop').show();
    });
    $('.top-notification-heading-left').click(function() {
        $('.top-notification-heading-left').removeClass('selected');
        $('.top-notification-heading-left').addClass('selected');
        $('.top-notification-content').show();
        $('.top-notification-desktop').hide();
    });
});
function hideTouchMoveMenu() {
    if ($('.semi-item-show').length) {
        $('.semi-item-show').addClass('semi-item-none');
        $('.semi-item-none').removeClass('semi-item-show');
        $('.semi-item-none').removeClass('expand');
    }
}
//related to navigation menu
function navigLeftMenuEvents() {
    //------------- Navigation -------------//
    var local_mc = getLocalStore(el_tpl_settings.enc_usr_var + "_mc");
    var href_mc;
    if ($(".top-menu").length) {
        mainNavUl = $(".top-menu ul");
        mainNav = $('.top-menu>ul>li');
        mainNav.find('ul').siblings().addClass('hasUl');
        mainNavLink = mainNav.find('a').not('.sub a');
        mainNavLinkAll = mainNav.find('a');
        mainNavSubLink = mainNav.find('.sub a').not('.sub li .sub a');
        mainNavCurrent = mainNav.find('a.current');
        mainNavActive = mainNav.find('a.active');
        //remove current class if have
        mainNavCurrent.removeClass('current');
        mainNavActive.removeClass('active');
        //set the seleceted menu element
        if (local_mc && local_mc != "javascript://") {
            var fflag = false;
            mainNavLinkAll.each(function (index) {
                if ($(this).attr('href') == document.location.href) {
                    //set new current class
                    $(this).addClass('current');
                    ulElem = $(this).closest('ul');
                    if (ulElem.hasClass('sub')) {
                        //its a part of sub menu need to expand this menu
                        aElem = ulElem.prev('a.hasUl').addClass('active');
                    }
                    //create new cookie
                    setLocalStore(el_tpl_settings.enc_usr_var + "_mp", $(this).attr('href'))
                    fflag = true;
                    return false;
                }
            });
            if (!fflag) {
                mainNavLinkAll.each(function (index) {
                    href_mc = $(this).attr("href");
                    if (isMenuURLMatched(href_mc, local_mc)) {
                        //set new current class
                        $(this).addClass('current');
                        ulElem = $(this).closest('ul');
                        if (ulElem.hasClass('sub')) {
                            //its a part of sub menu need to expand this menu
                            aElem = ulElem.prev('a.hasUl').addClass('active');
                        }
                        //create new cookie
                        setLocalStore(el_tpl_settings.enc_usr_var + "_mp", $(this).attr('href'));
                        fflag = true;
                        return false;
                    }
                });
            }
        } else {
            mainNavUl.find("[rel='home']").parents("ul.sub").show();
        }
        //hover magic add blue color to icons when hover - remove or change the class if not you like.
        //click magic
        mainNavLinkAll.click(function (event) {
            var $this = $(this);
            mainNavUl.find("li a.hasUl").removeClass("active");
            $("#navTopMenu").find(".top .sub li a").removeClass("current");
            if ($this.hasClass('hasUl')) {
                $this.addClass("active");
            } else {
                //has no ul so store a cookie for change class.
                $(this).closest(".parent-menu-li").find("a.hasUl").addClass("active");
                $(this).addClass("current");
            }
            setLocalStore(el_tpl_settings.enc_usr_var + "_mc", $this.attr('href'));
        });

        $('.parent-menu-li .child-menu-li').each(function () {
            if ($(this).find("ul.nes").length) {
                var nes_offset = $(this).closest(".parent-menu-li").offset().left;
                var win_width = $(window).width();
                if (win_width <= nes_offset + 350) {
                    $(this).find("ul.nes").addClass("rtl");
                }
            }
        });
    } else {
        if (el_theme_settings.menu_semicollapse || el_general_settings.mobile_platform) {
            hideLeftPanelSemiMenu();
        }
        mainNavUl = $("#left_mainnav ul");
        mainNav = $('#left_mainnav>ul>li');
        mainNav.find('ul').siblings().addClass('hasUl').append('<span class="hasDrop icon16 icomoon-icon-arrow-right-2"></span>');
        mainNavLink = mainNav.find('a').not('.sub a');
        mainNavLinkAll = mainNav.find('a');
        mainNavSubLink = mainNav.find('.sub a').not('.sub li .sub a');
        mainNavCurrent = mainNav.find('a.current');
        mainNavActive = mainNav.find('a.active');
        //remove current class if have
        mainNavCurrent.removeClass('current');
        mainNavActive.removeClass('active');
        //set the seleceted menu element
        if (local_mc && local_mc != "javascript://") {
            var fflag = false;
            mainNavLinkAll.each(function (index) {
                if ($(this).attr('href') == document.location.href) {
                    //set new current class
                    $(this).addClass('current');
                    $(this).parents('ul.sub').prev('.hasUl').find('span.hasDrop').removeClass('icomoon-icon-arrow-right-2');
                    $(this).parents('ul.sub').prev('.hasUl').find('span.hasDrop').addClass('icomoon-icon-arrow-down-2');
                    ulElem = $(this).closest('ul');
                    if (ulElem.hasClass('sub')) {
                        //its a part of sub menu need to expand this menu
                        aElem = ulElem.prev('a.hasUl').addClass('drop').addClass('active');
                        ulElem.addClass('expand');
                    }
                    //create new cookie
                    setLocalStore(el_tpl_settings.enc_usr_var + "_mp", $(this).attr('href'))
                    fflag = true;
                    return false;
                }
            });
            if (!fflag) {
                mainNavLinkAll.each(function (index) {
                    href_mc = $(this).attr("href");
                    if (isMenuURLMatched(href_mc, local_mc)) {
                        //set new current class
                        $(this).addClass('current');
                        $(this).parents('ul.sub').prev('.hasUl').find('span.hasDrop').removeClass('icomoon-icon-arrow-right-2');
                        $(this).parents('ul.sub').prev('.hasUl').find('span.hasDrop').addClass('icomoon-icon-arrow-down-2');
                        ulElem = $(this).closest('ul');
                        if (ulElem.hasClass('sub')) {
                            //its a part of sub menu need to expand this menu
                            aElem = ulElem.prev('a.hasUl').addClass('drop').addClass('active');
                            ulElem.addClass('expand');
                        }
                        //create new cookie
                        setLocalStore(el_tpl_settings.enc_usr_var + "_mp", $(this).attr('href'))
                        fflag = true;
                        return false;
                    }
                });
            }
        } else {
            mainNavUl.find("[rel='home']").parents("ul.sub").show();
        }
        //hover magic add blue color to icons when hover - remove or change the class if not you like.
        //click magic
        mainNavLink.off('click');
        mainNavLink.click(function (event) {
            var $this = $(this);
            if ($this.hasClass('hasUl')) {
                event.preventDefault();
                if ($this.hasClass('drop')) {
                    $(this).find('span.hasDrop').removeClass('icomoon-icon-arrow-down-2');
                    $(this).find('span.hasDrop').addClass('icomoon-icon-arrow-right-2');
                    $(this).siblings('ul.sub').slideUp(500, 'swing').siblings().removeClass('drop');
                } else {
                    mainNavUl.find('span.hasDrop').removeClass('icomoon-icon-arrow-down-2');
                    mainNavUl.find('span.hasDrop').addClass('icomoon-icon-arrow-right-2');
                    mainNavUl.find('ul.sub').slideUp(500, 'swing').siblings().removeClass('drop');

                    $(this).find('span.hasDrop').removeClass('icomoon-icon-arrow-right-2');
                    $(this).find('span.hasDrop').addClass('icomoon-icon-arrow-down-2');
                    $(this).siblings('ul.sub').slideDown(500, 'swing').siblings().addClass('drop');
                }
                setTimeout(function () {
                    adjustLeftMenuScrollBar();
                }, 501);
            } else {
                //has no ul so store a cookie for change class.
                setLocalStore(el_tpl_settings.enc_usr_var + "_mc", $this.attr('href'));
                hideLeftScrollBar();
            }
        });
        mainNavSubLink.off('click');
        mainNavSubLink.click(function (event) {
            var $this = $(this);
            if ($this.hasClass('hasUl')) {
                event.preventDefault();
                if ($this.hasClass('drop')) {
                    $(this).find('span.hasDrop').removeClass('icomoon-icon-arrow-down-2');
                    $(this).find('span.hasDrop').addClass('icomoon-icon-arrow-right-2');
                    $(this).siblings('ul.sub').slideUp(500, 'swing').siblings().removeClass('drop');
                } else {
                    $(this).closest("ul.sub").find('span.hasDrop').removeClass('icomoon-icon-arrow-down-2');
                    $(this).closest("ul.sub").find('span.hasDrop').addClass('icomoon-icon-arrow-right-2');
                    $(this).closest("ul.sub").find('ul.sub').slideUp(500, 'swing').siblings().removeClass('drop');

                    $(this).find('span.hasDrop').removeClass('icomoon-icon-arrow-right-2');
                    $(this).find('span.hasDrop').addClass('icomoon-icon-arrow-down-2');
                    $(this).siblings('ul.sub').slideDown(500, 'swing').siblings().addClass('drop');
                }
            } else {
                //has no ul so store a cookie for change class.
                mainNavUl.find('ul.sub a').removeClass('current');
                $(this).addClass('current');
                mainNavUl.find("li a.hasUl").removeClass("drop").removeClass("active");
                $(this).closest(".parent-menu-li").find("a.hasUl").addClass("drop").addClass("active");
                setLocalStore(el_tpl_settings.enc_usr_var + "_mc", $this.attr('href'));
            }
        });
    }
    // for site map page 
    $("a.nav-active-link").off('click');
    $(document).on("click", "a.nav-active-link", function (event) {
        var $this = $(this);
        //has no ul so store a cookie for change class.
        var nav_code = $this.attr("aria-nav-code"), navUl, navLi, navPa;
        if ($(".top-menu").length) {
            navUl = $(".top-menu>ul");
            navLi = $(navUl).find("[aria-nav-code='" + nav_code + "']");
            navPa = navLi.closest(".parent-menu-li").find(".hasUl");
            if (!$(navPa).hasClass('active')) {
                $(navPa).trigger("click");
            }
            navUl.find('ul.sub a').removeClass('current');
            navLi.addClass("current");
        } else {
            navUl = $("#left_mainnav>ul");
            navLi = $(navUl).find("[aria-nav-code='" + nav_code + "']");
            navPa = navLi.closest(".parent-menu-li").find(".menu-parent-anchor");
            if (!$(navPa).hasClass('drop')) {
                $(navPa).trigger("click");
            }
            navUl.find('ul.sub a').removeClass('current');
            navLi.addClass("current");
        }
        setLocalStore(el_tpl_settings.enc_usr_var + "_mc", $this.attr('href'));
    });
    $("a.left-menu-hide").off('click');
    $(document).on("click", "a.left-menu-hide", function () {
        var $this = $(this);
        $(this).mouseout();
        //has no ul so store a cookie for change class.
        if ($("#collapse_btn").hasClass("hide")) {
            setLocalStore(el_tpl_settings.enc_usr_var + "_sm", '0');
        } else {
            setLocalStore(el_tpl_settings.enc_usr_var + "_sm", '1');
        }
    });
    if (getLocalStore(el_tpl_settings.enc_usr_var + "_sm") == "1" || el_general_settings.mobile_platform) {
        $("#collapse_btn").click();
    }
    if (!el_tpl_settings.page_animation) {
        $("#content").css({"transition-duration": "0ms", "-webkit-transition-duration": "0ms"});
        $("#content_slide").css({"transition-duration": "0ms", "-webkit-transition-duration": "0ms"});
    }
    adjustLeftMenuScrollBar();
}
function isMenuURLMatched(current, stored) {
    if (current == stored) {
        return true;
    }
    var mc_ssa = [], mc_csa = [], mc_ssp = [], mc_csp = [];
    mc_ssa = current.split("#");
    mc_csa = stored.split("#");
    if (!mc_ssa[1]) {
        return false;
    }
    if (!mc_csa[1]) {
        return false;
    }
    if (mc_csp[2] != "index") {
        return false;
    }
    mc_ssp = mc_ssa[1].split("/");
    mc_csp = mc_csa[1].split("/");
    if (mc_ssa[0] == mc_csa[0] && mc_ssp[0] == mc_csp[0] && mc_ssp[1] == mc_csp[1]) {
        return true
    }
}
function removeThemeSettings() {
    $("#switchBtn").remove();
    $("#switcher").remove();
}
function createShortcutList() {
    var list = '';
    $.each(cus_shortcuts_json, function (key, value) {
        list += '<tr><td class="shortcut-quicklist-td1">' + key + '</td><td class="shortcut-quicklist-td2">' + value.title + '</td></tr>';
    });
    $('body').append('<a href="javascript://" id="shortcut-btn" class="shortcut-btn" title="Shortcuts (ctrl+/)"><span class="icon13 icomoon-icon-rocket"></span></a>');
    $('body').append('\
            <div id="shortcut-quicklist" class="shortcut-quicklist-block">\n\
                <h4 class="shortcut-quicklist-title">Shortcut List</h4>\n\
                <div class="list-position">\n\
                    <table class="shortcut-quicklist-table" cellspacing=0 ><tbody><thead></thead>' + list + '</tbody></table>\n\
                </div>\n\
            </div>\n\
        ');

    $('#shortcut-btn').on('click', function () {
        if ($(this).hasClass('toggle')) {
            //hide switcher
            $(this).removeClass('toggle').css('right', '-1px');
            $('#shortcut-quicklist').css('display', 'none');

        } else {
            //expand switcher
            $(this).animate({
                right: '330'
            }, 200, function () {
                // Animation complete.
                $('#shortcut-quicklist').css('display', 'block');
                $(this).addClass('toggle');
                $('#switchBtn').css('z-index', '7999');
            });
        }
    });
}
//    z-index: 7999;
function createThemeSettings() {
    //------------- Switcher code ( Remove it in production site ) -------------//
    (function () {
        supr_switcher = {
            create: function () {
                removeThemeSettings();
                var theme_arr = el_theme_settings.themes_list;
                var themes_default = el_theme_settings.themes_default;
                var theme_custom = el_theme_settings.themes_custom;
                var js_theme_settings = el_theme_settings.theme_settings;
                var themes_default_arr = {}, theme_drop_str = '', theme_custom_str = '', theme_list_str = '', def_str = '', brk_str = '', bk = 0;
                var js_theme_color = '', js_theme_custom = '', js_theme_pattern_0 = '', js_theme_pattern_1 = '', js_theme_pattern_2 = '';
                if (js_theme_settings.theme) {
                    switch (js_theme_settings.theme) {
                        case 'metronic':
                            js_theme_color = js_theme_settings.color;
                            break;
                        case 'cit':
                            js_theme_color = js_theme_settings.color;
                            break;
                        default:
                            js_theme_pattern_0 = js_theme_settings.pattern_0;
                            js_theme_pattern_1 = js_theme_settings.pattern_1;
                            js_theme_pattern_2 = js_theme_settings.pattern_2;
                            break;
                    }
                    js_theme_custom = js_theme_settings.custom;
                }
                if (themes_default && $.isPlainObject(themes_default)) {
                    for (var i in themes_default) {
                        def_str = '';
                        bk = 1;
                        for (var j in themes_default[i]) {
                            brk_str = '';
                            if (bk % 5 == 0 && themes_default[i].length != bk) {
                                brk_str = '<br/>';
                            }
                            def_str += '<li class="theme-color-li"><a href="javascript://" style="background:' + themes_default[i][j]['color'] + '" aria-color="' + themes_default[i][j]['file'] + '" class="color-default ' + ((js_theme_color == themes_default[i][j]['file']) ? 'active' : '') + '"></a></li>' + brk_str + '\n';
                            bk++;
                        }
                        themes_default_arr[i] = def_str;
                    }
                }
                for (var i in theme_arr) {
                    theme_drop_str += '<option value="' + i + '">' + theme_arr[i] + '</option>';
                }
                if (theme_custom && theme_custom.length) {
                    bk = 1;
                    for (var i in theme_custom) {
                        brk_str = '';
                        if (bk % 5 == 0 && theme_custom.length != bk) {
                            brk_str = '<br/>';
                        }
                        theme_list_str += '<li class="custom-color-li"><a href="javascript://" style="background:' + theme_custom[i]['color'] + '" aria-color="' + theme_custom[i]['file'] + '" class="color-default ' + ((js_theme_custom == theme_custom[i]['file']) ? 'active' : '') + '"></a></li>' + brk_str + '\n';
                        bk++;
                    }
                    theme_custom_str = '<div id="_theme_custom_patterns" class="custom-theme-patterns">\n\
        <h4>Theme Customize<i class="icon minia-icon-close-2" id="_custom_color_remove"></i></h4>\n\
        <div class="custom-theme-colors">\n\
            <ul>\n\
                ' + theme_list_str + '\n\
                <li><button class="btn btn-success btn-switch" id="_custom_color_save" title="Save"><span class="icon16 icomoon-icon-checkmark-2 white"></span></button></li>\n\
            </ul>\n\
        </div>\n\
    </div>';
                }
                //create switcher and inject into html
                $('body').append('<a href="javascript://" id="switchBtn" class="switch-btn" title="Theme"><span class="icon24 icomoon-icon-cogs"></span></a>');
                $('body').append('\
<div id="switcher" class="switcher-block">\n\
    <h4>' + js_lang_label.GENERIC_MENU_POSITION + '</h4>\n\
    <div class="menu-position">\n\
        <ul>\n\
            <li><input type="radio" name="_theme_menu_postion" id="_theme_menu_left" value="Left" class="regular-radio"/><label for="_theme_menu_left">&nbsp;</label><label for="_theme_menu_left">' + js_lang_label.GENERIC_LEFT + ' </label>&nbsp;</li>\n\
            <li><input type="radio" name="_theme_menu_postion" id="_theme_menu_top" value="Top" class="regular-radio"/><label for="_theme_menu_top">&nbsp;</label><label for="_theme_menu_top">' + js_lang_label.GENERIC_TOP + ' </label></li>\n\
            <li><button class="btn btn-success btn-switch" id="_theme_menu_save" title="Save"><span class="icon16 icomoon-icon-checkmark-2 white"></span></button></li>\n\
        </ul>\n\
    </div>\n\
    <h4>' + js_lang_label.GENERIC_CHANGE_THEME + ' </h4>\n\
    <div class="theme-position">\n\
        <ul>\n\
            <li>\n\
                <select name="_theme_change_select" id="_theme_change_select">\n\
                    ' + theme_drop_str + '\n\
                </select>\n\
                &nbsp;\n\
            </li>\n\
            <li><button class="btn btn-success btn-switch" id="_theme_change_save" title="Save"><span class="icon16 icomoon-icon-checkmark-2 white"></span></button></li>\n\
        </ul>\n\
    </div>\n\
    <div id="_theme_supr_patterns" class="supr-theme-patterns">\n\
        <h4>' + js_lang_label.GENERIC_HEADER_PATTERNS + '</h4>\n\
        <div class="header-patterns">\n\
            <ul>\n\
                <li><a href="javascript://" class="hpat0 hpat-default ' + ((js_theme_pattern_0 == '' || js_theme_pattern_0 == 'default') ? 'active' : '') + '"></a></li>\n\
                <li class="hpat_bedge_grunge"><a href="javascript://" class="hpat1 hpat-default ' + ((js_theme_pattern_0 == 'bedge_grunge') ? 'active' : '') + '"></a></li>\n\
                <li class="hpat_grid"><a href="javascript://" class="hpat2 hpat-default ' + ((js_theme_pattern_0 == 'grid') ? 'active' : '') + '"></a></li>\n\
                <li class="hpat_nasty_fabric"><a href="javascript://" class="hpat3 hpat-default ' + ((js_theme_pattern_0 == 'nasty_fabric') ? 'active' : '') + '"></a></li>\n\
                <li class="hpat_natural_paper"><a href="javascript://" class="hpat4 hpat-default ' + ((js_theme_pattern_0 == 'natural_paper') ? 'active' : '') + '"></a></li>\n\
                <li><button class="btn btn-success btn-switch" id="_theme_header_save" title="Save"><span class="icon16 icomoon-icon-checkmark-2 white"></span></button></li>\n\
            </ul>\n\
        </div>\n\
        <h4>' + js_lang_label.GENERIC_SIDEBAR_PATTERNS + '</h4>\n\
        <div class="sidebar-patterns">\n\
            <ul>\n\
                <li><a href="javascript://" class="spat0 spat-default ' + ((js_theme_pattern_1 == '' || js_theme_pattern_1 == 'default') ? 'active' : '') + '"></a></li>\n\
                <li class="hpat_az_subtle"><a href="javascript://" class="spat1 spat-default ' + ((js_theme_pattern_1 == 'az_subtle') ? 'active' : '') + '"></a></li>\n\
                <li class="hpat_billie_holiday"><a href="javascript://" class="spat2 spat-default ' + ((js_theme_pattern_1 == 'billie_holiday') ? 'active' : '') + '"></a></li>\n\
                <li class="hpat_grey"><a href="javascript://" class="spat3 spat-default ' + ((js_theme_pattern_1 == 'grey') ? 'active' : '') + '"></a></li>\n\
                <li class="hpat_noise_lines"><a href="javascript://" class="spat4 spat-default ' + ((js_theme_pattern_1 == 'noise_lines') ? 'active' : '') + '"></a></li>\n\
                <li><button class="btn btn-success btn-switch" id="_theme_sidebar_save" title="Save"><span class="icon16 icomoon-icon-checkmark-2 white"></span></button></li>\n\
            </ul>\n\
        </div>\n\
        <h4>' + js_lang_label.GENERIC_BODY_PATTERNS + '</h4>\n\
        <div class="body-patterns">\n\
            <ul>\n\
                <li><a href="javascript://" class="bpat0 bpat-default ' + ((js_theme_pattern_2 == '' || js_theme_pattern_2 == 'default') ? 'active' : '') + '"></a></li>\n\
                <li class="hpat_cream_dust"><a href="javascript://" class="bpat1 bpat-default ' + ((js_theme_pattern_2 == 'cream_dust') ? 'active' : '') + '"></a></li>\n\
                <li class="hpat_dust"><a href="javascript://" class="bpat2 bpat-default ' + ((js_theme_pattern_2 == 'dust') ? 'active' : '') + '"></a></li>\n\
                <li class="hpat_grey"><a href="javascript://" class="bpat3 bpat-default ' + ((js_theme_pattern_2 == 'grey') ? 'active' : '') + '"></a></li>\n\
                <li class="hpat_subtle_dots"><a href="javascript://" class="bpat4 bpat-default ' + ((js_theme_pattern_2 == 'subtle_dots') ? 'active' : '') + '"></a></li>\n\
                <li><button class="btn btn-success btn-switch" id="_theme_body_save" title="Save"><span class="icon16 icomoon-icon-checkmark-2 white"></span></button></li>\n\
            </ul>\n\
        </div>\n\
    </div>\n\
    <div id="_theme_metronic_patterns" class="metronic-theme-patterns">\n\
        <h4>' + js_lang_label.GENERIC_THEME_COLOR + '</h4>\n\
        <div class="metronic-theme-colors">\n\
            <ul>\n\
                ' + themes_default_arr['metronic'] + '\n\
                <li><button class="btn btn-success btn-switch" id="_metronic_color_save" title="Save"><span class="icon16 icomoon-icon-checkmark-2 white"></span></button></li>\n\
            </ul>\n\
        </div>\n\
    </div>\n\
    <div id="_theme_cit_patterns" class="cit-theme-patterns">\n\
        <h4>Theme Color</h4>\n\
        <div class="cit-theme-colors">\n\
            <ul>\n\
                ' + themes_default_arr['cit'] + '\n\
                <li><button class="btn btn-success btn-switch" id="_cit_color_save" title="Save"><span class="icon16 icomoon-icon-checkmark-2 white"></span></button></li>\n\
            </ul>\n\
        </div>\n\
    </div>\n\
    ' + theme_custom_str + '\n\
</div>');
            },
            toggle: function () {
                if (el_tpl_settings.admin_theme == "metronic") {
                    $("#_theme_supr_patterns").hide();
                    $("#_theme_metronic_patterns").show();
                    $("#_theme_cit_patterns").hide();
                } else if (el_tpl_settings.admin_theme == "cit") {
                    $("#_theme_supr_patterns").hide();
                    $("#_theme_metronic_patterns").hide();
                    $("#_theme_cit_patterns").show();
                } else {
                    $("#_theme_supr_patterns").show();
                    $("#_theme_metronic_patterns").hide();
                    $("#_theme_cit_patterns").hide();
                }
            },
            apply: function (type, value) {
                var change_preferences = admin_url + "" + cus_enc_url_json["general_preferences_change"];
                if (confirm(js_lang_label.GENERIC_ARE_YOU_SURE_WANT_TO_APPLY_THESE_CHANGES)) {
                    $.ajax({
                        url: change_preferences,
                        type: 'POST',
                        data: {
                            'type': type,
                            'value': value
                        },
                        success: function (response) {
                            var res_arr = $.parseJSON(response);
                            var jmgcls = 1;
                            if (res_arr.success == "0") {
                                jmgcls = 0;
                            }
                            Project.setMessage(res_arr.message, jmgcls);
                            if (res_arr.success == '1') {
//                                if (confirm(js_lang_label.GENERIC_ARE_YOU_SURE_WANT_TO_RELOAD)) {
                                    document.location.reload();
//                                }
                            }
                        }
                    });
                }
            },
            init: function () {
                supr_switcher.create();
                if (el_tpl_settings.menu_poistion == "Top") {
                    $("#_theme_menu_top").attr("checked", true);
                } else {
                    $("#_theme_menu_left").attr("checked", true);
                }
                $("#_theme_change_select").val(el_tpl_settings.admin_theme);
                supr_switcher.toggle();

                $("#_theme_change_select").change(function () {
                    if ($(this).val() == el_tpl_settings.admin_theme) {
                        supr_switcher.toggle();
                    } else {
                        $("#_theme_supr_patterns").hide();
                        $("#_theme_metronic_patterns").hide();
                        $("#_theme_cit_patterns").hide();
                    }
                });

                $('#switcher .supr-theme-patterns a').on('click', function () {
                    if ($(this).hasClass('hpat-default')) {
                        $('#switcher .supr-theme-patterns a.hpat-default').removeClass('active');
                        $(this).addClass('active');
                        $('.top-bg').removeClass("bedge_grunge").removeClass("grid").removeClass("nasty_fabric").removeClass("natural_paper");
                        $("#_theme_header_save").attr("aria-pattern", "default");
                        if ($(this).hasClass('hpat1')) {
                            $('.top-bg').addClass("bedge_grunge");
                            $("#_theme_header_save").attr("aria-pattern", "bedge_grunge");
                        } else if ($(this).hasClass('hpat2')) {
                            $('.top-bg').addClass("grid");
                            $("#_theme_header_save").attr("aria-pattern", "grid");
                        } else if ($(this).hasClass('hpat3')) {
                            $('.top-bg').addClass("nasty_fabric");
                            $("#_theme_header_save").attr("aria-pattern", "nasty_fabric");
                        } else if ($(this).hasClass('hpat4')) {
                            $('.top-bg').addClass("natural_paper");
                            $("#_theme_header_save").attr("aria-pattern", "natural_paper");
                        }
                    } else if ($(this).hasClass('spat-default')) {
                        $('#switcher .supr-theme-patterns a.spat-default').removeClass('active');
                        $(this).addClass('active');
                        $('#sidebarbg').removeClass("az_subtle").removeClass("billie_holiday").removeClass("grey").removeClass("noise_lines");
                        $("#_theme_sidebar_save").attr("aria-pattern", "default");
                        if ($(this).hasClass('spat1')) {
                            $('#sidebarbg').addClass("az_subtle");
                            $("#_theme_sidebar_save").attr("aria-pattern", "az_subtle");
                        } else if ($(this).hasClass('spat2')) {
                            $('#sidebarbg').addClass("billie_holiday");
                            $("#_theme_sidebar_save").attr("aria-pattern", "billie_holiday");
                        } else if ($(this).hasClass('spat3')) {
                            $('#sidebarbg').addClass("grey");
                            $("#_theme_sidebar_save").attr("aria-pattern", "grey");
                        } else if ($(this).hasClass('spat4')) {
                            $('#sidebarbg').addClass("noise_lines");
                            $("#_theme_sidebar_save").attr("aria-pattern", "noise_lines");
                        }
                    } else if ($(this).hasClass('bpat-default')) {
                        $('#switcher .supr-theme-patterns a.bpat-default').removeClass('active');
                        $(this).addClass('active');
                        $('#content').removeClass("cream_dust").removeClass("dust").removeClass("grey").removeClass("subtle_dots");
                        $('#content_slide').removeClass("cream_dust").removeClass("dust").removeClass("grey").removeClass("subtle_dots");
                        $("#_theme_body_save").attr("aria-pattern", "default");
                        if ($(this).hasClass('bpat1')) {
                            $('#content').addClass("cream_dust");
                            $('#content_slide').addClass("cream_dust");
                            $("#_theme_body_save").attr("aria-pattern", "cream_dust");
                        } else if ($(this).hasClass('bpat2')) {
                            $('#content').addClass("dust");
                            $('#content_slide').addClass("dust");
                            $("#_theme_body_save").attr("aria-pattern", "dust");
                        } else if ($(this).hasClass('bpat3')) {
                            $('#content').addClass("grey");
                            $('#content_slide').addClass("grey");
                            $("#_theme_body_save").attr("aria-pattern", "grey");
                        } else if ($(this).hasClass('bpat4')) {
                            $('#content').addClass("subtle_dots");
                            $('#content_slide').addClass("subtle_dots");
                            $("#_theme_body_save").attr("aria-pattern", "subtle_dots");
                        }
                    }
                });
                $('#switcher .metronic-theme-patterns a').on('click', function () {
                    $('#switcher .metronic-theme-patterns a').removeClass('active');
                    $(this).addClass('active');
                    $("[aria-theme-style='metronic']").remove();
                    if ($(this).attr('aria-color')) {
                        var cus_clr = $(this).attr('aria-color')
                        var css_link = $("<link rel='stylesheet' aria-theme-style='metronic' type='text/css' href='" + style_url + "theme/metronic/theme_" + cus_clr + ".css'>");
                        $("body").append(css_link);
                        $("#_metronic_color_save").attr("aria-theme-color", cus_clr);
                    }
                });
                $('#switcher .cit-theme-patterns a').on('click', function () {
                    $('#switcher .cit-theme-patterns a').removeClass('active');
                    $(this).addClass('active');
                    $("[aria-theme-style='cit']").remove();
                    if ($(this).attr('aria-color')) {
                        var cus_clr = $(this).attr('aria-color')
                        var css_link = $("<link rel='stylesheet' aria-theme-style='cit' type='text/css' href='" + style_url + "theme/cit/theme_" + cus_clr + ".css'>");
                        $("body").append(css_link);
                        $("#_cit_color_save").attr("aria-theme-color", cus_clr);
                    }
                });
                $('#switcher .custom-theme-patterns a').on('click', function () {
                    $('#switcher .custom-theme-patterns a').removeClass('active');
                    $(this).addClass('active');
                    $("[aria-theme-style='custom']").remove();
                    if ($(this).attr('aria-color')) {
                        var cus_clr = $(this).attr('aria-color')
                        var css_link = $("<link rel='stylesheet' aria-theme-style='custom' type='text/css' href='" + style_url + "theme/" + cus_clr + ".css'>");
                        $("body").append(css_link);
                        $("#_custom_color_save").attr("aria-custom-color", cus_clr);
                    }
                });

                $('#switchBtn').on('click', function () {
                    if ($(this).hasClass('toggle')) {
                        //hide switcher
                        $(this).removeClass('toggle').css('right', '-1px');
                        $('#switcher').css('display', 'none');

                    } else {
                        //expand switcher
                        $(this).animate({
                            right: '210'
                        }, 200, function () {
                            // Animation complete.
                            $('#switcher').css('display', 'block');
                            $(this).addClass('toggle');
                            $('#shortcut-btn').css('z-index', '7999');
                        });
                    }
                });
                $("#_theme_menu_save").on('click', function () {
                    supr_switcher.apply("menu", $("input[type='radio'][name='_theme_menu_postion']:checked").val());
                });
                $("#_theme_change_save").on('click', function () {
                    supr_switcher.apply("theme", $("#_theme_change_select").val());
                });
                $("#_theme_header_save").on('click', function () {
                    supr_switcher.apply("header", $(this).attr("aria-pattern"));
                });
                $("#_theme_sidebar_save").on('click', function () {
                    supr_switcher.apply("sidebar", $(this).attr("aria-pattern"));
                });
                $("#_theme_body_save").on('click', function () {
                    supr_switcher.apply("body", $(this).attr("aria-pattern"));
                });
                $("#_metronic_color_save").on('click', function () {
                    supr_switcher.apply("color", $(this).attr("aria-theme-color"));
                });
                $("#_cit_color_save").on('click', function () {
                    supr_switcher.apply("color", $(this).attr("aria-theme-color"));
                });
                $("#_custom_color_save").on('click', function () {
                    supr_switcher.apply("custom", $(this).attr("aria-custom-color"));
                });
                $("#_custom_color_remove").on('click', function () {
                    supr_switcher.apply("custom", '');
                });
            }
        }
        supr_switcher.init();
    })();
}
function fullCollapseLeftMenu($this) {
    var mjson = animateSidePanel(false);
    if ($this.hasClass('hide')) {
        $this.css("z-index", "1000");
        //show sidebar
        $('#sidebarbg').animate({
            marginLeft: '0px'
        }, 500);
        $('#sidebar').animate({
            left: '0',
            marginLeft: '0px'
        }, 500);
        $('#main_content_div').animate({
            marginLeft: '210px'
        }, 250);
        $('#collapse_btn.leftbar').animate({
            left: mjson.mlef,
            top: mjson.mtop
        }, 500).removeClass('shadow');
        $("#left_mainnav").find(".menu-parent-anchor.active").addClass("drop");
        $this.removeClass('hide');
        $this.children('a').attr('title', js_lang_label.GENERIC_HIDE_SIDEBAR);
        initializeMenuCollpaseEvents();
        setTimeout(function () {
            resizeGridWidth();
            resizeDSGridWidth();
            adjustLeftMenuScrollBar();
            initNiceScrollBar();
        }, 501);
    } else {
        //hide sidebar
        var mjson = animateSidePanel(true);
        $this.css("z-index", "1000");
        $('#sidebarbg').animate({
            marginLeft: '-299px'
        }, 500);
        $('#sidebar').animate({
            marginLeft: '-299px'
        }, 500);
        $('#main_content_div').animate({
            marginLeft: '0px'
        }, 250);
        $('#collapse_btn.leftbar').animate({
            left: mjson.mlef,
            top: mjson.mtop
        }, 500).addClass('shadow');
        $this.addClass('hide');
        $this.children('a').attr('title', js_lang_label.GENERIC_SHOW_SIDEBAR);

        initializeMenuCollpaseEvents();
        hideLeftScrollBar();
        setTimeout(function () {
            resizeGridWidth();
            resizeDSGridWidth();
        }, 501);
    }
}
function semiCollapseLeftMenu($this) {
    if ($this.hasClass('hide')) {
        var mjson = animateSidePanel(false);
        $("#left_mainnav").removeClass('semi-collapse-border');
        $('#left_mainnav ul sub').removeClass('semi-item-show');
        $('#left_mainnav ul li').removeClass('semi-left-menu-items');
        $('#sidebar').removeClass("semi-collapse-menu");
        $("#sidebar_widget").find(".sidebar-navigation").css({'visibility': 'visible'});
        $this.css("z-index", "1000");
        //show sidebar
        $('#sidebar').animate({
            left: '0',
            marginLeft: '0px'
        }, 500);
        $('#sidebarbg').animate({
            marginLeft: '0px'
        }, 500);
        $('#sidebar_widget').animate({
            width: '100%'
        }, 150);
        $("#left_mainnav").animate({
            width: '210px'
        }, 500)
        $('#main_content_div').animate({
            marginLeft: '210px'
        }, 500);
        $('#collapse_btn.leftbar').animate({
            left: mjson.mlef,
            top: mjson.mtop
        }, 500).removeClass('shadow');

        $("#left_mainnav ul a").siblings().removeClass('semi-item-none');
        $('#left_mainnav ul li').removeClass('semi-left-menu-items');
        $("#left_mainnav").find(".menu-parent-anchor.active").addClass("drop");
        $this.removeClass('hide');
        $this.children('a').attr('title', js_lang_label.GENERIC_HIDE_SIDEBAR);
        initializeMenuCollpaseEvents();
        setTimeout(function () {
            resizeGridWidth();
            resizeDSGridWidth();
            adjustLeftMenuScrollBar();
            initNiceScrollBar();
        }, 501);
        $(document).off('mouseover', '.parent-menu-li.semi-left-menu-items');
    } else {
        var mjson = animateSidePanel(true);
        $("#left_mainnav").addClass('semi-collapse-border');
        $('#left_mainnav ul li.parent-menu-li').addClass('semi-left-menu-items');
        $("#left_mainnav ul a.menu-parent-anchor").siblings().addClass('semi-item-none');
        $('#sidebar').addClass("semi-collapse-menu");
        $("#sidebar_widget").find(".sidebar-navigation").css({'visibility': 'hidden'});
        $this.css("z-index", "1000");
        $('#sidebarbg').animate({
            marginLeft: '-299px'
        }, 500);
        $('#sidebar_widget').animate({
            width: '50px'
        }, 500);
        $("#left_mainnav").animate({
            width: '50px'
        }, 500);
        $('#main_content_div').animate({
            marginLeft: '50px'
        }, 500);
        $('#collapse_btn.leftbar').animate({
            left: mjson.mlef,
            top: mjson.mtop
        }, 500).addClass('shadow');
        $this.addClass('hide');
        $this.children('a').attr('title', js_lang_label.GENERIC_SHOW_SIDEBAR);
        initializeMenuCollpaseEvents();
        getLeftPanelSemiMenu();
        setTimeout(function () {
            resizeGridWidth();
            resizeDSGridWidth();
            adjustLeftMenuScrollBar();
        }, 501);
    }

}
function getLeftPanelSemiMenu() {
    if ($("#collapse_btn.leftbar").hasClass('hide')) {
        $(document).off('mouseover', '.parent-menu-li.semi-left-menu-items');
        $(document).on('mouseover', '.parent-menu-li.semi-left-menu-items', function () {
            if ($(this).find('a.menu-parent-anchor').hasClass('hasUl')) {
                var lm_top = $(this).offset().top - $(window).scrollTop();
                $(this).find('a.menu-parent-anchor').siblings().addClass('expand').addClass('semi-item-show').removeClass('semi-item-none');
                var lm_height = $(this).find('a').siblings().outerHeight();
                var lm_tot = lm_top + lm_height + 26, li_top, li_height;

                li_top = lm_top - 60;
                $(this).find('a.menu-parent-anchor').siblings().css({top: li_top + "px"});

                if (lm_tot > $(window).height() && $("#left_mainnav").hasClass("semi-collapse-border")) {
                    li_height = $(window).height() - lm_top - 27;
                    $(this).find('a.menu-parent-anchor').siblings().css({height: li_height + "px"});
                    scrollSubMenuContent();
                    //li_top = lm_top - lm_height - 11;
                } else {
                    $(this).find('a.menu-parent-anchor').siblings().css({height: "auto"});
                    $(".parent-menu-li>.sub").getNiceScroll().remove();
                    //li_top = lm_top - 60;
                }
                $("#left_mainnav").find('a.menu-parent-anchor.hasUl').removeClass("semi-menu-active");
                $(this).find('a.menu-parent-anchor.hasUl').addClass("semi-menu-active");
            }
        })
        hideLeftPanelSemiMenu();
    }
}
function hideLeftPanelSemiMenu() {
    $(document).off('mouseout', '.parent-menu-li.semi-left-menu-items');
    $(document).on('mouseout', '.parent-menu-li.semi-left-menu-items', function () {
        $('.semi-left-menu-items').find('a.menu-parent-anchor').siblings().removeClass('expand').addClass('semi-item-none').removeClass('semi-item-show');
        $('.semi-left-menu-items').find('a.menu-parent-anchor.hasUl').removeClass("semi-menu-active");
    });
}
function animateSidePanel(a) {
    var animate_json = {};
    switch (el_tpl_settings.admin_theme) {
        case "cit":
            if (a == true) {
                animate_json['mtop'] = 68;
                animate_json['mlef'] = 10;
            } else {
                animate_json['mtop'] = 68;
                animate_json['mlef'] = 175;
            }
            break;
        case 'metronic':
        default:
            if (a == true) {
                animate_json['mtop'] = 66;
                animate_json['mlef'] = 10;
            } else {
                animate_json['mtop'] = 66;
                animate_json['mlef'] = 175;
            }
            break;
    }
    return animate_json;
}
function getLocalStore(key, check) {
    if (!localStorage) {
        return '';
    }
    var data;
    if (check == true) {
        data = localStorage.getItem(key);
        try {
            data = checkStorageTimeStamp($.parseJSON(data), key);
        } catch (e) {
            data = data;
        }
    } else {
        data = localStorage.getItem(key);
    }
    return data;
}
function setLocalStore(key, data, check) {
    if (!localStorage) {
        return false;
    }
    var tmp, kmp;
    if (check == true) {
        tmp = localStorage.getItem(key)
        try {
            tmp = $.parseJSON(tmp);
        } catch (e) {
            tmp = tmp;
        }
        try {
            kmp = $.parseJSON(data);
            if (!$.isPlainObject(tmp) || !tmp.__timestamp) {
                data = addStorageTimeStamp($.parseJSON(data));
            } else {
                kmp.__timestamp = tmp.__timestamp;
                data = JSON.stringify(kmp);
            }
        } catch (e) {
            data = kmp;
        }
    }
    localStorage.setItem(key, data);
    return true;
}
function isLocalStorageAllow() {
    if (!el_tpl_settings.grid_search_prefers) {
        return false;
    } else {
        return true;
    }
}
function addStorageTimeStamp(data) {
    if (!$.isPlainObject(data)) {
        return data;
    }
    data.__timestamp = new Date().getTime();
    data = JSON.stringify(data);
    return data;
}
function checkStorageTimeStamp(data, key) {
    if (!$.isPlainObject(data)) {
        return data;
    }
    if (data.__timestamp) {
        var tdiff = moment(new Date().getTime()).diff(data.__timestamp);
        var tmins = moment.duration(tdiff).asMinutes();
        var texp = parseInt(el_tpl_settings.grid_search_expires);
        texp = $.isNumeric(texp) ? texp : 1440;
        if (tmins > texp) {
            data = {};
            localStorage.removeItem(key);
        }
    }
    data = JSON.stringify(data);
    return data;
}
function clearLocalStoreCache() {
    if (!localStorage) {
        return false;
    }
    var rem_arr = ['_sh', '_cw', '_cp', '_cs', '_sv', '_sp', '_sg_cw', '_sg_cp', '_sg_cs', '_ng_cw', '_ng_cp', '_ng_cs'];
    var pic_arr = Object.keys(localStorage);
    for (var i = 0; i < pic_arr.length; i++) {
        var key = pic_arr[i];
        if ($.inArray(key.slice(-3), rem_arr) != -1 || $.inArray(key.slice(-6), rem_arr) != -1) {
            localStorage.removeItem(key);
        }
    }
    return true;
}
function scrollSubMenuContent() {
    $(".parent-menu-li>.sub.semi-item-show").niceScroll({
        cursoropacitymax: 0.7,
        cursorborderradius: 8,
        cursorwidth: "2px",
        cursorcolor: "#636669"
    });
}
function adjustLeftMenuScrollBar() {
    if (!$("#left_mainnav").hasClass("semi-collapse-border")) {
        $(".parent-menu-li>.sub").getNiceScroll().remove();
        $(".parent-menu-li>.sub").css({height: "auto"});
        initLeftScrollBar();
    } else {
        hideLeftScrollBar();
    }
}
function jqueryUIdialogBox(label_elem, label_text, option_params) {
    var basic_params = {
        title: "Alert",
        autoOpen: true,
        bgiframe: true,
        modal: true,
        open: function (button_icons_arr) {
            applyUIButtonCSS();
        }
    }
    var final_params = $.extend({}, basic_params, option_params);
    $(label_elem).html(label_text).dialog(final_params);
}
function applyUIButtonCSS() {
    $('.ui-dialog-buttonset').find(':button').each(function () {
        $(this).addClass('fm-button ui-state-default ui-corner-all ui-dialog-button-hover');
        var bt_type = $(this).attr('bt_type'), icon_class;
        if (bt_type) {
            switch (bt_type) {
                case 'ok':
                case 'apply':
                case 'submit':
                    icon_class = 'ui-icon-check';
                    break;
                case 'cancel':
                    icon_class = 'ui-icon-cancel';
                    break;
                case 'delete':
                    icon_class = 'ui-icon-scissors';
                    break;
                case 'backup':
                    icon_class = 'ui-icon-disk';
                    break;
                case 'download':
                    icon_class = 'ui-icon-arrowthickstop-1-s';
                    break;
                case 'continue':
                    icon_class = 'ui-icon-arrowthickstop-1-e';
                    break;
                default:
                    icon_class = '';
                    break;
            }
            $(this).addClass('fm-button-icon-left');
            $(this).append('<span class="ui-button-icon-primary ui-icon ' + icon_class + '"></span>');
        }
    });
}

function closeWindow() {
    if (isFancyBoxActive()) {
        parent.$.fancybox.close();
    } else {
        window.location.hash = cus_enc_url_json['dashboard_sitemap'];
    }
};
;
/*
Write Global JS here
*/;